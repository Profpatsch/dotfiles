!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	contrib/contrib.hpp	/^        CvMat** A;$/;"	m	class:cv::LevMarqSparse
A	contrib/contrib.hpp	/^        vector<double> A;$/;"	m	class:cv::LogPolar_Adjacent
ABSOLUTE_LOSS	ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon255
ADAPTIVE_THRESH_GAUSSIAN_C	imgproc/imgproc.hpp	/^enum { ADAPTIVE_THRESH_MEAN_C=0, ADAPTIVE_THRESH_GAUSSIAN_C=1 };$/;"	e	enum:cv::__anon275
ADAPTIVE_THRESH_MEAN_C	imgproc/imgproc.hpp	/^enum { ADAPTIVE_THRESH_MEAN_C=0, ADAPTIVE_THRESH_GAUSSIAN_C=1 };$/;"	e	enum:cv::__anon275
ADD_FAILURE	ts/ts_gtest.h	19353;"	d
ADD_FAILURE_AT	ts/ts_gtest.h	19357;"	d
AFFINE	videostab/global_motion.hpp	/^    AFFINE = 3$/;"	e	enum:cv::videostab::MotionModel
ALLOC_PAGE_LOCKED	gpu/gpu.hpp	/^    enum  { ALLOC_PAGE_LOCKED = 1, ALLOC_ZEROCOPY = 2, ALLOC_WRITE_COMBINED = 4 };$/;"	e	enum:cv::gpu::CudaMem::__anon55
ALLOC_WRITE_COMBINED	gpu/gpu.hpp	/^    enum  { ALLOC_PAGE_LOCKED = 1, ALLOC_ZEROCOPY = 2, ALLOC_WRITE_COMBINED = 4 };$/;"	e	enum:cv::gpu::CudaMem::__anon55
ALLOC_ZEROCOPY	gpu/gpu.hpp	/^    enum  { ALLOC_PAGE_LOCKED = 1, ALLOC_ZEROCOPY = 2, ALLOC_WRITE_COMBINED = 4 };$/;"	e	enum:cv::gpu::CudaMem::__anon55
ALPHA_ATOP	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_ATOP_PREMUL	gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon56
ALPHA_IN	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_IN_PREMUL	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_OUT	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_OUT_PREMUL	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_OVER	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_OVER_PREMUL	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_PLUS	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_PLUS_PREMUL	gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon56
ALPHA_PREMUL	gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon56
ALPHA_XOR	gpu/gpu.hpp	/^enum { ALPHA_OVER, ALPHA_IN, ALPHA_OUT, ALPHA_ATOP, ALPHA_XOR, ALPHA_PLUS, ALPHA_OVER_PREMUL, ALPHA_IN_PREMUL, ALPHA_OUT_PREMUL,$/;"	e	enum:cv::gpu::__anon56
ALPHA_XOR_PREMUL	gpu/gpu.hpp	/^       ALPHA_ATOP_PREMUL, ALPHA_XOR_PREMUL, ALPHA_PLUS_PREMUL, ALPHA_PREMUL};$/;"	e	enum:cv::gpu::__anon56
ANGLE_ROW	gpu/gpu.hpp	/^        ANGLE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon73
ANGLE_ROW	gpu/gpu.hpp	/^        ANGLE_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
ANGLE_ROW	ocl/ocl.hpp	/^                ANGLE_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
ANN_MLP_TrainParams	ml/ml.hpp	/^typedef CvANN_MLP_TrainParams ANN_MLP_TrainParams;$/;"	t	namespace:cv
ARRAY_BUFFER	core/opengl_interop.hpp	/^        ARRAY_BUFFER = 0x8892,  \/\/ buffer will use for OpenGL arrays (vertices, colors, normals, etc)$/;"	e	enum:cv::GlBuffer::Usage
ASSERT_ANY_THROW	ts/ts_gtest.h	19398;"	d
ASSERT_DEATH	ts/ts_gtest.h	8515;"	d
ASSERT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8619;"	d
ASSERT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8624;"	d
ASSERT_DEBUG_DEATH	ts/ts_gtest.h	8597;"	d
ASSERT_DEBUG_DEATH	ts/ts_gtest.h	8605;"	d
ASSERT_DOUBLE_EQ	ts/ts_gtest.h	19941;"	d
ASSERT_EQ	ts/ts_gtest.h	19858;"	d
ASSERT_EXIT	ts/ts_gtest.h	8504;"	d
ASSERT_FALSE	ts/ts_gtest.h	19413;"	d
ASSERT_FLOAT_EQ	ts/ts_gtest.h	19937;"	d
ASSERT_GE	ts/ts_gtest.h	19874;"	d
ASSERT_GT	ts/ts_gtest.h	19878;"	d
ASSERT_HRESULT_FAILED	ts/ts_gtest.h	19986;"	d
ASSERT_HRESULT_SUCCEEDED	ts/ts_gtest.h	19980;"	d
ASSERT_LE	ts/ts_gtest.h	19866;"	d
ASSERT_LT	ts/ts_gtest.h	19870;"	d
ASSERT_NE	ts/ts_gtest.h	19862;"	d
ASSERT_NEAR	ts/ts_gtest.h	19949;"	d
ASSERT_NO_FATAL_FAILURE	ts/ts_gtest.h	20001;"	d
ASSERT_NO_THROW	ts/ts_gtest.h	19396;"	d
ASSERT_PRED1	ts/ts_gtest.h	19537;"	d
ASSERT_PRED2	ts/ts_gtest.h	19585;"	d
ASSERT_PRED3	ts/ts_gtest.h	19640;"	d
ASSERT_PRED4	ts/ts_gtest.h	19702;"	d
ASSERT_PRED5	ts/ts_gtest.h	19771;"	d
ASSERT_PRED_FORMAT1	ts/ts_gtest.h	19535;"	d
ASSERT_PRED_FORMAT2	ts/ts_gtest.h	19583;"	d
ASSERT_PRED_FORMAT3	ts/ts_gtest.h	19638;"	d
ASSERT_PRED_FORMAT4	ts/ts_gtest.h	19700;"	d
ASSERT_PRED_FORMAT5	ts/ts_gtest.h	19769;"	d
ASSERT_STRCASEEQ	ts/ts_gtest.h	19910;"	d
ASSERT_STRCASENE	ts/ts_gtest.h	19912;"	d
ASSERT_STREQ	ts/ts_gtest.h	19906;"	d
ASSERT_STRNE	ts/ts_gtest.h	19908;"	d
ASSERT_THROW	ts/ts_gtest.h	19394;"	d
ASSERT_TRUE	ts/ts_gtest.h	19410;"	d
AUTOTUNED	flann/defines.h	/^    AUTOTUNED = 255$/;"	e	enum:cvflann::flann_algorithm_t
Abort	ts/ts_gtest.h	/^inline void Abort() { abort(); }$/;"	f	namespace:std::tr1::posix
AbortReason	ts/ts_gtest.h	/^  enum AbortReason {$/;"	g	class:testing::internal::DeathTest
Accumulator	features2d/features2d.hpp	/^struct CV_EXPORTS Accumulator$/;"	s	namespace:cv
Accumulator	features2d/features2d.hpp	/^template<> struct Accumulator<char>   { typedef float Type; };$/;"	s	namespace:cv
Accumulator	features2d/features2d.hpp	/^template<> struct Accumulator<short>  { typedef float Type; };$/;"	s	namespace:cv
Accumulator	features2d/features2d.hpp	/^template<> struct Accumulator<unsigned char>  { typedef float Type; };$/;"	s	namespace:cv
Accumulator	features2d/features2d.hpp	/^template<> struct Accumulator<unsigned short> { typedef float Type; };$/;"	s	namespace:cv
Accumulator	flann/dist.h	/^struct Accumulator { typedef T Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<char>   { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<int> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<short>  { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<unsigned char>  { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<unsigned int> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	flann/dist.h	/^struct Accumulator<unsigned short> { typedef float Type; };$/;"	s	namespace:cvflann
Accumulator	ocl/ocl.hpp	/^        struct CV_EXPORTS Accumulator$/;"	s	namespace:cv::ocl
Accumulator	ocl/ocl.hpp	/^        template<> struct Accumulator<char>$/;"	s	namespace:cv::ocl
Accumulator	ocl/ocl.hpp	/^        template<> struct Accumulator<short>$/;"	s	namespace:cv::ocl
Accumulator	ocl/ocl.hpp	/^        template<> struct Accumulator<unsigned char>$/;"	s	namespace:cv::ocl
Accumulator	ocl/ocl.hpp	/^        template<> struct Accumulator<unsigned short>$/;"	s	namespace:cv::ocl
AddBlob	legacy/blobtrack.hpp	/^    virtual void AddBlob(CvBlob* pB)$/;"	f	class:CvBlobSeq
AddFormat	legacy/blobtrack.hpp	/^    void AddFormat(const char* str){strcat(m_pElemFormat,str);}$/;"	f	class:CvBlobSeq
AddGlobalTestEnvironment	ts/ts_gtest.h	/^inline Environment* AddGlobalTestEnvironment(Environment* env) {$/;"	f	namespace:testing
AddParameterType	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct AddParameterType<void> { typedef void type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
AddParameterType	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType { typedef const U& type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
AddParameterType	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
AddRef	ts/ts_gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddRef	ts/ts_gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
AddReference	ts/ts_gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddReference	ts/ts_gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
AddTestCaseInstantiation	ts/ts_gtest.h	/^  int AddTestCaseInstantiation(const string& instantiation_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AddTestName	ts/ts_gtest.h	/^  bool AddTestName(const char* file, int line, const char* case_name,$/;"	f	class:testing::internal::TypedTestCasePState
AddTestPattern	ts/ts_gtest.h	/^  void AddTestPattern(const char* test_case_name,$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
AdjusterAdapter	features2d/features2d.hpp	/^class CV_EXPORTS AdjusterAdapter: public FeatureDetector$/;"	c	namespace:cv
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Advance	ts/ts_gtest.h	/^    virtual void Advance() {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
All	legacy/legacy.hpp	/^    int** All;$/;"	m	struct:CvCliqueFinder
Allocate	core/wimage.hpp	/^inline void WImageBuffer<T>::Allocate(int width, int height, int nchannels)$/;"	f	class:cv::WImageBuffer
Allocate	core/wimage.hpp	/^inline void WImageBufferC<T, C>::Allocate(int width, int height)$/;"	f	class:cv::WImageBufferC
Allocator	core/core.hpp	/^    explicit Allocator() {}$/;"	f	class:cv::Allocator
Allocator	core/core.hpp	/^    explicit Allocator(Allocator const&) {}$/;"	f	class:cv::Allocator
Allocator	core/core.hpp	/^    explicit Allocator(Allocator<U> const&) {}$/;"	f	class:cv::Allocator
Allocator	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Allocator$/;"	c	namespace:cv
AlmostEquals	ts/ts_gtest.h	/^  bool AlmostEquals(const FloatingPoint& rhs) const {$/;"	f	class:testing::internal::FloatingPoint
AlwaysFalse	ts/ts_gtest.h	/^inline bool AlwaysFalse() { return !AlwaysTrue(); }$/;"	f	namespace:testing::internal
AppendMessage	ts/ts_gtest.h	/^  void AppendMessage(const Message& a_message) {$/;"	f	class:testing::AssertionResult
AreaFilter	gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ AreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)$/;"	f	struct:cv::gpu::device::AreaFilter
AreaFilter	gpu/device/filters.hpp	/^    template <typename Ptr2D> struct AreaFilter$/;"	s	namespace:cv::gpu::device
ArrayAwareFind	ts/ts_gtest.h	/^Iter ArrayAwareFind(Iter begin, Iter end, const Element& elem) {$/;"	f	namespace:testing::internal
ArrayEq	ts/ts_gtest.h	/^bool ArrayEq(const T* lhs, size_t size, const U* rhs) {$/;"	f	namespace:testing::internal
ArrayEq	ts/ts_gtest.h	/^inline bool ArrayEq(const T& lhs, const U& rhs) { return lhs == rhs; }$/;"	f	namespace:testing::internal
ArrayTest	ts/ts.hpp	/^class CV_EXPORTS ArrayTest : public BaseTest$/;"	c	namespace:cvtest
AssertHeld	ts/ts_gtest.h	/^  void AssertHeld() const {$/;"	f	class:std::tr1::MutexBase
AssertHeld	ts/ts_gtest.h	/^  void AssertHeld() const {}$/;"	f	class:std::tr1::Mutex
AssertHelper	ts/ts_gtest.h	/^class GTEST_API_ AssertHelper {$/;"	c	namespace:testing::internal
AssertHelperData	ts/ts_gtest.h	/^    AssertHelperData(TestPartResult::Type t,$/;"	f	struct:testing::internal::AssertHelper::AssertHelperData
AssertHelperData	ts/ts_gtest.h	/^  struct AssertHelperData {$/;"	s	class:testing::internal::AssertHelper
AssertPred1Helper	ts/ts_gtest.h	/^AssertionResult AssertPred1Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred2Helper	ts/ts_gtest.h	/^AssertionResult AssertPred2Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred3Helper	ts/ts_gtest.h	/^AssertionResult AssertPred3Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred4Helper	ts/ts_gtest.h	/^AssertionResult AssertPred4Helper(const char* pred_text,$/;"	f	namespace:testing
AssertPred5Helper	ts/ts_gtest.h	/^AssertionResult AssertPred5Helper(const char* pred_text,$/;"	f	namespace:testing
AssertTypeEq	ts/ts_gtest.h	/^struct AssertTypeEq<T, T> {$/;"	s	namespace:testing::internal
AssertionResult	ts/ts_gtest.h	/^  explicit AssertionResult(bool success) : success_(success) {}$/;"	f	class:testing::AssertionResult
AssertionResult	ts/ts_gtest.h	/^class GTEST_API_ AssertionResult {$/;"	c	namespace:testing
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
AtEnd	ts/ts_gtest.h	/^    bool AtEnd() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
AutoBuffer	core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::AutoBuffer()$/;"	f	class:cv::AutoBuffer
AutoBuffer	core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::AutoBuffer(size_t _size)$/;"	f	class:cv::AutoBuffer
AutotunedIndex	flann/autotuned_index.h	/^    AutotunedIndex(const Matrix<ElementType>& inputData, const IndexParams& params = AutotunedIndexParams(), Distance d = Distance()) :$/;"	f	class:cvflann::AutotunedIndex
AutotunedIndex	flann/autotuned_index.h	/^class AutotunedIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
AutotunedIndexParams	flann/autotuned_index.h	/^    AutotunedIndexParams(float target_precision = 0.8, float build_weight = 0.01, float memory_weight = 0, float sample_fraction = 0.1)$/;"	f	struct:cvflann::AutotunedIndexParams
AutotunedIndexParams	flann/autotuned_index.h	/^struct AutotunedIndexParams : public IndexParams$/;"	s	namespace:cvflann
AutotunedIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS AutotunedIndexParams : public IndexParams$/;"	s	namespace:cv::flann
AvgBitrate	gpu/gpu.hpp	/^        int       AvgBitrate;      \/\/    NVVE_AVG_BITRATE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
B	contrib/contrib.hpp	/^        CvMat** B;$/;"	m	class:cv::LevMarqSparse
B2Y	gpu/device/detail/color_detail.hpp	/^            B2Y        = 1868,$/;"	e	enum:cv::gpu::device::color_detail::__anon96
BACKPROP	ml/ml.hpp	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon256
BAND	videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon187
BASIC_PRESET	calib3d/calib3d.hpp	/^        BASIC_PRESET=0, FISH_EYE_PRESET=1, NARROW_PRESET=2 };$/;"	e	enum:cv::StereoBM::__anon318
BASIC_PRESET	gpu/gpu.hpp	/^    enum { BASIC_PRESET = 0, PREFILTER_XSOBEL = 1 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon57
BFMatcher	features2d/features2d.hpp	/^class CV_EXPORTS_W BFMatcher : public DescriptorMatcher$/;"	c	namespace:cv
BFRAME	gpu/gpu.hpp	/^            BFRAME = 3$/;"	e	enum:cv::gpu::VideoWriter_GPU::EncoderCallBack::PicType
BLOCKSIZE	flann/allocator.h	/^const  size_t     BLOCKSIZE=8192;$/;"	m	namespace:cvflann
BLOCK_SIZE	gpu/device/detail/color_detail.hpp	/^            BLOCK_SIZE = 256$/;"	e	enum:cv::gpu::device::color_detail::__anon96
BOOST	objdetect/objdetect.hpp	/^    enum { BOOST = 0 };$/;"	e	enum:cv::CascadeClassifier::__anon230
BORDER_CONSTANT	imgproc/imgproc.hpp	/^enum { BORDER_REPLICATE=IPL_BORDER_REPLICATE, BORDER_CONSTANT=IPL_BORDER_CONSTANT,$/;"	e	enum:cv::__anon267
BORDER_DEFAULT	imgproc/imgproc.hpp	/^       BORDER_DEFAULT=BORDER_REFLECT_101, BORDER_ISOLATED=16 };$/;"	e	enum:cv::__anon267
BORDER_ISOLATED	imgproc/imgproc.hpp	/^       BORDER_DEFAULT=BORDER_REFLECT_101, BORDER_ISOLATED=16 };$/;"	e	enum:cv::__anon267
BORDER_REFLECT	imgproc/imgproc.hpp	/^       BORDER_REFLECT=IPL_BORDER_REFLECT, BORDER_WRAP=IPL_BORDER_WRAP,$/;"	e	enum:cv::__anon267
BORDER_REFLECT101	imgproc/imgproc.hpp	/^       BORDER_REFLECT_101=IPL_BORDER_REFLECT_101, BORDER_REFLECT101=BORDER_REFLECT_101,$/;"	e	enum:cv::__anon267
BORDER_REFLECT_101	imgproc/imgproc.hpp	/^       BORDER_REFLECT_101=IPL_BORDER_REFLECT_101, BORDER_REFLECT101=BORDER_REFLECT_101,$/;"	e	enum:cv::__anon267
BORDER_REPLICATE	imgproc/imgproc.hpp	/^enum { BORDER_REPLICATE=IPL_BORDER_REPLICATE, BORDER_CONSTANT=IPL_BORDER_CONSTANT,$/;"	e	enum:cv::__anon267
BORDER_SIZE	legacy/legacy.hpp	/^    static const int BORDER_SIZE = 16;$/;"	m	class:cv::CalonderDescriptorExtractor
BORDER_TRANSPARENT	imgproc/imgproc.hpp	/^       BORDER_TRANSPARENT=IPL_BORDER_TRANSPARENT,$/;"	e	enum:cv::__anon267
BORDER_WRAP	imgproc/imgproc.hpp	/^       BORDER_REFLECT=IPL_BORDER_REFLECT, BORDER_WRAP=IPL_BORDER_WRAP,$/;"	e	enum:cv::__anon267
BOWImgDescriptorExtractor	features2d/features2d.hpp	/^class CV_EXPORTS BOWImgDescriptorExtractor$/;"	c	namespace:cv
BOWKMeansTrainer	features2d/features2d.hpp	/^class CV_EXPORTS BOWKMeansTrainer : public BOWTrainer$/;"	c	namespace:cv
BOWMSCTrainer	contrib/openfabmap.hpp	/^class CV_EXPORTS BOWMSCTrainer: public BOWTrainer {$/;"	c	namespace:cv::of2
BOWTrainer	features2d/features2d.hpp	/^class CV_EXPORTS BOWTrainer$/;"	c	namespace:cv
BRISK	features2d/features2d.hpp	/^class CV_EXPORTS_W BRISK : public Feature2D$/;"	c	namespace:cv
BackgroundSubtractor	video/background_segm.hpp	/^class CV_EXPORTS_W BackgroundSubtractor : public Algorithm$/;"	c	namespace:cv
BackgroundSubtractorGMG	video/background_segm.hpp	/^class CV_EXPORTS BackgroundSubtractorGMG: public cv::BackgroundSubtractor$/;"	c	namespace:cv
BackgroundSubtractorMOG	video/background_segm.hpp	/^class CV_EXPORTS_W BackgroundSubtractorMOG : public BackgroundSubtractor$/;"	c	namespace:cv
BackgroundSubtractorMOG2	video/background_segm.hpp	/^class CV_EXPORTS BackgroundSubtractorMOG2 : public BackgroundSubtractor$/;"	c	namespace:cv
BadArgTest	ts/ts.hpp	/^class CV_EXPORTS BadArgTest : public BaseTest$/;"	c	namespace:cvtest
Ballot	gpu/device/emulation.hpp	/^        static __forceinline__ __device__ int Ballot(int predicate)$/;"	f	struct:cv::gpu::device::Emulation
BaseColumnFilter	imgproc/imgproc.hpp	/^class CV_EXPORTS BaseColumnFilter$/;"	c	namespace:cv
BaseColumnFilter_GPU	gpu/gpu.hpp	/^    BaseColumnFilter_GPU(int ksize_, int anchor_) : ksize(ksize_), anchor(anchor_) {}$/;"	f	class:cv::gpu::BaseColumnFilter_GPU
BaseColumnFilter_GPU	gpu/gpu.hpp	/^class CV_EXPORTS BaseColumnFilter_GPU$/;"	c	namespace:cv::gpu
BaseColumnFilter_GPU	ocl/ocl.hpp	/^            BaseColumnFilter_GPU(int ksize_, int anchor_, int bordertype_) : ksize(ksize_), anchor(anchor_), bordertype(bordertype_) {}$/;"	f	class:cv::ocl::BaseColumnFilter_GPU
BaseColumnFilter_GPU	ocl/ocl.hpp	/^        class CV_EXPORTS BaseColumnFilter_GPU$/;"	c	namespace:cv::ocl
BaseFilter	imgproc/imgproc.hpp	/^class CV_EXPORTS BaseFilter$/;"	c	namespace:cv
BaseFilter_GPU	gpu/gpu.hpp	/^    BaseFilter_GPU(const Size& ksize_, const Point& anchor_) : ksize(ksize_), anchor(anchor_) {}$/;"	f	class:cv::gpu::BaseFilter_GPU
BaseFilter_GPU	gpu/gpu.hpp	/^class CV_EXPORTS BaseFilter_GPU$/;"	c	namespace:cv::gpu
BaseFilter_GPU	ocl/ocl.hpp	/^            BaseFilter_GPU(const Size &ksize_, const Point &anchor_, const int &borderType_)$/;"	f	class:cv::ocl::BaseFilter_GPU
BaseFilter_GPU	ocl/ocl.hpp	/^        class CV_EXPORTS BaseFilter_GPU$/;"	c	namespace:cv::ocl
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<ParamType>* BaseGenerator() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
BaseGenerator	ts/ts_gtest.h	/^    virtual const ParamGeneratorInterface<T>* BaseGenerator() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
BaseKeypoint	legacy/legacy.hpp	/^    BaseKeypoint()$/;"	f	struct:cv::BaseKeypoint
BaseKeypoint	legacy/legacy.hpp	/^    BaseKeypoint(int _x, int _y, IplImage* _image)$/;"	f	struct:cv::BaseKeypoint
BaseKeypoint	legacy/legacy.hpp	/^struct CV_EXPORTS BaseKeypoint$/;"	s	namespace:cv
BaseRowFilter	imgproc/imgproc.hpp	/^class CV_EXPORTS BaseRowFilter$/;"	c	namespace:cv
BaseRowFilter_GPU	gpu/gpu.hpp	/^    BaseRowFilter_GPU(int ksize_, int anchor_) : ksize(ksize_), anchor(anchor_) {}$/;"	f	class:cv::gpu::BaseRowFilter_GPU
BaseRowFilter_GPU	gpu/gpu.hpp	/^class CV_EXPORTS BaseRowFilter_GPU$/;"	c	namespace:cv::gpu
BaseRowFilter_GPU	ocl/ocl.hpp	/^            BaseRowFilter_GPU(int ksize_, int anchor_, int bordertype_) : ksize(ksize_), anchor(anchor_), bordertype(bordertype_) {}$/;"	f	class:cv::ocl::BaseRowFilter_GPU
BaseRowFilter_GPU	ocl/ocl.hpp	/^        class CV_EXPORTS BaseRowFilter_GPU$/;"	c	namespace:cv::ocl
BaseTest	ts/ts.hpp	/^class CV_EXPORTS BaseTest$/;"	c	namespace:cvtest
BaseType	core/wimage.hpp	/^    typedef T BaseType;$/;"	t	class:cv::WImage
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageBuffer
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageBufferC
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageC
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageView
BaseType	core/wimage.hpp	/^    typedef typename WImage<T>::BaseType BaseType;$/;"	t	class:cv::WImageViewC
BasicNarrowIoManip	ts/ts_gtest.h	/^  typedef std::ostream& (*BasicNarrowIoManip)(std::ostream&);$/;"	t	class:testing::Message::std
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* Begin() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::RangeGenerator
Begin	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* Begin() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
BestOf2NearestMatcher	stitching/detail/matchers.hpp	/^class CV_EXPORTS BestOf2NearestMatcher : public FeaturesMatcher$/;"	c	namespace:cv::detail
BiggestInt	ts/ts_gtest.h	/^typedef __int64 BiggestInt;$/;"	t	namespace:std::tr1
BiggestInt	ts/ts_gtest.h	/^typedef long long BiggestInt;  \/\/ NOLINT$/;"	t	namespace:std::tr1
BinOpShift	gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2, size_t dst_elem_size> struct BinOpShift { enum { shift = 1 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
BinOpShift	gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 1> { enum { shift = 4 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
BinOpShift	gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 2> { enum { shift = 2 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<double, double>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<double, float>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<float, double>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <> struct BinOpTraits<float, float>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <typename T1, typename T2> struct BinOpTraits$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<T, T>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<T, double>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<T, float>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<double, T>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinOpTraits	gpu/device/vec_math.hpp	/^        template <typename T> struct BinOpTraits<float, T>$/;"	s	namespace:cv::gpu::device::vec_math_detail
BinaryReadWriteTraits	gpu/device/detail/transform_detail.hpp	/^        template <typename T1, typename T2, typename D, int shift> struct BinaryReadWriteTraits$/;"	s	namespace:cv::gpu::device::transform_detail
Bind	ts/ts_gtest.h	/^  struct Bind {$/;"	s	struct:testing::internal::TemplateSel
Bits	ts/ts_gtest.h	/^  typedef typename TypeWithSize<sizeof(RawType)>::UInt Bits;$/;"	t	class:testing::internal::FloatingPoint
Blender	stitching/detail/blenders.hpp	/^class CV_EXPORTS Blender$/;"	c	namespace:cv::detail
BlockScan	gpu/device/scan.hpp	/^        __device__ __forceinline__ BlockScan() {}$/;"	f	struct:cv::gpu::device::BlockScan
BlockScan	gpu/device/scan.hpp	/^        __device__ __forceinline__ BlockScan(const BlockScan& other) { (void)other; }$/;"	f	struct:cv::gpu::device::BlockScan
BlockScan	gpu/device/scan.hpp	/^    template <ScanKind Kind , typename T, typename Sc, typename F> struct BlockScan$/;"	s	namespace:cv::gpu::device
BlockedRange	core/internal.hpp	/^    typedef tbb::blocked_range<int> BlockedRange;$/;"	t	namespace:cv
BlocksGainCompensator	stitching/detail/exposure_compensate.hpp	/^    BlocksGainCompensator(int bl_width = 32, int bl_height = 32)$/;"	f	class:cv::detail::BlocksGainCompensator
BlocksGainCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS BlocksGainCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
Bool	ts/ts_gtest.h	/^inline internal::ParamGenerator<bool> Bool() {$/;"	f	namespace:testing
Boost	ml/ml.hpp	/^typedef CvBoost Boost;$/;"	t	namespace:cv
BoostParams	ml/ml.hpp	/^typedef CvBoostParams BoostParams;$/;"	t	namespace:cv
BoostTree	ml/ml.hpp	/^typedef CvBoostTree BoostTree;$/;"	t	namespace:cv
BorderConst	core/types_c.h	/^    int  BorderConst[4];    \/* Ditto.                                 *\/$/;"	m	struct:_IplImage
BorderMode	core/types_c.h	/^    int  BorderMode[4];     \/* Ignored by OpenCV.                     *\/$/;"	m	struct:_IplImage
BorderReader	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BorderReader(const Ptr2D& ptr_, const B& b_) : ptr(ptr_), b(b_) {}$/;"	f	struct:cv::gpu::device::BorderReader
BorderReader	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BorderReader(const Ptr2D& src_, const BrdConstant<D>& b) :$/;"	f	struct:cv::gpu::device::BorderReader
BorderReader	gpu/device/border_interpolate.hpp	/^    template <typename Ptr2D, typename B> struct BorderReader$/;"	s	namespace:cv::gpu::device
BorderReader	gpu/device/border_interpolate.hpp	/^    template <typename Ptr2D, typename D> struct BorderReader< Ptr2D, BrdConstant<D> >$/;"	s	namespace:cv::gpu::device
BoundingBox	flann/kdtree_single_index.h	/^    typedef std::vector<Interval> BoundingBox;$/;"	t	class:cvflann::KDTreeSingleIndex
Branch	flann/kdtree_index.h	/^    typedef BranchSt* Branch;$/;"	t	class:cvflann::KDTreeIndex
Branch	flann/kdtree_single_index.h	/^    typedef BranchSt* Branch;$/;"	t	class:cvflann::KDTreeSingleIndex
BranchSt	flann/hierarchical_clustering_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::HierarchicalClusteringIndex
BranchSt	flann/kdtree_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KDTreeIndex
BranchSt	flann/kdtree_single_index.h	/^    typedef BranchStruct<NodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KDTreeSingleIndex
BranchSt	flann/kmeans_index.h	/^    typedef BranchStruct<KMeansNodePtr, DistanceType> BranchSt;$/;"	t	class:cvflann::KMeansIndex
BranchStruct	flann/result_set.h	/^    BranchStruct() {}$/;"	f	struct:cvflann::BranchStruct
BranchStruct	flann/result_set.h	/^    BranchStruct(const T& aNode, DistanceType dist) : node(aNode), mindist(dist) {}$/;"	f	struct:cvflann::BranchStruct
BranchStruct	flann/result_set.h	/^struct BranchStruct$/;"	s	namespace:cvflann
BrdColConstant	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColConstant(int height_, const D& val_ = VecTraits<D>::all(0)) : height(height_), val(val_) {}$/;"	f	struct:cv::gpu::device::BrdColConstant
BrdColConstant	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColConstant$/;"	s	namespace:cv::gpu::device
BrdColReflect	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReflect(int height) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect
BrdColReflect	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReflect(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect
BrdColReflect	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColReflect$/;"	s	namespace:cv::gpu::device
BrdColReflect101	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReflect101(int height) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect101
BrdColReflect101	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReflect101(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReflect101
BrdColReflect101	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColReflect101$/;"	s	namespace:cv::gpu::device
BrdColReplicate	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColReplicate(int height) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReplicate
BrdColReplicate	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColReplicate(int height, U) : last_row(height - 1) {}$/;"	f	struct:cv::gpu::device::BrdColReplicate
BrdColReplicate	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColReplicate$/;"	s	namespace:cv::gpu::device
BrdColWrap	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdColWrap(int height_) : height(height_) {}$/;"	f	struct:cv::gpu::device::BrdColWrap
BrdColWrap	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdColWrap(int height_, U) : height(height_) {}$/;"	f	struct:cv::gpu::device::BrdColWrap
BrdColWrap	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdColWrap$/;"	s	namespace:cv::gpu::device
BrdConstant	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdConstant(int height_, int width_, const D& val_ = VecTraits<D>::all(0)) : height(height_), width(width_), val(val_)$/;"	f	struct:cv::gpu::device::BrdConstant
BrdConstant	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdConstant$/;"	s	namespace:cv::gpu::device
BrdReflect	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReflect(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect
BrdReflect	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReflect(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect
BrdReflect	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdReflect$/;"	s	namespace:cv::gpu::device
BrdReflect101	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReflect101(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect101
BrdReflect101	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReflect101(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReflect101
BrdReflect101	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdReflect101$/;"	s	namespace:cv::gpu::device
BrdReplicate	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdReplicate(int height, int width) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReplicate
BrdReplicate	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdReplicate(int height, int width, U) : last_row(height - 1), last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdReplicate
BrdReplicate	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdReplicate$/;"	s	namespace:cv::gpu::device
BrdRowConstant	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowConstant(int width_, const D& val_ = VecTraits<D>::all(0)) : width(width_), val(val_) {}$/;"	f	struct:cv::gpu::device::BrdRowConstant
BrdRowConstant	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowConstant$/;"	s	namespace:cv::gpu::device
BrdRowReflect	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReflect(int width) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect
BrdRowReflect	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReflect(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect
BrdRowReflect	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowReflect$/;"	s	namespace:cv::gpu::device
BrdRowReflect101	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReflect101(int width) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect101
BrdRowReflect101	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReflect101(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReflect101
BrdRowReflect101	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowReflect101$/;"	s	namespace:cv::gpu::device
BrdRowReplicate	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowReplicate(int width) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReplicate
BrdRowReplicate	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowReplicate(int width, U) : last_col(width - 1) {}$/;"	f	struct:cv::gpu::device::BrdRowReplicate
BrdRowReplicate	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowReplicate$/;"	s	namespace:cv::gpu::device
BrdRowWrap	gpu/device/border_interpolate.hpp	/^        explicit __host__ __device__ __forceinline__ BrdRowWrap(int width_) : width(width_) {}$/;"	f	struct:cv::gpu::device::BrdRowWrap
BrdRowWrap	gpu/device/border_interpolate.hpp	/^        template <typename U> __host__ __device__ __forceinline__ BrdRowWrap(int width_, U) : width(width_) {}$/;"	f	struct:cv::gpu::device::BrdRowWrap
BrdRowWrap	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdRowWrap$/;"	s	namespace:cv::gpu::device
BrdWrap	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdWrap(int height_, int width_) :$/;"	f	struct:cv::gpu::device::BrdWrap
BrdWrap	gpu/device/border_interpolate.hpp	/^        __host__ __device__ __forceinline__ BrdWrap(int height_, int width_, U) :$/;"	f	struct:cv::gpu::device::BrdWrap
BrdWrap	gpu/device/border_interpolate.hpp	/^    template <typename D> struct BrdWrap$/;"	s	namespace:cv::gpu::device
BriefDescriptorExtractor	features2d/features2d.hpp	/^class CV_EXPORTS BriefDescriptorExtractor : public DescriptorExtractor$/;"	c	namespace:cv
BriskLongPair	features2d/features2d.hpp	/^    struct BriskLongPair{$/;"	s	class:cv::BRISK
BriskPatternPoint	features2d/features2d.hpp	/^    struct BriskPatternPoint{$/;"	s	class:cv::BRISK
BriskShortPair	features2d/features2d.hpp	/^    struct BriskShortPair{$/;"	s	class:cv::BRISK
BroxOpticalFlow	gpu/gpu.hpp	/^    BroxOpticalFlow(float alpha_, float gamma_, float scale_factor_, int inner_iterations_, int outer_iterations_, int solver_iterations_) :$/;"	f	class:cv::gpu::BroxOpticalFlow
BroxOpticalFlow	gpu/gpu.hpp	/^class CV_EXPORTS BroxOpticalFlow$/;"	c	namespace:cv::gpu
BruteForceMatcher	legacy/legacy.hpp	/^    BruteForceMatcher( Distance d = Distance() ) : BFMatcher(Distance::normType, false) {(void)d;}$/;"	f	class:cv::BruteForceMatcher
BruteForceMatcher	legacy/legacy.hpp	/^class CV_EXPORTS BruteForceMatcher : public BFMatcher$/;"	c	namespace:cv
BruteForceMatcher_GPU	gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU() : BruteForceMatcher_GPU_base(HammingDist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU() : BruteForceMatcher_GPU_base(L1Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU() : BruteForceMatcher_GPU_base(L2Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU(Hamming \/*d*\/) : BruteForceMatcher_GPU_base(HammingDist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU(L1<T> \/*d*\/) : BruteForceMatcher_GPU_base(L1Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	gpu/gpu.hpp	/^    explicit BruteForceMatcher_GPU(L2<T> \/*d*\/) : BruteForceMatcher_GPU_base(L2Dist) {}$/;"	f	class:cv::gpu::BruteForceMatcher_GPU
BruteForceMatcher_GPU	gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU;$/;"	m	namespace:cv::gpu	typeref:class:cv::gpu::CV_EXPORTS
BruteForceMatcher_GPU	gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU< L1<T> > : public BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_GPU	gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU< L2<T> > : public BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_GPU	gpu/gpu.hpp	/^template <> class CV_EXPORTS BruteForceMatcher_GPU< Hamming > : public BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_GPU_base	gpu/gpu.hpp	/^class CV_EXPORTS BruteForceMatcher_GPU_base$/;"	c	namespace:cv::gpu
BruteForceMatcher_OCL	ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL() : BruteForceMatcher_OCL_base(HammingDist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL() : BruteForceMatcher_OCL_base(L1Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL() : BruteForceMatcher_OCL_base(L2Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL(Hamming \/*d*\/) : BruteForceMatcher_OCL_base(HammingDist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL(L1<T> \/*d*\/) : BruteForceMatcher_OCL_base(L1Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	ocl/ocl.hpp	/^            explicit BruteForceMatcher_OCL(L2<T> \/*d*\/) : BruteForceMatcher_OCL_base(L2Dist) {}$/;"	f	class:cv::ocl::BruteForceMatcher_OCL
BruteForceMatcher_OCL	ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL;$/;"	m	namespace:cv::ocl	typeref:class:cv::ocl::CV_EXPORTS
BruteForceMatcher_OCL	ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL< L1<T> > : public BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
BruteForceMatcher_OCL	ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL< L2<T> > : public BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
BruteForceMatcher_OCL	ocl/ocl.hpp	/^        template <> class CV_EXPORTS BruteForceMatcher_OCL< Hamming > : public BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
BruteForceMatcher_OCL_base	ocl/ocl.hpp	/^        class CV_EXPORTS BruteForceMatcher_OCL_base$/;"	c	namespace:cv::ocl
Bucket	flann/lsh_table.h	/^typedef std::vector<FeatureIndex> Bucket;$/;"	t	namespace:cvflann::lsh
BucketKey	flann/lsh_table.h	/^typedef unsigned int BucketKey;$/;"	t	namespace:cvflann::lsh
BucketsSpace	flann/lsh_table.h	/^    typedef std::unordered_map<BucketKey, Bucket> BucketsSpace;$/;"	t	class:cvflann::lsh::LshTable
BucketsSpeed	flann/lsh_table.h	/^    typedef std::vector<Bucket> BucketsSpeed;$/;"	t	class:cvflann::lsh::LshTable
BundleAdjustCallback	contrib/contrib.hpp	/^    typedef bool (*BundleAdjustCallback)(int iteration, double norm_error, void* user_data);$/;"	t	namespace:cv
BundleAdjusterBase	stitching/detail/motion_estimators.hpp	/^    BundleAdjusterBase(int num_params_per_cam, int num_errs_per_measurement)$/;"	f	class:cv::detail::BundleAdjusterBase
BundleAdjusterBase	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterBase : public Estimator$/;"	c	namespace:cv::detail
BundleAdjusterRay	stitching/detail/motion_estimators.hpp	/^    BundleAdjusterRay() : BundleAdjusterBase(4, 3) {}$/;"	f	class:cv::detail::BundleAdjusterRay
BundleAdjusterRay	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterRay : public BundleAdjusterBase$/;"	c	namespace:cv::detail
BundleAdjusterReproj	stitching/detail/motion_estimators.hpp	/^    BundleAdjusterReproj() : BundleAdjusterBase(7, 2) {}$/;"	f	class:cv::detail::BundleAdjusterReproj
BundleAdjusterReproj	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS BundleAdjusterReproj : public BundleAdjusterBase$/;"	c	namespace:cv::detail
ButtonCallback	highgui/highgui.hpp	/^typedef void (CV_CDECL *ButtonCallback)(int state, void* userdata);$/;"	t	namespace:cv
ByRef	ts/ts_gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
ByRef	ts/ts_gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	s	namespace:std::tr1::gtest_internal
C	ml/ml.hpp	/^    CV_PROP_RW double      C;  \/\/ for CV_SVM_C_SVC, CV_SVM_EPS_SVR and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams
C	ml/ml.hpp	/^    double C[2];  \/\/ C[0] == Cn, C[1] == Cp$/;"	m	class:CvSVMSolver
C	ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon247
CALC_J	calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon311
CALIB_CB_ADAPTIVE_THRESH	calib3d/calib3d.hpp	/^enum { CALIB_CB_ADAPTIVE_THRESH = 1, CALIB_CB_NORMALIZE_IMAGE = 2,$/;"	e	enum:cv::__anon314
CALIB_CB_ASYMMETRIC_GRID	calib3d/calib3d.hpp	/^enum { CALIB_CB_SYMMETRIC_GRID = 1, CALIB_CB_ASYMMETRIC_GRID = 2,$/;"	e	enum:cv::__anon315
CALIB_CB_CLUSTERING	calib3d/calib3d.hpp	/^       CALIB_CB_CLUSTERING = 4 };$/;"	e	enum:cv::__anon315
CALIB_CB_FAST_CHECK	calib3d/calib3d.hpp	/^       CALIB_CB_FILTER_QUADS = 4, CALIB_CB_FAST_CHECK = 8 };$/;"	e	enum:cv::__anon314
CALIB_CB_FILTER_QUADS	calib3d/calib3d.hpp	/^       CALIB_CB_FILTER_QUADS = 4, CALIB_CB_FAST_CHECK = 8 };$/;"	e	enum:cv::__anon314
CALIB_CB_NORMALIZE_IMAGE	calib3d/calib3d.hpp	/^enum { CALIB_CB_ADAPTIVE_THRESH = 1, CALIB_CB_NORMALIZE_IMAGE = 2,$/;"	e	enum:cv::__anon314
CALIB_CB_SYMMETRIC_GRID	calib3d/calib3d.hpp	/^enum { CALIB_CB_SYMMETRIC_GRID = 1, CALIB_CB_ASYMMETRIC_GRID = 2,$/;"	e	enum:cv::__anon315
CALIB_FIX_ASPECT_RATIO	calib3d/calib3d.hpp	/^    CALIB_FIX_ASPECT_RATIO = CV_CALIB_FIX_ASPECT_RATIO,$/;"	e	enum:cv::__anon316
CALIB_FIX_FOCAL_LENGTH	calib3d/calib3d.hpp	/^    CALIB_FIX_FOCAL_LENGTH = CV_CALIB_FIX_FOCAL_LENGTH,$/;"	e	enum:cv::__anon316
CALIB_FIX_INTRINSIC	calib3d/calib3d.hpp	/^    CALIB_FIX_INTRINSIC = CV_CALIB_FIX_INTRINSIC,$/;"	e	enum:cv::__anon316
CALIB_FIX_K1	calib3d/calib3d.hpp	/^    CALIB_FIX_K1 = CV_CALIB_FIX_K1,$/;"	e	enum:cv::__anon316
CALIB_FIX_K2	calib3d/calib3d.hpp	/^    CALIB_FIX_K2 = CV_CALIB_FIX_K2,$/;"	e	enum:cv::__anon316
CALIB_FIX_K3	calib3d/calib3d.hpp	/^    CALIB_FIX_K3 = CV_CALIB_FIX_K3,$/;"	e	enum:cv::__anon316
CALIB_FIX_K4	calib3d/calib3d.hpp	/^    CALIB_FIX_K4 = CV_CALIB_FIX_K4,$/;"	e	enum:cv::__anon316
CALIB_FIX_K5	calib3d/calib3d.hpp	/^    CALIB_FIX_K5 = CV_CALIB_FIX_K5,$/;"	e	enum:cv::__anon316
CALIB_FIX_K6	calib3d/calib3d.hpp	/^    CALIB_FIX_K6 = CV_CALIB_FIX_K6,$/;"	e	enum:cv::__anon316
CALIB_FIX_PRINCIPAL_POINT	calib3d/calib3d.hpp	/^    CALIB_FIX_PRINCIPAL_POINT = CV_CALIB_FIX_PRINCIPAL_POINT,$/;"	e	enum:cv::__anon316
CALIB_RATIONAL_MODEL	calib3d/calib3d.hpp	/^    CALIB_RATIONAL_MODEL = CV_CALIB_RATIONAL_MODEL,$/;"	e	enum:cv::__anon316
CALIB_SAME_FOCAL_LENGTH	calib3d/calib3d.hpp	/^    CALIB_SAME_FOCAL_LENGTH = CV_CALIB_SAME_FOCAL_LENGTH,$/;"	e	enum:cv::__anon316
CALIB_USE_INTRINSIC_GUESS	calib3d/calib3d.hpp	/^    CALIB_USE_INTRINSIC_GUESS = CV_CALIB_USE_INTRINSIC_GUESS,$/;"	e	enum:cv::__anon316
CALIB_ZERO_DISPARITY	calib3d/calib3d.hpp	/^    CALIB_ZERO_DISPARITY = CV_CALIB_ZERO_DISPARITY$/;"	e	enum:cv::__anon316
CALIB_ZERO_TANGENT_DIST	calib3d/calib3d.hpp	/^    CALIB_ZERO_TANGENT_DIST = CV_CALIB_ZERO_TANGENT_DIST,$/;"	e	enum:cv::__anon316
CASCADE_DO_CANNY_PRUNING	objdetect/objdetect.hpp	/^    CASCADE_DO_CANNY_PRUNING=1,$/;"	e	enum:cv::__anon229
CASCADE_DO_ROUGH_SEARCH	objdetect/objdetect.hpp	/^    CASCADE_DO_ROUGH_SEARCH=8$/;"	e	enum:cv::__anon229
CASCADE_FIND_BIGGEST_OBJECT	objdetect/objdetect.hpp	/^    CASCADE_FIND_BIGGEST_OBJECT=4,$/;"	e	enum:cv::__anon229
CASCADE_SCALE_IMAGE	objdetect/objdetect.hpp	/^    CASCADE_SCALE_IMAGE=2,$/;"	e	enum:cv::__anon229
CENTERS_GONZALES	flann/defines.h	/^    CENTERS_GONZALES = 1,$/;"	e	enum:cvflann::flann_centers_init_t
CENTERS_KMEANSPP	flann/defines.h	/^    CENTERS_KMEANSPP = 2$/;"	e	enum:cvflann::flann_centers_init_t
CENTERS_RANDOM	flann/defines.h	/^    CENTERS_RANDOM = 0,$/;"	e	enum:cvflann::flann_centers_init_t
CHAIN_APPROX_NONE	imgproc/imgproc.hpp	/^    CHAIN_APPROX_NONE=CV_CHAIN_APPROX_NONE,$/;"	e	enum:cv::__anon284
CHAIN_APPROX_SIMPLE	imgproc/imgproc.hpp	/^    CHAIN_APPROX_SIMPLE=CV_CHAIN_APPROX_SIMPLE,$/;"	e	enum:cv::__anon284
CHAIN_APPROX_TC89_KCOS	imgproc/imgproc.hpp	/^    CHAIN_APPROX_TC89_KCOS=CV_CHAIN_APPROX_TC89_KCOS$/;"	e	enum:cv::__anon284
CHAIN_APPROX_TC89_L1	imgproc/imgproc.hpp	/^    CHAIN_APPROX_TC89_L1=CV_CHAIN_APPROX_TC89_L1,$/;"	e	enum:cv::__anon284
CHECK_ERR	calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon311
CHECK_ERROR	flann/hdf5.h	73;"	d
CHOW_LIU	contrib/openfabmap.hpp	/^        CHOW_LIU = 8,$/;"	e	enum:cv::of2::FabMap::__anon13
CLIQUE_END	legacy/legacy.hpp	335;"	d
CLIQUE_FOUND	legacy/legacy.hpp	334;"	d
CLIQUE_TIME_OFF	legacy/legacy.hpp	333;"	d
CMP_EQ	core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon204
CMP_GE	core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon204
CMP_GT	core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon204
CMP_LE	core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon204
CMP_LT	core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon204
CMP_NE	core/core.hpp	/^enum { CMP_EQ=0, CMP_GT=1, CMP_GE=2, CMP_LT=3, CMP_LE=4, CMP_NE=5 };$/;"	e	enum:cv::__anon204
COEF	ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon247
COLOR	stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	e	enum:cv::detail::DpSeamFinder::CostFunction
COLORMAP_AUTUMN	contrib/contrib.hpp	/^        COLORMAP_AUTUMN = 0,$/;"	e	enum:cv::__anon27
COLORMAP_BONE	contrib/contrib.hpp	/^        COLORMAP_BONE = 1,$/;"	e	enum:cv::__anon27
COLORMAP_COOL	contrib/contrib.hpp	/^        COLORMAP_COOL = 8,$/;"	e	enum:cv::__anon27
COLORMAP_HOT	contrib/contrib.hpp	/^        COLORMAP_HOT = 11$/;"	e	enum:cv::__anon27
COLORMAP_HSV	contrib/contrib.hpp	/^        COLORMAP_HSV = 9,$/;"	e	enum:cv::__anon27
COLORMAP_JET	contrib/contrib.hpp	/^        COLORMAP_JET = 2,$/;"	e	enum:cv::__anon27
COLORMAP_OCEAN	contrib/contrib.hpp	/^        COLORMAP_OCEAN = 5,$/;"	e	enum:cv::__anon27
COLORMAP_PINK	contrib/contrib.hpp	/^        COLORMAP_PINK = 10,$/;"	e	enum:cv::__anon27
COLORMAP_RAINBOW	contrib/contrib.hpp	/^        COLORMAP_RAINBOW = 4,$/;"	e	enum:cv::__anon27
COLORMAP_SPRING	contrib/contrib.hpp	/^        COLORMAP_SPRING = 7,$/;"	e	enum:cv::__anon27
COLORMAP_SUMMER	contrib/contrib.hpp	/^        COLORMAP_SUMMER = 6,$/;"	e	enum:cv::__anon27
COLORMAP_WINTER	contrib/contrib.hpp	/^        COLORMAP_WINTER = 3,$/;"	e	enum:cv::__anon27
COLOR_BGR2BGR555	imgproc/imgproc.hpp	/^    COLOR_BGR2BGR555  =22,$/;"	e	enum:cv::__anon281
COLOR_BGR2BGR565	imgproc/imgproc.hpp	/^    COLOR_BGR2BGR565  =12,$/;"	e	enum:cv::__anon281
COLOR_BGR2BGRA	imgproc/imgproc.hpp	/^    COLOR_BGR2BGRA    =0,$/;"	e	enum:cv::__anon281
COLOR_BGR2GRAY	imgproc/imgproc.hpp	/^    COLOR_BGR2GRAY    =6,$/;"	e	enum:cv::__anon281
COLOR_BGR2HLS	imgproc/imgproc.hpp	/^    COLOR_BGR2HLS     =52,$/;"	e	enum:cv::__anon281
COLOR_BGR2HLS_FULL	imgproc/imgproc.hpp	/^    COLOR_BGR2HLS_FULL = 68,$/;"	e	enum:cv::__anon281
COLOR_BGR2HSV	imgproc/imgproc.hpp	/^    COLOR_BGR2HSV     =40,$/;"	e	enum:cv::__anon281
COLOR_BGR2HSV_FULL	imgproc/imgproc.hpp	/^    COLOR_BGR2HSV_FULL = 66,$/;"	e	enum:cv::__anon281
COLOR_BGR2Lab	imgproc/imgproc.hpp	/^    COLOR_BGR2Lab     =44,$/;"	e	enum:cv::__anon281
COLOR_BGR2Luv	imgproc/imgproc.hpp	/^    COLOR_BGR2Luv     =50,$/;"	e	enum:cv::__anon281
COLOR_BGR2RGB	imgproc/imgproc.hpp	/^    COLOR_BGR2RGB     =4,$/;"	e	enum:cv::__anon281
COLOR_BGR2RGBA	imgproc/imgproc.hpp	/^    COLOR_BGR2RGBA    =2,$/;"	e	enum:cv::__anon281
COLOR_BGR2XYZ	imgproc/imgproc.hpp	/^    COLOR_BGR2XYZ     =32,$/;"	e	enum:cv::__anon281
COLOR_BGR2YCrCb	imgproc/imgproc.hpp	/^    COLOR_BGR2YCrCb   =36,$/;"	e	enum:cv::__anon281
COLOR_BGR2YUV	imgproc/imgproc.hpp	/^    COLOR_BGR2YUV      = 82,$/;"	e	enum:cv::__anon281
COLOR_BGR5552BGR	imgproc/imgproc.hpp	/^    COLOR_BGR5552BGR  =24,$/;"	e	enum:cv::__anon281
COLOR_BGR5552BGRA	imgproc/imgproc.hpp	/^    COLOR_BGR5552BGRA =28,$/;"	e	enum:cv::__anon281
COLOR_BGR5552GRAY	imgproc/imgproc.hpp	/^    COLOR_BGR5552GRAY =31,$/;"	e	enum:cv::__anon281
COLOR_BGR5552RGB	imgproc/imgproc.hpp	/^    COLOR_BGR5552RGB  =25,$/;"	e	enum:cv::__anon281
COLOR_BGR5552RGBA	imgproc/imgproc.hpp	/^    COLOR_BGR5552RGBA =29,$/;"	e	enum:cv::__anon281
COLOR_BGR5652BGR	imgproc/imgproc.hpp	/^    COLOR_BGR5652BGR  =14,$/;"	e	enum:cv::__anon281
COLOR_BGR5652BGRA	imgproc/imgproc.hpp	/^    COLOR_BGR5652BGRA =18,$/;"	e	enum:cv::__anon281
COLOR_BGR5652GRAY	imgproc/imgproc.hpp	/^    COLOR_BGR5652GRAY =21,$/;"	e	enum:cv::__anon281
COLOR_BGR5652RGB	imgproc/imgproc.hpp	/^    COLOR_BGR5652RGB  =15,$/;"	e	enum:cv::__anon281
COLOR_BGR5652RGBA	imgproc/imgproc.hpp	/^    COLOR_BGR5652RGBA =19,$/;"	e	enum:cv::__anon281
COLOR_BGRA2BGR	imgproc/imgproc.hpp	/^    COLOR_BGRA2BGR    =1,$/;"	e	enum:cv::__anon281
COLOR_BGRA2BGR555	imgproc/imgproc.hpp	/^    COLOR_BGRA2BGR555 =26,$/;"	e	enum:cv::__anon281
COLOR_BGRA2BGR565	imgproc/imgproc.hpp	/^    COLOR_BGRA2BGR565 =16,$/;"	e	enum:cv::__anon281
COLOR_BGRA2GRAY	imgproc/imgproc.hpp	/^    COLOR_BGRA2GRAY   =10,$/;"	e	enum:cv::__anon281
COLOR_BGRA2RGB	imgproc/imgproc.hpp	/^    COLOR_BGRA2RGB    =COLOR_RGBA2BGR,$/;"	e	enum:cv::__anon281
COLOR_BGRA2RGBA	imgproc/imgproc.hpp	/^    COLOR_BGRA2RGBA   =5,$/;"	e	enum:cv::__anon281
COLOR_BayerBG2BGR	imgproc/imgproc.hpp	/^    COLOR_BayerBG2BGR =46,$/;"	e	enum:cv::__anon281
COLOR_BayerBG2BGR_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerBG2BGR_VNG =62,$/;"	e	enum:cv::__anon281
COLOR_BayerBG2GRAY	imgproc/imgproc.hpp	/^    COLOR_BayerBG2GRAY = 86,$/;"	e	enum:cv::__anon281
COLOR_BayerBG2RGB	imgproc/imgproc.hpp	/^    COLOR_BayerBG2RGB =COLOR_BayerRG2BGR,$/;"	e	enum:cv::__anon281
COLOR_BayerBG2RGB_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerBG2RGB_VNG =COLOR_BayerRG2BGR_VNG,$/;"	e	enum:cv::__anon281
COLOR_BayerGB2BGR	imgproc/imgproc.hpp	/^    COLOR_BayerGB2BGR =47,$/;"	e	enum:cv::__anon281
COLOR_BayerGB2BGR_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerGB2BGR_VNG =63,$/;"	e	enum:cv::__anon281
COLOR_BayerGB2GRAY	imgproc/imgproc.hpp	/^    COLOR_BayerGB2GRAY = 87,$/;"	e	enum:cv::__anon281
COLOR_BayerGB2RGB	imgproc/imgproc.hpp	/^    COLOR_BayerGB2RGB =COLOR_BayerGR2BGR,$/;"	e	enum:cv::__anon281
COLOR_BayerGB2RGB_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerGB2RGB_VNG =COLOR_BayerGR2BGR_VNG,$/;"	e	enum:cv::__anon281
COLOR_BayerGR2BGR	imgproc/imgproc.hpp	/^    COLOR_BayerGR2BGR =49,$/;"	e	enum:cv::__anon281
COLOR_BayerGR2BGR_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerGR2BGR_VNG =65,$/;"	e	enum:cv::__anon281
COLOR_BayerGR2GRAY	imgproc/imgproc.hpp	/^    COLOR_BayerGR2GRAY = 89,$/;"	e	enum:cv::__anon281
COLOR_BayerGR2RGB	imgproc/imgproc.hpp	/^    COLOR_BayerGR2RGB =COLOR_BayerGB2BGR,$/;"	e	enum:cv::__anon281
COLOR_BayerGR2RGB_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerGR2RGB_VNG =COLOR_BayerGB2BGR_VNG,$/;"	e	enum:cv::__anon281
COLOR_BayerRG2BGR	imgproc/imgproc.hpp	/^    COLOR_BayerRG2BGR =48,$/;"	e	enum:cv::__anon281
COLOR_BayerRG2BGR_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerRG2BGR_VNG =64,$/;"	e	enum:cv::__anon281
COLOR_BayerRG2GRAY	imgproc/imgproc.hpp	/^    COLOR_BayerRG2GRAY = 88,$/;"	e	enum:cv::__anon281
COLOR_BayerRG2RGB	imgproc/imgproc.hpp	/^    COLOR_BayerRG2RGB =COLOR_BayerBG2BGR,$/;"	e	enum:cv::__anon281
COLOR_BayerRG2RGB_VNG	imgproc/imgproc.hpp	/^    COLOR_BayerRG2RGB_VNG =COLOR_BayerBG2BGR_VNG,$/;"	e	enum:cv::__anon281
COLOR_COLORCVT_MAX	imgproc/imgproc.hpp	/^    COLOR_COLORCVT_MAX  = 127$/;"	e	enum:cv::__anon281
COLOR_GRAD	stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	e	enum:cv::detail::DpSeamFinder::CostFunction
COLOR_GRAY2BGR	imgproc/imgproc.hpp	/^    COLOR_GRAY2BGR    =8,$/;"	e	enum:cv::__anon281
COLOR_GRAY2BGR555	imgproc/imgproc.hpp	/^    COLOR_GRAY2BGR555 =30,$/;"	e	enum:cv::__anon281
COLOR_GRAY2BGR565	imgproc/imgproc.hpp	/^    COLOR_GRAY2BGR565 =20,$/;"	e	enum:cv::__anon281
COLOR_GRAY2BGRA	imgproc/imgproc.hpp	/^    COLOR_GRAY2BGRA   =9,$/;"	e	enum:cv::__anon281
COLOR_GRAY2RGB	imgproc/imgproc.hpp	/^    COLOR_GRAY2RGB    =COLOR_GRAY2BGR,$/;"	e	enum:cv::__anon281
COLOR_GRAY2RGBA	imgproc/imgproc.hpp	/^    COLOR_GRAY2RGBA   =COLOR_GRAY2BGRA,$/;"	e	enum:cv::__anon281
COLOR_HLS2BGR	imgproc/imgproc.hpp	/^    COLOR_HLS2BGR     =60,$/;"	e	enum:cv::__anon281
COLOR_HLS2BGR_FULL	imgproc/imgproc.hpp	/^    COLOR_HLS2BGR_FULL = 72,$/;"	e	enum:cv::__anon281
COLOR_HLS2RGB	imgproc/imgproc.hpp	/^    COLOR_HLS2RGB     =61,$/;"	e	enum:cv::__anon281
COLOR_HLS2RGB_FULL	imgproc/imgproc.hpp	/^    COLOR_HLS2RGB_FULL = 73,$/;"	e	enum:cv::__anon281
COLOR_HSV2BGR	imgproc/imgproc.hpp	/^    COLOR_HSV2BGR     =54,$/;"	e	enum:cv::__anon281
COLOR_HSV2BGR_FULL	imgproc/imgproc.hpp	/^    COLOR_HSV2BGR_FULL = 70,$/;"	e	enum:cv::__anon281
COLOR_HSV2RGB	imgproc/imgproc.hpp	/^    COLOR_HSV2RGB     =55,$/;"	e	enum:cv::__anon281
COLOR_HSV2RGB_FULL	imgproc/imgproc.hpp	/^    COLOR_HSV2RGB_FULL = 71,$/;"	e	enum:cv::__anon281
COLOR_LBGR2Lab	imgproc/imgproc.hpp	/^    COLOR_LBGR2Lab     = 74,$/;"	e	enum:cv::__anon281
COLOR_LBGR2Luv	imgproc/imgproc.hpp	/^    COLOR_LBGR2Luv     = 76,$/;"	e	enum:cv::__anon281
COLOR_LRGB2Lab	imgproc/imgproc.hpp	/^    COLOR_LRGB2Lab     = 75,$/;"	e	enum:cv::__anon281
COLOR_LRGB2Luv	imgproc/imgproc.hpp	/^    COLOR_LRGB2Luv     = 77,$/;"	e	enum:cv::__anon281
COLOR_Lab2BGR	imgproc/imgproc.hpp	/^    COLOR_Lab2BGR     =56,$/;"	e	enum:cv::__anon281
COLOR_Lab2LBGR	imgproc/imgproc.hpp	/^    COLOR_Lab2LBGR     = 78,$/;"	e	enum:cv::__anon281
COLOR_Lab2LRGB	imgproc/imgproc.hpp	/^    COLOR_Lab2LRGB     = 79,$/;"	e	enum:cv::__anon281
COLOR_Lab2RGB	imgproc/imgproc.hpp	/^    COLOR_Lab2RGB     =57,$/;"	e	enum:cv::__anon281
COLOR_Luv2BGR	imgproc/imgproc.hpp	/^    COLOR_Luv2BGR     =58,$/;"	e	enum:cv::__anon281
COLOR_Luv2LBGR	imgproc/imgproc.hpp	/^    COLOR_Luv2LBGR     = 80,$/;"	e	enum:cv::__anon281
COLOR_Luv2LRGB	imgproc/imgproc.hpp	/^    COLOR_Luv2LRGB     = 81,$/;"	e	enum:cv::__anon281
COLOR_Luv2RGB	imgproc/imgproc.hpp	/^    COLOR_Luv2RGB     =59,$/;"	e	enum:cv::__anon281
COLOR_RGB2BGR	imgproc/imgproc.hpp	/^    COLOR_RGB2BGR     =COLOR_BGR2RGB,$/;"	e	enum:cv::__anon281
COLOR_RGB2BGR555	imgproc/imgproc.hpp	/^    COLOR_RGB2BGR555  =23,$/;"	e	enum:cv::__anon281
COLOR_RGB2BGR565	imgproc/imgproc.hpp	/^    COLOR_RGB2BGR565  =13,$/;"	e	enum:cv::__anon281
COLOR_RGB2BGRA	imgproc/imgproc.hpp	/^    COLOR_RGB2BGRA    =COLOR_BGR2RGBA,$/;"	e	enum:cv::__anon281
COLOR_RGB2GRAY	imgproc/imgproc.hpp	/^    COLOR_RGB2GRAY    =7,$/;"	e	enum:cv::__anon281
COLOR_RGB2HLS	imgproc/imgproc.hpp	/^    COLOR_RGB2HLS     =53,$/;"	e	enum:cv::__anon281
COLOR_RGB2HLS_FULL	imgproc/imgproc.hpp	/^    COLOR_RGB2HLS_FULL = 69,$/;"	e	enum:cv::__anon281
COLOR_RGB2HSV	imgproc/imgproc.hpp	/^    COLOR_RGB2HSV     =41,$/;"	e	enum:cv::__anon281
COLOR_RGB2HSV_FULL	imgproc/imgproc.hpp	/^    COLOR_RGB2HSV_FULL = 67,$/;"	e	enum:cv::__anon281
COLOR_RGB2Lab	imgproc/imgproc.hpp	/^    COLOR_RGB2Lab     =45,$/;"	e	enum:cv::__anon281
COLOR_RGB2Luv	imgproc/imgproc.hpp	/^    COLOR_RGB2Luv     =51,$/;"	e	enum:cv::__anon281
COLOR_RGB2RGBA	imgproc/imgproc.hpp	/^    COLOR_RGB2RGBA    =COLOR_BGR2BGRA,$/;"	e	enum:cv::__anon281
COLOR_RGB2XYZ	imgproc/imgproc.hpp	/^    COLOR_RGB2XYZ     =33,$/;"	e	enum:cv::__anon281
COLOR_RGB2YCrCb	imgproc/imgproc.hpp	/^    COLOR_RGB2YCrCb   =37,$/;"	e	enum:cv::__anon281
COLOR_RGB2YUV	imgproc/imgproc.hpp	/^    COLOR_RGB2YUV      = 83,$/;"	e	enum:cv::__anon281
COLOR_RGBA2BGR	imgproc/imgproc.hpp	/^    COLOR_RGBA2BGR    =3,$/;"	e	enum:cv::__anon281
COLOR_RGBA2BGR555	imgproc/imgproc.hpp	/^    COLOR_RGBA2BGR555 =27,$/;"	e	enum:cv::__anon281
COLOR_RGBA2BGR565	imgproc/imgproc.hpp	/^    COLOR_RGBA2BGR565 =17,$/;"	e	enum:cv::__anon281
COLOR_RGBA2BGRA	imgproc/imgproc.hpp	/^    COLOR_RGBA2BGRA   =COLOR_BGRA2RGBA,$/;"	e	enum:cv::__anon281
COLOR_RGBA2GRAY	imgproc/imgproc.hpp	/^    COLOR_RGBA2GRAY   =11,$/;"	e	enum:cv::__anon281
COLOR_RGBA2RGB	imgproc/imgproc.hpp	/^    COLOR_RGBA2RGB    =COLOR_BGRA2BGR,$/;"	e	enum:cv::__anon281
COLOR_RGBA2mRGBA	imgproc/imgproc.hpp	/^    COLOR_RGBA2mRGBA = 125,$/;"	e	enum:cv::__anon281
COLOR_XYZ2BGR	imgproc/imgproc.hpp	/^    COLOR_XYZ2BGR     =34,$/;"	e	enum:cv::__anon281
COLOR_XYZ2RGB	imgproc/imgproc.hpp	/^    COLOR_XYZ2RGB     =35,$/;"	e	enum:cv::__anon281
COLOR_YCrCb2BGR	imgproc/imgproc.hpp	/^    COLOR_YCrCb2BGR   =38,$/;"	e	enum:cv::__anon281
COLOR_YCrCb2RGB	imgproc/imgproc.hpp	/^    COLOR_YCrCb2RGB   =39,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR      = 84,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_I420	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_I420 = COLOR_YUV2BGRA_IYUV,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_IYUV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_IYUV = 105,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_NV12	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_NV12 = 95,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_NV21	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_NV21 = 97,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_UYNV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_UYNV = COLOR_YUV2BGRA_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_UYVY	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_UYVY = 112,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_Y422	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_Y422 = COLOR_YUV2BGRA_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_YUNV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YUNV = COLOR_YUV2BGRA_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_YUY2	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YUY2 = 120,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_YUYV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YUYV = COLOR_YUV2BGRA_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_YV12	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YV12 = 103,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGRA_YVYU	imgproc/imgproc.hpp	/^    COLOR_YUV2BGRA_YVYU = 122,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_I420	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_I420 = COLOR_YUV2BGR_IYUV,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_IYUV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_IYUV = 101,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_NV12	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_NV12 = 91,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_NV21	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_NV21 = 93,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_UYNV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_UYNV = COLOR_YUV2BGR_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_UYVY	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_UYVY = 108,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_Y422	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_Y422 = COLOR_YUV2BGR_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_YUNV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YUNV = COLOR_YUV2BGR_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_YUY2	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YUY2 = 116,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_YUYV	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YUYV = COLOR_YUV2BGR_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_YV12	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YV12 = 99,$/;"	e	enum:cv::__anon281
COLOR_YUV2BGR_YVYU	imgproc/imgproc.hpp	/^    COLOR_YUV2BGR_YVYU = 118,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_420	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_420 = 106,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_I420	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_I420 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_IYUV	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_IYUV = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_NV12	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_NV12 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_NV21	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_NV21 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_UYNV	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_UYNV = COLOR_YUV2GRAY_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_UYVY	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_UYVY = 123,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_Y422	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_Y422 = COLOR_YUV2GRAY_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_YUNV	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YUNV = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_YUY2	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YUY2 = 124,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_YUYV	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YUYV = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_YV12	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YV12 = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon281
COLOR_YUV2GRAY_YVYU	imgproc/imgproc.hpp	/^    COLOR_YUV2GRAY_YVYU = COLOR_YUV2GRAY_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB      = 85,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_I420	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_I420 = COLOR_YUV2RGBA_IYUV,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_IYUV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_IYUV = 104,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_NV12	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_NV12 = 94,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_NV21	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_NV21 = 96,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_UYNV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_UYNV = COLOR_YUV2RGBA_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_UYVY	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_UYVY = 111,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_Y422	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_Y422 = COLOR_YUV2RGBA_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_YUNV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YUNV = COLOR_YUV2RGBA_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_YUY2	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YUY2 = 119,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_YUYV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YUYV = COLOR_YUV2RGBA_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_YV12	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YV12 = 102,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGBA_YVYU	imgproc/imgproc.hpp	/^    COLOR_YUV2RGBA_YVYU = 121,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_I420	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_I420 = COLOR_YUV2RGB_IYUV,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_IYUV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_IYUV = 100,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_NV12	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_NV12 = 90,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_NV21	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_NV21 = 92,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_UYNV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_UYNV = COLOR_YUV2RGB_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_UYVY	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_UYVY = 107,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_Y422	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_Y422 = COLOR_YUV2RGB_UYVY,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_YUNV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YUNV = COLOR_YUV2RGB_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_YUY2	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YUY2 = 115,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_YUYV	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YUYV = COLOR_YUV2RGB_YUY2,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_YV12	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YV12 = 98,$/;"	e	enum:cv::__anon281
COLOR_YUV2RGB_YVYU	imgproc/imgproc.hpp	/^    COLOR_YUV2RGB_YVYU = 117,$/;"	e	enum:cv::__anon281
COLOR_YUV420p2BGR	imgproc/imgproc.hpp	/^    COLOR_YUV420p2BGR = COLOR_YUV2BGR_YV12,$/;"	e	enum:cv::__anon281
COLOR_YUV420p2BGRA	imgproc/imgproc.hpp	/^    COLOR_YUV420p2BGRA = COLOR_YUV2BGRA_YV12,$/;"	e	enum:cv::__anon281
COLOR_YUV420p2GRAY	imgproc/imgproc.hpp	/^    COLOR_YUV420p2GRAY = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon281
COLOR_YUV420p2RGB	imgproc/imgproc.hpp	/^    COLOR_YUV420p2RGB = COLOR_YUV2RGB_YV12,$/;"	e	enum:cv::__anon281
COLOR_YUV420p2RGBA	imgproc/imgproc.hpp	/^    COLOR_YUV420p2RGBA = COLOR_YUV2RGBA_YV12,$/;"	e	enum:cv::__anon281
COLOR_YUV420sp2BGR	imgproc/imgproc.hpp	/^    COLOR_YUV420sp2BGR = COLOR_YUV2BGR_NV21,$/;"	e	enum:cv::__anon281
COLOR_YUV420sp2BGRA	imgproc/imgproc.hpp	/^    COLOR_YUV420sp2BGRA = COLOR_YUV2BGRA_NV21,$/;"	e	enum:cv::__anon281
COLOR_YUV420sp2GRAY	imgproc/imgproc.hpp	/^    COLOR_YUV420sp2GRAY = COLOR_YUV2GRAY_420,$/;"	e	enum:cv::__anon281
COLOR_YUV420sp2RGB	imgproc/imgproc.hpp	/^    COLOR_YUV420sp2RGB = COLOR_YUV2RGB_NV21,$/;"	e	enum:cv::__anon281
COLOR_YUV420sp2RGBA	imgproc/imgproc.hpp	/^    COLOR_YUV420sp2RGBA = COLOR_YUV2RGBA_NV21,$/;"	e	enum:cv::__anon281
COLOR_mRGBA2RGBA	imgproc/imgproc.hpp	/^    COLOR_mRGBA2RGBA = 126,$/;"	e	enum:cv::__anon281
COMPOSITE	flann/defines.h	/^    COMPOSITE = 3,$/;"	e	enum:cvflann::flann_algorithm_t
COMPRESSION_NONE	legacy/legacy.hpp	/^        COMPRESSION_NONE = 0,$/;"	e	enum:cv::FernClassifier::__anon12
COMPRESSION_PCA	legacy/legacy.hpp	/^        COMPRESSION_PCA = 2,$/;"	e	enum:cv::FernClassifier::__anon12
COMPRESSION_RANDOM_PROJ	legacy/legacy.hpp	/^        COMPRESSION_RANDOM_PROJ = 1,$/;"	e	enum:cv::FernClassifier::__anon12
CONSOLE	ts/ts.hpp	/^        CONSOLE=1 << CONSOLE_IDX,$/;"	e	enum:cvtest::TS::__anon190
CONSOLE_IDX	ts/ts.hpp	/^        CONSOLE_IDX=3,$/;"	e	enum:cvtest::TS::__anon190
COST_COLOR	stitching/detail/seam_finders.hpp	/^    enum { COST_COLOR, COST_COLOR_GRAD };$/;"	e	enum:cv::detail::GraphCutSeamFinderBase::__anon53
COST_COLOR_GRAD	stitching/detail/seam_finders.hpp	/^    enum { COST_COLOR, COST_COLOR_GRAD };$/;"	e	enum:cv::detail::GraphCutSeamFinderBase::__anon53
COV_MAT_DEFAULT	ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon248
COV_MAT_DIAGONAL	legacy/legacy.hpp	/^           COV_MAT_DIAGONAL =cv::EM::COV_MAT_DIAGONAL,$/;"	e	enum:CvEM::__anon10
COV_MAT_DIAGONAL	ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon248
COV_MAT_GENERIC	legacy/legacy.hpp	/^           COV_MAT_GENERIC  =cv::EM::COV_MAT_GENERIC };$/;"	e	enum:CvEM::__anon10
COV_MAT_GENERIC	ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon248
COV_MAT_SPHERICAL	legacy/legacy.hpp	/^    enum { COV_MAT_SPHERICAL=cv::EM::COV_MAT_SPHERICAL,$/;"	e	enum:CvEM::__anon10
COV_MAT_SPHERICAL	ml/ml.hpp	/^    enum {COV_MAT_SPHERICAL=0, COV_MAT_DIAGONAL=1, COV_MAT_GENERIC=2, COV_MAT_DEFAULT=COV_MAT_DIAGONAL};$/;"	e	enum:cv::EM::__anon248
CP	video/tracking.hpp	/^    int CP;                     \/* number of control vector dimensions *\/$/;"	m	struct:CvKalman
CPU_HAS_NEON_FEATURE	core/internal.hpp	139;"	d
CS	flann/defines.h	/^    CS         = 7,$/;"	e	enum:cvflann::flann_distance_t
CSIyx	contrib/contrib.hpp	/^        Mat CSIyx;$/;"	m	class:cv::LogPolar_Interp
CSIyx	contrib/contrib.hpp	/^        Mat CSIyx;$/;"	m	class:cv::LogPolar_Overlapping
CSV	ts/ts.hpp	/^        CSV=1 << CSV_IDX,$/;"	e	enum:cvtest::TS::__anon190
CSV_IDX	ts/ts.hpp	/^        CSV_IDX=2,$/;"	e	enum:cvtest::TS::__anon190
CVAPI	core/types_c.h	154;"	d
CVAUX_STR	core/version.hpp	55;"	d
CVAUX_STR_EXP	core/version.hpp	54;"	d
CVCL_DEVICE_TYPE_ACCELERATOR	ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_ACCELERATOR = (1 << 3),$/;"	e	enum:cv::ocl::__anon260
CVCL_DEVICE_TYPE_ALL	ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_ALL         = 0xFFFFFFFF$/;"	e	enum:cv::ocl::__anon260
CVCL_DEVICE_TYPE_CPU	ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_CPU         = (1 << 1),$/;"	e	enum:cv::ocl::__anon260
CVCL_DEVICE_TYPE_DEFAULT	ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_DEFAULT     = (1 << 0),$/;"	e	enum:cv::ocl::__anon260
CVCL_DEVICE_TYPE_GPU	ocl/ocl.hpp	/^            CVCL_DEVICE_TYPE_GPU         = (1 << 2),$/;"	e	enum:cv::ocl::__anon260
CVStatus	core/types_c.h	/^typedef int CVStatus;$/;"	t
CV_16S	core/types_c.h	577;"	d
CV_16SC	core/types_c.h	611;"	d
CV_16SC1	core/types_c.h	607;"	d
CV_16SC2	core/types_c.h	608;"	d
CV_16SC3	core/types_c.h	609;"	d
CV_16SC4	core/types_c.h	610;"	d
CV_16U	core/types_c.h	576;"	d
CV_16UC	core/types_c.h	605;"	d
CV_16UC1	core/types_c.h	601;"	d
CV_16UC2	core/types_c.h	602;"	d
CV_16UC3	core/types_c.h	603;"	d
CV_16UC4	core/types_c.h	604;"	d
CV_1F	core/internal.hpp	387;"	d
CV_32F	core/types_c.h	579;"	d
CV_32FC	core/types_c.h	623;"	d
CV_32FC1	core/types_c.h	619;"	d
CV_32FC2	core/types_c.h	620;"	d
CV_32FC3	core/types_c.h	621;"	d
CV_32FC4	core/types_c.h	622;"	d
CV_32S	core/types_c.h	578;"	d
CV_32SC	core/types_c.h	617;"	d
CV_32SC1	core/types_c.h	613;"	d
CV_32SC2	core/types_c.h	614;"	d
CV_32SC3	core/types_c.h	615;"	d
CV_32SC4	core/types_c.h	616;"	d
CV_64F	core/types_c.h	580;"	d
CV_64FC	core/types_c.h	629;"	d
CV_64FC1	core/types_c.h	625;"	d
CV_64FC2	core/types_c.h	626;"	d
CV_64FC3	core/types_c.h	627;"	d
CV_64FC4	core/types_c.h	628;"	d
CV_8S	core/types_c.h	575;"	d
CV_8SC	core/types_c.h	599;"	d
CV_8SC1	core/types_c.h	595;"	d
CV_8SC2	core/types_c.h	596;"	d
CV_8SC3	core/types_c.h	597;"	d
CV_8SC4	core/types_c.h	598;"	d
CV_8U	core/types_c.h	574;"	d
CV_8UC	core/types_c.h	593;"	d
CV_8UC1	core/types_c.h	589;"	d
CV_8UC2	core/types_c.h	590;"	d
CV_8UC3	core/types_c.h	591;"	d
CV_8UC4	core/types_c.h	592;"	d
CV_AA	core/core_c.h	1267;"	d
CV_ADAPTIVE_THRESH_GAUSSIAN_C	imgproc/types_c.h	/^    CV_ADAPTIVE_THRESH_GAUSSIAN_C  =1$/;"	e	enum:__anon306
CV_ADAPTIVE_THRESH_MEAN_C	imgproc/types_c.h	/^    CV_ADAPTIVE_THRESH_MEAN_C  =0,$/;"	e	enum:__anon306
CV_ADD	core/internal.hpp	393;"	d
CV_AND	core/internal.hpp	396;"	d
CV_ANDN	core/internal.hpp	399;"	d
CV_ARE_CNS_EQ	core/types_c.h	708;"	d
CV_ARE_DEPTHS_EQ	core/types_c.h	711;"	d
CV_ARE_SIZES_EQ	core/types_c.h	714;"	d
CV_ARE_TYPES_EQ	core/types_c.h	705;"	d
CV_ARRAY	legacy/legacy.hpp	795;"	d
CV_ASSERT	core/core_c.h	1847;"	d
CV_AUTOSTEP	core/core_c.h	111;"	d
CV_AUTO_STEP	core/types_c.h	631;"	d
CV_AVX	core/internal.hpp	127;"	d
CV_AVX	core/internal.hpp	161;"	d
CV_Assert	core/core.hpp	207;"	d
CV_Assert	core/core.hpp	211;"	d
CV_BACK	core/core_c.h	971;"	d
CV_BADARG_ERR	core/internal.hpp	/^    CV_BADARG_ERR               = -49,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCHANNELS_ERR	core/internal.hpp	/^    CV_BADCHANNELS_ERR          = -47,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCOEF_ERR	core/internal.hpp	/^    CV_BADCOEF_ERR              =  -10,$/;"	e	enum:CvStatus
CV_BADCONVERGENCE_ERR	core/internal.hpp	/^    CV_BADCONVERGENCE_ERR       = -109,$/;"	e	enum:CvStatus
CV_BADDEPTH_ERR	core/internal.hpp	/^    CV_BADDEPTH_ERR             = -107,$/;"	e	enum:CvStatus
CV_BADFACTOR_ERR	core/internal.hpp	/^    CV_BADFACTOR_ERR            =  -7,$/;"	e	enum:CvStatus
CV_BADFLAG_ERR	core/internal.hpp	/^    CV_BADFLAG_ERR              =  -12,$/;"	e	enum:CvStatus
CV_BADHEADER_ERR	core/internal.hpp	/^    CV_BADHEADER_ERR            = -105,$/;"	e	enum:CvStatus
CV_BADMEMBLOCK_ERR	core/internal.hpp	/^    CV_BADMEMBLOCK_ERR          = -113,$/;"	e	enum:CvStatus
CV_BADPOINT_ERR	core/internal.hpp	/^    CV_BADPOINT_ERR             =  -6,$/;"	e	enum:CvStatus
CV_BADRANGE_ERR	core/internal.hpp	/^    CV_BADRANGE_ERR             = -44,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADROI_ERR	core/internal.hpp	/^    CV_BADROI_ERR               = -106,$/;"	e	enum:CvStatus
CV_BADSCALE_ERR	core/internal.hpp	/^    CV_BADSCALE_ERR             =  -4,$/;"	e	enum:CvStatus
CV_BADSIZE_ERR	core/internal.hpp	/^    CV_BADSIZE_ERR              =  -1,$/;"	e	enum:CvStatus
CV_BADSTEP_ERR	core/internal.hpp	/^    CV_BADSTEP_ERR              = -29,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BGFG_FGD_ALPHA_1	legacy/legacy.hpp	3233;"	d
CV_BGFG_FGD_ALPHA_2	legacy/legacy.hpp	3238;"	d
CV_BGFG_FGD_ALPHA_3	legacy/legacy.hpp	3241;"	d
CV_BGFG_FGD_BG_UPDATE_TRESH	legacy/legacy.hpp	3249;"	d
CV_BGFG_FGD_DELTA	legacy/legacy.hpp	3243;"	d
CV_BGFG_FGD_LC	legacy/legacy.hpp	3224;"	d
CV_BGFG_FGD_LCC	legacy/legacy.hpp	3228;"	d
CV_BGFG_FGD_MINAREA	legacy/legacy.hpp	3247;"	d
CV_BGFG_FGD_N1C	legacy/legacy.hpp	3225;"	d
CV_BGFG_FGD_N1CC	legacy/legacy.hpp	3229;"	d
CV_BGFG_FGD_N2C	legacy/legacy.hpp	3226;"	d
CV_BGFG_FGD_N2CC	legacy/legacy.hpp	3230;"	d
CV_BGFG_FGD_T	legacy/legacy.hpp	3245;"	d
CV_BGFG_MOG_BACKGROUND_THRESHOLD	legacy/legacy.hpp	3340;"	d
CV_BGFG_MOG_MAX_NGAUSSIANS	legacy/legacy.hpp	3337;"	d
CV_BGFG_MOG_MINAREA	legacy/legacy.hpp	3346;"	d
CV_BGFG_MOG_NCOLORS	legacy/legacy.hpp	3349;"	d
CV_BGFG_MOG_NGAUSSIANS	legacy/legacy.hpp	3343;"	d
CV_BGFG_MOG_SIGMA_INIT	legacy/legacy.hpp	3345;"	d
CV_BGFG_MOG_STD_THRESHOLD	legacy/legacy.hpp	3341;"	d
CV_BGFG_MOG_WEIGHT_INIT	legacy/legacy.hpp	3344;"	d
CV_BGFG_MOG_WINDOW_SIZE	legacy/legacy.hpp	3342;"	d
CV_BGR2BGR555	imgproc/types_c.h	/^    CV_BGR2BGR555  =22,$/;"	e	enum:__anon290
CV_BGR2BGR565	imgproc/types_c.h	/^    CV_BGR2BGR565  =12,$/;"	e	enum:__anon290
CV_BGR2BGRA	imgproc/types_c.h	/^    CV_BGR2BGRA    =0,$/;"	e	enum:__anon290
CV_BGR2GRAY	imgproc/types_c.h	/^    CV_BGR2GRAY    =6,$/;"	e	enum:__anon290
CV_BGR2HLS	imgproc/types_c.h	/^    CV_BGR2HLS     =52,$/;"	e	enum:__anon290
CV_BGR2HLS_FULL	imgproc/types_c.h	/^    CV_BGR2HLS_FULL = 68,$/;"	e	enum:__anon290
CV_BGR2HSV	imgproc/types_c.h	/^    CV_BGR2HSV     =40,$/;"	e	enum:__anon290
CV_BGR2HSV_FULL	imgproc/types_c.h	/^    CV_BGR2HSV_FULL = 66,$/;"	e	enum:__anon290
CV_BGR2Lab	imgproc/types_c.h	/^    CV_BGR2Lab     =44,$/;"	e	enum:__anon290
CV_BGR2Luv	imgproc/types_c.h	/^    CV_BGR2Luv     =50,$/;"	e	enum:__anon290
CV_BGR2RGB	imgproc/types_c.h	/^    CV_BGR2RGB     =4,$/;"	e	enum:__anon290
CV_BGR2RGBA	imgproc/types_c.h	/^    CV_BGR2RGBA    =2,$/;"	e	enum:__anon290
CV_BGR2XYZ	imgproc/types_c.h	/^    CV_BGR2XYZ     =32,$/;"	e	enum:__anon290
CV_BGR2YCrCb	imgproc/types_c.h	/^    CV_BGR2YCrCb   =36,$/;"	e	enum:__anon290
CV_BGR2YUV	imgproc/types_c.h	/^    CV_BGR2YUV      = 82,$/;"	e	enum:__anon290
CV_BGR5552BGR	imgproc/types_c.h	/^    CV_BGR5552BGR  =24,$/;"	e	enum:__anon290
CV_BGR5552BGRA	imgproc/types_c.h	/^    CV_BGR5552BGRA =28,$/;"	e	enum:__anon290
CV_BGR5552GRAY	imgproc/types_c.h	/^    CV_BGR5552GRAY =31,$/;"	e	enum:__anon290
CV_BGR5552RGB	imgproc/types_c.h	/^    CV_BGR5552RGB  =25,$/;"	e	enum:__anon290
CV_BGR5552RGBA	imgproc/types_c.h	/^    CV_BGR5552RGBA =29,$/;"	e	enum:__anon290
CV_BGR5652BGR	imgproc/types_c.h	/^    CV_BGR5652BGR  =14,$/;"	e	enum:__anon290
CV_BGR5652BGRA	imgproc/types_c.h	/^    CV_BGR5652BGRA =18,$/;"	e	enum:__anon290
CV_BGR5652GRAY	imgproc/types_c.h	/^    CV_BGR5652GRAY =21,$/;"	e	enum:__anon290
CV_BGR5652RGB	imgproc/types_c.h	/^    CV_BGR5652RGB  =15,$/;"	e	enum:__anon290
CV_BGR5652RGBA	imgproc/types_c.h	/^    CV_BGR5652RGBA =19,$/;"	e	enum:__anon290
CV_BGRA2BGR	imgproc/types_c.h	/^    CV_BGRA2BGR    =1,$/;"	e	enum:__anon290
CV_BGRA2BGR555	imgproc/types_c.h	/^    CV_BGRA2BGR555 =26,$/;"	e	enum:__anon290
CV_BGRA2BGR565	imgproc/types_c.h	/^    CV_BGRA2BGR565 =16,$/;"	e	enum:__anon290
CV_BGRA2GRAY	imgproc/types_c.h	/^    CV_BGRA2GRAY   =10,$/;"	e	enum:__anon290
CV_BGRA2RGB	imgproc/types_c.h	/^    CV_BGRA2RGB    =CV_RGBA2BGR,$/;"	e	enum:__anon290
CV_BGRA2RGBA	imgproc/types_c.h	/^    CV_BGRA2RGBA   =5,$/;"	e	enum:__anon290
CV_BG_MODEL_FGD	legacy/legacy.hpp	3172;"	d
CV_BG_MODEL_FGD_SIMPLE	legacy/legacy.hpp	3174;"	d
CV_BG_MODEL_MOG	legacy/legacy.hpp	3173;"	d
CV_BG_STAT_MODEL_FIELDS	legacy/legacy.hpp	3182;"	d
CV_BIG_INT	core/types_c.h	160;"	d
CV_BIG_INT	core/types_c.h	165;"	d
CV_BIG_UINT	core/types_c.h	161;"	d
CV_BIG_UINT	core/types_c.h	166;"	d
CV_BILATERAL	imgproc/types_c.h	/^    CV_BILATERAL =4$/;"	e	enum:__anon287
CV_BLOB_CENTER	legacy/blobtrack.hpp	168;"	d
CV_BLOB_ID	legacy/blobtrack.hpp	167;"	d
CV_BLOB_MINH	legacy/blobtrack.hpp	166;"	d
CV_BLOB_MINW	legacy/blobtrack.hpp	165;"	d
CV_BLOB_RECT	legacy/blobtrack.hpp	175;"	d
CV_BLOB_RX	legacy/blobtrack.hpp	173;"	d
CV_BLOB_RY	legacy/blobtrack.hpp	174;"	d
CV_BLOB_WX	legacy/blobtrack.hpp	171;"	d
CV_BLOB_WY	legacy/blobtrack.hpp	172;"	d
CV_BLOB_X	legacy/blobtrack.hpp	169;"	d
CV_BLOB_Y	legacy/blobtrack.hpp	170;"	d
CV_BLUR	imgproc/types_c.h	/^    CV_BLUR  =1,$/;"	e	enum:__anon287
CV_BLUR_NO_SCALE	imgproc/types_c.h	/^    CV_BLUR_NO_SCALE =0,$/;"	e	enum:__anon287
CV_BT_HIST_TYPE_H	legacy/blobtrack.hpp	873;"	d
CV_BT_HIST_TYPE_MG	legacy/blobtrack.hpp	871;"	d
CV_BT_HIST_TYPE_MG2	legacy/blobtrack.hpp	872;"	d
CV_BT_HIST_TYPE_S	legacy/blobtrack.hpp	870;"	d
CV_BadAlign	core/types_c.h	/^ CV_BadAlign=                  -21, \/**\/$/;"	e	enum:__anon220
CV_BadAlphaChannel	core/types_c.h	/^ CV_BadAlphaChannel=           -18, \/**\/$/;"	e	enum:__anon220
CV_BadCOI	core/types_c.h	/^ CV_BadCOI=                    -24, \/**\/$/;"	e	enum:__anon220
CV_BadCallBack	core/types_c.h	/^ CV_BadCallBack=               -22, \/**\/$/;"	e	enum:__anon220
CV_BadDataPtr	core/types_c.h	/^ CV_BadDataPtr=                -12, \/**\/$/;"	e	enum:__anon220
CV_BadDepth	core/types_c.h	/^ CV_BadDepth=                  -17, \/**\/$/;"	e	enum:__anon220
CV_BadImageSize	core/types_c.h	/^ CV_BadImageSize=              -10, \/* image size is invalid           *\/$/;"	e	enum:__anon220
CV_BadModelOrChSeq	core/types_c.h	/^ CV_BadModelOrChSeq=           -14, \/**\/$/;"	e	enum:__anon220
CV_BadNumChannel1U	core/types_c.h	/^ CV_BadNumChannel1U=           -16, \/**\/$/;"	e	enum:__anon220
CV_BadNumChannels	core/types_c.h	/^ CV_BadNumChannels=            -15, \/**\/$/;"	e	enum:__anon220
CV_BadOffset	core/types_c.h	/^ CV_BadOffset=                 -11, \/* offset is invalid               *\/$/;"	e	enum:__anon220
CV_BadOrder	core/types_c.h	/^ CV_BadOrder=                  -19, \/**\/$/;"	e	enum:__anon220
CV_BadOrigin	core/types_c.h	/^ CV_BadOrigin=                 -20, \/**\/$/;"	e	enum:__anon220
CV_BadROISize	core/types_c.h	/^ CV_BadROISize=                -25, \/**\/$/;"	e	enum:__anon220
CV_BadStep	core/types_c.h	/^ CV_BadStep=                   -13, \/**\/$/;"	e	enum:__anon220
CV_BadTileSize	core/types_c.h	/^ CV_BadTileSize=               -23, \/**\/$/;"	e	enum:__anon220
CV_BayerBG2BGR	imgproc/types_c.h	/^    CV_BayerBG2BGR =46,$/;"	e	enum:__anon290
CV_BayerBG2BGR_VNG	imgproc/types_c.h	/^    CV_BayerBG2BGR_VNG =62,$/;"	e	enum:__anon290
CV_BayerBG2GRAY	imgproc/types_c.h	/^    CV_BayerBG2GRAY = 86,$/;"	e	enum:__anon290
CV_BayerBG2RGB	imgproc/types_c.h	/^    CV_BayerBG2RGB =CV_BayerRG2BGR,$/;"	e	enum:__anon290
CV_BayerBG2RGB_VNG	imgproc/types_c.h	/^    CV_BayerBG2RGB_VNG =CV_BayerRG2BGR_VNG,$/;"	e	enum:__anon290
CV_BayerGB2BGR	imgproc/types_c.h	/^    CV_BayerGB2BGR =47,$/;"	e	enum:__anon290
CV_BayerGB2BGR_VNG	imgproc/types_c.h	/^    CV_BayerGB2BGR_VNG =63,$/;"	e	enum:__anon290
CV_BayerGB2GRAY	imgproc/types_c.h	/^    CV_BayerGB2GRAY = 87,$/;"	e	enum:__anon290
CV_BayerGB2RGB	imgproc/types_c.h	/^    CV_BayerGB2RGB =CV_BayerGR2BGR,$/;"	e	enum:__anon290
CV_BayerGB2RGB_VNG	imgproc/types_c.h	/^    CV_BayerGB2RGB_VNG =CV_BayerGR2BGR_VNG,$/;"	e	enum:__anon290
CV_BayerGR2BGR	imgproc/types_c.h	/^    CV_BayerGR2BGR =49,$/;"	e	enum:__anon290
CV_BayerGR2BGR_VNG	imgproc/types_c.h	/^    CV_BayerGR2BGR_VNG =65,$/;"	e	enum:__anon290
CV_BayerGR2GRAY	imgproc/types_c.h	/^    CV_BayerGR2GRAY = 89,$/;"	e	enum:__anon290
CV_BayerGR2RGB	imgproc/types_c.h	/^    CV_BayerGR2RGB =CV_BayerGB2BGR,$/;"	e	enum:__anon290
CV_BayerGR2RGB_VNG	imgproc/types_c.h	/^    CV_BayerGR2RGB_VNG =CV_BayerGB2BGR_VNG,$/;"	e	enum:__anon290
CV_BayerRG2BGR	imgproc/types_c.h	/^    CV_BayerRG2BGR =48,$/;"	e	enum:__anon290
CV_BayerRG2BGR_VNG	imgproc/types_c.h	/^    CV_BayerRG2BGR_VNG =64,$/;"	e	enum:__anon290
CV_BayerRG2GRAY	imgproc/types_c.h	/^    CV_BayerRG2GRAY = 88,$/;"	e	enum:__anon290
CV_BayerRG2RGB	imgproc/types_c.h	/^    CV_BayerRG2RGB =CV_BayerBG2BGR,$/;"	e	enum:__anon290
CV_BayerRG2RGB_VNG	imgproc/types_c.h	/^    CV_BayerRG2RGB_VNG =CV_BayerBG2BGR_VNG,$/;"	e	enum:__anon290
CV_C	core/core_c.h	839;"	d
CV_CALIB_CB_ADAPTIVE_THRESH	calib3d/calib3d.hpp	201;"	d
CV_CALIB_CB_FAST_CHECK	calib3d/calib3d.hpp	204;"	d
CV_CALIB_CB_FILTER_QUADS	calib3d/calib3d.hpp	203;"	d
CV_CALIB_CB_NORMALIZE_IMAGE	calib3d/calib3d.hpp	202;"	d
CV_CALIB_ETALON_CHECKERBOARD	legacy/legacy.hpp	/^    CV_CALIB_ETALON_CHECKERBOARD = CV_CALIB_ETALON_CHESSBOARD$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_CHESSBOARD	legacy/legacy.hpp	/^    CV_CALIB_ETALON_CHESSBOARD = 0,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_USER	legacy/legacy.hpp	/^    CV_CALIB_ETALON_USER = -1,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_FIX_ASPECT_RATIO	calib3d/calib3d.hpp	226;"	d
CV_CALIB_FIX_FOCAL_LENGTH	calib3d/calib3d.hpp	229;"	d
CV_CALIB_FIX_INTRINSIC	calib3d/calib3d.hpp	264;"	d
CV_CALIB_FIX_K1	calib3d/calib3d.hpp	230;"	d
CV_CALIB_FIX_K2	calib3d/calib3d.hpp	231;"	d
CV_CALIB_FIX_K3	calib3d/calib3d.hpp	232;"	d
CV_CALIB_FIX_K4	calib3d/calib3d.hpp	233;"	d
CV_CALIB_FIX_K5	calib3d/calib3d.hpp	234;"	d
CV_CALIB_FIX_K6	calib3d/calib3d.hpp	235;"	d
CV_CALIB_FIX_PRINCIPAL_POINT	calib3d/calib3d.hpp	227;"	d
CV_CALIB_RATIONAL_MODEL	calib3d/calib3d.hpp	236;"	d
CV_CALIB_SAME_FOCAL_LENGTH	calib3d/calib3d.hpp	265;"	d
CV_CALIB_USE_INTRINSIC_GUESS	calib3d/calib3d.hpp	225;"	d
CV_CALIB_ZERO_DISPARITY	calib3d/calib3d.hpp	280;"	d
CV_CALIB_ZERO_TANGENT_DIST	calib3d/calib3d.hpp	228;"	d
CV_CALL	core/core_c.h	1839;"	d
CV_CAMERA_TO_WARP	legacy/legacy.hpp	543;"	d
CV_CANNY_L2_GRADIENT	imgproc/types_c.h	/^    CV_CANNY_L2_GRADIENT  =(1 << 31)$/;"	e	enum:__anon308
CV_CAP_ANDROID	highgui/highgui_c.h	/^    CV_CAP_ANDROID  =1000,  \/\/ Android$/;"	e	enum:__anon37
CV_CAP_ANDROID_ANTIBANDING_50HZ	highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_50HZ = 0,$/;"	e	enum:__anon45
CV_CAP_ANDROID_ANTIBANDING_60HZ	highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_60HZ,$/;"	e	enum:__anon45
CV_CAP_ANDROID_ANTIBANDING_AUTO	highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_AUTO,$/;"	e	enum:__anon45
CV_CAP_ANDROID_ANTIBANDING_OFF	highgui/highgui_c.h	/^    CV_CAP_ANDROID_ANTIBANDING_OFF$/;"	e	enum:__anon45
CV_CAP_ANDROID_COLOR_FRAME	highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME = CV_CAP_ANDROID_COLOR_FRAME_BGR,$/;"	e	enum:__anon41
CV_CAP_ANDROID_COLOR_FRAME_BGR	highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_BGR = 0, \/\/BGR$/;"	e	enum:__anon41
CV_CAP_ANDROID_COLOR_FRAME_BGRA	highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_BGRA = 3,$/;"	e	enum:__anon41
CV_CAP_ANDROID_COLOR_FRAME_RGB	highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_RGB = 2,$/;"	e	enum:__anon41
CV_CAP_ANDROID_COLOR_FRAME_RGBA	highgui/highgui_c.h	/^    CV_CAP_ANDROID_COLOR_FRAME_RGBA = 4$/;"	e	enum:__anon41
CV_CAP_ANDROID_FLASH_MODE_AUTO	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_AUTO = 0,$/;"	e	enum:__anon42
CV_CAP_ANDROID_FLASH_MODE_OFF	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_OFF,$/;"	e	enum:__anon42
CV_CAP_ANDROID_FLASH_MODE_ON	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_ON,$/;"	e	enum:__anon42
CV_CAP_ANDROID_FLASH_MODE_RED_EYE	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_RED_EYE,$/;"	e	enum:__anon42
CV_CAP_ANDROID_FLASH_MODE_TORCH	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FLASH_MODE_TORCH$/;"	e	enum:__anon42
CV_CAP_ANDROID_FOCUS_MODE_AUTO	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_AUTO = 0,$/;"	e	enum:__anon43
CV_CAP_ANDROID_FOCUS_MODE_CONTINUOUS_VIDEO	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_CONTINUOUS_VIDEO,$/;"	e	enum:__anon43
CV_CAP_ANDROID_FOCUS_MODE_EDOF	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_EDOF,$/;"	e	enum:__anon43
CV_CAP_ANDROID_FOCUS_MODE_FIXED	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_FIXED,$/;"	e	enum:__anon43
CV_CAP_ANDROID_FOCUS_MODE_INFINITY	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_INFINITY,$/;"	e	enum:__anon43
CV_CAP_ANDROID_FOCUS_MODE_MACRO	highgui/highgui_c.h	/^    CV_CAP_ANDROID_FOCUS_MODE_MACRO$/;"	e	enum:__anon43
CV_CAP_ANDROID_GREY_FRAME	highgui/highgui_c.h	/^    CV_CAP_ANDROID_GREY_FRAME  = 1,  \/\/Y$/;"	e	enum:__anon41
CV_CAP_ANDROID_WHITE_BALANCE_AUTO	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_AUTO = 0,$/;"	e	enum:__anon44
CV_CAP_ANDROID_WHITE_BALANCE_CLOUDY_DAYLIGHT	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_CLOUDY_DAYLIGHT,$/;"	e	enum:__anon44
CV_CAP_ANDROID_WHITE_BALANCE_DAYLIGHT	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_DAYLIGHT,$/;"	e	enum:__anon44
CV_CAP_ANDROID_WHITE_BALANCE_FLUORESCENT	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_FLUORESCENT,$/;"	e	enum:__anon44
CV_CAP_ANDROID_WHITE_BALANCE_INCANDESCENT	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_INCANDESCENT,$/;"	e	enum:__anon44
CV_CAP_ANDROID_WHITE_BALANCE_SHADE	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_SHADE,$/;"	e	enum:__anon44
CV_CAP_ANDROID_WHITE_BALANCE_TWILIGHT	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_TWILIGHT,$/;"	e	enum:__anon44
CV_CAP_ANDROID_WHITE_BALANCE_WARM_FLUORESCENT	highgui/highgui_c.h	/^    CV_CAP_ANDROID_WHITE_BALANCE_WARM_FLUORESCENT$/;"	e	enum:__anon44
CV_CAP_ANY	highgui/highgui_c.h	/^    CV_CAP_ANY      =0,     \/\/ autodetect$/;"	e	enum:__anon37
CV_CAP_AVFOUNDATION	highgui/highgui_c.h	/^    CV_CAP_AVFOUNDATION = 1200,  \/\/ AVFoundation framework for iOS (OS X Lion will have the same API)$/;"	e	enum:__anon37
CV_CAP_CMU1394	highgui/highgui_c.h	/^    CV_CAP_CMU1394  =300,$/;"	e	enum:__anon37
CV_CAP_DC1394	highgui/highgui_c.h	/^    CV_CAP_DC1394   =300,$/;"	e	enum:__anon37
CV_CAP_DSHOW	highgui/highgui_c.h	/^    CV_CAP_DSHOW    =700,   \/\/ DirectShow (via videoInput)$/;"	e	enum:__anon37
CV_CAP_FIREWARE	highgui/highgui_c.h	/^    CV_CAP_FIREWARE =300,   \/\/ IEEE 1394 drivers$/;"	e	enum:__anon37
CV_CAP_FIREWIRE	highgui/highgui_c.h	/^    CV_CAP_FIREWIRE =300,$/;"	e	enum:__anon37
CV_CAP_GIGANETIX	highgui/highgui_c.h	/^    CV_CAP_GIGANETIX = 1300  \/\/ Smartek Giganetix GigEVisionSDK$/;"	e	enum:__anon37
CV_CAP_GSTREAMER_QUEUE_LENGTH	highgui/highgui_c.h	/^    CV_CAP_GSTREAMER_QUEUE_LENGTH   = 200, \/\/ default is 1$/;"	e	enum:__anon38
CV_CAP_IEEE1394	highgui/highgui_c.h	/^    CV_CAP_IEEE1394 =300,$/;"	e	enum:__anon37
CV_CAP_MIL	highgui/highgui_c.h	/^    CV_CAP_MIL      =100,   \/\/ MIL proprietary drivers$/;"	e	enum:__anon37
CV_CAP_OPENNI	highgui/highgui_c.h	/^    CV_CAP_OPENNI   =900,   \/\/ OpenNI (for Kinect)$/;"	e	enum:__anon37
CV_CAP_OPENNI_ASUS	highgui/highgui_c.h	/^    CV_CAP_OPENNI_ASUS =910,   \/\/ OpenNI (for Asus Xtion)$/;"	e	enum:__anon37
CV_CAP_OPENNI_BGR_IMAGE	highgui/highgui_c.h	/^    CV_CAP_OPENNI_BGR_IMAGE                 = 5,$/;"	e	enum:__anon39
CV_CAP_OPENNI_DEPTH_GENERATOR	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR = 1 << 31,$/;"	e	enum:__anon38
CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE        = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_BASELINE,$/;"	e	enum:__anon38
CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH    = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_FOCAL_LENGTH,$/;"	e	enum:__anon38
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION    = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_REGISTRATION,$/;"	e	enum:__anon38
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON = CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION,$/;"	e	enum:__anon38
CV_CAP_OPENNI_DEPTH_MAP	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DEPTH_MAP                 = 0, \/\/ Depth values in mm (CV_16UC1)$/;"	e	enum:__anon39
CV_CAP_OPENNI_DISPARITY_MAP	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DISPARITY_MAP             = 2, \/\/ Disparity in pixels (CV_8UC1)$/;"	e	enum:__anon39
CV_CAP_OPENNI_DISPARITY_MAP_32F	highgui/highgui_c.h	/^    CV_CAP_OPENNI_DISPARITY_MAP_32F         = 3, \/\/ Disparity in pixels (CV_32FC1)$/;"	e	enum:__anon39
CV_CAP_OPENNI_GENERATORS_MASK	highgui/highgui_c.h	/^    CV_CAP_OPENNI_GENERATORS_MASK = CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_OPENNI_IMAGE_GENERATOR,$/;"	e	enum:__anon38
CV_CAP_OPENNI_GRAY_IMAGE	highgui/highgui_c.h	/^    CV_CAP_OPENNI_GRAY_IMAGE                = 6$/;"	e	enum:__anon39
CV_CAP_OPENNI_IMAGE_GENERATOR	highgui/highgui_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR = 1 << 30,$/;"	e	enum:__anon38
CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE	highgui/highgui_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE     = CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_OUTPUT_MODE,$/;"	e	enum:__anon38
CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT	highgui/highgui_c.h	/^    CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT         = CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT,$/;"	e	enum:__anon38
CV_CAP_OPENNI_POINT_CLOUD_MAP	highgui/highgui_c.h	/^    CV_CAP_OPENNI_POINT_CLOUD_MAP           = 1, \/\/ XYZ in meters (CV_32FC3)$/;"	e	enum:__anon39
CV_CAP_OPENNI_QVGA_30HZ	highgui/highgui_c.h	/^    CV_CAP_OPENNI_QVGA_30HZ    = 3,$/;"	e	enum:__anon40
CV_CAP_OPENNI_QVGA_60HZ	highgui/highgui_c.h	/^    CV_CAP_OPENNI_QVGA_60HZ    = 4$/;"	e	enum:__anon40
CV_CAP_OPENNI_SXGA_15HZ	highgui/highgui_c.h	/^    CV_CAP_OPENNI_SXGA_15HZ    = 1,$/;"	e	enum:__anon40
CV_CAP_OPENNI_SXGA_30HZ	highgui/highgui_c.h	/^    CV_CAP_OPENNI_SXGA_30HZ    = 2,$/;"	e	enum:__anon40
CV_CAP_OPENNI_VALID_DEPTH_MASK	highgui/highgui_c.h	/^    CV_CAP_OPENNI_VALID_DEPTH_MASK          = 4, \/\/ CV_8UC1$/;"	e	enum:__anon39
CV_CAP_OPENNI_VGA_30HZ	highgui/highgui_c.h	/^    CV_CAP_OPENNI_VGA_30HZ     = 0,$/;"	e	enum:__anon40
CV_CAP_PROP_ANDROID_ANTIBANDING	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_ANTIBANDING = 8004,$/;"	e	enum:__anon38
CV_CAP_PROP_ANDROID_FLASH_MODE	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FLASH_MODE = 8001,$/;"	e	enum:__anon38
CV_CAP_PROP_ANDROID_FOCAL_LENGTH	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCAL_LENGTH = 8005,$/;"	e	enum:__anon38
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR = 8008,$/;"	e	enum:__anon38
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR = 8006,$/;"	e	enum:__anon38
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL = 8007,$/;"	e	enum:__anon38
CV_CAP_PROP_ANDROID_FOCUS_MODE	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_FOCUS_MODE = 8002,$/;"	e	enum:__anon38
CV_CAP_PROP_ANDROID_WHITE_BALANCE	highgui/highgui_c.h	/^    CV_CAP_PROP_ANDROID_WHITE_BALANCE = 8003,$/;"	e	enum:__anon38
CV_CAP_PROP_AUTOGRAB	highgui/highgui_c.h	/^    CV_CAP_PROP_AUTOGRAB      =1024, \/\/ property for highgui class CvCapture_Android only$/;"	e	enum:__anon38
CV_CAP_PROP_AUTO_EXPOSURE	highgui/highgui_c.h	/^    CV_CAP_PROP_AUTO_EXPOSURE =21, \/\/ exposure control done by camera,$/;"	e	enum:__anon38
CV_CAP_PROP_BACKLIGHT	highgui/highgui_c.h	/^    CV_CAP_PROP_BACKLIGHT     =32,$/;"	e	enum:__anon38
CV_CAP_PROP_BRIGHTNESS	highgui/highgui_c.h	/^    CV_CAP_PROP_BRIGHTNESS    =10,$/;"	e	enum:__anon38
CV_CAP_PROP_CONTRAST	highgui/highgui_c.h	/^    CV_CAP_PROP_CONTRAST      =11,$/;"	e	enum:__anon38
CV_CAP_PROP_CONVERT_RGB	highgui/highgui_c.h	/^    CV_CAP_PROP_CONVERT_RGB   =16,$/;"	e	enum:__anon38
CV_CAP_PROP_DC1394_MODE_AUTO	highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_MODE_AUTO = -2,$/;"	e	enum:__anon38
CV_CAP_PROP_DC1394_MODE_MANUAL	highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_MODE_MANUAL = -3, \/\/set automatically when a value of the feature is set by the user$/;"	e	enum:__anon38
CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO	highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO = -1,$/;"	e	enum:__anon38
CV_CAP_PROP_DC1394_OFF	highgui/highgui_c.h	/^    CV_CAP_PROP_DC1394_OFF         = -4,  \/\/turn the feature off (not controlled manually nor automatically)$/;"	e	enum:__anon38
CV_CAP_PROP_EXPOSURE	highgui/highgui_c.h	/^    CV_CAP_PROP_EXPOSURE      =15,$/;"	e	enum:__anon38
CV_CAP_PROP_FOCUS	highgui/highgui_c.h	/^    CV_CAP_PROP_FOCUS         =28,$/;"	e	enum:__anon38
CV_CAP_PROP_FORMAT	highgui/highgui_c.h	/^    CV_CAP_PROP_FORMAT         =8,$/;"	e	enum:__anon38
CV_CAP_PROP_FOURCC	highgui/highgui_c.h	/^    CV_CAP_PROP_FOURCC         =6,$/;"	e	enum:__anon38
CV_CAP_PROP_FPS	highgui/highgui_c.h	/^    CV_CAP_PROP_FPS            =5,$/;"	e	enum:__anon38
CV_CAP_PROP_FRAME_COUNT	highgui/highgui_c.h	/^    CV_CAP_PROP_FRAME_COUNT    =7,$/;"	e	enum:__anon38
CV_CAP_PROP_FRAME_HEIGHT	highgui/highgui_c.h	/^    CV_CAP_PROP_FRAME_HEIGHT   =4,$/;"	e	enum:__anon38
CV_CAP_PROP_FRAME_WIDTH	highgui/highgui_c.h	/^    CV_CAP_PROP_FRAME_WIDTH    =3,$/;"	e	enum:__anon38
CV_CAP_PROP_GAIN	highgui/highgui_c.h	/^    CV_CAP_PROP_GAIN          =14,$/;"	e	enum:__anon38
CV_CAP_PROP_GAMMA	highgui/highgui_c.h	/^    CV_CAP_PROP_GAMMA         =22,$/;"	e	enum:__anon38
CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX	highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX = 10004,$/;"	e	enum:__anon38
CV_CAP_PROP_GIGA_FRAME_OFFSET_X	highgui/highgui_c.h	/^    ,CV_CAP_PROP_GIGA_FRAME_OFFSET_X = 10001,$/;"	e	enum:__anon38
CV_CAP_PROP_GIGA_FRAME_OFFSET_Y	highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_OFFSET_Y = 10002,$/;"	e	enum:__anon38
CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH	highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH = 10006$/;"	e	enum:__anon38
CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH	highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH = 10005,$/;"	e	enum:__anon38
CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX	highgui/highgui_c.h	/^    CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX = 10003,$/;"	e	enum:__anon38
CV_CAP_PROP_GUID	highgui/highgui_c.h	/^    CV_CAP_PROP_GUID          =29,$/;"	e	enum:__anon38
CV_CAP_PROP_HUE	highgui/highgui_c.h	/^    CV_CAP_PROP_HUE           =13,$/;"	e	enum:__anon38
CV_CAP_PROP_IOS_DEVICE_EXPOSURE	highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_EXPOSURE = 9002,$/;"	e	enum:__anon38
CV_CAP_PROP_IOS_DEVICE_FLASH	highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_FLASH = 9003,$/;"	e	enum:__anon38
CV_CAP_PROP_IOS_DEVICE_FOCUS	highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_FOCUS = 9001,$/;"	e	enum:__anon38
CV_CAP_PROP_IOS_DEVICE_TORCH	highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_TORCH = 9005$/;"	e	enum:__anon38
CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE	highgui/highgui_c.h	/^    CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE = 9004,$/;"	e	enum:__anon38
CV_CAP_PROP_IRIS	highgui/highgui_c.h	/^    CV_CAP_PROP_IRIS          =36,$/;"	e	enum:__anon38
CV_CAP_PROP_ISO_SPEED	highgui/highgui_c.h	/^    CV_CAP_PROP_ISO_SPEED     =30,$/;"	e	enum:__anon38
CV_CAP_PROP_MAX_DC1394	highgui/highgui_c.h	/^    CV_CAP_PROP_MAX_DC1394    =31,$/;"	e	enum:__anon38
CV_CAP_PROP_MODE	highgui/highgui_c.h	/^    CV_CAP_PROP_MODE           =9,$/;"	e	enum:__anon38
CV_CAP_PROP_MONOCROME	highgui/highgui_c.h	/^    CV_CAP_PROP_MONOCROME     =19,$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC = 105,$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_BASELINE	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_BASELINE        = 102, \/\/ in mm$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_CIRCLE_BUFFER	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_CIRCLE_BUFFER     = 107,$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_FOCAL_LENGTH	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_FOCAL_LENGTH    = 103, \/\/ in pixels$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH = 101, \/\/ in mm$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_GENERATOR_PRESENT	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_GENERATOR_PRESENT = 109,$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE   = 106,$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_MAX_TIME_DURATION	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_MAX_TIME_DURATION = 108,$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_OUTPUT_MODE	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_OUTPUT_MODE     = 100,$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_REGISTRATION	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_REGISTRATION    = 104, \/\/ flag$/;"	e	enum:__anon38
CV_CAP_PROP_OPENNI_REGISTRATION_ON	highgui/highgui_c.h	/^    CV_CAP_PROP_OPENNI_REGISTRATION_ON = CV_CAP_PROP_OPENNI_REGISTRATION, \/\/ flag that synchronizes the remapping depth map to image map$/;"	e	enum:__anon38
CV_CAP_PROP_PAN	highgui/highgui_c.h	/^    CV_CAP_PROP_PAN           =33,$/;"	e	enum:__anon38
CV_CAP_PROP_POS_AVI_RATIO	highgui/highgui_c.h	/^    CV_CAP_PROP_POS_AVI_RATIO  =2,$/;"	e	enum:__anon38
CV_CAP_PROP_POS_FRAMES	highgui/highgui_c.h	/^    CV_CAP_PROP_POS_FRAMES     =1,$/;"	e	enum:__anon38
CV_CAP_PROP_POS_MSEC	highgui/highgui_c.h	/^    CV_CAP_PROP_POS_MSEC       =0,$/;"	e	enum:__anon38
CV_CAP_PROP_PREVIEW_FORMAT	highgui/highgui_c.h	/^    CV_CAP_PROP_PREVIEW_FORMAT=1026, \/\/ readonly, tricky property, returns cpnst char* indeed$/;"	e	enum:__anon38
CV_CAP_PROP_PVAPI_MULTICASTIP	highgui/highgui_c.h	/^    CV_CAP_PROP_PVAPI_MULTICASTIP   = 300, \/\/ ip for anable multicast master mode. 0 for disable multicast$/;"	e	enum:__anon38
CV_CAP_PROP_RECTIFICATION	highgui/highgui_c.h	/^    CV_CAP_PROP_RECTIFICATION =18,$/;"	e	enum:__anon38
CV_CAP_PROP_ROLL	highgui/highgui_c.h	/^    CV_CAP_PROP_ROLL          =35,$/;"	e	enum:__anon38
CV_CAP_PROP_SATURATION	highgui/highgui_c.h	/^    CV_CAP_PROP_SATURATION    =12,$/;"	e	enum:__anon38
CV_CAP_PROP_SETTINGS	highgui/highgui_c.h	/^    CV_CAP_PROP_SETTINGS      =37,$/;"	e	enum:__anon38
CV_CAP_PROP_SHARPNESS	highgui/highgui_c.h	/^    CV_CAP_PROP_SHARPNESS     =20,$/;"	e	enum:__anon38
CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING	highgui/highgui_c.h	/^    CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING=1025, \/\/ readonly, tricky property, returns cpnst char* indeed$/;"	e	enum:__anon38
CV_CAP_PROP_TEMPERATURE	highgui/highgui_c.h	/^    CV_CAP_PROP_TEMPERATURE   =23,$/;"	e	enum:__anon38
CV_CAP_PROP_TILT	highgui/highgui_c.h	/^    CV_CAP_PROP_TILT          =34,$/;"	e	enum:__anon38
CV_CAP_PROP_TRIGGER	highgui/highgui_c.h	/^    CV_CAP_PROP_TRIGGER       =24,$/;"	e	enum:__anon38
CV_CAP_PROP_TRIGGER_DELAY	highgui/highgui_c.h	/^    CV_CAP_PROP_TRIGGER_DELAY =25,$/;"	e	enum:__anon38
CV_CAP_PROP_WHITE_BALANCE_BLUE_U	highgui/highgui_c.h	/^    CV_CAP_PROP_WHITE_BALANCE_BLUE_U =17,$/;"	e	enum:__anon38
CV_CAP_PROP_WHITE_BALANCE_RED_V	highgui/highgui_c.h	/^    CV_CAP_PROP_WHITE_BALANCE_RED_V =26,$/;"	e	enum:__anon38
CV_CAP_PROP_XI_AEAG	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AEAG          = 415,      \/\/ Automatic exposure\/gain$/;"	e	enum:__anon38
CV_CAP_PROP_XI_AEAG_LEVEL	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AEAG_LEVEL    = 419,       \/\/ Average intensity of output signal AEAG should achieve(in %)$/;"	e	enum:__anon38
CV_CAP_PROP_XI_AE_MAX_LIMIT	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AE_MAX_LIMIT  = 417,      \/\/ Maximum limit of exposure in AEAG procedure$/;"	e	enum:__anon38
CV_CAP_PROP_XI_AG_MAX_LIMIT	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AG_MAX_LIMIT  = 418,      \/\/ Maximum limit of gain in AEAG procedure$/;"	e	enum:__anon38
CV_CAP_PROP_XI_AUTO_WB	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_AUTO_WB       = 414,      \/\/ Automatic white balance$/;"	e	enum:__anon38
CV_CAP_PROP_XI_DATA_FORMAT	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_DATA_FORMAT   = 401,       \/\/ Output data format.$/;"	e	enum:__anon38
CV_CAP_PROP_XI_DOWNSAMPLING	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_DOWNSAMPLING  = 400,      \/\/ Change image resolution by binning or skipping.$/;"	e	enum:__anon38
CV_CAP_PROP_XI_EXP_PRIORITY	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_EXP_PRIORITY  = 416,      \/\/ Exposure priority (0.5 - exposure 50%, gain 50%).$/;"	e	enum:__anon38
CV_CAP_PROP_XI_GPI_LEVEL	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPI_LEVEL     = 408,      \/\/ Get general purpose level$/;"	e	enum:__anon38
CV_CAP_PROP_XI_GPI_MODE	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPI_MODE      = 407,      \/\/ Set general purpose input mode$/;"	e	enum:__anon38
CV_CAP_PROP_XI_GPI_SELECTOR	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPI_SELECTOR  = 406,      \/\/ Selects general purpose input$/;"	e	enum:__anon38
CV_CAP_PROP_XI_GPO_MODE	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPO_MODE      = 410,      \/\/ Set general purpose output mode$/;"	e	enum:__anon38
CV_CAP_PROP_XI_GPO_SELECTOR	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_GPO_SELECTOR  = 409,      \/\/ Selects general purpose output$/;"	e	enum:__anon38
CV_CAP_PROP_XI_LED_MODE	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_LED_MODE      = 412,      \/\/ Define camera signalling LED functionality$/;"	e	enum:__anon38
CV_CAP_PROP_XI_LED_SELECTOR	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_LED_SELECTOR  = 411,      \/\/ Selects camera signalling LED$/;"	e	enum:__anon38
CV_CAP_PROP_XI_MANUAL_WB	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_MANUAL_WB     = 413,      \/\/ Calculates White Balance(must be called during acquisition)$/;"	e	enum:__anon38
CV_CAP_PROP_XI_OFFSET_X	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_OFFSET_X      = 402,      \/\/ Horizontal offset from the origin to the area of interest (in pixels).$/;"	e	enum:__anon38
CV_CAP_PROP_XI_OFFSET_Y	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_OFFSET_Y      = 403,      \/\/ Vertical offset from the origin to the area of interest (in pixels).$/;"	e	enum:__anon38
CV_CAP_PROP_XI_TIMEOUT	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_TIMEOUT       = 420,       \/\/ Image capture timeout in milliseconds$/;"	e	enum:__anon38
CV_CAP_PROP_XI_TRG_SOFTWARE	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_TRG_SOFTWARE  = 405,      \/\/ Generates an internal trigger. PRM_TRG_SOURCE must be set to TRG_SOFTWARE.$/;"	e	enum:__anon38
CV_CAP_PROP_XI_TRG_SOURCE	highgui/highgui_c.h	/^    CV_CAP_PROP_XI_TRG_SOURCE    = 404,      \/\/ Defines source of trigger.$/;"	e	enum:__anon38
CV_CAP_PROP_ZOOM	highgui/highgui_c.h	/^    CV_CAP_PROP_ZOOM          =27,$/;"	e	enum:__anon38
CV_CAP_PVAPI	highgui/highgui_c.h	/^    CV_CAP_PVAPI    =800,   \/\/ PvAPI, Prosilica GigE SDK$/;"	e	enum:__anon37
CV_CAP_QT	highgui/highgui_c.h	/^    CV_CAP_QT       =500,   \/\/ QuickTime$/;"	e	enum:__anon37
CV_CAP_STEREO	highgui/highgui_c.h	/^    CV_CAP_STEREO   =400,   \/\/ TYZX proprietary drivers$/;"	e	enum:__anon37
CV_CAP_TYZX	highgui/highgui_c.h	/^    CV_CAP_TYZX     =400,$/;"	e	enum:__anon37
CV_CAP_UNICAP	highgui/highgui_c.h	/^    CV_CAP_UNICAP   =600,   \/\/ Unicap drivers$/;"	e	enum:__anon37
CV_CAP_V4L	highgui/highgui_c.h	/^    CV_CAP_V4L      =200,$/;"	e	enum:__anon37
CV_CAP_V4L2	highgui/highgui_c.h	/^    CV_CAP_V4L2     =200,$/;"	e	enum:__anon37
CV_CAP_VFW	highgui/highgui_c.h	/^    CV_CAP_VFW      =200,   \/\/ platform native$/;"	e	enum:__anon37
CV_CAP_XIAPI	highgui/highgui_c.h	/^    CV_CAP_XIAPI    =1100,   \/\/ XIMEA Camera API$/;"	e	enum:__anon37
CV_CARRAY	core/types_c.h	177;"	d
CV_CAST_16S	core/internal.hpp	417;"	d
CV_CAST_16U	core/internal.hpp	416;"	d
CV_CAST_32F	core/internal.hpp	420;"	d
CV_CAST_32S	core/internal.hpp	418;"	d
CV_CAST_64F	core/internal.hpp	421;"	d
CV_CAST_64S	core/internal.hpp	419;"	d
CV_CAST_8S	core/internal.hpp	415;"	d
CV_CAST_8U	core/internal.hpp	414;"	d
CV_CDECL	core/types_c.h	112;"	d
CV_CDECL	core/types_c.h	115;"	d
CV_CHAIN_APPROX_NONE	imgproc/types_c.h	/^    CV_CHAIN_APPROX_NONE=1,$/;"	e	enum:__anon297
CV_CHAIN_APPROX_SIMPLE	imgproc/types_c.h	/^    CV_CHAIN_APPROX_SIMPLE=2,$/;"	e	enum:__anon297
CV_CHAIN_APPROX_TC89_KCOS	imgproc/types_c.h	/^    CV_CHAIN_APPROX_TC89_KCOS=4,$/;"	e	enum:__anon297
CV_CHAIN_APPROX_TC89_L1	imgproc/types_c.h	/^    CV_CHAIN_APPROX_TC89_L1=3,$/;"	e	enum:__anon297
CV_CHAIN_CODE	imgproc/types_c.h	/^    CV_CHAIN_CODE=0,$/;"	e	enum:__anon297
CV_CHECK	core/core_c.h	1827;"	d
CV_CHECKBOX	highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon30
CV_CHECK_NANS	core/internal.hpp	329;"	d
CV_CHECK_QUIET	core/core_c.h	642;"	d
CV_CHECK_RANGE	core/core_c.h	641;"	d
CV_CHOLESKY	core/core_c.h	740;"	d
CV_CLOCKWISE	imgproc/types_c.h	/^    CV_CLOCKWISE         =1,$/;"	e	enum:__anon300
CV_CMP	core/types_c.h	302;"	d
CV_CMP_EQ	core/core_c.h	565;"	d
CV_CMP_GE	core/core_c.h	567;"	d
CV_CMP_GT	core/core_c.h	566;"	d
CV_CMP_LE	core/core_c.h	569;"	d
CV_CMP_LT	core/core_c.h	568;"	d
CV_CMP_NE	core/core_c.h	570;"	d
CV_CN_MAX	core/types_c.h	570;"	d
CV_CN_SHIFT	core/types_c.h	571;"	d
CV_COLORCVT_MAX	imgproc/types_c.h	/^    CV_COLORCVT_MAX  = 127$/;"	e	enum:__anon290
CV_COL_SAMPLE	ml/ml.hpp	65;"	d
CV_COMP_BHATTACHARYYA	imgproc/types_c.h	/^    CV_COMP_BHATTACHARYYA =3,$/;"	e	enum:__anon301
CV_COMP_CHISQR	imgproc/types_c.h	/^    CV_COMP_CHISQR        =1,$/;"	e	enum:__anon301
CV_COMP_CORREL	imgproc/types_c.h	/^    CV_COMP_CORREL        =0,$/;"	e	enum:__anon301
CV_COMP_HELLINGER	imgproc/types_c.h	/^    CV_COMP_HELLINGER     =CV_COMP_BHATTACHARYYA$/;"	e	enum:__anon301
CV_COMP_INTERSECT	imgproc/types_c.h	/^    CV_COMP_INTERSECT     =2,$/;"	e	enum:__anon301
CV_CONTOURS_MATCH_I1	imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I1  =1,$/;"	e	enum:__anon299
CV_CONTOURS_MATCH_I2	imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I2  =2,$/;"	e	enum:__anon299
CV_CONTOURS_MATCH_I3	imgproc/types_c.h	/^    CV_CONTOURS_MATCH_I3  =3$/;"	e	enum:__anon299
CV_CONTOUR_FIELDS	core/types_c.h	1458;"	d
CV_CONTOUR_TREES_MATCH_I1	legacy/legacy.hpp	/^enum { CV_CONTOUR_TREES_MATCH_I1 = 1 };$/;"	e	enum:__anon8
CV_COUNT	ml/ml.hpp	1995;"	d
CV_COUNTER_CLOCKWISE	imgproc/types_c.h	/^    CV_COUNTER_CLOCKWISE =2$/;"	e	enum:__anon300
CV_COUNT_OBS	legacy/legacy.hpp	175;"	d
CV_COVAR_COLS	core/core_c.h	794;"	d
CV_COVAR_NORMAL	core/core_c.h	781;"	d
CV_COVAR_ROWS	core/core_c.h	791;"	d
CV_COVAR_SCALE	core/core_c.h	788;"	d
CV_COVAR_SCRAMBLED	core/core_c.h	778;"	d
CV_COVAR_USE_AVG	core/core_c.h	785;"	d
CV_CPU_AVX	core/core_c.h	1708;"	d
CV_CPU_MMX	core/core_c.h	1700;"	d
CV_CPU_NONE	core/core_c.h	1699;"	d
CV_CPU_POPCNT	core/core_c.h	1707;"	d
CV_CPU_SSE	core/core_c.h	1701;"	d
CV_CPU_SSE2	core/core_c.h	1702;"	d
CV_CPU_SSE3	core/core_c.h	1703;"	d
CV_CPU_SSE4_1	core/core_c.h	1705;"	d
CV_CPU_SSE4_2	core/core_c.h	1706;"	d
CV_CPU_SSSE3	core/core_c.h	1704;"	d
CV_CURRENT_INT	legacy/legacy.hpp	260;"	d
CV_CURRENT_POINT	core/types_c.h	1717;"	d
CV_CUSTOM_CARRAY	core/types_c.h	178;"	d
CV_CVTIMG_FLIP	highgui/highgui_c.h	/^    CV_CVTIMG_FLIP      =1,$/;"	e	enum:__anon36
CV_CVTIMG_SWAP_RB	highgui/highgui_c.h	/^    CV_CVTIMG_SWAP_RB   =2$/;"	e	enum:__anon36
CV_CheckGlError	core/internal.hpp	781;"	d
CV_CheckGlError	core/internal.hpp	783;"	d
CV_DBG_BREAK	core/internal.hpp	372;"	d
CV_DECL_ALIGNED	core/internal.hpp	356;"	d
CV_DEFAULT	core/types_c.h	122;"	d
CV_DEFAULT	core/types_c.h	125;"	d
CV_DEFAULT_IMAGE_ROW_ALIGN	core/internal.hpp	296;"	d
CV_DEFAULT_MAT_ROW_ALIGN	core/internal.hpp	299;"	d
CV_DEPTH_MAX	core/types_c.h	572;"	d
CV_DESCALE	core/internal.hpp	455;"	d
CV_DESCALE	gpu/device/detail/color_detail.hpp	1539;"	d
CV_DESCALE	gpu/device/detail/color_detail.hpp	55;"	d
CV_DIFF	core/core_c.h	844;"	d
CV_DIFF_C	core/core_c.h	847;"	d
CV_DIFF_L1	core/core_c.h	848;"	d
CV_DIFF_L2	core/core_c.h	849;"	d
CV_DIM	core/internal.hpp	431;"	d
CV_DISPARITY_BIRCHFIELD	legacy/legacy.hpp	448;"	d
CV_DIST_C	imgproc/types_c.h	/^    CV_DIST_C       =3,   \/* distance = max(|x1-x2|,|y1-y2|) *\/$/;"	e	enum:__anon304
CV_DIST_FAIR	imgproc/types_c.h	/^    CV_DIST_FAIR    =5,   \/* distance = c^2(|x|\/c-log(1+|x|\/c)), c = 1.3998 *\/$/;"	e	enum:__anon304
CV_DIST_HUBER	imgproc/types_c.h	/^    CV_DIST_HUBER   =7    \/* distance = |x|<c ? x^2\/2 : c(|x|-c\/2), c=1.345 *\/$/;"	e	enum:__anon304
CV_DIST_L1	imgproc/types_c.h	/^    CV_DIST_L1      =1,   \/* distance = |x1-x2| + |y1-y2| *\/$/;"	e	enum:__anon304
CV_DIST_L12	imgproc/types_c.h	/^    CV_DIST_L12     =4,   \/* L1-L2 metric: distance = 2(sqrt(1+x*x\/2) - 1)) *\/$/;"	e	enum:__anon304
CV_DIST_L2	imgproc/types_c.h	/^    CV_DIST_L2      =2,   \/* the simple euclidean distance *\/$/;"	e	enum:__anon304
CV_DIST_LABEL_CCOMP	imgproc/types_c.h	/^  CV_DIST_LABEL_CCOMP = 0,$/;"	e	enum:__anon303
CV_DIST_LABEL_PIXEL	imgproc/types_c.h	/^  CV_DIST_LABEL_PIXEL = 1$/;"	e	enum:__anon303
CV_DIST_MASK_3	imgproc/types_c.h	/^    CV_DIST_MASK_3   =3,$/;"	e	enum:__anon302
CV_DIST_MASK_5	imgproc/types_c.h	/^    CV_DIST_MASK_5   =5,$/;"	e	enum:__anon302
CV_DIST_MASK_PRECISE	imgproc/types_c.h	/^    CV_DIST_MASK_PRECISE =0$/;"	e	enum:__anon302
CV_DIST_USER	imgproc/types_c.h	/^    CV_DIST_USER    =-1,  \/* User defined distance *\/$/;"	e	enum:__anon304
CV_DIST_WELSCH	imgproc/types_c.h	/^    CV_DIST_WELSCH  =6,   \/* distance = c^2\/2(1-exp(-(x\/c)^2)), c = 2.9846 *\/$/;"	e	enum:__anon304
CV_DIV_BY_ZERO_ERR	core/internal.hpp	/^    CV_DIV_BY_ZERO_ERR          =  -11, \/\/ipp comp$/;"	e	enum:CvStatus
CV_DLL	core/internal.hpp	73;"	d
CV_DOMINANT_IPAN	legacy/legacy.hpp	290;"	d
CV_DTREE_CAT_DIR	ml/ml.hpp	655;"	d
CV_DXT_FORWARD	core/core_c.h	877;"	d
CV_DXT_INVERSE	core/core_c.h	878;"	d
CV_DXT_INVERSE_SCALE	core/core_c.h	881;"	d
CV_DXT_INV_SCALE	core/core_c.h	880;"	d
CV_DXT_MUL_CONJ	core/core_c.h	883;"	d
CV_DXT_ROWS	core/core_c.h	882;"	d
CV_DXT_SCALE	core/core_c.h	879;"	d
CV_DbgAssert	core/core.hpp	215;"	d
CV_DbgAssert	core/core.hpp	217;"	d
CV_EIGOBJ_BOTH_CALLBACK	legacy/legacy.hpp	75;"	d
CV_EIGOBJ_INPUT_CALLBACK	legacy/legacy.hpp	73;"	d
CV_EIGOBJ_NO_CALLBACK	legacy/legacy.hpp	72;"	d
CV_EIGOBJ_OUTPUT_CALLBACK	legacy/legacy.hpp	74;"	d
CV_ELEM_SIZE	core/types_c.h	726;"	d
CV_ELEM_SIZE1	core/types_c.h	722;"	d
CV_EMPTY	core/internal.hpp	426;"	d
CV_ENABLE_UNROLLED	core/types_c.h	77;"	d
CV_ENABLE_UNROLLED	core/types_c.h	79;"	d
CV_ENUM	ts/ts_perf.hpp	95;"	d
CV_EPNP	calib3d/calib3d.hpp	/^    CV_EPNP = 1, \/\/ F.Moreno-Noguer, V.Lepetit and P.Fua "EPnP: Efficient Perspective-n-Point Camera Pose Estimation"$/;"	e	enum:__anon310
CV_EQ	core/internal.hpp	405;"	d
CV_ERROR	core/core_c.h	1812;"	d
CV_ERROR_FROM_CODE	core/core_c.h	1819;"	d
CV_EVENT_FLAG_ALTKEY	highgui/highgui_c.h	/^    CV_EVENT_FLAG_ALTKEY    =32$/;"	e	enum:__anon33
CV_EVENT_FLAG_CTRLKEY	highgui/highgui_c.h	/^    CV_EVENT_FLAG_CTRLKEY   =8,$/;"	e	enum:__anon33
CV_EVENT_FLAG_LBUTTON	highgui/highgui_c.h	/^    CV_EVENT_FLAG_LBUTTON   =1,$/;"	e	enum:__anon33
CV_EVENT_FLAG_MBUTTON	highgui/highgui_c.h	/^    CV_EVENT_FLAG_MBUTTON   =4,$/;"	e	enum:__anon33
CV_EVENT_FLAG_RBUTTON	highgui/highgui_c.h	/^    CV_EVENT_FLAG_RBUTTON   =2,$/;"	e	enum:__anon33
CV_EVENT_FLAG_SHIFTKEY	highgui/highgui_c.h	/^    CV_EVENT_FLAG_SHIFTKEY  =16,$/;"	e	enum:__anon33
CV_EVENT_LBUTTONDBLCLK	highgui/highgui_c.h	/^    CV_EVENT_LBUTTONDBLCLK  =7,$/;"	e	enum:__anon32
CV_EVENT_LBUTTONDOWN	highgui/highgui_c.h	/^    CV_EVENT_LBUTTONDOWN    =1,$/;"	e	enum:__anon32
CV_EVENT_LBUTTONUP	highgui/highgui_c.h	/^    CV_EVENT_LBUTTONUP      =4,$/;"	e	enum:__anon32
CV_EVENT_MBUTTONDBLCLK	highgui/highgui_c.h	/^    CV_EVENT_MBUTTONDBLCLK  =9$/;"	e	enum:__anon32
CV_EVENT_MBUTTONDOWN	highgui/highgui_c.h	/^    CV_EVENT_MBUTTONDOWN    =3,$/;"	e	enum:__anon32
CV_EVENT_MBUTTONUP	highgui/highgui_c.h	/^    CV_EVENT_MBUTTONUP      =6,$/;"	e	enum:__anon32
CV_EVENT_MOUSEMOVE	highgui/highgui_c.h	/^    CV_EVENT_MOUSEMOVE      =0,$/;"	e	enum:__anon32
CV_EVENT_RBUTTONDBLCLK	highgui/highgui_c.h	/^    CV_EVENT_RBUTTONDBLCLK  =8,$/;"	e	enum:__anon32
CV_EVENT_RBUTTONDOWN	highgui/highgui_c.h	/^    CV_EVENT_RBUTTONDOWN    =2,$/;"	e	enum:__anon32
CV_EVENT_RBUTTONUP	highgui/highgui_c.h	/^    CV_EVENT_RBUTTONUP      =5,$/;"	e	enum:__anon32
CV_EXPORTS	core/types_c.h	148;"	d
CV_EXPORTS	core/types_c.h	150;"	d
CV_EXPORTS_AS	core/types_c.h	181;"	d
CV_EXPORTS_W	core/types_c.h	179;"	d
CV_EXPORTS_W_MAP	core/types_c.h	182;"	d
CV_EXPORTS_W_SIMPLE	core/types_c.h	180;"	d
CV_EXTERN_C	core/types_c.h	121;"	d
CV_EXTERN_C	core/types_c.h	124;"	d
CV_EXTERN_C_FUNCPTR	core/types_c.h	131;"	d
CV_EXTERN_C_FUNCPTR	core/types_c.h	133;"	d
CV_ErrModeLeaf	core/core_c.h	1730;"	d
CV_ErrModeParent	core/core_c.h	1731;"	d
CV_ErrModeSilent	core/core_c.h	1732;"	d
CV_Error	core/core.hpp	205;"	d
CV_Error	core/core.hpp	209;"	d
CV_Error_	core/core.hpp	206;"	d
CV_Error_	core/core.hpp	210;"	d
CV_FACE_ELEMENTS	legacy/legacy.hpp	/^enum CV_FACE_ELEMENTS$/;"	g
CV_FACE_LEFT_EYE	legacy/legacy.hpp	/^    CV_FACE_LEFT_EYE = 1,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_MOUTH	legacy/legacy.hpp	/^    CV_FACE_MOUTH = 0,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_RIGHT_EYE	legacy/legacy.hpp	/^    CV_FACE_RIGHT_EYE = 2$/;"	e	enum:CV_FACE_ELEMENTS
CV_FILLED	core/core_c.h	1265;"	d
CV_FIRST_VORONOIEDGE2D	legacy/legacy.hpp	972;"	d
CV_FLAGS	ts/ts_perf.hpp	129;"	d
CV_FLOODFILL_FIXED_RANGE	imgproc/types_c.h	/^    CV_FLOODFILL_FIXED_RANGE =(1 << 16),$/;"	e	enum:__anon307
CV_FLOODFILL_MASK_ONLY	imgproc/types_c.h	/^    CV_FLOODFILL_MASK_ONLY   =(1 << 17)$/;"	e	enum:__anon307
CV_FLT_TO_FIX	core/internal.hpp	456;"	d
CV_FM_7POINT	calib3d/calib3d.hpp	79;"	d
CV_FM_8POINT	calib3d/calib3d.hpp	80;"	d
CV_FM_LMEDS	calib3d/calib3d.hpp	87;"	d
CV_FM_LMEDS_ONLY	calib3d/calib3d.hpp	85;"	d
CV_FM_RANSAC	calib3d/calib3d.hpp	88;"	d
CV_FM_RANSAC_ONLY	calib3d/calib3d.hpp	86;"	d
CV_FONT_BLACK	highgui/highgui_c.h	/^        CV_FONT_BLACK           = 87 \/\/QFont::Black$/;"	e	enum:__anon28
CV_FONT_BOLD	highgui/highgui_c.h	/^        CV_FONT_BOLD            = 75,\/\/QFont::Bold,$/;"	e	enum:__anon28
CV_FONT_DEMIBOLD	highgui/highgui_c.h	/^        CV_FONT_DEMIBOLD        = 63,\/\/QFont::DemiBold,$/;"	e	enum:__anon28
CV_FONT_HERSHEY_COMPLEX	core/core_c.h	1362;"	d
CV_FONT_HERSHEY_COMPLEX_SMALL	core/core_c.h	1364;"	d
CV_FONT_HERSHEY_DUPLEX	core/core_c.h	1361;"	d
CV_FONT_HERSHEY_PLAIN	core/core_c.h	1360;"	d
CV_FONT_HERSHEY_SCRIPT_COMPLEX	core/core_c.h	1366;"	d
CV_FONT_HERSHEY_SCRIPT_SIMPLEX	core/core_c.h	1365;"	d
CV_FONT_HERSHEY_SIMPLEX	core/core_c.h	1359;"	d
CV_FONT_HERSHEY_TRIPLEX	core/core_c.h	1363;"	d
CV_FONT_ITALIC	core/core_c.h	1369;"	d
CV_FONT_LIGHT	highgui/highgui_c.h	/^enum {  CV_FONT_LIGHT           = 25,\/\/QFont::Light,$/;"	e	enum:__anon28
CV_FONT_NORMAL	highgui/highgui_c.h	/^        CV_FONT_NORMAL          = 50,\/\/QFont::Normal,$/;"	e	enum:__anon28
CV_FONT_VECTOR0	core/core_c.h	1371;"	d
CV_FOURCC	highgui/highgui_c.h	/^CV_INLINE int CV_FOURCC(char c1, char c2, char c3, char c4)$/;"	f
CV_FOURCC_DEFAULT	highgui/highgui_c.h	564;"	d
CV_FOURCC_PROMPT	highgui/highgui_c.h	563;"	d
CV_FRONT	core/core_c.h	970;"	d
CV_FUNCNAME	core/core_c.h	1800;"	d
CV_FUNCNAME	core/core_c.h	1803;"	d
CV_GAUSSIAN	imgproc/types_c.h	/^    CV_GAUSSIAN  =2,$/;"	e	enum:__anon287
CV_GAUSSIAN_5x5	imgproc/types_c.h	/^    CV_GAUSSIAN_5x5 = 7$/;"	e	enum:__anon288
CV_GE	core/internal.hpp	408;"	d
CV_GEMM_A_T	core/core_c.h	682;"	d
CV_GEMM_B_T	core/core_c.h	683;"	d
CV_GEMM_C_T	core/core_c.h	684;"	d
CV_GET_CURRENT	legacy/compat.hpp	399;"	d
CV_GET_SEQ_ELEM	core/types_c.h	1643;"	d
CV_GLCMDESC_CLUSTERSHADE	legacy/legacy.hpp	821;"	d
CV_GLCMDESC_CLUSTERTENDENCY	legacy/legacy.hpp	820;"	d
CV_GLCMDESC_CONTRAST	legacy/legacy.hpp	819;"	d
CV_GLCMDESC_CORRELATION	legacy/legacy.hpp	822;"	d
CV_GLCMDESC_CORRELATIONINFO1	legacy/legacy.hpp	823;"	d
CV_GLCMDESC_CORRELATIONINFO2	legacy/legacy.hpp	824;"	d
CV_GLCMDESC_ENERGY	legacy/legacy.hpp	817;"	d
CV_GLCMDESC_ENTROPY	legacy/legacy.hpp	816;"	d
CV_GLCMDESC_HOMOGENITY	legacy/legacy.hpp	818;"	d
CV_GLCMDESC_MAXIMUMPROBABILITY	legacy/legacy.hpp	825;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWDOUBLENEST	legacy/legacy.hpp	812;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWTRIPLENEST	legacy/legacy.hpp	813;"	d
CV_GLCMDESC_OPTIMIZATION_HISTOGRAM	legacy/legacy.hpp	814;"	d
CV_GLCM_ALL	legacy/legacy.hpp	827;"	d
CV_GLCM_DESC	legacy/legacy.hpp	829;"	d
CV_GLCM_GLCM	legacy/legacy.hpp	828;"	d
CV_GLCM_OPTIMIZATION_HISTOGRAM	legacy/legacy.hpp	810;"	d
CV_GLCM_OPTIMIZATION_LUT	legacy/legacy.hpp	809;"	d
CV_GLCM_OPTIMIZATION_NONE	legacy/legacy.hpp	808;"	d
CV_GRAPH	core/types_c.h	1523;"	d
CV_GRAPH_ALL_ITEMS	core/core_c.h	1212;"	d
CV_GRAPH_ANY_EDGE	core/core_c.h	1207;"	d
CV_GRAPH_BACKTRACKING	core/core_c.h	1209;"	d
CV_GRAPH_BACK_EDGE	core/core_c.h	1204;"	d
CV_GRAPH_CROSS_EDGE	core/core_c.h	1206;"	d
CV_GRAPH_EDGE_FIELDS	core/types_c.h	1402;"	d
CV_GRAPH_FIELDS	core/types_c.h	1437;"	d
CV_GRAPH_FLAG_ORIENTED	core/types_c.h	1521;"	d
CV_GRAPH_FORWARD_EDGE	core/core_c.h	1205;"	d
CV_GRAPH_FORWARD_EDGE_FLAG	core/core_c.h	1221;"	d
CV_GRAPH_ITEM_VISITED_FLAG	core/core_c.h	1215;"	d
CV_GRAPH_NEW_TREE	core/core_c.h	1208;"	d
CV_GRAPH_OVER	core/core_c.h	1210;"	d
CV_GRAPH_SEARCH_TREE_NODE_FLAG	core/core_c.h	1220;"	d
CV_GRAPH_TREE_EDGE	core/core_c.h	1203;"	d
CV_GRAPH_VERTEX	core/core_c.h	1202;"	d
CV_GRAPH_VERTEX_FIELDS	core/types_c.h	1409;"	d
CV_GRAPH_WEIGHTED_EDGE_FIELDS	legacy/legacy.hpp	266;"	d
CV_GRAPH_WEIGHTED_VERTEX_FIELDS	legacy/legacy.hpp	263;"	d
CV_GRAY2BGR	imgproc/types_c.h	/^    CV_GRAY2BGR    =8,$/;"	e	enum:__anon290
CV_GRAY2BGR555	imgproc/types_c.h	/^    CV_GRAY2BGR555 =30,$/;"	e	enum:__anon290
CV_GRAY2BGR565	imgproc/types_c.h	/^    CV_GRAY2BGR565 =20,$/;"	e	enum:__anon290
CV_GRAY2BGRA	imgproc/types_c.h	/^    CV_GRAY2BGRA   =9,$/;"	e	enum:__anon290
CV_GRAY2RGB	imgproc/types_c.h	/^    CV_GRAY2RGB    =CV_GRAY2BGR,$/;"	e	enum:__anon290
CV_GRAY2RGBA	imgproc/types_c.h	/^    CV_GRAY2RGBA   =CV_GRAY2BGRA,$/;"	e	enum:__anon290
CV_GT	core/internal.hpp	407;"	d
CV_GUI_EXPANDED	highgui/highgui_c.h	/^    CV_GUI_EXPANDED         = 0x00000000, \/\/status bar and tool bar$/;"	e	enum:__anon31
CV_GUI_NORMAL	highgui/highgui_c.h	/^    CV_GUI_NORMAL           = 0x00000010, \/\/old fashious way$/;"	e	enum:__anon31
CV_GpuApiCallError	core/types_c.h	/^ CV_GpuApiCallError=           -217,$/;"	e	enum:__anon220
CV_GpuNotSupported	core/types_c.h	/^ CV_GpuNotSupported=           -216,$/;"	e	enum:__anon220
CV_HAAR_DO_CANNY_PRUNING	objdetect/objdetect.hpp	125;"	d
CV_HAAR_DO_ROUGH_SEARCH	objdetect/objdetect.hpp	128;"	d
CV_HAAR_FEATURE_MAX	objdetect/objdetect.hpp	66;"	d
CV_HAAR_FIND_BIGGEST_OBJECT	objdetect/objdetect.hpp	127;"	d
CV_HAAR_MAGIC_VAL	objdetect/objdetect.hpp	59;"	d
CV_HAAR_SCALE_IMAGE	objdetect/objdetect.hpp	126;"	d
CV_HARDWARE_MAX_FEATURE	core/core_c.h	1709;"	d
CV_HAVE_ALLOCA	core/internal.hpp	340;"	d
CV_HIST_ARRAY	core/types_c.h	918;"	d
CV_HIST_HAS_RANGES	core/types_c.h	947;"	d
CV_HIST_MAGIC_VAL	core/types_c.h	912;"	d
CV_HIST_RANGES_FLAG	core/types_c.h	916;"	d
CV_HIST_SPARSE	core/types_c.h	919;"	d
CV_HIST_TREE	core/types_c.h	920;"	d
CV_HIST_UNIFORM	core/types_c.h	924;"	d
CV_HIST_UNIFORM_FLAG	core/types_c.h	913;"	d
CV_HLS2BGR	imgproc/types_c.h	/^    CV_HLS2BGR     =60,$/;"	e	enum:__anon290
CV_HLS2BGR_FULL	imgproc/types_c.h	/^    CV_HLS2BGR_FULL = 72,$/;"	e	enum:__anon290
CV_HLS2RGB	imgproc/types_c.h	/^    CV_HLS2RGB     =61,$/;"	e	enum:__anon290
CV_HLS2RGB_FULL	imgproc/types_c.h	/^    CV_HLS2RGB_FULL = 73,$/;"	e	enum:__anon290
CV_HOUGH_GRADIENT	imgproc/types_c.h	/^    CV_HOUGH_GRADIENT =3$/;"	e	enum:__anon309
CV_HOUGH_MULTI_SCALE	imgproc/types_c.h	/^    CV_HOUGH_MULTI_SCALE =2,$/;"	e	enum:__anon309
CV_HOUGH_PROBABILISTIC	imgproc/types_c.h	/^    CV_HOUGH_PROBABILISTIC =1,$/;"	e	enum:__anon309
CV_HOUGH_STANDARD	imgproc/types_c.h	/^    CV_HOUGH_STANDARD =0,$/;"	e	enum:__anon309
CV_HSV2BGR	imgproc/types_c.h	/^    CV_HSV2BGR     =54,$/;"	e	enum:__anon290
CV_HSV2BGR_FULL	imgproc/types_c.h	/^    CV_HSV2BGR_FULL = 70,$/;"	e	enum:__anon290
CV_HSV2RGB	imgproc/types_c.h	/^    CV_HSV2RGB     =55,$/;"	e	enum:__anon290
CV_HSV2RGB_FULL	imgproc/types_c.h	/^    CV_HSV2RGB_FULL = 71,$/;"	e	enum:__anon290
CV_HeaderIsNull	core/types_c.h	/^ CV_HeaderIsNull=               -9,  \/* image header is NULL            *\/$/;"	e	enum:__anon220
CV_IABS	core/types_c.h	298;"	d
CV_IABS	core/types_c.h	300;"	d
CV_ICC	core/types_c.h	65;"	d
CV_ICC	core/types_c.h	67;"	d
CV_ICC	core/types_c.h	69;"	d
CV_ICC	core/types_c.h	71;"	d
CV_ICC	core/types_c.h	73;"	d
CV_IDP_BIRCHFIELD_PARAM1	legacy/legacy.hpp	441;"	d
CV_IDP_BIRCHFIELD_PARAM2	legacy/legacy.hpp	442;"	d
CV_IDP_BIRCHFIELD_PARAM3	legacy/legacy.hpp	443;"	d
CV_IDP_BIRCHFIELD_PARAM4	legacy/legacy.hpp	444;"	d
CV_IDP_BIRCHFIELD_PARAM5	legacy/legacy.hpp	445;"	d
CV_IMAGE_ELEM	core/types_c.h	563;"	d
CV_IMAX	core/types_c.h	294;"	d
CV_IMIN	core/types_c.h	292;"	d
CV_IMPL	core/internal.hpp	369;"	d
CV_IMPLEMENT_QSORT	core/internal.hpp	684;"	d
CV_IMPLEMENT_QSORT_EX	core/internal.hpp	520;"	d
CV_IMWRITE_JPEG_QUALITY	highgui/highgui_c.h	/^    CV_IMWRITE_JPEG_QUALITY =1,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_BILEVEL	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_BILEVEL =18,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_COMPRESSION	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_COMPRESSION =16,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_STRATEGY	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY =17,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_STRATEGY_DEFAULT	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_DEFAULT =0,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_STRATEGY_FILTERED	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_FILTERED =1,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_STRATEGY_FIXED	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_FIXED =4,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY =2,$/;"	e	enum:__anon35
CV_IMWRITE_PNG_STRATEGY_RLE	highgui/highgui_c.h	/^    CV_IMWRITE_PNG_STRATEGY_RLE =3,$/;"	e	enum:__anon35
CV_IMWRITE_PXM_BINARY	highgui/highgui_c.h	/^    CV_IMWRITE_PXM_BINARY =32$/;"	e	enum:__anon35
CV_INIT_3X3_DELTAS	imgproc/types_c.h	422;"	d
CV_INIT_ALGORITHM	core/internal.hpp	256;"	d
CV_INIT_FUNC_TAB	core/internal.hpp	744;"	d
CV_INIT_PIXEL_POS	legacy/compat.hpp	373;"	d
CV_INLINE	core/types_c.h	139;"	d
CV_INLINE	core/types_c.h	141;"	d
CV_INLINE	core/types_c.h	143;"	d
CV_INPAINT_NS	photo/photo_c.h	/^    CV_INPAINT_NS      =0,$/;"	e	enum:__anon189
CV_INPAINT_TELEA	photo/photo_c.h	/^    CV_INPAINT_TELEA   =1$/;"	e	enum:__anon189
CV_INPLACE_NOT_SUPPORTED_ERR	core/internal.hpp	/^    CV_INPLACE_NOT_SUPPORTED_ERR= -112,$/;"	e	enum:CvStatus
CV_INTER_AREA	imgproc/types_c.h	/^    CV_INTER_AREA      =3,$/;"	e	enum:__anon291
CV_INTER_CUBIC	imgproc/types_c.h	/^    CV_INTER_CUBIC     =2,$/;"	e	enum:__anon291
CV_INTER_LANCZOS4	imgproc/types_c.h	/^    CV_INTER_LANCZOS4  =4$/;"	e	enum:__anon291
CV_INTER_LINEAR	imgproc/types_c.h	/^    CV_INTER_LINEAR    =1,$/;"	e	enum:__anon291
CV_INTER_NN	imgproc/types_c.h	/^    CV_INTER_NN        =0,$/;"	e	enum:__anon291
CV_IN_OUT	core/types_c.h	183;"	d
CV_IS_CONT_MAT	core/types_c.h	641;"	d
CV_IS_GRAPH	core/types_c.h	1586;"	d
CV_IS_GRAPH_EDGE_VISITED	core/core_c.h	1218;"	d
CV_IS_GRAPH_ORIENTED	core/types_c.h	1589;"	d
CV_IS_GRAPH_VERTEX_VISITED	core/core_c.h	1216;"	d
CV_IS_HAAR_CLASSIFIER	objdetect/objdetect.hpp	62;"	d
CV_IS_HIST	core/types_c.h	936;"	d
CV_IS_IMAGE	core/types_c.h	554;"	d
CV_IS_IMAGE_HDR	core/types_c.h	551;"	d
CV_IS_MASK_ARR	core/types_c.h	702;"	d
CV_IS_MAT	core/types_c.h	699;"	d
CV_IS_MATND	core/types_c.h	850;"	d
CV_IS_MATND_HDR	core/types_c.h	847;"	d
CV_IS_MAT_CONST	core/types_c.h	717;"	d
CV_IS_MAT_CONT	core/types_c.h	640;"	d
CV_IS_MAT_HDR	core/types_c.h	689;"	d
CV_IS_MAT_HDR_Z	core/types_c.h	694;"	d
CV_IS_ROW_SAMPLE	ml/ml.hpp	70;"	d
CV_IS_SEQ	core/types_c.h	1478;"	d
CV_IS_SEQ_CHAIN	core/types_c.h	1573;"	d
CV_IS_SEQ_CHAIN_CONTOUR	core/types_c.h	1579;"	d
CV_IS_SEQ_CLOSED	core/types_c.h	1555;"	d
CV_IS_SEQ_CONTOUR	core/types_c.h	1576;"	d
CV_IS_SEQ_CONVEX	core/types_c.h	1556;"	d
CV_IS_SEQ_CURVE	core/types_c.h	1554;"	d
CV_IS_SEQ_HOLE	core/types_c.h	1557;"	d
CV_IS_SEQ_INDEX	core/types_c.h	1551;"	d
CV_IS_SEQ_POINT_SET	core/types_c.h	1561;"	d
CV_IS_SEQ_POINT_SUBSET	core/types_c.h	1564;"	d
CV_IS_SEQ_POLYGON	core/types_c.h	1570;"	d
CV_IS_SEQ_POLYGON_TREE	core/types_c.h	1582;"	d
CV_IS_SEQ_POLYLINE	core/types_c.h	1567;"	d
CV_IS_SEQ_SIMPLE	core/types_c.h	1558;"	d
CV_IS_SET	core/types_c.h	1482;"	d
CV_IS_SET_ELEM	core/types_c.h	1380;"	d
CV_IS_SET_ELEM_EXISTS	legacy/compat.hpp	271;"	d
CV_IS_SPARSE_HIST	core/types_c.h	944;"	d
CV_IS_SPARSE_MAT	core/types_c.h	883;"	d
CV_IS_SPARSE_MAT_HDR	core/types_c.h	879;"	d
CV_IS_STORAGE	core/types_c.h	1288;"	d
CV_IS_SUBDIV2D	core/types_c.h	1592;"	d
CV_IS_SUBMAT	core/types_c.h	644;"	d
CV_IS_UNIFORM_HIST	core/types_c.h	941;"	d
CV_ITERATIVE	calib3d/calib3d.hpp	/^    CV_ITERATIVE = 0,$/;"	e	enum:__anon310
CV_KMEANS_USE_INITIAL_LABELS	core/core_c.h	1471;"	d
CV_L1	core/core_c.h	840;"	d
CV_L2	core/core_c.h	841;"	d
CV_LAST_VORONOIEDGE2D	legacy/legacy.hpp	973;"	d
CV_LBGR2Lab	imgproc/types_c.h	/^    CV_LBGR2Lab     = 74,$/;"	e	enum:__anon290
CV_LBGR2Luv	imgproc/types_c.h	/^    CV_LBGR2Luv     = 76,$/;"	e	enum:__anon290
CV_LE	core/internal.hpp	404;"	d
CV_LEE_AUTO	legacy/legacy.hpp	/^    CV_LEE_AUTO = -1,$/;"	e	enum:CvLeeParameters
CV_LEE_DOUBLE	legacy/legacy.hpp	/^    CV_LEE_DOUBLE = 2,$/;"	e	enum:CvLeeParameters
CV_LEE_ERODE	legacy/legacy.hpp	/^    CV_LEE_ERODE = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_FLOAT	legacy/legacy.hpp	/^    CV_LEE_FLOAT = 1,$/;"	e	enum:CvLeeParameters
CV_LEE_INT	legacy/legacy.hpp	/^    CV_LEE_INT = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_NON	legacy/legacy.hpp	/^    CV_LEE_NON = 2$/;"	e	enum:CvLeeParameters
CV_LEE_ZOOM	legacy/legacy.hpp	/^    CV_LEE_ZOOM = 1,$/;"	e	enum:CvLeeParameters
CV_LINK_RUNS	imgproc/types_c.h	/^    CV_LINK_RUNS=5$/;"	e	enum:__anon297
CV_LKFLOW_GET_MIN_EIGENVALS	video/tracking.hpp	66;"	d
CV_LKFLOW_INITIAL_GUESSES	video/tracking.hpp	65;"	d
CV_LKFLOW_PYR_A_READY	video/tracking.hpp	63;"	d
CV_LKFLOW_PYR_B_READY	video/tracking.hpp	64;"	d
CV_LMEDS	calib3d/calib3d.hpp	82;"	d
CV_LOAD_IMAGE_ANYCOLOR	highgui/highgui_c.h	/^    CV_LOAD_IMAGE_ANYCOLOR   =4$/;"	e	enum:__anon34
CV_LOAD_IMAGE_ANYDEPTH	highgui/highgui_c.h	/^    CV_LOAD_IMAGE_ANYDEPTH   =2,$/;"	e	enum:__anon34
CV_LOAD_IMAGE_COLOR	highgui/highgui_c.h	/^    CV_LOAD_IMAGE_COLOR      =1,$/;"	e	enum:__anon34
CV_LOAD_IMAGE_GRAYSCALE	highgui/highgui_c.h	/^    CV_LOAD_IMAGE_GRAYSCALE  =0,$/;"	e	enum:__anon34
CV_LOAD_IMAGE_UNCHANGED	highgui/highgui_c.h	/^    CV_LOAD_IMAGE_UNCHANGED  =-1,$/;"	e	enum:__anon34
CV_LOG2	core/types_c.h	279;"	d
CV_LOG2PI	ml/ml.hpp	62;"	d
CV_LRGB2Lab	imgproc/types_c.h	/^    CV_LRGB2Lab     = 75,$/;"	e	enum:__anon290
CV_LRGB2Luv	imgproc/types_c.h	/^    CV_LRGB2Luv     = 77,$/;"	e	enum:__anon290
CV_LT	core/internal.hpp	403;"	d
CV_LU	core/core_c.h	737;"	d
CV_Lab2BGR	imgproc/types_c.h	/^    CV_Lab2BGR     =56,$/;"	e	enum:__anon290
CV_Lab2LBGR	imgproc/types_c.h	/^    CV_Lab2LBGR     = 78,$/;"	e	enum:__anon290
CV_Lab2LRGB	imgproc/types_c.h	/^    CV_Lab2LRGB     = 79,$/;"	e	enum:__anon290
CV_Lab2RGB	imgproc/types_c.h	/^    CV_Lab2RGB     =57,$/;"	e	enum:__anon290
CV_Luv2BGR	imgproc/types_c.h	/^    CV_Luv2BGR     =58,$/;"	e	enum:__anon290
CV_Luv2LBGR	imgproc/types_c.h	/^    CV_Luv2LBGR     = 80,$/;"	e	enum:__anon290
CV_Luv2LRGB	imgproc/types_c.h	/^    CV_Luv2LRGB     = 81,$/;"	e	enum:__anon290
CV_Luv2RGB	imgproc/types_c.h	/^    CV_Luv2RGB     =59,$/;"	e	enum:__anon290
CV_MAGIC_MASK	core/types_c.h	646;"	d
CV_MAJOR_VERSION	core/version.hpp	50;"	d
CV_MAKETYPE	core/types_c.h	586;"	d
CV_MAKE_STR	core/internal.hpp	427;"	d
CV_MAKE_TYPE	core/types_c.h	587;"	d
CV_MALLOC_ALIGN	core/internal.hpp	306;"	d
CV_MAT32F	legacy/compat.hpp	/^    CV_MAT32F      = CV_32FC1,$/;"	e	enum:__anon1
CV_MAT3x1_32F	legacy/compat.hpp	/^    CV_MAT3x1_32F  = CV_32FC1,$/;"	e	enum:__anon1
CV_MAT3x1_64D	legacy/compat.hpp	/^    CV_MAT3x1_64D  = CV_64FC1,$/;"	e	enum:__anon1
CV_MAT3x3_32F	legacy/compat.hpp	/^    CV_MAT3x3_32F  = CV_32FC1,$/;"	e	enum:__anon1
CV_MAT3x3_64D	legacy/compat.hpp	/^    CV_MAT3x3_64D  = CV_64FC1,$/;"	e	enum:__anon1
CV_MAT4x1_32F	legacy/compat.hpp	/^    CV_MAT4x1_32F  = CV_32FC1,$/;"	e	enum:__anon1
CV_MAT4x1_64D	legacy/compat.hpp	/^    CV_MAT4x1_64D  = CV_64FC1,$/;"	e	enum:__anon1
CV_MAT4x4_32F	legacy/compat.hpp	/^    CV_MAT4x4_32F  = CV_32FC1,$/;"	e	enum:__anon1
CV_MAT4x4_64D	legacy/compat.hpp	/^    CV_MAT4x4_64D  = CV_64FC1$/;"	e	enum:__anon1
CV_MAT64D	legacy/compat.hpp	/^    CV_MAT64D      = CV_64FC1,$/;"	e	enum:__anon1
CV_MATND_MAGIC_VAL	core/types_c.h	815;"	d
CV_MAT_CN	core/types_c.h	635;"	d
CV_MAT_CN_MASK	core/types_c.h	634;"	d
CV_MAT_CONT_FLAG	core/types_c.h	639;"	d
CV_MAT_CONT_FLAG_SHIFT	core/types_c.h	638;"	d
CV_MAT_DEPTH	core/types_c.h	584;"	d
CV_MAT_DEPTH_MASK	core/types_c.h	583;"	d
CV_MAT_ELEM	core/types_c.h	764;"	d
CV_MAT_ELEM_PTR	core/types_c.h	761;"	d
CV_MAT_ELEM_PTR_FAST	core/types_c.h	756;"	d
CV_MAT_MAGIC_VAL	core/types_c.h	647;"	d
CV_MAT_TYPE	core/types_c.h	637;"	d
CV_MAT_TYPE_MASK	core/types_c.h	636;"	d
CV_MAX_ALLOC_SIZE	core/internal.hpp	303;"	d
CV_MAX_ARR	core/core_c.h	267;"	d
CV_MAX_DIM	core/types_c.h	818;"	d
CV_MAX_DIM_HEAP	core/types_c.h	819;"	d
CV_MAX_INLINE_MAT_OP_SIZE	core/internal.hpp	286;"	d
CV_MAX_LOCAL_MAT_SIZE	core/internal.hpp	289;"	d
CV_MAX_LOCAL_SIZE	core/internal.hpp	292;"	d
CV_MAX_SOBEL_KSIZE	imgproc/types_c.h	/^    CV_MAX_SOBEL_KSIZE =7$/;"	e	enum:__anon289
CV_MAX_STRLEN	core/internal.hpp	324;"	d
CV_MEDIAN	imgproc/types_c.h	/^    CV_MEDIAN =3,$/;"	e	enum:__anon287
CV_MINMAX	core/core_c.h	845;"	d
CV_MINOR_VERSION	core/version.hpp	51;"	d
CV_MOP_BLACKHAT	imgproc/types_c.h	/^    CV_MOP_BLACKHAT     =6$/;"	e	enum:__anon294
CV_MOP_CLOSE	imgproc/types_c.h	/^    CV_MOP_CLOSE        =3,$/;"	e	enum:__anon294
CV_MOP_DILATE	imgproc/types_c.h	/^    CV_MOP_DILATE       =1,$/;"	e	enum:__anon294
CV_MOP_ERODE	imgproc/types_c.h	/^    CV_MOP_ERODE        =0,$/;"	e	enum:__anon294
CV_MOP_GRADIENT	imgproc/types_c.h	/^    CV_MOP_GRADIENT     =4,$/;"	e	enum:__anon294
CV_MOP_OPEN	imgproc/types_c.h	/^    CV_MOP_OPEN         =2,$/;"	e	enum:__anon294
CV_MOP_TOPHAT	imgproc/types_c.h	/^    CV_MOP_TOPHAT       =5,$/;"	e	enum:__anon294
CV_MOVE_DOWN	legacy/compat.hpp	418;"	d
CV_MOVE_DOWN_WRAP	legacy/compat.hpp	454;"	d
CV_MOVE_LD	legacy/compat.hpp	428;"	d
CV_MOVE_LD_WRAP	legacy/compat.hpp	463;"	d
CV_MOVE_LEFT	legacy/compat.hpp	406;"	d
CV_MOVE_LEFT_WRAP	legacy/compat.hpp	441;"	d
CV_MOVE_LU	legacy/compat.hpp	422;"	d
CV_MOVE_LU_WRAP	legacy/compat.hpp	459;"	d
CV_MOVE_PARAM	legacy/compat.hpp	485;"	d
CV_MOVE_PARAM_WRAP	legacy/compat.hpp	495;"	d
CV_MOVE_RD	legacy/compat.hpp	431;"	d
CV_MOVE_RD_WRAP	legacy/compat.hpp	465;"	d
CV_MOVE_RIGHT	legacy/compat.hpp	410;"	d
CV_MOVE_RIGHT_WRAP	legacy/compat.hpp	445;"	d
CV_MOVE_RU	legacy/compat.hpp	425;"	d
CV_MOVE_RU_WRAP	legacy/compat.hpp	461;"	d
CV_MOVE_TO	legacy/compat.hpp	391;"	d
CV_MOVE_UP	legacy/compat.hpp	414;"	d
CV_MOVE_UP_WRAP	legacy/compat.hpp	449;"	d
CV_MUL	core/internal.hpp	395;"	d
CV_MaskIsTiled	core/types_c.h	/^ CV_MaskIsTiled=               -26, \/**\/$/;"	e	enum:__anon220
CV_NE	core/internal.hpp	406;"	d
CV_NEG_INF	core/internal.hpp	386;"	d
CV_NEON	core/internal.hpp	138;"	d
CV_NEON	core/internal.hpp	164;"	d
CV_NEXT_AROUND_DST	imgproc/types_c.h	/^    CV_NEXT_AROUND_DST   = 0x22,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_LEFT	imgproc/types_c.h	/^    CV_NEXT_AROUND_LEFT  = 0x13,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_ORG	imgproc/types_c.h	/^    CV_NEXT_AROUND_ORG   = 0x00,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_RIGHT	imgproc/types_c.h	/^    CV_NEXT_AROUND_RIGHT = 0x31,$/;"	e	enum:CvNextEdgeType
CV_NEXT_GRAPH_EDGE	core/types_c.h	1734;"	d
CV_NEXT_LINE_POINT	core/core_c.h	1348;"	d
CV_NEXT_SEQ_ELEM	core/types_c.h	1670;"	d
CV_NEXT_VORONOIEDGE2D	legacy/legacy.hpp	974;"	d
CV_NEXT_VORONOISITE2D	legacy/legacy.hpp	970;"	d
CV_NODE_EMPTY	core/types_c.h	1796;"	d
CV_NODE_FLOAT	core/types_c.h	1783;"	d
CV_NODE_FLOW	core/types_c.h	1794;"	d
CV_NODE_HAS_NAME	core/types_c.h	1808;"	d
CV_NODE_IDX	core/types_c.h	904;"	d
CV_NODE_INT	core/types_c.h	1780;"	d
CV_NODE_INTEGER	core/types_c.h	1781;"	d
CV_NODE_IS_COLLECTION	core/types_c.h	1804;"	d
CV_NODE_IS_EMPTY	core/types_c.h	1806;"	d
CV_NODE_IS_FLOW	core/types_c.h	1805;"	d
CV_NODE_IS_INT	core/types_c.h	1799;"	d
CV_NODE_IS_MAP	core/types_c.h	1803;"	d
CV_NODE_IS_REAL	core/types_c.h	1800;"	d
CV_NODE_IS_SEQ	core/types_c.h	1802;"	d
CV_NODE_IS_STRING	core/types_c.h	1801;"	d
CV_NODE_IS_USER	core/types_c.h	1807;"	d
CV_NODE_MAP	core/types_c.h	1788;"	d
CV_NODE_NAMED	core/types_c.h	1797;"	d
CV_NODE_NONE	core/types_c.h	1779;"	d
CV_NODE_REAL	core/types_c.h	1782;"	d
CV_NODE_REF	core/types_c.h	1786;"	d
CV_NODE_SEQ	core/types_c.h	1787;"	d
CV_NODE_SEQ_IS_SIMPLE	core/types_c.h	1811;"	d
CV_NODE_SEQ_SIMPLE	core/types_c.h	1810;"	d
CV_NODE_STR	core/types_c.h	1784;"	d
CV_NODE_STRING	core/types_c.h	1785;"	d
CV_NODE_TYPE	core/types_c.h	1791;"	d
CV_NODE_TYPE_MASK	core/types_c.h	1789;"	d
CV_NODE_USER	core/types_c.h	1795;"	d
CV_NODE_VAL	core/types_c.h	903;"	d
CV_NOISE_GAUSSIAN	legacy/blobtrack.hpp	887;"	d
CV_NOISE_NONE	legacy/blobtrack.hpp	886;"	d
CV_NOISE_SALT_AND_PEPPER	legacy/blobtrack.hpp	890;"	d
CV_NOISE_SPECKLE	legacy/blobtrack.hpp	889;"	d
CV_NOISE_UNIFORM	legacy/blobtrack.hpp	888;"	d
CV_NONZERO	core/internal.hpp	410;"	d
CV_NONZERO_FLT	core/internal.hpp	411;"	d
CV_NOP	core/internal.hpp	392;"	d
CV_NORMAL	core/core_c.h	742;"	d
CV_NORM_MASK	core/core_c.h	842;"	d
CV_NOTDEFINED_ERR	core/internal.hpp	/^    CV_NOTDEFINED_ERR           = -48,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_NOTFOUND_ERR	core/internal.hpp	/^    CV_NOTFOUND_ERR             = -110,$/;"	e	enum:CvStatus
CV_NOTHROW	core/internal.hpp	731;"	d
CV_NOT_WEIGHTED	legacy/legacy.hpp	/^    CV_NOT_WEIGHTED,$/;"	e	enum:CvGraphWeightType
CV_NO_CN_CHECK	core/core_c.h	282;"	d
CV_NO_DEPTH_CHECK	core/core_c.h	281;"	d
CV_NO_ERR	core/internal.hpp	/^    CV_NO_ERR                   =   0,$/;"	e	enum:CvStatus
CV_NO_SIZE_CHECK	core/core_c.h	283;"	d
CV_NULLPTR_ERR	core/internal.hpp	/^    CV_NULLPTR_ERR              =  -2,$/;"	e	enum:CvStatus
CV_NUM_FACE_ELEMENTS	legacy/legacy.hpp	859;"	d
CV_OK	core/internal.hpp	/^    CV_OK                       =   CV_NO_ERR$/;"	e	enum:CvStatus
CV_OR	core/internal.hpp	397;"	d
CV_ORIENTED_GRAPH	core/types_c.h	1524;"	d
CV_ORIGIN_BL	core/internal.hpp	382;"	d
CV_ORIGIN_TL	core/internal.hpp	381;"	d
CV_ORN	core/internal.hpp	400;"	d
CV_OUT	core/types_c.h	184;"	d
CV_OUTOFMEM_ERR	core/internal.hpp	/^    CV_OUTOFMEM_ERR             =  -3,$/;"	e	enum:CvStatus
CV_OpenGlApiCallError	core/types_c.h	/^ CV_OpenGlApiCallError=        -219$/;"	e	enum:__anon220
CV_OpenGlNotSupported	core/types_c.h	/^ CV_OpenGlNotSupported=        -218,$/;"	e	enum:__anon220
CV_P3P	calib3d/calib3d.hpp	/^    CV_P3P = 2 \/\/ X.S. Gao, X.-R. Hou, J. Tang, H.-F. Chang; "Complete Solution Classification for the Perspective-Three-Point Problem"$/;"	e	enum:__anon310
CV_PASTE	core/internal.hpp	424;"	d
CV_PASTE2	core/internal.hpp	423;"	d
CV_PCA_DATA_AS_COL	core/core_c.h	800;"	d
CV_PCA_DATA_AS_ROW	core/core_c.h	799;"	d
CV_PCA_USE_AVG	core/core_c.h	801;"	d
CV_PERF_TEST_MAIN	ts/ts_perf.hpp	478;"	d
CV_PI	core/types_c.h	278;"	d
CV_PI	gpu/device/common.hpp	50;"	d
CV_PI_F	gpu/device/common.hpp	55;"	d
CV_PI_F	gpu/device/common.hpp	57;"	d
CV_POLY_APPROX_DP	imgproc/types_c.h	/^    CV_POLY_APPROX_DP = 0$/;"	e	enum:__anon298
CV_PORTION	ml/ml.hpp	1996;"	d
CV_POS_INF	core/internal.hpp	385;"	d
CV_PREV_AROUND_DST	imgproc/types_c.h	/^    CV_PREV_AROUND_DST   = 0x33,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_LEFT	imgproc/types_c.h	/^    CV_PREV_AROUND_LEFT  = 0x20,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_ORG	imgproc/types_c.h	/^    CV_PREV_AROUND_ORG   = 0x11,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_RIGHT	imgproc/types_c.h	/^    CV_PREV_AROUND_RIGHT = 0x02$/;"	e	enum:CvNextEdgeType
CV_PREV_INT	legacy/legacy.hpp	261;"	d
CV_PREV_POINT	core/types_c.h	1718;"	d
CV_PREV_SEQ_ELEM	core/types_c.h	1680;"	d
CV_PREV_VORONOIEDGE2D	legacy/legacy.hpp	975;"	d
CV_PREV_VORONOISITE2D	legacy/legacy.hpp	971;"	d
CV_PROP	core/types_c.h	185;"	d
CV_PROP_RW	core/types_c.h	186;"	d
CV_PTLOC_ERROR	imgproc/types_c.h	/^    CV_PTLOC_ERROR = -2,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_INSIDE	imgproc/types_c.h	/^    CV_PTLOC_INSIDE = 0,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_ON_EDGE	imgproc/types_c.h	/^    CV_PTLOC_ON_EDGE = 2$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_OUTSIDE_RECT	imgproc/types_c.h	/^    CV_PTLOC_OUTSIDE_RECT = -1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_VERTEX	imgproc/types_c.h	/^    CV_PTLOC_VERTEX = 1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PUSH_BUTTON	highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon30
CV_QR	core/core_c.h	741;"	d
CV_QUADEDGE2D_FIELDS	imgproc/types_c.h	435;"	d
CV_RADIOBOX	highgui/highgui_c.h	/^enum {CV_PUSH_BUTTON = 0, CV_CHECKBOX = 1, CV_RADIOBOX = 2};$/;"	e	enum:__anon30
CV_RAND_NORMAL	core/core_c.h	648;"	d
CV_RAND_UNI	core/core_c.h	647;"	d
CV_RANSAC	calib3d/calib3d.hpp	83;"	d
CV_READ_CHAIN_POINT	core/types_c.h	1705;"	d
CV_READ_EDGE	core/types_c.h	1720;"	d
CV_READ_SEQ_ELEM	core/types_c.h	1689;"	d
CV_REDUCE_AVG	core/core_c.h	866;"	d
CV_REDUCE_MAX	core/core_c.h	867;"	d
CV_REDUCE_MIN	core/core_c.h	868;"	d
CV_REDUCE_SUM	core/core_c.h	865;"	d
CV_RELATIVE	core/core_c.h	843;"	d
CV_RELATIVE_C	core/core_c.h	850;"	d
CV_RELATIVE_L1	core/core_c.h	851;"	d
CV_RELATIVE_L2	core/core_c.h	852;"	d
CV_RETR_CCOMP	imgproc/types_c.h	/^    CV_RETR_CCOMP=2,$/;"	e	enum:__anon296
CV_RETR_EXTERNAL	imgproc/types_c.h	/^    CV_RETR_EXTERNAL=0,$/;"	e	enum:__anon296
CV_RETR_FLOODFILL	imgproc/types_c.h	/^    CV_RETR_FLOODFILL=4$/;"	e	enum:__anon296
CV_RETR_LIST	imgproc/types_c.h	/^    CV_RETR_LIST=1,$/;"	e	enum:__anon296
CV_RETR_TREE	imgproc/types_c.h	/^    CV_RETR_TREE=3,$/;"	e	enum:__anon296
CV_REV_READ_SEQ_ELEM	core/types_c.h	1697;"	d
CV_RGB	core/core_c.h	1264;"	d
CV_RGB2BGR	imgproc/types_c.h	/^    CV_RGB2BGR     =CV_BGR2RGB,$/;"	e	enum:__anon290
CV_RGB2BGR555	imgproc/types_c.h	/^    CV_RGB2BGR555  =23,$/;"	e	enum:__anon290
CV_RGB2BGR565	imgproc/types_c.h	/^    CV_RGB2BGR565  =13,$/;"	e	enum:__anon290
CV_RGB2BGRA	imgproc/types_c.h	/^    CV_RGB2BGRA    =CV_BGR2RGBA,$/;"	e	enum:__anon290
CV_RGB2GRAY	imgproc/types_c.h	/^    CV_RGB2GRAY    =7,$/;"	e	enum:__anon290
CV_RGB2HLS	imgproc/types_c.h	/^    CV_RGB2HLS     =53,$/;"	e	enum:__anon290
CV_RGB2HLS_FULL	imgproc/types_c.h	/^    CV_RGB2HLS_FULL = 69,$/;"	e	enum:__anon290
CV_RGB2HSV	imgproc/types_c.h	/^    CV_RGB2HSV     =41,$/;"	e	enum:__anon290
CV_RGB2HSV_FULL	imgproc/types_c.h	/^    CV_RGB2HSV_FULL = 67,$/;"	e	enum:__anon290
CV_RGB2Lab	imgproc/types_c.h	/^    CV_RGB2Lab     =45,$/;"	e	enum:__anon290
CV_RGB2Luv	imgproc/types_c.h	/^    CV_RGB2Luv     =51,$/;"	e	enum:__anon290
CV_RGB2RGBA	imgproc/types_c.h	/^    CV_RGB2RGBA    =CV_BGR2BGRA,$/;"	e	enum:__anon290
CV_RGB2XYZ	imgproc/types_c.h	/^    CV_RGB2XYZ     =33,$/;"	e	enum:__anon290
CV_RGB2YCrCb	imgproc/types_c.h	/^    CV_RGB2YCrCb   =37,$/;"	e	enum:__anon290
CV_RGB2YUV	imgproc/types_c.h	/^    CV_RGB2YUV      = 83,$/;"	e	enum:__anon290
CV_RGBA2BGR	imgproc/types_c.h	/^    CV_RGBA2BGR    =3,$/;"	e	enum:__anon290
CV_RGBA2BGR555	imgproc/types_c.h	/^    CV_RGBA2BGR555 =27,$/;"	e	enum:__anon290
CV_RGBA2BGR565	imgproc/types_c.h	/^    CV_RGBA2BGR565 =17,$/;"	e	enum:__anon290
CV_RGBA2BGRA	imgproc/types_c.h	/^    CV_RGBA2BGRA   =CV_BGRA2RGBA,$/;"	e	enum:__anon290
CV_RGBA2GRAY	imgproc/types_c.h	/^    CV_RGBA2GRAY   =11,$/;"	e	enum:__anon290
CV_RGBA2RGB	imgproc/types_c.h	/^    CV_RGBA2RGB    =CV_BGRA2BGR,$/;"	e	enum:__anon290
CV_RGBA2mRGBA	imgproc/types_c.h	/^    CV_RGBA2mRGBA = 125,$/;"	e	enum:__anon290
CV_RNG_COEFF	core/types_c.h	406;"	d
CV_RODRIGUES_M2V	legacy/compat.hpp	/^    CV_RODRIGUES_M2V = 0,$/;"	e	enum:__anon4
CV_RODRIGUES_V2M	legacy/compat.hpp	/^    CV_RODRIGUES_V2M = 1$/;"	e	enum:__anon4
CV_ROW_SAMPLE	ml/ml.hpp	68;"	d
CV_SCHARR	imgproc/types_c.h	/^    CV_SCHARR =-1,$/;"	e	enum:__anon289
CV_SEQUENCE_FIELDS	core/types_c.h	1327;"	d
CV_SEQ_CHAIN	core/types_c.h	1535;"	d
CV_SEQ_CHAIN_CONTOUR	core/types_c.h	1536;"	d
CV_SEQ_CONNECTED_COMP	core/types_c.h	1542;"	d
CV_SEQ_CONTOUR	core/types_c.h	1531;"	d
CV_SEQ_ELEM	core/types_c.h	1635;"	d
CV_SEQ_ELTYPE	core/types_c.h	1547;"	d
CV_SEQ_ELTYPE_BITS	core/types_c.h	1485;"	d
CV_SEQ_ELTYPE_CODE	core/types_c.h	1489;"	d
CV_SEQ_ELTYPE_CONNECTED_COMP	core/types_c.h	1497;"	d
CV_SEQ_ELTYPE_GENERIC	core/types_c.h	1490;"	d
CV_SEQ_ELTYPE_GRAPH_EDGE	core/types_c.h	1494;"	d
CV_SEQ_ELTYPE_GRAPH_VERTEX	core/types_c.h	1495;"	d
CV_SEQ_ELTYPE_INDEX	core/types_c.h	1493;"	d
CV_SEQ_ELTYPE_MASK	core/types_c.h	1486;"	d
CV_SEQ_ELTYPE_POINT	core/types_c.h	1488;"	d
CV_SEQ_ELTYPE_POINT3D	core/types_c.h	1498;"	d
CV_SEQ_ELTYPE_PPOINT	core/types_c.h	1492;"	d
CV_SEQ_ELTYPE_PTR	core/types_c.h	1491;"	d
CV_SEQ_ELTYPE_TRIAN_ATR	core/types_c.h	1496;"	d
CV_SEQ_FLAG_CLOSED	core/types_c.h	1515;"	d
CV_SEQ_FLAG_CONVEX	core/types_c.h	1517;"	d
CV_SEQ_FLAG_HOLE	core/types_c.h	1518;"	d
CV_SEQ_FLAG_SHIFT	core/types_c.h	1512;"	d
CV_SEQ_FLAG_SIMPLE	core/types_c.h	1516;"	d
CV_SEQ_INDEX	core/types_c.h	1545;"	d
CV_SEQ_KIND	core/types_c.h	1548;"	d
CV_SEQ_KIND_BIN_TREE	core/types_c.h	1506;"	d
CV_SEQ_KIND_BITS	core/types_c.h	1500;"	d
CV_SEQ_KIND_CURVE	core/types_c.h	1505;"	d
CV_SEQ_KIND_GENERIC	core/types_c.h	1504;"	d
CV_SEQ_KIND_GRAPH	core/types_c.h	1509;"	d
CV_SEQ_KIND_MASK	core/types_c.h	1501;"	d
CV_SEQ_KIND_SUBDIV2D	core/types_c.h	1510;"	d
CV_SEQ_MAGIC_VAL	core/types_c.h	1476;"	d
CV_SEQ_POINT3D_SET	core/types_c.h	1528;"	d
CV_SEQ_POINT_SET	core/types_c.h	1527;"	d
CV_SEQ_POLYGON	core/types_c.h	1530;"	d
CV_SEQ_POLYGON_TREE	core/types_c.h	1539;"	d
CV_SEQ_POLYLINE	core/types_c.h	1529;"	d
CV_SEQ_READER_FIELDS	core/types_c.h	1614;"	d
CV_SEQ_SIMPLE_POLYGON	core/types_c.h	1532;"	d
CV_SEQ_WRITER_FIELDS	core/types_c.h	1599;"	d
CV_SET_ELEM_FIELDS	core/types_c.h	1354;"	d
CV_SET_ELEM_FREE_FLAG	core/types_c.h	1377;"	d
CV_SET_ELEM_IDX_MASK	core/types_c.h	1376;"	d
CV_SET_FIELDS	core/types_c.h	1364;"	d
CV_SET_MAGIC_VAL	core/types_c.h	1481;"	d
CV_SHAPE_CROSS	imgproc/types_c.h	/^    CV_SHAPE_CROSS     =1,$/;"	e	enum:__anon293
CV_SHAPE_CUSTOM	imgproc/types_c.h	/^    CV_SHAPE_CUSTOM    =100$/;"	e	enum:__anon293
CV_SHAPE_ELLIPSE	imgproc/types_c.h	/^    CV_SHAPE_ELLIPSE   =2,$/;"	e	enum:__anon293
CV_SHAPE_RECT	imgproc/types_c.h	/^    CV_SHAPE_RECT      =0,$/;"	e	enum:__anon293
CV_SHIFT_DOWN	legacy/compat.hpp	/^    CV_SHIFT_DOWN = 10,$/;"	e	enum:__anon3
CV_SHIFT_LD	legacy/compat.hpp	/^    CV_SHIFT_LD = 9,$/;"	e	enum:__anon3
CV_SHIFT_LEFT	legacy/compat.hpp	/^    CV_SHIFT_LEFT = 1,$/;"	e	enum:__anon3
CV_SHIFT_LU	legacy/compat.hpp	/^    CV_SHIFT_LU = 5,$/;"	e	enum:__anon3
CV_SHIFT_NONE	legacy/compat.hpp	/^    CV_SHIFT_NONE = 2,$/;"	e	enum:__anon3
CV_SHIFT_RD	legacy/compat.hpp	/^    CV_SHIFT_RD = 11$/;"	e	enum:__anon3
CV_SHIFT_RIGHT	legacy/compat.hpp	/^    CV_SHIFT_RIGHT = 3,$/;"	e	enum:__anon3
CV_SHIFT_RU	legacy/compat.hpp	/^    CV_SHIFT_RU = 7,$/;"	e	enum:__anon3
CV_SHIFT_UP	legacy/compat.hpp	/^    CV_SHIFT_UP = 6,$/;"	e	enum:__anon3
CV_SIGN	core/types_c.h	303;"	d
CV_SIZEOF_FLOAT	core/internal.hpp	378;"	d
CV_SIZEOF_SHORT	core/internal.hpp	379;"	d
CV_SORT_ASCENDING	core/core_c.h	657;"	d
CV_SORT_DESCENDING	core/core_c.h	658;"	d
CV_SORT_EVERY_COLUMN	core/core_c.h	656;"	d
CV_SORT_EVERY_ROW	core/core_c.h	655;"	d
CV_SPARSE_HASH_RATIO	core/internal.hpp	321;"	d
CV_SPARSE_HASH_SIZE0	core/internal.hpp	318;"	d
CV_SPARSE_MAT_BLOCK	core/internal.hpp	315;"	d
CV_SPARSE_MAT_MAGIC_VAL	core/types_c.h	858;"	d
CV_SQR	core/internal.hpp	401;"	d
CV_SSE	core/internal.hpp	105;"	d
CV_SSE	core/internal.hpp	143;"	d
CV_SSE2	core/internal.hpp	106;"	d
CV_SSE2	core/internal.hpp	146;"	d
CV_SSE3	core/internal.hpp	109;"	d
CV_SSE3	core/internal.hpp	149;"	d
CV_SSE4_1	core/internal.hpp	117;"	d
CV_SSE4_1	core/internal.hpp	155;"	d
CV_SSE4_2	core/internal.hpp	121;"	d
CV_SSE4_2	core/internal.hpp	158;"	d
CV_SSSE3	core/internal.hpp	113;"	d
CV_SSSE3	core/internal.hpp	152;"	d
CV_STDCALL	core/types_c.h	113;"	d
CV_STDCALL	core/types_c.h	116;"	d
CV_STEREO_BM_BASIC	calib3d/calib3d.hpp	344;"	d
CV_STEREO_BM_FISH_EYE	calib3d/calib3d.hpp	345;"	d
CV_STEREO_BM_NARROW	calib3d/calib3d.hpp	346;"	d
CV_STEREO_BM_NORMALIZED_RESPONSE	calib3d/calib3d.hpp	306;"	d
CV_STEREO_BM_XSOBEL	calib3d/calib3d.hpp	307;"	d
CV_STEREO_GC_OCCLUDED	legacy/legacy.hpp	3092;"	d
CV_STORAGE_APPEND	core/types_c.h	1752;"	d
CV_STORAGE_BLOCK_SIZE	core/internal.hpp	312;"	d
CV_STORAGE_FORMAT_AUTO	core/types_c.h	1755;"	d
CV_STORAGE_FORMAT_MASK	core/types_c.h	1754;"	d
CV_STORAGE_FORMAT_XML	core/types_c.h	1756;"	d
CV_STORAGE_FORMAT_YAML	core/types_c.h	1757;"	d
CV_STORAGE_MAGIC_VAL	core/types_c.h	1275;"	d
CV_STORAGE_MEMORY	core/types_c.h	1753;"	d
CV_STORAGE_READ	core/types_c.h	1748;"	d
CV_STORAGE_WRITE	core/types_c.h	1749;"	d
CV_STORAGE_WRITE_BINARY	core/types_c.h	1751;"	d
CV_STORAGE_WRITE_TEXT	core/types_c.h	1750;"	d
CV_STRUCT_ALIGN	core/internal.hpp	309;"	d
CV_STUB_STEP	core/internal.hpp	376;"	d
CV_STYLE_ITALIC	highgui/highgui_c.h	/^        CV_STYLE_ITALIC         = 1,\/\/QFont::StyleItalic,$/;"	e	enum:__anon29
CV_STYLE_NORMAL	highgui/highgui_c.h	/^enum {  CV_STYLE_NORMAL         = 0,\/\/QFont::StyleNormal,$/;"	e	enum:__anon29
CV_STYLE_OBLIQUE	highgui/highgui_c.h	/^        CV_STYLE_OBLIQUE        = 2 \/\/QFont::StyleOblique$/;"	e	enum:__anon29
CV_SUB	core/internal.hpp	394;"	d
CV_SUBDIV2D_FIELDS	imgproc/types_c.h	460;"	d
CV_SUBDIV2D_NEXT_EDGE	imgproc/types_c.h	499;"	d
CV_SUBDIV2D_POINT_FIELDS	imgproc/types_c.h	440;"	d
CV_SUBDIV2D_VIRTUAL_POINT_FLAG	imgproc/types_c.h	446;"	d
CV_SUBMAT_FLAG	core/types_c.h	643;"	d
CV_SUBMAT_FLAG_SHIFT	core/types_c.h	642;"	d
CV_SUBMINOR_VERSION	core/version.hpp	52;"	d
CV_SVD	core/core_c.h	738;"	d
CV_SVD_MODIFY_A	core/core_c.h	723;"	d
CV_SVD_SYM	core/core_c.h	739;"	d
CV_SVD_U_T	core/core_c.h	724;"	d
CV_SVD_V_T	core/core_c.h	725;"	d
CV_SWAP	core/types_c.h	281;"	d
CV_StsAssert	core/types_c.h	/^ CV_StsAssert=                 -215, \/* assertion failed *\/$/;"	e	enum:__anon220
CV_StsAutoTrace	core/types_c.h	/^ CV_StsAutoTrace=               -8,  \/* tracing                         *\/$/;"	e	enum:__anon220
CV_StsBackTrace	core/types_c.h	/^ CV_StsBackTrace=               -1,  \/* pseudo error for back trace     *\/$/;"	e	enum:__anon220
CV_StsBadArg	core/types_c.h	/^ CV_StsBadArg=                  -5,  \/* function arg\/param is bad       *\/$/;"	e	enum:__anon220
CV_StsBadFlag	core/types_c.h	/^ CV_StsBadFlag=                -206, \/* flag is wrong or not supported *\/$/;"	e	enum:__anon220
CV_StsBadFunc	core/types_c.h	/^ CV_StsBadFunc=                 -6,  \/* unsupported function            *\/$/;"	e	enum:__anon220
CV_StsBadMask	core/types_c.h	/^ CV_StsBadMask=                -208, \/* bad format of mask (neither 8uC1 nor 8sC1)*\/$/;"	e	enum:__anon220
CV_StsBadMemBlock	core/types_c.h	/^ CV_StsBadMemBlock=            -214, \/* an allocated block has been corrupted *\/$/;"	e	enum:__anon220
CV_StsBadPoint	core/types_c.h	/^ CV_StsBadPoint=               -207, \/* bad CvPoint *\/$/;"	e	enum:__anon220
CV_StsBadSize	core/types_c.h	/^ CV_StsBadSize=                -201, \/* the input\/output structure size is incorrect  *\/$/;"	e	enum:__anon220
CV_StsDivByZero	core/types_c.h	/^ CV_StsDivByZero=              -202, \/* division by zero *\/$/;"	e	enum:__anon220
CV_StsError	core/types_c.h	/^ CV_StsError=                   -2,  \/* unknown \/unspecified error      *\/$/;"	e	enum:__anon220
CV_StsFilterOffsetErr	core/types_c.h	/^ CV_StsFilterOffsetErr=        -31, \/* incorrect filter ofset value *\/$/;"	e	enum:__anon220
CV_StsFilterStructContentErr	core/types_c.h	/^ CV_StsFilterStructContentErr= -29, \/* incorr. filter structure content *\/$/;"	e	enum:__anon220
CV_StsInplaceNotSupported	core/types_c.h	/^ CV_StsInplaceNotSupported=    -203, \/* in-place operation is not supported *\/$/;"	e	enum:__anon220
CV_StsInternal	core/types_c.h	/^ CV_StsInternal=                -3,  \/* internal error (bad state)      *\/$/;"	e	enum:__anon220
CV_StsKernelStructContentErr	core/types_c.h	/^ CV_StsKernelStructContentErr= -30, \/* incorr. transform kernel content *\/$/;"	e	enum:__anon220
CV_StsNoConv	core/types_c.h	/^ CV_StsNoConv=                  -7,  \/* iter. didn't converge           *\/$/;"	e	enum:__anon220
CV_StsNoMem	core/types_c.h	/^ CV_StsNoMem=                   -4,  \/* insufficient memory             *\/$/;"	e	enum:__anon220
CV_StsNotImplemented	core/types_c.h	/^ CV_StsNotImplemented=         -213, \/* the requested function\/feature is not implemented *\/$/;"	e	enum:__anon220
CV_StsNullPtr	core/types_c.h	/^ CV_StsNullPtr=                -27, \/* null pointer *\/$/;"	e	enum:__anon220
CV_StsObjectNotFound	core/types_c.h	/^ CV_StsObjectNotFound=         -204, \/* request can't be completed *\/$/;"	e	enum:__anon220
CV_StsOk	core/types_c.h	/^ CV_StsOk=                       0,  \/* everithing is ok                *\/$/;"	e	enum:__anon220
CV_StsOutOfRange	core/types_c.h	/^ CV_StsOutOfRange=             -211, \/* some of parameters are out of range *\/$/;"	e	enum:__anon220
CV_StsParseError	core/types_c.h	/^ CV_StsParseError=             -212, \/* invalid syntax\/structure of the parsed file *\/$/;"	e	enum:__anon220
CV_StsUnmatchedFormats	core/types_c.h	/^ CV_StsUnmatchedFormats=       -205, \/* formats of input\/output arrays differ *\/$/;"	e	enum:__anon220
CV_StsUnmatchedSizes	core/types_c.h	/^ CV_StsUnmatchedSizes=         -209, \/* sizes of input\/output structures do not match *\/$/;"	e	enum:__anon220
CV_StsUnsupportedFormat	core/types_c.h	/^ CV_StsUnsupportedFormat=      -210, \/* the data format\/type is not supported by the function*\/$/;"	e	enum:__anon220
CV_StsVecLengthErr	core/types_c.h	/^ CV_StsVecLengthErr=           -28, \/* incorrect vector length *\/$/;"	e	enum:__anon220
CV_TERMCRIT_EPS	core/types_c.h	1000;"	d
CV_TERMCRIT_ITER	core/types_c.h	998;"	d
CV_TERMCRIT_NUMBER	core/types_c.h	999;"	d
CV_TEST_ERROR	ml/ml.hpp	132;"	d
CV_TEST_MAIN	ts/ts.hpp	573;"	d
CV_THRESH_BINARY	imgproc/types_c.h	/^    CV_THRESH_BINARY      =0,  \/* value = value > threshold ? max_value : 0       *\/$/;"	e	enum:__anon305
CV_THRESH_BINARY_INV	imgproc/types_c.h	/^    CV_THRESH_BINARY_INV  =1,  \/* value = value > threshold ? 0 : max_value       *\/$/;"	e	enum:__anon305
CV_THRESH_MASK	imgproc/types_c.h	/^    CV_THRESH_MASK        =7,$/;"	e	enum:__anon305
CV_THRESH_OTSU	imgproc/types_c.h	/^    CV_THRESH_OTSU        =8  \/* use Otsu algorithm to choose the optimal threshold value;$/;"	e	enum:__anon305
CV_THRESH_TOZERO	imgproc/types_c.h	/^    CV_THRESH_TOZERO      =3,  \/* value = value > threshold ? value : 0           *\/$/;"	e	enum:__anon305
CV_THRESH_TOZERO_INV	imgproc/types_c.h	/^    CV_THRESH_TOZERO_INV  =4,  \/* value = value > threshold ? 0 : value           *\/$/;"	e	enum:__anon305
CV_THRESH_TRUNC	imgproc/types_c.h	/^    CV_THRESH_TRUNC       =2,  \/* value = value > threshold ? threshold : value   *\/$/;"	e	enum:__anon305
CV_TM_CCOEFF	imgproc/types_c.h	/^    CV_TM_CCOEFF        =4,$/;"	e	enum:__anon295
CV_TM_CCOEFF_NORMED	imgproc/types_c.h	/^    CV_TM_CCOEFF_NORMED =5$/;"	e	enum:__anon295
CV_TM_CCORR	imgproc/types_c.h	/^    CV_TM_CCORR         =2,$/;"	e	enum:__anon295
CV_TM_CCORR_NORMED	imgproc/types_c.h	/^    CV_TM_CCORR_NORMED  =3,$/;"	e	enum:__anon295
CV_TM_SQDIFF	imgproc/types_c.h	/^    CV_TM_SQDIFF        =0,$/;"	e	enum:__anon295
CV_TM_SQDIFF_NORMED	imgproc/types_c.h	/^    CV_TM_SQDIFF_NORMED =1,$/;"	e	enum:__anon295
CV_TOGGLE_DBL	core/internal.hpp	389;"	d
CV_TOGGLE_FLT	core/internal.hpp	388;"	d
CV_TRAIN_ERROR	ml/ml.hpp	131;"	d
CV_TREE_NODE_FIELDS	core/types_c.h	1315;"	d
CV_TS_CONCENTRIC_SPHERES	ml/ml.hpp	1982;"	d
CV_TURN_ON_IPL_COMPATIBILITY	core/core_c.h	1517;"	d
CV_TWIN_VORONOISITE2D	legacy/legacy.hpp	978;"	d
CV_TYPE_NAME_GRAPH	core/types_c.h	1447;"	d
CV_TYPE_NAME_HAAR	objdetect/objdetect.hpp	60;"	d
CV_TYPE_NAME_IMAGE	core/types_c.h	549;"	d
CV_TYPE_NAME_MAT	core/types_c.h	648;"	d
CV_TYPE_NAME_MATND	core/types_c.h	816;"	d
CV_TYPE_NAME_ML_ANN_MLP	ml/ml.hpp	125;"	d
CV_TYPE_NAME_ML_BOOSTING	ml/ml.hpp	123;"	d
CV_TYPE_NAME_ML_CNN	ml/ml.hpp	126;"	d
CV_TYPE_NAME_ML_EM	ml/ml.hpp	122;"	d
CV_TYPE_NAME_ML_ERTREES	ml/ml.hpp	128;"	d
CV_TYPE_NAME_ML_GBT	ml/ml.hpp	129;"	d
CV_TYPE_NAME_ML_KNN	ml/ml.hpp	120;"	d
CV_TYPE_NAME_ML_NBAYES	ml/ml.hpp	121;"	d
CV_TYPE_NAME_ML_RTREES	ml/ml.hpp	127;"	d
CV_TYPE_NAME_ML_SVM	ml/ml.hpp	119;"	d
CV_TYPE_NAME_ML_TREE	ml/ml.hpp	124;"	d
CV_TYPE_NAME_SEQ	core/types_c.h	1344;"	d
CV_TYPE_NAME_SEQ_TREE	core/types_c.h	1345;"	d
CV_TYPE_NAME_SPARSE_MAT	core/types_c.h	859;"	d
CV_TYZX_COLOR	highgui/highgui_c.h	/^    CV_TYZX_COLOR   =402,$/;"	e	enum:__anon37
CV_TYZX_LEFT	highgui/highgui_c.h	/^    CV_TYZX_LEFT    =400,$/;"	e	enum:__anon37
CV_TYZX_RIGHT	highgui/highgui_c.h	/^    CV_TYZX_RIGHT   =401,$/;"	e	enum:__anon37
CV_TYZX_Z	highgui/highgui_c.h	/^    CV_TYZX_Z       =403,$/;"	e	enum:__anon37
CV_UNDEF_SC_PARAM	legacy/legacy.hpp	439;"	d
CV_UNMATCHED_FORMATS_ERR	core/internal.hpp	/^    CV_UNMATCHED_FORMATS_ERR    = -104,$/;"	e	enum:CvStatus
CV_UNMATCHED_ROI_ERR	core/internal.hpp	/^    CV_UNMATCHED_ROI_ERR        = -111,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_CHANNELS_ERR	core/internal.hpp	/^    CV_UNSUPPORTED_CHANNELS_ERR = -102,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_COI_ERR	core/internal.hpp	/^    CV_UNSUPPORTED_COI_ERR      = -103,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_DEPTH_ERR	core/internal.hpp	/^    CV_UNSUPPORTED_DEPTH_ERR    = -101,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_FORMAT_ERR	core/internal.hpp	/^    CV_UNSUPPORTED_FORMAT_ERR   = -100,$/;"	e	enum:CvStatus
CV_USRTYPE1	core/types_c.h	581;"	d
CV_VALUE	legacy/legacy.hpp	794;"	d
CV_VAR_CATEGORICAL	ml/ml.hpp	117;"	d
CV_VAR_NUMERICAL	ml/ml.hpp	115;"	d
CV_VAR_ORDERED	ml/ml.hpp	116;"	d
CV_VERSION	core/version.hpp	56;"	d
CV_VORONOIDIAGRAM2D_FIELDS	legacy/legacy.hpp	1010;"	d
CV_VORONOIEDGE2D_BEGINNODE	legacy/legacy.hpp	976;"	d
CV_VORONOIEDGE2D_ENDNODE	legacy/legacy.hpp	977;"	d
CV_VORONOIEDGE2D_FIELDS	legacy/legacy.hpp	990;"	d
CV_VORONOINODE2D_FIELDS	legacy/legacy.hpp	1000;"	d
CV_VORONOISITE2D_FIELDS	legacy/legacy.hpp	980;"	d
CV_WARP_FILL_OUTLIERS	imgproc/types_c.h	/^    CV_WARP_FILL_OUTLIERS =8,$/;"	e	enum:__anon292
CV_WARP_INVERSE_MAP	imgproc/types_c.h	/^    CV_WARP_INVERSE_MAP  =16$/;"	e	enum:__anon292
CV_WARP_TO_CAMERA	legacy/legacy.hpp	544;"	d
CV_WEIGHTED_ALL	legacy/legacy.hpp	/^    CV_WEIGHTED_ALL$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_EDGE	legacy/legacy.hpp	/^    CV_WEIGHTED_EDGE,$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_VTX	legacy/legacy.hpp	/^    CV_WEIGHTED_VTX,$/;"	e	enum:CvGraphWeightType
CV_WHOLE_ARR	core/types_c.h	632;"	d
CV_WHOLE_SEQ	core/types_c.h	1223;"	d
CV_WHOLE_SEQ_END_INDEX	core/types_c.h	1222;"	d
CV_WINDOW_AUTOSIZE	highgui/highgui_c.h	/^    CV_WINDOW_AUTOSIZE     = 0x00000001, \/\/the user cannot resize the window, the size is constrainted by the image displayed$/;"	e	enum:__anon31
CV_WINDOW_FREERATIO	highgui/highgui_c.h	/^    CV_WINDOW_FREERATIO    = 0x00000100,\/\/the image expends as much as it can (no ratio constraint)$/;"	e	enum:__anon31
CV_WINDOW_FULLSCREEN	highgui/highgui_c.h	/^    CV_WINDOW_FULLSCREEN   = 1,\/\/change the window to fullscreen$/;"	e	enum:__anon31
CV_WINDOW_KEEPRATIO	highgui/highgui_c.h	/^    CV_WINDOW_KEEPRATIO    = 0x00000000\/\/the ration image is respected.$/;"	e	enum:__anon31
CV_WINDOW_NORMAL	highgui/highgui_c.h	/^    CV_WINDOW_NORMAL       = 0x00000000, \/\/the user can resize the window (no constraint)  \/ also use to switch a fullscreen window to a normal size$/;"	e	enum:__anon31
CV_WINDOW_OPENGL	highgui/highgui_c.h	/^    CV_WINDOW_OPENGL       = 0x00001000, \/\/window with opengl support$/;"	e	enum:__anon31
CV_WND_PROP_ASPECTRATIO	highgui/highgui_c.h	/^    CV_WND_PROP_ASPECTRATIO= 2, \/\/to change\/get window's aspectratio property$/;"	e	enum:__anon31
CV_WND_PROP_AUTOSIZE	highgui/highgui_c.h	/^    CV_WND_PROP_AUTOSIZE   = 1, \/\/to change\/get window's autosize property$/;"	e	enum:__anon31
CV_WND_PROP_FULLSCREEN	highgui/highgui_c.h	/^    CV_WND_PROP_FULLSCREEN = 0, \/\/to change\/get window's fullscreen property$/;"	e	enum:__anon31
CV_WND_PROP_OPENGL	highgui/highgui_c.h	/^    CV_WND_PROP_OPENGL     = 3, \/\/to change\/get window's opengl support$/;"	e	enum:__anon31
CV_WRAP	core/types_c.h	187;"	d
CV_WRAP_AS	core/types_c.h	188;"	d
CV_WRAP_DEFAULT	core/types_c.h	189;"	d
CV_WRITE_SEQ_ELEM	core/types_c.h	1656;"	d
CV_WRITE_SEQ_ELEM_VAR	core/types_c.h	1646;"	d
CV_XADD	core/operations.hpp	56;"	d
CV_XADD	core/operations.hpp	61;"	d
CV_XADD	core/operations.hpp	63;"	d
CV_XADD	core/operations.hpp	69;"	d
CV_XADD	core/operations.hpp	72;"	d
CV_XADD	core/operations.hpp	78;"	d
CV_XADD	core/operations.hpp	80;"	d
CV_XADD	core/operations.hpp	86;"	d
CV_XOR	core/internal.hpp	398;"	d
CV_XYZ2BGR	imgproc/types_c.h	/^    CV_XYZ2BGR     =34,$/;"	e	enum:__anon290
CV_XYZ2RGB	imgproc/types_c.h	/^    CV_XYZ2RGB     =35,$/;"	e	enum:__anon290
CV_YCrCb2BGR	imgproc/types_c.h	/^    CV_YCrCb2BGR   =38,$/;"	e	enum:__anon290
CV_YCrCb2RGB	imgproc/types_c.h	/^    CV_YCrCb2RGB   =39,$/;"	e	enum:__anon290
CV_YUV2BGR	imgproc/types_c.h	/^    CV_YUV2BGR      = 84,$/;"	e	enum:__anon290
CV_YUV2BGRA_I420	imgproc/types_c.h	/^    CV_YUV2BGRA_I420 = CV_YUV2BGRA_IYUV,$/;"	e	enum:__anon290
CV_YUV2BGRA_IYUV	imgproc/types_c.h	/^    CV_YUV2BGRA_IYUV = 105,$/;"	e	enum:__anon290
CV_YUV2BGRA_NV12	imgproc/types_c.h	/^    CV_YUV2BGRA_NV12 = 95,$/;"	e	enum:__anon290
CV_YUV2BGRA_NV21	imgproc/types_c.h	/^    CV_YUV2BGRA_NV21 = 97,$/;"	e	enum:__anon290
CV_YUV2BGRA_UYNV	imgproc/types_c.h	/^    CV_YUV2BGRA_UYNV = CV_YUV2BGRA_UYVY,$/;"	e	enum:__anon290
CV_YUV2BGRA_UYVY	imgproc/types_c.h	/^    CV_YUV2BGRA_UYVY = 112,$/;"	e	enum:__anon290
CV_YUV2BGRA_Y422	imgproc/types_c.h	/^    CV_YUV2BGRA_Y422 = CV_YUV2BGRA_UYVY,$/;"	e	enum:__anon290
CV_YUV2BGRA_YUNV	imgproc/types_c.h	/^    CV_YUV2BGRA_YUNV = CV_YUV2BGRA_YUY2,$/;"	e	enum:__anon290
CV_YUV2BGRA_YUY2	imgproc/types_c.h	/^    CV_YUV2BGRA_YUY2 = 120,$/;"	e	enum:__anon290
CV_YUV2BGRA_YUYV	imgproc/types_c.h	/^    CV_YUV2BGRA_YUYV = CV_YUV2BGRA_YUY2,$/;"	e	enum:__anon290
CV_YUV2BGRA_YV12	imgproc/types_c.h	/^    CV_YUV2BGRA_YV12 = 103,$/;"	e	enum:__anon290
CV_YUV2BGRA_YVYU	imgproc/types_c.h	/^    CV_YUV2BGRA_YVYU = 122,$/;"	e	enum:__anon290
CV_YUV2BGR_I420	imgproc/types_c.h	/^    CV_YUV2BGR_I420 = CV_YUV2BGR_IYUV,$/;"	e	enum:__anon290
CV_YUV2BGR_IYUV	imgproc/types_c.h	/^    CV_YUV2BGR_IYUV = 101,$/;"	e	enum:__anon290
CV_YUV2BGR_NV12	imgproc/types_c.h	/^    CV_YUV2BGR_NV12 = 91,$/;"	e	enum:__anon290
CV_YUV2BGR_NV21	imgproc/types_c.h	/^    CV_YUV2BGR_NV21 = 93,$/;"	e	enum:__anon290
CV_YUV2BGR_UYNV	imgproc/types_c.h	/^    CV_YUV2BGR_UYNV = CV_YUV2BGR_UYVY,$/;"	e	enum:__anon290
CV_YUV2BGR_UYVY	imgproc/types_c.h	/^    CV_YUV2BGR_UYVY = 108,$/;"	e	enum:__anon290
CV_YUV2BGR_Y422	imgproc/types_c.h	/^    CV_YUV2BGR_Y422 = CV_YUV2BGR_UYVY,$/;"	e	enum:__anon290
CV_YUV2BGR_YUNV	imgproc/types_c.h	/^    CV_YUV2BGR_YUNV = CV_YUV2BGR_YUY2,$/;"	e	enum:__anon290
CV_YUV2BGR_YUY2	imgproc/types_c.h	/^    CV_YUV2BGR_YUY2 = 116,$/;"	e	enum:__anon290
CV_YUV2BGR_YUYV	imgproc/types_c.h	/^    CV_YUV2BGR_YUYV = CV_YUV2BGR_YUY2,$/;"	e	enum:__anon290
CV_YUV2BGR_YV12	imgproc/types_c.h	/^    CV_YUV2BGR_YV12 = 99,$/;"	e	enum:__anon290
CV_YUV2BGR_YVYU	imgproc/types_c.h	/^    CV_YUV2BGR_YVYU = 118,$/;"	e	enum:__anon290
CV_YUV2GRAY_420	imgproc/types_c.h	/^    CV_YUV2GRAY_420 = 106,$/;"	e	enum:__anon290
CV_YUV2GRAY_I420	imgproc/types_c.h	/^    CV_YUV2GRAY_I420 = CV_YUV2GRAY_420,$/;"	e	enum:__anon290
CV_YUV2GRAY_IYUV	imgproc/types_c.h	/^    CV_YUV2GRAY_IYUV = CV_YUV2GRAY_420,$/;"	e	enum:__anon290
CV_YUV2GRAY_NV12	imgproc/types_c.h	/^    CV_YUV2GRAY_NV12 = CV_YUV2GRAY_420,$/;"	e	enum:__anon290
CV_YUV2GRAY_NV21	imgproc/types_c.h	/^    CV_YUV2GRAY_NV21 = CV_YUV2GRAY_420,$/;"	e	enum:__anon290
CV_YUV2GRAY_UYNV	imgproc/types_c.h	/^    CV_YUV2GRAY_UYNV = CV_YUV2GRAY_UYVY,$/;"	e	enum:__anon290
CV_YUV2GRAY_UYVY	imgproc/types_c.h	/^    CV_YUV2GRAY_UYVY = 123,$/;"	e	enum:__anon290
CV_YUV2GRAY_Y422	imgproc/types_c.h	/^    CV_YUV2GRAY_Y422 = CV_YUV2GRAY_UYVY,$/;"	e	enum:__anon290
CV_YUV2GRAY_YUNV	imgproc/types_c.h	/^    CV_YUV2GRAY_YUNV = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon290
CV_YUV2GRAY_YUY2	imgproc/types_c.h	/^    CV_YUV2GRAY_YUY2 = 124,$/;"	e	enum:__anon290
CV_YUV2GRAY_YUYV	imgproc/types_c.h	/^    CV_YUV2GRAY_YUYV = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon290
CV_YUV2GRAY_YV12	imgproc/types_c.h	/^    CV_YUV2GRAY_YV12 = CV_YUV2GRAY_420,$/;"	e	enum:__anon290
CV_YUV2GRAY_YVYU	imgproc/types_c.h	/^    CV_YUV2GRAY_YVYU = CV_YUV2GRAY_YUY2,$/;"	e	enum:__anon290
CV_YUV2RGB	imgproc/types_c.h	/^    CV_YUV2RGB      = 85,$/;"	e	enum:__anon290
CV_YUV2RGBA_I420	imgproc/types_c.h	/^    CV_YUV2RGBA_I420 = CV_YUV2RGBA_IYUV,$/;"	e	enum:__anon290
CV_YUV2RGBA_IYUV	imgproc/types_c.h	/^    CV_YUV2RGBA_IYUV = 104,$/;"	e	enum:__anon290
CV_YUV2RGBA_NV12	imgproc/types_c.h	/^    CV_YUV2RGBA_NV12 = 94,$/;"	e	enum:__anon290
CV_YUV2RGBA_NV21	imgproc/types_c.h	/^    CV_YUV2RGBA_NV21 = 96,$/;"	e	enum:__anon290
CV_YUV2RGBA_UYNV	imgproc/types_c.h	/^    CV_YUV2RGBA_UYNV = CV_YUV2RGBA_UYVY,$/;"	e	enum:__anon290
CV_YUV2RGBA_UYVY	imgproc/types_c.h	/^    CV_YUV2RGBA_UYVY = 111,$/;"	e	enum:__anon290
CV_YUV2RGBA_Y422	imgproc/types_c.h	/^    CV_YUV2RGBA_Y422 = CV_YUV2RGBA_UYVY,$/;"	e	enum:__anon290
CV_YUV2RGBA_YUNV	imgproc/types_c.h	/^    CV_YUV2RGBA_YUNV = CV_YUV2RGBA_YUY2,$/;"	e	enum:__anon290
CV_YUV2RGBA_YUY2	imgproc/types_c.h	/^    CV_YUV2RGBA_YUY2 = 119,$/;"	e	enum:__anon290
CV_YUV2RGBA_YUYV	imgproc/types_c.h	/^    CV_YUV2RGBA_YUYV = CV_YUV2RGBA_YUY2,$/;"	e	enum:__anon290
CV_YUV2RGBA_YV12	imgproc/types_c.h	/^    CV_YUV2RGBA_YV12 = 102,$/;"	e	enum:__anon290
CV_YUV2RGBA_YVYU	imgproc/types_c.h	/^    CV_YUV2RGBA_YVYU = 121,$/;"	e	enum:__anon290
CV_YUV2RGB_I420	imgproc/types_c.h	/^    CV_YUV2RGB_I420 = CV_YUV2RGB_IYUV,$/;"	e	enum:__anon290
CV_YUV2RGB_IYUV	imgproc/types_c.h	/^    CV_YUV2RGB_IYUV = 100,$/;"	e	enum:__anon290
CV_YUV2RGB_NV12	imgproc/types_c.h	/^    CV_YUV2RGB_NV12 = 90,$/;"	e	enum:__anon290
CV_YUV2RGB_NV21	imgproc/types_c.h	/^    CV_YUV2RGB_NV21 = 92,$/;"	e	enum:__anon290
CV_YUV2RGB_UYNV	imgproc/types_c.h	/^    CV_YUV2RGB_UYNV = CV_YUV2RGB_UYVY,$/;"	e	enum:__anon290
CV_YUV2RGB_UYVY	imgproc/types_c.h	/^    CV_YUV2RGB_UYVY = 107,$/;"	e	enum:__anon290
CV_YUV2RGB_Y422	imgproc/types_c.h	/^    CV_YUV2RGB_Y422 = CV_YUV2RGB_UYVY,$/;"	e	enum:__anon290
CV_YUV2RGB_YUNV	imgproc/types_c.h	/^    CV_YUV2RGB_YUNV = CV_YUV2RGB_YUY2,$/;"	e	enum:__anon290
CV_YUV2RGB_YUY2	imgproc/types_c.h	/^    CV_YUV2RGB_YUY2 = 115,$/;"	e	enum:__anon290
CV_YUV2RGB_YUYV	imgproc/types_c.h	/^    CV_YUV2RGB_YUYV = CV_YUV2RGB_YUY2,$/;"	e	enum:__anon290
CV_YUV2RGB_YV12	imgproc/types_c.h	/^    CV_YUV2RGB_YV12 = 98,$/;"	e	enum:__anon290
CV_YUV2RGB_YVYU	imgproc/types_c.h	/^    CV_YUV2RGB_YVYU = 117,$/;"	e	enum:__anon290
CV_YUV420p2BGR	imgproc/types_c.h	/^    CV_YUV420p2BGR = CV_YUV2BGR_YV12,$/;"	e	enum:__anon290
CV_YUV420p2BGRA	imgproc/types_c.h	/^    CV_YUV420p2BGRA = CV_YUV2BGRA_YV12,$/;"	e	enum:__anon290
CV_YUV420p2GRAY	imgproc/types_c.h	/^    CV_YUV420p2GRAY = CV_YUV2GRAY_420,$/;"	e	enum:__anon290
CV_YUV420p2RGB	imgproc/types_c.h	/^    CV_YUV420p2RGB = CV_YUV2RGB_YV12,$/;"	e	enum:__anon290
CV_YUV420p2RGBA	imgproc/types_c.h	/^    CV_YUV420p2RGBA = CV_YUV2RGBA_YV12,$/;"	e	enum:__anon290
CV_YUV420sp2BGR	imgproc/types_c.h	/^    CV_YUV420sp2BGR = CV_YUV2BGR_NV21,$/;"	e	enum:__anon290
CV_YUV420sp2BGRA	imgproc/types_c.h	/^    CV_YUV420sp2BGRA = CV_YUV2BGRA_NV21,$/;"	e	enum:__anon290
CV_YUV420sp2GRAY	imgproc/types_c.h	/^    CV_YUV420sp2GRAY = CV_YUV2GRAY_420,$/;"	e	enum:__anon290
CV_YUV420sp2RGB	imgproc/types_c.h	/^    CV_YUV420sp2RGB = CV_YUV2RGB_NV21,$/;"	e	enum:__anon290
CV_YUV420sp2RGBA	imgproc/types_c.h	/^    CV_YUV420sp2RGBA = CV_YUV2RGBA_NV21,$/;"	e	enum:__anon290
CV_ZERO_OBJ	core/internal.hpp	429;"	d
CV_mRGBA2RGBA	imgproc/types_c.h	/^    CV_mRGBA2RGBA = 126,$/;"	e	enum:__anon290
CYCLE_O	contrib/contrib.hpp	/^        enum {CYCLE_O, CYCLE_V};$/;"	e	enum:cv::StereoVar::__anon24
CYCLE_V	contrib/contrib.hpp	/^        enum {CYCLE_O, CYCLE_V};$/;"	e	enum:cv::StereoVar::__anon24
C_SVC	ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon245
Calc	ml/ml.hpp	/^    typedef void (CvSVMKernel::*Calc)( int vec_count, int vec_size, const float** vecs,$/;"	t	struct:CvSVMKernel
CalcRho	ml/ml.hpp	/^    typedef void (CvSVMSolver::*CalcRho)( double& rho, double& r );$/;"	t	class:CvSVMSolver
CalculateEndIndex	ts/ts_gtest.h	/^  static int CalculateEndIndex(const T& begin,$/;"	f	class:testing::internal::RangeGenerator
CalonderDescriptorExtractor	legacy/legacy.hpp	/^CalonderDescriptorExtractor<T>::CalonderDescriptorExtractor(const std::string& classifier_file)$/;"	f	class:cv::CalonderDescriptorExtractor
CalonderDescriptorExtractor	legacy/legacy.hpp	/^class CV_EXPORTS CalonderDescriptorExtractor : public DescriptorExtractor$/;"	c	namespace:cv
CameraParams	stitching/detail/camera.hpp	/^struct CV_EXPORTS CameraParams$/;"	s	namespace:cv::detail
Candidate	objdetect/objdetect.hpp	/^  struct Candidate$/;"	s	class:cv::linemod::QuantizedPyramid
Candidate	objdetect/objdetect.hpp	/^inline QuantizedPyramid::Candidate::Candidate(int x, int y, int label, float _score) : f(x, y, label), score(_score) {}$/;"	f	class:cv::linemod::QuantizedPyramid::Candidate
CannyBuf	gpu/gpu.hpp	/^    CannyBuf() {}$/;"	f	struct:cv::gpu::CannyBuf
CannyBuf	gpu/gpu.hpp	/^    explicit CannyBuf(const Size& image_size, int apperture_size = 3) {create(image_size, apperture_size);}$/;"	f	struct:cv::gpu::CannyBuf
CannyBuf	gpu/gpu.hpp	/^struct CV_EXPORTS CannyBuf$/;"	s	namespace:cv::gpu
CannyBuf	gpu/gpu.hpp	/^struct CV_EXPORTS CannyBuf;$/;"	m	namespace:cv::gpu	typeref:struct:cv::gpu::CV_EXPORTS
CannyBuf	ocl/ocl.hpp	/^            CannyBuf() : counter(NULL) {}$/;"	f	struct:cv::ocl::CannyBuf
CannyBuf	ocl/ocl.hpp	/^            explicit CannyBuf(const Size &image_size, int apperture_size = 3) : counter(NULL)$/;"	f	struct:cv::ocl::CannyBuf
CannyBuf	ocl/ocl.hpp	/^        struct CV_EXPORTS CannyBuf$/;"	s	namespace:cv::ocl
CannyBuf	ocl/ocl.hpp	/^        struct CV_EXPORTS CannyBuf;$/;"	m	namespace:cv::ocl	typeref:struct:cv::ocl::CV_EXPORTS
CartesianProductGenerator10	ts/ts_gtest.h	/^  CartesianProductGenerator10(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator10
CartesianProductGenerator10	ts/ts_gtest.h	/^class CartesianProductGenerator10$/;"	c	namespace:testing::internal
CartesianProductGenerator2	ts/ts_gtest.h	/^  CartesianProductGenerator2(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator2
CartesianProductGenerator2	ts/ts_gtest.h	/^class CartesianProductGenerator2$/;"	c	namespace:testing::internal
CartesianProductGenerator3	ts/ts_gtest.h	/^  CartesianProductGenerator3(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator3
CartesianProductGenerator3	ts/ts_gtest.h	/^class CartesianProductGenerator3$/;"	c	namespace:testing::internal
CartesianProductGenerator4	ts/ts_gtest.h	/^  CartesianProductGenerator4(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator4
CartesianProductGenerator4	ts/ts_gtest.h	/^class CartesianProductGenerator4$/;"	c	namespace:testing::internal
CartesianProductGenerator5	ts/ts_gtest.h	/^  CartesianProductGenerator5(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator5
CartesianProductGenerator5	ts/ts_gtest.h	/^class CartesianProductGenerator5$/;"	c	namespace:testing::internal
CartesianProductGenerator6	ts/ts_gtest.h	/^  CartesianProductGenerator6(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator6
CartesianProductGenerator6	ts/ts_gtest.h	/^class CartesianProductGenerator6$/;"	c	namespace:testing::internal
CartesianProductGenerator7	ts/ts_gtest.h	/^  CartesianProductGenerator7(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator7
CartesianProductGenerator7	ts/ts_gtest.h	/^class CartesianProductGenerator7$/;"	c	namespace:testing::internal
CartesianProductGenerator8	ts/ts_gtest.h	/^  CartesianProductGenerator8(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator8
CartesianProductGenerator8	ts/ts_gtest.h	/^class CartesianProductGenerator8$/;"	c	namespace:testing::internal
CartesianProductGenerator9	ts/ts_gtest.h	/^  CartesianProductGenerator9(const ParamGenerator<T1>& g1,$/;"	f	class:testing::internal::CartesianProductGenerator9
CartesianProductGenerator9	ts/ts_gtest.h	/^class CartesianProductGenerator9$/;"	c	namespace:testing::internal
CartesianProductHolder10	ts/ts_gtest.h	/^CartesianProductHolder10(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder10
CartesianProductHolder10	ts/ts_gtest.h	/^class CartesianProductHolder10 {$/;"	c	namespace:testing::internal
CartesianProductHolder2	ts/ts_gtest.h	/^CartesianProductHolder2(const Generator1& g1, const Generator2& g2)$/;"	f	class:testing::internal::CartesianProductHolder2
CartesianProductHolder2	ts/ts_gtest.h	/^class CartesianProductHolder2 {$/;"	c	namespace:testing::internal
CartesianProductHolder3	ts/ts_gtest.h	/^CartesianProductHolder3(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder3
CartesianProductHolder3	ts/ts_gtest.h	/^class CartesianProductHolder3 {$/;"	c	namespace:testing::internal
CartesianProductHolder4	ts/ts_gtest.h	/^CartesianProductHolder4(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder4
CartesianProductHolder4	ts/ts_gtest.h	/^class CartesianProductHolder4 {$/;"	c	namespace:testing::internal
CartesianProductHolder5	ts/ts_gtest.h	/^CartesianProductHolder5(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder5
CartesianProductHolder5	ts/ts_gtest.h	/^class CartesianProductHolder5 {$/;"	c	namespace:testing::internal
CartesianProductHolder6	ts/ts_gtest.h	/^CartesianProductHolder6(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder6
CartesianProductHolder6	ts/ts_gtest.h	/^class CartesianProductHolder6 {$/;"	c	namespace:testing::internal
CartesianProductHolder7	ts/ts_gtest.h	/^CartesianProductHolder7(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder7
CartesianProductHolder7	ts/ts_gtest.h	/^class CartesianProductHolder7 {$/;"	c	namespace:testing::internal
CartesianProductHolder8	ts/ts_gtest.h	/^CartesianProductHolder8(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder8
CartesianProductHolder8	ts/ts_gtest.h	/^class CartesianProductHolder8 {$/;"	c	namespace:testing::internal
CartesianProductHolder9	ts/ts_gtest.h	/^CartesianProductHolder9(const Generator1& g1, const Generator2& g2,$/;"	f	class:testing::internal::CartesianProductHolder9
CartesianProductHolder9	ts/ts_gtest.h	/^class CartesianProductHolder9 {$/;"	c	namespace:testing::internal
CascadeClassifier	objdetect/objdetect.hpp	/^class CV_EXPORTS_W CascadeClassifier$/;"	c	namespace:cv
CascadeClassifier_GPU	gpu/gpu.hpp	/^class CV_EXPORTS CascadeClassifier_GPU$/;"	c	namespace:cv::gpu
Center	features2d/features2d.hpp	/^  struct CV_EXPORTS Center$/;"	s	class:cv::SimpleBlobDetector
ChDir	ts/ts_gtest.h	/^inline int ChDir(const char* dir) { return chdir(dir); }$/;"	f	namespace:std::tr1::posix
ChannelSize	core/wimage.hpp	/^    int ChannelSize() const {return sizeof(T); }  \/\/ number of bytes per channel$/;"	f	class:cv::WImage
Channels	core/wimage.hpp	/^    int Channels() const {return C; }$/;"	f	class:cv::WImageC
Channels	core/wimage.hpp	/^    int Channels() const {return image_->nChannels; }$/;"	f	class:cv::WImage
CheckedDowncastToActualType	ts/ts_gtest.h	/^Derived* CheckedDowncastToActualType(Base* base) {$/;"	f	namespace:std::tr1
ChiSquareDistance	flann/dist.h	/^struct ChiSquareDistance$/;"	s	namespace:cvflann
ChowLiuTree	contrib/openfabmap.hpp	/^class CV_EXPORTS ChowLiuTree {$/;"	c	namespace:cv::of2
ChromaFormat	gpu/gpu.hpp	/^    enum ChromaFormat$/;"	g	class:cv::gpu::VideoReader_GPU
Clear	legacy/blobtrack.hpp	/^    virtual void Clear()$/;"	f	class:CvBlobSeq
ClearStat	gpu/gpu.hpp	/^        int       ClearStat;       \/\/    NVVE_CLEAR_STAT,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ClearTestCaseResult	ts/ts_gtest.h	/^  static void ClearTestCaseResult(TestCase* test_case) {$/;"	f	class:testing::TestCase
ClearTestResult	ts/ts_gtest.h	/^  static void ClearTestResult(TestInfo* test_info) {$/;"	f	class:testing::TestInfo
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<ParamType>* Clone() const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Clone	ts/ts_gtest.h	/^    virtual ParamIteratorInterface<T>* Clone() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
CloneFrom	core/wimage.hpp	/^    void CloneFrom(const WImage<T>& src) {$/;"	f	class:cv::WImageBuffer
CloneFrom	core/wimage.hpp	/^    void CloneFrom(const WImageC<T, C>& src) {$/;"	f	class:cv::WImageBufferC
Close	ts/ts_gtest.h	/^inline int Close(int fd) { return close(fd); }$/;"	f	namespace:std::tr1::posix
ClosePoints	stitching/detail/seam_finders.hpp	/^        ClosePoints(int minDist) : minDist_(minDist) {}$/;"	f	class:cv::detail::DpSeamFinder::ClosePoints
ClosePoints	stitching/detail/seam_finders.hpp	/^    class ClosePoints$/;"	c	class:cv::detail::DpSeamFinder
CmpHelperEQ	ts/ts_gtest.h	/^AssertionResult CmpHelperEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
CmpHelperFloatingPointEQ	ts/ts_gtest.h	/^AssertionResult CmpHelperFloatingPointEQ(const char* expected_expression,$/;"	f	namespace:testing::internal
Codec	gpu/gpu.hpp	/^    enum Codec$/;"	g	class:cv::gpu::VideoReader_GPU
ColorAverageInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS ColorAverageInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
ColorChannel	gpu/device/detail/color_detail.hpp	/^        template<> struct ColorChannel<float>$/;"	s	namespace:cv::gpu::device::color_detail
ColorChannel	gpu/device/detail/color_detail.hpp	/^        template<typename T> struct ColorChannel$/;"	s	namespace:cv::gpu::device::color_detail
ColorGradient	objdetect/objdetect.hpp	/^class CV_EXPORTS ColorGradient : public Modality$/;"	c	namespace:cv::linemod
ColorInpainter	videostab/inpainting.hpp	/^    ColorInpainter(int method = INPAINT_TELEA, double _radius = 2.)$/;"	f	class:cv::videostab::ColorInpainter
ColorInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS ColorInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
Combine	ts/ts_gtest.h	/^    Generator10> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5, Generator6, Generator7, Generator8> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5, Generator6, Generator7> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5, Generator6> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4, Generator5> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator4> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^    Generator9> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^internal::CartesianProductHolder2<Generator1, Generator2> Combine($/;"	f	namespace:testing
Combine	ts/ts_gtest.h	/^internal::CartesianProductHolder3<Generator1, Generator2, Generator3> Combine($/;"	f	namespace:testing
Compare	ts/ts_gtest.h	/^  static AssertionResult Compare($/;"	f	class:testing::internal::EqHelper
Compare	ts/ts_gtest.h	/^  static AssertionResult Compare(const char* expected_expression,$/;"	f	class:testing::internal::EqHelper
CompareT	flann/heap.h	/^    struct CompareT$/;"	s	class:cvflann::Heap
CompileAssertTypesEqual	ts/ts_gtest.h	/^struct CompileAssertTypesEqual<T, T> {$/;"	s	namespace:testing::internal
Complex	core/core.hpp	75;"	d
Complex	core/operations.hpp	/^template<typename _Tp> inline Complex<_Tp>::Complex( _Tp _re, _Tp _im ) : re(_re), im(_im) {}$/;"	f	class:cv::Complex
Complex	core/operations.hpp	/^template<typename _Tp> inline Complex<_Tp>::Complex() : re(0), im(0) {}$/;"	f	class:cv::Complex
ComponentState	stitching/detail/seam_finders.hpp	/^    enum ComponentState$/;"	g	class:cv::detail::DpSeamFinder
CompositeIndex	flann/composite_index.h	/^    CompositeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = CompositeIndexParams(),$/;"	f	class:cvflann::CompositeIndex
CompositeIndex	flann/composite_index.h	/^class CompositeIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
CompositeIndexParams	flann/composite_index.h	/^    CompositeIndexParams(int trees = 4, int branching = 32, int iterations = 11,$/;"	f	struct:cvflann::CompositeIndexParams
CompositeIndexParams	flann/composite_index.h	/^struct CompositeIndexParams : public IndexParams$/;"	s	namespace:cvflann
CompositeIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS CompositeIndexParams : public IndexParams$/;"	s	namespace:cv::flann
CompressedRectilinearPortraitProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS CompressedRectilinearPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
CompressedRectilinearPortraitWarper	stitching/detail/warpers.hpp	/^   CompressedRectilinearPortraitWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::CompressedRectilinearPortraitWarper
CompressedRectilinearPortraitWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS CompressedRectilinearPortraitWarper : public RotationWarperBase<CompressedRectilinearPortraitProjector>$/;"	c	namespace:cv::detail
CompressedRectilinearPortraitWarper	stitching/warpers.hpp	/^    CompressedRectilinearPortraitWarper(float A = 1, float B = 1)$/;"	f	class:cv::CompressedRectilinearPortraitWarper
CompressedRectilinearPortraitWarper	stitching/warpers.hpp	/^class CompressedRectilinearPortraitWarper: public WarperCreator$/;"	c	namespace:cv
CompressedRectilinearProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS CompressedRectilinearProjector : ProjectorBase$/;"	s	namespace:cv::detail
CompressedRectilinearWarper	stitching/detail/warpers.hpp	/^    CompressedRectilinearWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::CompressedRectilinearWarper
CompressedRectilinearWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS CompressedRectilinearWarper : public RotationWarperBase<CompressedRectilinearProjector>$/;"	c	namespace:cv::detail
CompressedRectilinearWarper	stitching/warpers.hpp	/^    CompressedRectilinearWarper(float A = 1, float B = 1)$/;"	f	class:cv::CompressedRectilinearWarper
CompressedRectilinearWarper	stitching/warpers.hpp	/^class CompressedRectilinearWarper: public WarperCreator$/;"	c	namespace:cv
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
ComputeCurrentValue	ts/ts_gtest.h	/^    void ComputeCurrentValue() {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
ConcurrentDoubleVector	core/internal.hpp	/^    typedef tbb::concurrent_vector<double> ConcurrentDoubleVector;$/;"	t	namespace:cv
ConcurrentRectVector	core/internal.hpp	/^    typedef tbb::concurrent_vector<Rect> ConcurrentRectVector;$/;"	t	namespace:cv
ConsistentMosaicInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS ConsistentMosaicInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
ConstCharPtr	ts/ts_gtest.h	/^  ConstCharPtr(const char* str) : value(str) {}$/;"	f	struct:testing::internal::ConstCharPtr
ConstCharPtr	ts/ts_gtest.h	/^struct GTEST_API_ ConstCharPtr {$/;"	s	namespace:testing::internal
ConstructNonNull	ts/ts_gtest.h	/^  void ConstructNonNull(const char* buffer, size_t a_length) {$/;"	f	class:testing::internal::String
ContainerType	ts/ts_gtest.h	/^  typedef typename ::std::vector<T> ContainerType;$/;"	t	class:testing::internal::ValuesInIteratorRangeGenerator
Context	ocl/ocl.hpp	/^        class Context$/;"	c	namespace:cv::ocl
ConvolveBuf	gpu/gpu.hpp	/^struct CV_EXPORTS ConvolveBuf$/;"	s	namespace:cv::gpu
CopyArray	ts/ts_gtest.h	/^inline void CopyArray(const T& from, U* to) { *to = from; }$/;"	f	namespace:testing::internal
CopyArray	ts/ts_gtest.h	/^void CopyArray(const T* from, size_t size, U* to) {$/;"	f	namespace:testing::internal
CopyFrom	core/wimage.hpp	/^    void CopyFrom(const WImage<T>& src) { cvCopy(src.Ipl(), image_); }$/;"	f	class:cv::WImage
CopyFrom	core/wimage.hpp	/^    void CopyFrom(const WImageC<T, C>& src) {$/;"	f	class:cv::WImageC
CostData	flann/autotuned_index.h	/^    struct CostData$/;"	s	class:cvflann::AutotunedIndex
CostFunction	stitching/detail/seam_finders.hpp	/^    enum CostFunction { COLOR, COLOR_GRAD };$/;"	g	class:cv::detail::DpSeamFinder
CreateKey	ts/ts_gtest.h	/^  static pthread_key_t CreateKey() {$/;"	f	class:std::tr1::ThreadLocal
CreateTest	ts/ts_gtest.h	/^  virtual Test* CreateTest() { return new TestClass; }$/;"	f	class:testing::internal::TestFactoryImpl
CreateTest	ts/ts_gtest.h	/^  virtual Test* CreateTest() {$/;"	f	class:testing::internal::ParameterizedTestFactory
CreateTestFactory	ts/ts_gtest.h	/^  virtual TestFactoryBase* CreateTestFactory(ParamType parameter) {$/;"	f	class:testing::internal::TestMetaFactory
CreatorNotFound	flann/object_factory.h	/^class CreatorNotFound$/;"	c	namespace:cvflann
Csr	contrib/contrib.hpp	/^        vector<int> Csr;$/;"	m	class:cv::LogPolar_Overlapping
Csri	contrib/contrib.hpp	/^        Mat Csri;$/;"	m	class:cv::LogPolar_Interp
Csri	contrib/contrib.hpp	/^        Mat Csri;$/;"	m	class:cv::LogPolar_Overlapping
CubicFilter	gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ CubicFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::gpu::device::CubicFilter
CubicFilter	gpu/device/filters.hpp	/^    template <typename Ptr2D> struct CubicFilter$/;"	s	namespace:cv::gpu::device
CudaMem	gpu/gpu.hpp	/^class CV_EXPORTS CudaMem$/;"	c	namespace:cv::gpu
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Current	ts/ts_gtest.h	/^    virtual const ParamType* Current() const { return &current_value_; }$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Current	ts/ts_gtest.h	/^    virtual const T* Current() const { return &value_; }$/;"	f	class:testing::internal::RangeGenerator::Iterator
Current	ts/ts_gtest.h	/^    virtual const T* Current() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Cv1DObsInfo	legacy/legacy.hpp	/^typedef CvImgObsInfo Cv1DObsInfo;$/;"	t
Cv32suf	core/types_c.h	/^Cv32suf;$/;"	t	typeref:union:Cv32suf
Cv32suf	core/types_c.h	/^typedef union Cv32suf$/;"	u
Cv3dTracker2dTrackedObject	legacy/legacy.hpp	/^typedef struct Cv3dTracker2dTrackedObject$/;"	s
Cv3dTracker2dTrackedObject	legacy/legacy.hpp	/^} Cv3dTracker2dTrackedObject;$/;"	t	typeref:struct:Cv3dTracker2dTrackedObject
Cv3dTrackerCameraInfo	legacy/legacy.hpp	/^typedef struct Cv3dTrackerCameraInfo$/;"	s
Cv3dTrackerCameraInfo	legacy/legacy.hpp	/^} Cv3dTrackerCameraInfo;$/;"	t	typeref:struct:Cv3dTrackerCameraInfo
Cv3dTrackerCameraIntrinsics	legacy/legacy.hpp	/^typedef struct Cv3dTrackerCameraIntrinsics$/;"	s
Cv3dTrackerCameraIntrinsics	legacy/legacy.hpp	/^} Cv3dTrackerCameraIntrinsics;$/;"	t	typeref:struct:Cv3dTrackerCameraIntrinsics
Cv3dTrackerTrackedObject	legacy/legacy.hpp	/^typedef struct Cv3dTrackerTrackedObject$/;"	s
Cv3dTrackerTrackedObject	legacy/legacy.hpp	/^} Cv3dTrackerTrackedObject;$/;"	t	typeref:struct:Cv3dTrackerTrackedObject
Cv64suf	core/types_c.h	/^Cv64suf;$/;"	t	typeref:union:Cv64suf
Cv64suf	core/types_c.h	/^typedef union Cv64suf$/;"	u
CvANN_MLP	ml/ml.hpp	/^class CV_EXPORTS_W CvANN_MLP : public CvStatModel$/;"	c
CvANN_MLP_TrainParams	ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvANN_MLP_TrainParams$/;"	s
CvAdaptiveSkinDetector	contrib/contrib.hpp	/^class CV_EXPORTS CvAdaptiveSkinDetector$/;"	c
CvAdaptiveThreshMethod	legacy/compat.hpp	/^typedef int CvAdaptiveThreshMethod;$/;"	t
CvAffinePose	legacy/legacy.hpp	/^class CV_EXPORTS CvAffinePose$/;"	c	namespace:cv
CvAllocFunc	core/core_c.h	/^typedef void* (CV_CDECL *CvAllocFunc)(size_t size, void* userdata);$/;"	t
CvArr	core/types_c.h	/^typedef void CvArr;$/;"	t
CvAttrList	core/types_c.h	/^CvAttrList;$/;"	t	typeref:struct:CvAttrList
CvAttrList	core/types_c.h	/^typedef struct CvAttrList$/;"	s
CvAvgComp	objdetect/objdetect.hpp	/^typedef struct CvAvgComp$/;"	s
CvAvgComp	objdetect/objdetect.hpp	/^} CvAvgComp;$/;"	t	typeref:struct:CvAvgComp
CvBGCodeBookElem	legacy/legacy.hpp	/^typedef struct CvBGCodeBookElem$/;"	s
CvBGCodeBookElem	legacy/legacy.hpp	/^} CvBGCodeBookElem;$/;"	t	typeref:struct:CvBGCodeBookElem
CvBGCodeBookModel	legacy/legacy.hpp	/^typedef struct CvBGCodeBookModel$/;"	s
CvBGCodeBookModel	legacy/legacy.hpp	/^} CvBGCodeBookModel;$/;"	t	typeref:struct:CvBGCodeBookModel
CvBGPixelCCStatTable	legacy/legacy.hpp	/^typedef struct CvBGPixelCCStatTable$/;"	s
CvBGPixelCCStatTable	legacy/legacy.hpp	/^} CvBGPixelCCStatTable;$/;"	t	typeref:struct:CvBGPixelCCStatTable
CvBGPixelCStatTable	legacy/legacy.hpp	/^typedef struct CvBGPixelCStatTable$/;"	s
CvBGPixelCStatTable	legacy/legacy.hpp	/^} CvBGPixelCStatTable;$/;"	t	typeref:struct:CvBGPixelCStatTable
CvBGPixelStat	legacy/legacy.hpp	/^typedef struct CvBGPixelStat$/;"	s
CvBGPixelStat	legacy/legacy.hpp	/^} CvBGPixelStat;$/;"	t	typeref:struct:CvBGPixelStat
CvBGStatModel	legacy/legacy.hpp	/^typedef struct CvBGStatModel$/;"	s
CvBGStatModel	legacy/legacy.hpp	/^} CvBGStatModel;$/;"	t	typeref:struct:CvBGStatModel
CvBigFuncTable	core/internal.hpp	/^typedef struct CvBigFuncTable$/;"	s
CvBigFuncTable	core/internal.hpp	/^} CvBigFuncTable;$/;"	t	typeref:struct:CvBigFuncTable
CvBlob	legacy/blobtrack.hpp	/^struct CvBlob$/;"	s
CvBlobDetector	legacy/blobtrack.hpp	/^    CvBlobDetector(){SetTypeName("BlobDetector");};$/;"	f	class:CvBlobDetector
CvBlobDetector	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobDetector: public CvVSModule$/;"	c
CvBlobSeq	legacy/blobtrack.hpp	/^    CvBlobSeq(int BlobSize = sizeof(CvBlob))$/;"	f	class:CvBlobSeq
CvBlobSeq	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobSeq$/;"	c
CvBlobTrack	legacy/blobtrack.hpp	/^struct CvBlobTrack$/;"	s
CvBlobTrackAnalysis	legacy/blobtrack.hpp	/^    CvBlobTrackAnalysis(){SetTypeName("BlobTrackAnalysis");};$/;"	f	class:CvBlobTrackAnalysis
CvBlobTrackAnalysis	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackAnalysis: public CvVSModule$/;"	c
CvBlobTrackAnalysisHeight	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackAnalysisHeight: public CvBlobTrackAnalysis$/;"	c
CvBlobTrackAnalysisOne	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackAnalysisOne$/;"	c
CvBlobTrackFVGen	legacy/blobtrack.hpp	/^    CvBlobTrackFVGen(){SetTypeName("BlobTrackFVGen");};$/;"	f	class:CvBlobTrackFVGen
CvBlobTrackFVGen	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackFVGen : public CvVSModule$/;"	c
CvBlobTrackGen	legacy/blobtrack.hpp	/^    CvBlobTrackGen(){SetTypeName("BlobTrackGen");};$/;"	f	class:CvBlobTrackGen
CvBlobTrackGen	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackGen: public CvVSModule$/;"	c
CvBlobTrackPostProc	legacy/blobtrack.hpp	/^    CvBlobTrackPostProc(){SetTypeName("BlobTrackPostProc");};$/;"	f	class:CvBlobTrackPostProc
CvBlobTrackPostProc	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackPostProc: public CvVSModule$/;"	c
CvBlobTrackPostProcOne	legacy/blobtrack.hpp	/^    CvBlobTrackPostProcOne(){SetTypeName("BlobTrackPostOne");};$/;"	f	class:CvBlobTrackPostProcOne
CvBlobTrackPostProcOne	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackPostProcOne: public CvVSModule$/;"	c
CvBlobTrackPredictor	legacy/blobtrack.hpp	/^    CvBlobTrackPredictor(){SetTypeName("BlobTrackPredictor");};$/;"	f	class:CvBlobTrackPredictor
CvBlobTrackPredictor	legacy/blobtrack.hpp	/^class CvBlobTrackPredictor: public CvVSModule$/;"	c
CvBlobTrackSeq	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackSeq$/;"	c
CvBlobTracker	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTracker: public CvVSModule$/;"	c
CvBlobTrackerAuto	legacy/blobtrack.hpp	/^    CvBlobTrackerAuto(){SetTypeName("BlobTrackerAuto");};$/;"	f	class:CvBlobTrackerAuto
CvBlobTrackerAuto	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackerAuto: public CvVSModule$/;"	c
CvBlobTrackerAutoParam1	legacy/blobtrack.hpp	/^struct CvBlobTrackerAutoParam1$/;"	s
CvBlobTrackerOne	legacy/blobtrack.hpp	/^class CV_EXPORTS CvBlobTrackerOne : public CvVSModule$/;"	c
CvBlobTrackerParamLH	legacy/blobtrack.hpp	/^struct CvBlobTrackerParamLH$/;"	s
CvBlobTrackerParamMS	legacy/blobtrack.hpp	/^struct CvBlobTrackerParamMS$/;"	s
CvBool	legacy/legacy.hpp	/^typedef unsigned char CvBool;$/;"	t
CvBoost	ml/ml.hpp	/^class CV_EXPORTS_W CvBoost : public CvStatModel$/;"	c
CvBoostParams	ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvBoostParams : public CvDTreeParams$/;"	s
CvBoostTree	ml/ml.hpp	/^class CV_EXPORTS CvBoostTree: public CvDTree$/;"	c
CvBox2D	core/types_c.h	/^CvBox2D;$/;"	t	typeref:struct:CvBox2D
CvBox2D	core/types_c.h	/^typedef struct CvBox2D$/;"	s
CvBox2D32f	legacy/compat.hpp	/^typedef CvBox2D  CvBox2D32f;$/;"	t
CvButtonCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvButtonCallback)(int state, void* userdata);$/;"	t
CvCalibEtalonType	legacy/legacy.hpp	/^CvCalibEtalonType;$/;"	t	typeref:enum:CvCalibEtalonType
CvCalibEtalonType	legacy/legacy.hpp	/^typedef enum CvCalibEtalonType$/;"	g
CvCalibFilter	legacy/legacy.hpp	/^class CV_EXPORTS CvCalibFilter$/;"	c
CvCallback	legacy/legacy.hpp	/^typedef int (CV_CDECL * CvCallback)(int index, void* buffer, void* user_data);$/;"	t
CvCamShiftTracker	legacy/legacy.hpp	/^class CV_EXPORTS CvCamShiftTracker$/;"	c
CvCamera	legacy/legacy.hpp	/^typedef struct CvCamera$/;"	s
CvCamera	legacy/legacy.hpp	/^} CvCamera;$/;"	t	typeref:struct:CvCamera
CvCapture	highgui/highgui_c.h	/^typedef struct CvCapture CvCapture;$/;"	t	typeref:struct:CvCapture
CvChain	core/types_c.h	/^CvChain;$/;"	t	typeref:struct:CvChain
CvChain	core/types_c.h	/^typedef struct CvChain$/;"	s
CvChainApproxMethod	legacy/compat.hpp	/^typedef int CvChainApproxMethod;$/;"	t
CvChainPtReader	imgproc/types_c.h	/^CvChainPtReader;$/;"	t	typeref:struct:CvChainPtReader
CvChainPtReader	imgproc/types_c.h	/^typedef struct CvChainPtReader$/;"	s
CvCliqueFinder	legacy/legacy.hpp	/^typedef struct CvCliqueFinder$/;"	s
CvCliqueFinder	legacy/legacy.hpp	/^} CvCliqueFinder;$/;"	t	typeref:struct:CvCliqueFinder
CvCloneFunc	core/types_c.h	/^typedef void* (CV_CDECL *CvCloneFunc)( const void* struct_ptr );$/;"	t
CvCmpFunc	core/core_c.h	/^typedef int (CV_CDECL* CvCmpFunc)(const void* a, const void* b, void* userdata );$/;"	t
CvCoeffType	legacy/compat.hpp	/^typedef int CvCoeffType;$/;"	t
CvCompareMethod	legacy/compat.hpp	/^typedef int CvCompareMethod;$/;"	t
CvConDensation	legacy/legacy.hpp	/^typedef struct CvConDensation$/;"	s
CvConDensation	legacy/legacy.hpp	/^} CvConDensation;$/;"	t	typeref:struct:CvConDensation
CvConnectedComp	imgproc/types_c.h	/^CvConnectedComp;$/;"	t	typeref:struct:CvConnectedComp
CvConnectedComp	imgproc/types_c.h	/^typedef struct CvConnectedComp$/;"	s
CvContour	core/types_c.h	/^CvContour;$/;"	t	typeref:struct:CvContour
CvContour	core/types_c.h	/^typedef struct CvContour$/;"	s
CvContourOrientation	legacy/legacy.hpp	/^typedef struct CvContourOrientation$/;"	s
CvContourOrientation	legacy/legacy.hpp	/^} CvContourOrientation;$/;"	t	typeref:struct:CvContourOrientation
CvContourRetrievalMode	legacy/compat.hpp	/^typedef int CvContourRetrievalMode;$/;"	t
CvContourScanner	imgproc/types_c.h	/^typedef struct _CvContourScanner* CvContourScanner;$/;"	t	typeref:struct:_CvContourScanner
CvContourTree	legacy/legacy.hpp	/^typedef struct CvContourTree$/;"	s
CvContourTree	legacy/legacy.hpp	/^} CvContourTree;$/;"	t	typeref:struct:CvContourTree
CvContourTreesMatchMethod	legacy/compat.hpp	/^typedef int CvContourTreesMatchMethod;$/;"	t
CvContoursMatchMethod	legacy/compat.hpp	/^typedef int CvContoursMatchMethod;$/;"	t
CvConvexityDefect	imgproc/types_c.h	/^typedef struct CvConvexityDefect$/;"	s
CvConvexityDefect	imgproc/types_c.h	/^} CvConvexityDefect;$/;"	t	typeref:struct:CvConvexityDefect
CvDTree	ml/ml.hpp	/^class CV_EXPORTS_W CvDTree : public CvStatModel$/;"	c
CvDTreeNode	ml/ml.hpp	/^struct CvDTreeNode$/;"	s
CvDTreeParams	ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvDTreeParams$/;"	s
CvDTreeSplit	ml/ml.hpp	/^struct CvDTreeSplit$/;"	s
CvDTreeTrainData	ml/ml.hpp	/^struct CV_EXPORTS CvDTreeTrainData$/;"	s
CvDataMatrixCode	objdetect/objdetect.hpp	/^struct CV_EXPORTS CvDataMatrixCode {$/;"	s
CvDefParam	legacy/blobtrack.hpp	/^struct CvDefParam$/;"	s
CvDetectedBlob	legacy/blobtrack.hpp	/^struct CV_EXPORTS CvDetectedBlob : public CvBlob$/;"	s
CvDisMaskType	legacy/compat.hpp	/^typedef int CvDisMaskType;$/;"	t
CvDisType	legacy/compat.hpp	/^typedef int CvDisType;$/;"	t
CvDistanceFunction	imgproc/types_c.h	/^typedef float (CV_CDECL * CvDistanceFunction)( const float* a, const float* b, void* user_param );$/;"	t
CvDrawShape	legacy/blobtrack.hpp	/^struct CvDrawShape$/;"	s
CvEHMM	legacy/legacy.hpp	/^typedef struct CvEHMM$/;"	s
CvEHMM	legacy/legacy.hpp	/^} CvEHMM;$/;"	t	typeref:struct:CvEHMM
CvEHMMState	legacy/legacy.hpp	/^typedef struct CvEHMMState$/;"	s
CvEHMMState	legacy/legacy.hpp	/^} CvEHMMState;$/;"	t	typeref:struct:CvEHMMState
CvEM	legacy/legacy.hpp	/^class CV_EXPORTS_W CvEM : public CvStatModel$/;"	c
CvEMParams	legacy/legacy.hpp	/^struct CV_EXPORTS_W_MAP CvEMParams$/;"	s
CvERTreeTrainData	ml/ml.hpp	/^struct CV_EXPORTS CvERTreeTrainData : public CvDTreeTrainData$/;"	s
CvERTrees	ml/ml.hpp	/^class CV_EXPORTS_W CvERTrees : public CvRTrees$/;"	c
CvElementShape	legacy/compat.hpp	/^typedef int CvElementShape;$/;"	t
CvErrorCallback	core/core_c.h	/^typedef int (CV_CDECL *CvErrorCallback)( int status, const char* func_name,$/;"	t
CvFGDStatModel	legacy/legacy.hpp	/^typedef struct CvFGDStatModel$/;"	s
CvFGDStatModel	legacy/legacy.hpp	/^} CvFGDStatModel;$/;"	t	typeref:struct:CvFGDStatModel
CvFGDStatModelParams	legacy/legacy.hpp	/^typedef struct CvFGDStatModelParams$/;"	s
CvFGDStatModelParams	legacy/legacy.hpp	/^} CvFGDStatModelParams;$/;"	t	typeref:struct:CvFGDStatModelParams
CvFGDetector	legacy/blobtrack.hpp	/^class CV_EXPORTS CvFGDetector : public CvVSModule$/;"	c
CvFace	legacy/legacy.hpp	/^typedef struct CvFace$/;"	s
CvFaceData	legacy/legacy.hpp	/^} CvFaceData;$/;"	t	typeref:struct:CvFace
CvFaceTracker	legacy/legacy.hpp	/^typedef struct CvFaceTracker CvFaceTracker;$/;"	t	typeref:struct:CvFaceTracker
CvFeatureTracker	contrib/hybridtracker.hpp	/^class CV_EXPORTS CvFeatureTracker$/;"	c	namespace:cv
CvFeatureTrackerParams	contrib/hybridtracker.hpp	/^    CvFeatureTrackerParams(int featureType = 0, int windowSize = 0)$/;"	f	struct:cv::CvFeatureTrackerParams
CvFeatureTrackerParams	contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvFeatureTrackerParams$/;"	s	namespace:cv
CvFileNode	core/types_c.h	/^CvFileNode;$/;"	t	typeref:struct:CvFileNode
CvFileNode	core/types_c.h	/^typedef struct CvFileNode$/;"	s
CvFileNodeHash	core/types_c.h	/^typedef struct CvGenericHash CvFileNodeHash;$/;"	t	typeref:struct:CvGenericHash
CvFileStorage	core/types_c.h	/^typedef struct CvFileStorage CvFileStorage;$/;"	t	typeref:struct:CvFileStorage
CvFont	core/core_c.h	/^CvFont;$/;"	t	typeref:struct:CvFont
CvFont	core/core_c.h	/^typedef struct CvFont$/;"	s
CvFontFace	legacy/compat.hpp	/^typedef int CvFontFace;$/;"	t
CvForestERTree	ml/ml.hpp	/^class CV_EXPORTS CvForestERTree : public CvForestTree$/;"	c
CvForestTree	ml/ml.hpp	/^class CV_EXPORTS CvForestTree: public CvDTree$/;"	c
CvFreeFunc	core/core_c.h	/^typedef int (CV_CDECL *CvFreeFunc)(void* pptr, void* userdata);$/;"	t
CvFuncTable	core/internal.hpp	/^CvFuncTable;$/;"	t	typeref:struct:CvFuncTable
CvFuncTable	core/internal.hpp	/^typedef struct CvFuncTable$/;"	s
CvFuzzyController	contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyController {$/;"	c
CvFuzzyCurve	contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyCurve {$/;"	c
CvFuzzyFunction	contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyFunction {$/;"	c
CvFuzzyMeanShiftTracker	contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyMeanShiftTracker$/;"	c
CvFuzzyPoint	contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyPoint {$/;"	c
CvFuzzyRule	contrib/contrib.hpp	/^class CV_EXPORTS CvFuzzyRule {$/;"	c
CvGBTrees	ml/ml.hpp	/^class CV_EXPORTS_W CvGBTrees : public CvStatModel$/;"	c
CvGBTreesParams	ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvGBTreesParams : public CvDTreeParams$/;"	s
CvGLCM	legacy/legacy.hpp	/^typedef struct CvGLCM CvGLCM;$/;"	t	typeref:struct:CvGLCM
CvGaussBGModel	legacy/legacy.hpp	/^typedef struct CvGaussBGModel$/;"	s
CvGaussBGModel	legacy/legacy.hpp	/^} CvGaussBGModel;$/;"	t	typeref:struct:CvGaussBGModel
CvGaussBGPoint	legacy/legacy.hpp	/^typedef struct CvGaussBGPoint$/;"	s
CvGaussBGPoint	legacy/legacy.hpp	/^} CvGaussBGPoint;$/;"	t	typeref:struct:CvGaussBGPoint
CvGaussBGStatModelParams	legacy/legacy.hpp	/^typedef struct CvGaussBGStatModelParams$/;"	s
CvGaussBGStatModelParams	legacy/legacy.hpp	/^}CvGaussBGStatModelParams;$/;"	t	typeref:struct:CvGaussBGStatModelParams
CvGaussBGValues	legacy/legacy.hpp	/^typedef struct CvGaussBGValues$/;"	s
CvGaussBGValues	legacy/legacy.hpp	/^} CvGaussBGValues;$/;"	t	typeref:struct:CvGaussBGValues
CvGraph	core/types_c.h	/^CvGraph;$/;"	t	typeref:struct:CvGraph
CvGraph	core/types_c.h	/^typedef struct CvGraph$/;"	s
CvGraphEdge	core/types_c.h	/^CvGraphEdge;$/;"	t	typeref:struct:CvGraphEdge
CvGraphEdge	core/types_c.h	/^typedef struct CvGraphEdge$/;"	s
CvGraphScanner	core/core_c.h	/^CvGraphScanner;$/;"	t	typeref:struct:CvGraphScanner
CvGraphScanner	core/core_c.h	/^typedef struct CvGraphScanner$/;"	s
CvGraphVtx	core/types_c.h	/^CvGraphVtx;$/;"	t	typeref:struct:CvGraphVtx
CvGraphVtx	core/types_c.h	/^typedef struct CvGraphVtx$/;"	s
CvGraphVtx2D	core/types_c.h	/^CvGraphVtx2D;$/;"	t	typeref:struct:CvGraphVtx2D
CvGraphVtx2D	core/types_c.h	/^typedef struct CvGraphVtx2D$/;"	s
CvGraphWeightType	legacy/legacy.hpp	/^typedef enum CvGraphWeightType$/;"	g
CvGraphWeightType	legacy/legacy.hpp	/^} CvGraphWeightType;$/;"	t	typeref:enum:CvGraphWeightType
CvGraphWeightedEdge	legacy/legacy.hpp	/^typedef struct CvGraphWeightedEdge$/;"	s
CvGraphWeightedEdge	legacy/legacy.hpp	/^} CvGraphWeightedEdge;$/;"	t	typeref:struct:CvGraphWeightedEdge
CvGraphWeightedVtx	legacy/legacy.hpp	/^typedef struct CvGraphWeightedVtx$/;"	s
CvGraphWeightedVtx	legacy/legacy.hpp	/^} CvGraphWeightedVtx;$/;"	t	typeref:struct:CvGraphWeightedVtx
CvHaarClassifier	objdetect/objdetect.hpp	/^typedef struct CvHaarClassifier$/;"	s
CvHaarClassifier	objdetect/objdetect.hpp	/^} CvHaarClassifier;$/;"	t	typeref:struct:CvHaarClassifier
CvHaarClassifierCascade	objdetect/objdetect.hpp	/^typedef struct CvHaarClassifierCascade$/;"	s
CvHaarClassifierCascade	objdetect/objdetect.hpp	/^} CvHaarClassifierCascade;$/;"	t	typeref:struct:CvHaarClassifierCascade
CvHaarFeature	objdetect/objdetect.hpp	/^typedef struct CvHaarFeature$/;"	s
CvHaarFeature	objdetect/objdetect.hpp	/^} CvHaarFeature;$/;"	t	typeref:struct:CvHaarFeature
CvHaarStageClassifier	objdetect/objdetect.hpp	/^typedef struct CvHaarStageClassifier$/;"	s
CvHaarStageClassifier	objdetect/objdetect.hpp	/^} CvHaarStageClassifier;$/;"	t	typeref:struct:CvHaarStageClassifier
CvHidHaarClassifierCascade	objdetect/objdetect.hpp	/^typedef struct CvHidHaarClassifierCascade CvHidHaarClassifierCascade;$/;"	t	typeref:struct:CvHidHaarClassifierCascade
CvHistType	core/types_c.h	/^typedef int CvHistType;$/;"	t
CvHistogram	core/types_c.h	/^CvHistogram;$/;"	t	typeref:struct:CvHistogram
CvHistogram	core/types_c.h	/^typedef struct CvHistogram$/;"	s
CvHuMoments	imgproc/types_c.h	/^CvHuMoments;$/;"	t	typeref:struct:CvHuMoments
CvHuMoments	imgproc/types_c.h	/^typedef struct CvHuMoments$/;"	s
CvHybridTracker	contrib/hybridtracker.hpp	/^class CV_EXPORTS CvHybridTracker$/;"	c	namespace:cv
CvHybridTrackerParams	contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvHybridTrackerParams$/;"	s	namespace:cv
CvImage	legacy/legacy.hpp	/^    CvImage( CvFileStorage* fs, const char* mapname, const char* imgname ) : image(0), refcount(0)$/;"	f	class:CvImage
CvImage	legacy/legacy.hpp	/^    CvImage( CvFileStorage* fs, const char* seqname, int idx ) : image(0), refcount(0)$/;"	f	class:CvImage
CvImage	legacy/legacy.hpp	/^    CvImage( CvSize _size, int _depth, int _channels )$/;"	f	class:CvImage
CvImage	legacy/legacy.hpp	/^    CvImage( IplImage* img ) : image(img)$/;"	f	class:CvImage
CvImage	legacy/legacy.hpp	/^    CvImage( const CvImage& img ) : image(img.image), refcount(img.refcount)$/;"	f	class:CvImage
CvImage	legacy/legacy.hpp	/^    CvImage( const char* filename, const char* imgname=0, int color=-1 ) : image(0), refcount(0)$/;"	f	class:CvImage
CvImage	legacy/legacy.hpp	/^    CvImage() : image(0), refcount(0) {}$/;"	f	class:CvImage
CvImage	legacy/legacy.hpp	/^class CV_EXPORTS CvImage$/;"	c
CvImageDrawer	legacy/blobtrack.hpp	/^    CvImageDrawer() : m_image(0) {}$/;"	f	class:CvImageDrawer
CvImageDrawer	legacy/blobtrack.hpp	/^class CV_EXPORTS CvImageDrawer$/;"	c
CvImgObsInfo	legacy/legacy.hpp	/^typedef struct CvImgObsInfo$/;"	s
CvImgObsInfo	legacy/legacy.hpp	/^} CvImgObsInfo;\/*struct for 1 image*\/$/;"	t	typeref:struct:CvImgObsInfo
CvInput	legacy/legacy.hpp	/^CvInput;$/;"	t	typeref:union:__anon6
CvIsInstanceFunc	core/types_c.h	/^typedef int (CV_CDECL *CvIsInstanceFunc)( const void* struct_ptr );$/;"	t
CvKNearest	ml/ml.hpp	/^class CV_EXPORTS_W CvKNearest : public CvStatModel$/;"	c
CvKalman	video/tracking.hpp	/^typedef struct CvKalman$/;"	s
CvKalman	video/tracking.hpp	/^} CvKalman;$/;"	t	typeref:struct:CvKalman
CvLCMEdge	legacy/legacy.hpp	/^typedef struct CvLCMEdge$/;"	s
CvLCMEdge	legacy/legacy.hpp	/^} CvLCMEdge;$/;"	t	typeref:struct:CvLCMEdge
CvLCMNode	legacy/legacy.hpp	/^typedef struct CvLCMNode$/;"	s
CvLCMNode	legacy/legacy.hpp	/^} CvLCMNode;$/;"	t	typeref:struct:CvLCMNode
CvLSHOperations	legacy/legacy.hpp	/^struct CvLSHOperations$/;"	s
CvLSVMFilterObject	objdetect/objdetect.hpp	/^typedef struct CvLSVMFilterObject{$/;"	s
CvLSVMFilterObject	objdetect/objdetect.hpp	/^} CvLSVMFilterObject;$/;"	t	typeref:struct:CvLSVMFilterObject
CvLSVMFilterPosition	objdetect/objdetect.hpp	/^typedef struct CvLSVMFilterPosition$/;"	s
CvLSVMFilterPosition	objdetect/objdetect.hpp	/^} CvLSVMFilterPosition;$/;"	t	typeref:struct:CvLSVMFilterPosition
CvLatentSvmDetector	objdetect/objdetect.hpp	/^CvLatentSvmDetector;$/;"	t	typeref:struct:CvLatentSvmDetector
CvLatentSvmDetector	objdetect/objdetect.hpp	/^typedef struct CvLatentSvmDetector$/;"	s
CvLeeParameters	legacy/legacy.hpp	/^typedef enum CvLeeParameters$/;"	g
CvLeeParameters	legacy/legacy.hpp	/^} CvLeeParameters;$/;"	t	typeref:enum:CvLeeParameters
CvLevMarq	calib3d/calib3d.hpp	/^class CV_EXPORTS CvLevMarq$/;"	c
CvLineIterator	core/types_c.h	/^CvLineIterator;$/;"	t	typeref:struct:CvLineIterator
CvLineIterator	core/types_c.h	/^typedef struct CvLineIterator$/;"	s
CvMLData	ml/ml.hpp	/^class CV_EXPORTS CvMLData$/;"	c
CvMSERParams	legacy/compat.hpp	/^typedef struct CvMSERParams$/;"	s
CvMSERParams	legacy/compat.hpp	/^} CvMSERParams;$/;"	t	typeref:struct:CvMSERParams
CvMat	core/types_c.h	/^CvMat;$/;"	t	typeref:struct:CvMat
CvMat	core/types_c.h	/^typedef struct CvMat$/;"	s
CvMatArray	legacy/compat.hpp	/^typedef CvMat CvMatArray;$/;"	t
CvMatND	core/types_c.h	/^CvMatND;$/;"	t	typeref:struct:CvMatND
CvMatND	core/types_c.h	/^typedef struct CvMatND$/;"	s
CvMatType	legacy/compat.hpp	/^typedef int CvMatType;$/;"	t
CvMatr32f	legacy/compat.hpp	/^typedef float*   CvMatr32f;$/;"	t
CvMatr64d	legacy/compat.hpp	/^typedef double*  CvMatr64d;$/;"	t
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( CvFileStorage* fs, const char* mapname, const char* matname ) : matrix(0)$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( CvFileStorage* fs, const char* seqname, int idx ) : matrix(0)$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( CvMat* m )$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( const CvMatrix& m )$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( const char* filename, const char* matname=0, int color=-1 ) : matrix(0)$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( int _rows, int _cols, int _type )$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( int _rows, int _cols, int _type, CvMat* hdr,$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix( int _rows, int _cols, int _type, void* _data, int _step=CV_AUTOSTEP )$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^    CvMatrix() : matrix(0) {}$/;"	f	class:CvMatrix
CvMatrix	legacy/legacy.hpp	/^class CV_EXPORTS CvMatrix$/;"	c
CvMatrix3	legacy/legacy.hpp	/^typedef struct CvMatrix3$/;"	s
CvMatrix3	legacy/legacy.hpp	/^} CvMatrix3;$/;"	t	typeref:struct:CvMatrix3
CvMeanShiftTracker	contrib/hybridtracker.hpp	/^class CV_EXPORTS CvMeanShiftTracker$/;"	c	namespace:cv
CvMeanShiftTrackerParams	contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvMeanShiftTrackerParams$/;"	s	namespace:cv
CvMemBlock	core/types_c.h	/^CvMemBlock;$/;"	t	typeref:struct:CvMemBlock
CvMemBlock	core/types_c.h	/^typedef struct CvMemBlock$/;"	s
CvMemStorage	core/types_c.h	/^CvMemStorage;$/;"	t	typeref:struct:CvMemStorage
CvMemStorage	core/types_c.h	/^typedef struct CvMemStorage$/;"	s
CvMemStoragePos	core/types_c.h	/^CvMemStoragePos;$/;"	t	typeref:struct:CvMemStoragePos
CvMemStoragePos	core/types_c.h	/^typedef struct CvMemStoragePos$/;"	s
CvModule	core/core_c.h	/^struct CV_EXPORTS CvModule$/;"	s
CvModuleInfo	core/types_c.h	/^CvModuleInfo;$/;"	t	typeref:struct:CvModuleInfo
CvModuleInfo	core/types_c.h	/^typedef struct CvModuleInfo$/;"	s
CvMoments	imgproc/types_c.h	/^CvMoments;$/;"	t	typeref:struct:CvMoments
CvMoments	imgproc/types_c.h	/^typedef struct CvMoments$/;"	s
CvMorphOp	legacy/compat.hpp	/^typedef int CvMorphOp;$/;"	t
CvMotionModel	contrib/hybridtracker.hpp	/^    CvMotionModel()$/;"	f	struct:cv::CvMotionModel
CvMotionModel	contrib/hybridtracker.hpp	/^struct CV_EXPORTS CvMotionModel$/;"	s	namespace:cv
CvMouseCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvMouseCallback )(int event, int x, int y, int flags, void* param);$/;"	t
CvNArrayIterator	core/core_c.h	/^CvNArrayIterator;$/;"	t	typeref:struct:CvNArrayIterator
CvNArrayIterator	core/core_c.h	/^typedef struct CvNArrayIterator$/;"	s
CvNextEdgeType	imgproc/types_c.h	/^CvNextEdgeType;$/;"	t	typeref:enum:CvNextEdgeType
CvNextEdgeType	imgproc/types_c.h	/^typedef enum CvNextEdgeType$/;"	g
CvNormalBayesClassifier	ml/ml.hpp	/^class CV_EXPORTS_W CvNormalBayesClassifier : public CvStatModel$/;"	c
CvObjectDetection	objdetect/objdetect.hpp	/^typedef struct CvObjectDetection$/;"	s
CvObjectDetection	objdetect/objdetect.hpp	/^} CvObjectDetection;$/;"	t	typeref:struct:CvObjectDetection
CvObjectDetector	legacy/blobtrack.hpp	/^class CV_EXPORTS CvObjectDetector$/;"	c
CvOpenGlDrawCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvOpenGlDrawCallback)(void* userdata);$/;"	t
CvOpenGlFuncTab	core/internal.hpp	/^class CV_EXPORTS CvOpenGlFuncTab$/;"	c
CvPOSITObject	calib3d/calib3d.hpp	/^typedef struct CvPOSITObject CvPOSITObject;$/;"	t	typeref:struct:CvPOSITObject
CvPair16u32s	ml/ml.hpp	/^struct CvPair16u32s$/;"	s
CvParamGrid	ml/ml.hpp	/^    CvParamGrid()$/;"	f	struct:CvParamGrid
CvParamGrid	ml/ml.hpp	/^inline CvParamGrid::CvParamGrid( double _min_val, double _max_val, double _log_step )$/;"	f	class:CvParamGrid
CvParamGrid	ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvParamGrid$/;"	s
CvPixelPosition32f	legacy/compat.hpp	/^} CvPixelPosition32f;$/;"	t	typeref:struct:_CvPixelPosition32f
CvPixelPosition8s	legacy/compat.hpp	/^} CvPixelPosition8s;$/;"	t	typeref:struct:_CvPixelPosition8s
CvPixelPosition8u	legacy/compat.hpp	/^} CvPixelPosition8u;$/;"	t	typeref:struct:_CvPixelPosition8u
CvPluginFuncInfo	core/types_c.h	/^CvPluginFuncInfo;$/;"	t	typeref:struct:CvPluginFuncInfo
CvPluginFuncInfo	core/types_c.h	/^typedef struct CvPluginFuncInfo$/;"	s
CvPoint	core/types_c.h	/^CvPoint;$/;"	t	typeref:struct:CvPoint
CvPoint	core/types_c.h	/^typedef struct CvPoint$/;"	s
CvPoint2D32f	core/types_c.h	/^CvPoint2D32f;$/;"	t	typeref:struct:CvPoint2D32f
CvPoint2D32f	core/types_c.h	/^typedef struct CvPoint2D32f$/;"	s
CvPoint2D64d	legacy/compat.hpp	/^typedef CvPoint2D64f CvPoint2D64d;$/;"	t
CvPoint2D64f	core/types_c.h	/^CvPoint2D64f;$/;"	t	typeref:struct:CvPoint2D64f
CvPoint2D64f	core/types_c.h	/^typedef struct CvPoint2D64f$/;"	s
CvPoint2DSeq	core/types_c.h	/^typedef CvContour CvPoint2DSeq;$/;"	t
CvPoint3D32f	core/types_c.h	/^CvPoint3D32f;$/;"	t	typeref:struct:CvPoint3D32f
CvPoint3D32f	core/types_c.h	/^typedef struct CvPoint3D32f$/;"	s
CvPoint3D64d	legacy/compat.hpp	/^typedef CvPoint3D64f CvPoint3D64d;$/;"	t
CvPoint3D64f	core/types_c.h	/^CvPoint3D64f;$/;"	t	typeref:struct:CvPoint3D64f
CvPoint3D64f	core/types_c.h	/^typedef struct CvPoint3D64f$/;"	s
CvPolyApproxMethod	legacy/compat.hpp	/^typedef int CvPolyApproxMethod;$/;"	t
CvProb	legacy/blobtrack.hpp	/^class CV_EXPORTS CvProb$/;"	c
CvQuadEdge2D	imgproc/types_c.h	/^CvQuadEdge2D;$/;"	t	typeref:struct:CvQuadEdge2D
CvQuadEdge2D	imgproc/types_c.h	/^typedef struct CvQuadEdge2D$/;"	s
CvRNG	core/types_c.h	/^typedef uint64 CvRNG;$/;"	t
CvRTParams	ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvRTParams : public CvDTreeParams$/;"	s
CvRTrees	ml/ml.hpp	/^class CV_EXPORTS_W CvRTrees : public CvStatModel$/;"	c
CvRandState	legacy/compat.hpp	/^typedef struct CvRandState$/;"	s
CvRandState	legacy/compat.hpp	/^} CvRandState;$/;"	t	typeref:struct:CvRandState
CvReadFunc	core/types_c.h	/^typedef void* (CV_CDECL *CvReadFunc)( CvFileStorage* storage, CvFileNode* node );$/;"	t
CvRect	core/types_c.h	/^CvRect;$/;"	t	typeref:struct:CvRect
CvRect	core/types_c.h	/^typedef struct CvRect$/;"	s
CvReleaseBGStatModel	legacy/legacy.hpp	/^typedef void (CV_CDECL * CvReleaseBGStatModel)( struct CvBGStatModel** bg_model );$/;"	t
CvReleaseFunc	core/types_c.h	/^typedef void (CV_CDECL *CvReleaseFunc)( void** struct_dblptr );$/;"	t
CvRodriguesType	legacy/compat.hpp	/^typedef int CvRodriguesType;$/;"	t
CvSURFParams	legacy/compat.hpp	/^typedef struct CvSURFParams$/;"	s
CvSURFParams	legacy/compat.hpp	/^} CvSURFParams;$/;"	t	typeref:struct:CvSURFParams
CvSURFPoint	legacy/compat.hpp	/^typedef struct CvSURFPoint$/;"	s
CvSURFPoint	legacy/compat.hpp	/^} CvSURFPoint;$/;"	t	typeref:struct:CvSURFPoint
CvSVM	ml/ml.hpp	/^class CV_EXPORTS_W CvSVM : public CvStatModel$/;"	c
CvSVMDecisionFunc	ml/ml.hpp	/^struct CvSVMDecisionFunc$/;"	s
CvSVMKernel	ml/ml.hpp	/^struct CV_EXPORTS CvSVMKernel$/;"	s
CvSVMKernelRow	ml/ml.hpp	/^struct CvSVMKernelRow$/;"	s
CvSVMParams	ml/ml.hpp	/^struct CV_EXPORTS_W_MAP CvSVMParams$/;"	s
CvSVMSolutionInfo	ml/ml.hpp	/^struct CvSVMSolutionInfo$/;"	s
CvSVMSolver	ml/ml.hpp	/^class CV_EXPORTS CvSVMSolver$/;"	c
CvScalar	core/types_c.h	/^CvScalar;$/;"	t	typeref:struct:CvScalar
CvScalar	core/types_c.h	/^typedef struct CvScalar$/;"	s
CvSeq	core/types_c.h	/^CvSeq;$/;"	t	typeref:struct:CvSeq
CvSeq	core/types_c.h	/^typedef struct CvSeq$/;"	s
CvSeqBlock	core/types_c.h	/^CvSeqBlock;$/;"	t	typeref:struct:CvSeqBlock
CvSeqBlock	core/types_c.h	/^typedef struct CvSeqBlock$/;"	s
CvSeqReader	core/types_c.h	/^CvSeqReader;$/;"	t	typeref:struct:CvSeqReader
CvSeqReader	core/types_c.h	/^typedef struct CvSeqReader$/;"	s
CvSeqWriter	core/types_c.h	/^CvSeqWriter;$/;"	t	typeref:struct:CvSeqWriter
CvSeqWriter	core/types_c.h	/^typedef struct CvSeqWriter$/;"	s
CvSet	core/types_c.h	/^CvSet;$/;"	t	typeref:struct:CvSet
CvSet	core/types_c.h	/^typedef struct CvSet$/;"	s
CvSetElem	core/types_c.h	/^CvSetElem;$/;"	t	typeref:struct:CvSetElem
CvSetElem	core/types_c.h	/^typedef struct CvSetElem$/;"	s
CvSize	core/types_c.h	/^CvSize;$/;"	t	typeref:struct:CvSize
CvSize	core/types_c.h	/^typedef struct CvSize$/;"	s
CvSize2D32f	core/types_c.h	/^CvSize2D32f;$/;"	t	typeref:struct:CvSize2D32f
CvSize2D32f	core/types_c.h	/^typedef struct CvSize2D32f$/;"	s
CvSlice	core/types_c.h	/^CvSlice;$/;"	t	typeref:struct:CvSlice
CvSlice	core/types_c.h	/^typedef struct CvSlice$/;"	s
CvSparseMat	core/types_c.h	/^CvSparseMat;$/;"	t	typeref:struct:CvSparseMat
CvSparseMat	core/types_c.h	/^typedef struct CvSparseMat$/;"	s
CvSparseMatIterator	core/types_c.h	/^CvSparseMatIterator;$/;"	t	typeref:struct:CvSparseMatIterator
CvSparseMatIterator	core/types_c.h	/^typedef struct CvSparseMatIterator$/;"	s
CvSparseNode	core/types_c.h	/^CvSparseNode;$/;"	t	typeref:struct:CvSparseNode
CvSparseNode	core/types_c.h	/^typedef struct CvSparseNode$/;"	s
CvStarDetectorParams	legacy/compat.hpp	/^typedef struct CvStarDetectorParams$/;"	s
CvStarDetectorParams	legacy/compat.hpp	/^} CvStarDetectorParams;$/;"	t	typeref:struct:CvStarDetectorParams
CvStarKeypoint	legacy/compat.hpp	/^typedef struct CvStarKeypoint$/;"	s
CvStarKeypoint	legacy/compat.hpp	/^} CvStarKeypoint;$/;"	t	typeref:struct:CvStarKeypoint
CvStatModel	ml/ml.hpp	/^class CV_EXPORTS_W CvStatModel$/;"	c
CvStatus	core/internal.hpp	/^CvStatus;$/;"	t	typeref:enum:CvStatus
CvStatus	core/internal.hpp	/^typedef enum CvStatus$/;"	g
CvStereoBMState	calib3d/calib3d.hpp	/^typedef struct CvStereoBMState$/;"	s
CvStereoBMState	calib3d/calib3d.hpp	/^} CvStereoBMState;$/;"	t	typeref:struct:CvStereoBMState
CvStereoCamera	legacy/legacy.hpp	/^typedef struct CvStereoCamera$/;"	s
CvStereoCamera	legacy/legacy.hpp	/^} CvStereoCamera;$/;"	t	typeref:struct:CvStereoCamera
CvStereoGCState	legacy/legacy.hpp	/^typedef struct CvStereoGCState$/;"	s
CvStereoGCState	legacy/legacy.hpp	/^} CvStereoGCState;$/;"	t	typeref:struct:CvStereoGCState
CvStereoLineCoeff	legacy/legacy.hpp	/^typedef struct CvStereoLineCoeff$/;"	s
CvStereoLineCoeff	legacy/legacy.hpp	/^}CvStereoLineCoeff;$/;"	t	typeref:struct:CvStereoLineCoeff
CvString	core/types_c.h	/^CvString;$/;"	t	typeref:struct:CvString
CvString	core/types_c.h	/^typedef struct CvString$/;"	s
CvStringHashNode	core/types_c.h	/^CvStringHashNode;$/;"	t	typeref:struct:CvStringHashNode
CvStringHashNode	core/types_c.h	/^typedef struct CvStringHashNode$/;"	s
CvSubdiv2D	imgproc/types_c.h	/^CvSubdiv2D;$/;"	t	typeref:struct:CvSubdiv2D
CvSubdiv2D	imgproc/types_c.h	/^typedef struct CvSubdiv2D$/;"	s
CvSubdiv2DEdge	imgproc/types_c.h	/^typedef size_t CvSubdiv2DEdge;$/;"	t
CvSubdiv2DPoint	imgproc/types_c.h	/^CvSubdiv2DPoint;$/;"	t	typeref:struct:CvSubdiv2DPoint
CvSubdiv2DPoint	imgproc/types_c.h	/^typedef struct CvSubdiv2DPoint$/;"	s
CvSubdiv2DPointLocation	imgproc/types_c.h	/^CvSubdiv2DPointLocation;$/;"	t	typeref:enum:CvSubdiv2DPointLocation
CvSubdiv2DPointLocation	imgproc/types_c.h	/^typedef enum CvSubdiv2DPointLocation$/;"	g
CvTemplMatchMethod	legacy/compat.hpp	/^typedef int CvTemplMatchMethod;$/;"	t
CvTermCriteria	core/types_c.h	/^CvTermCriteria;$/;"	t	typeref:struct:CvTermCriteria
CvTermCriteria	core/types_c.h	/^typedef struct CvTermCriteria$/;"	s
CvTestSeq	legacy/blobtrack.hpp	/^typedef void CvTestSeq;$/;"	t
CvThreshType	legacy/compat.hpp	/^typedef int CvThreshType;$/;"	t
CvTrackbarCallback	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvTrackbarCallback)(int pos);$/;"	t
CvTrackbarCallback2	highgui/highgui_c.h	/^typedef void (CV_CDECL *CvTrackbarCallback2)(int pos, void* userdata);$/;"	t
CvTracksTimePos	legacy/blobtrack.hpp	/^struct CvTracksTimePos$/;"	s
CvTrainTestSplit	ml/ml.hpp	/^struct CV_EXPORTS CvTrainTestSplit$/;"	s
CvTreeNodeIterator	core/core_c.h	/^CvTreeNodeIterator;$/;"	t	typeref:struct:CvTreeNodeIterator
CvTreeNodeIterator	core/core_c.h	/^typedef struct CvTreeNodeIterator$/;"	s
CvType	core/core_c.h	/^struct CV_EXPORTS CvType$/;"	s
CvType	flann/flann.hpp	/^template <> struct CvType<char> { static int type() { return CV_8S; } };$/;"	s	namespace:cv::flann
CvType	flann/flann.hpp	/^template <> struct CvType<double> { static int type() { return CV_64F; } };$/;"	s	namespace:cv::flann
CvType	flann/flann.hpp	/^template <> struct CvType<float> { static int type() { return CV_32F; } };$/;"	s	namespace:cv::flann
CvType	flann/flann.hpp	/^template <> struct CvType<int> { static int type() { return CV_32S; } };$/;"	s	namespace:cv::flann
CvType	flann/flann.hpp	/^template <> struct CvType<short> { static int type() { return CV_16S; } };$/;"	s	namespace:cv::flann
CvType	flann/flann.hpp	/^template <> struct CvType<unsigned char> { static int type() { return CV_8U; } };$/;"	s	namespace:cv::flann
CvType	flann/flann.hpp	/^template <> struct CvType<unsigned short> { static int type() { return CV_16U; } };$/;"	s	namespace:cv::flann
CvType	flann/flann.hpp	/^template <typename T> struct CvType {};$/;"	s	namespace:cv::flann
CvTypeInfo	core/types_c.h	/^CvTypeInfo;$/;"	t	typeref:struct:CvTypeInfo
CvTypeInfo	core/types_c.h	/^typedef struct CvTypeInfo$/;"	s
CvUpdateBGStatModel	legacy/legacy.hpp	/^typedef int (CV_CDECL * CvUpdateBGStatModel)( IplImage* curr_frame, struct CvBGStatModel* bg_model,$/;"	t
CvVSModule	legacy/blobtrack.hpp	/^class CV_EXPORTS CvVSModule$/;"	c
CvVect32f	legacy/compat.hpp	/^typedef float*   CvVect32f;$/;"	t
CvVect64d	legacy/compat.hpp	/^typedef double*  CvVect64d;$/;"	t
CvVectors	ml/ml.hpp	/^struct CvVectors$/;"	s
CvVideoWriter	highgui/highgui_c.h	/^typedef struct CvVideoWriter CvVideoWriter;$/;"	t	typeref:struct:CvVideoWriter
CvVoronoiDiagram2D	legacy/legacy.hpp	/^typedef struct CvVoronoiDiagram2D$/;"	s
CvVoronoiDiagram2D	legacy/legacy.hpp	/^} CvVoronoiDiagram2D;$/;"	t	typeref:struct:CvVoronoiDiagram2D
CvVoronoiEdge2D	legacy/legacy.hpp	/^typedef struct CvVoronoiEdge2D$/;"	s
CvVoronoiEdge2D	legacy/legacy.hpp	/^} CvVoronoiEdge2D;$/;"	t	typeref:struct:CvVoronoiEdge2D
CvVoronoiNode2D	legacy/legacy.hpp	/^typedef struct CvVoronoiNode2D$/;"	s
CvVoronoiNode2D	legacy/legacy.hpp	/^} CvVoronoiNode2D;$/;"	t	typeref:struct:CvVoronoiNode2D
CvVoronoiSite2D	legacy/legacy.hpp	/^typedef struct CvVoronoiSite2D$/;"	s
CvVoronoiSite2D	legacy/legacy.hpp	/^} CvVoronoiSite2D;$/;"	t	typeref:struct:CvVoronoiSite2D
CvWriteFunc	core/types_c.h	/^typedef void (CV_CDECL *CvWriteFunc)( CvFileStorage* storage, const char* name,$/;"	t
Cv_iplAllocateImageData	core/core_c.h	/^typedef void (CV_STDCALL* Cv_iplAllocateImageData)(IplImage*,int,int);$/;"	t
Cv_iplCloneImage	core/core_c.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCloneImage)(const IplImage*);$/;"	t
Cv_iplCreateImageHeader	core/core_c.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCreateImageHeader)$/;"	t
Cv_iplCreateROI	core/core_c.h	/^typedef IplROI* (CV_STDCALL* Cv_iplCreateROI)(int,int,int,int,int);$/;"	t
Cv_iplDeallocate	core/core_c.h	/^typedef void (CV_STDCALL* Cv_iplDeallocate)(IplImage*,int);$/;"	t
CylindricalPortraitProjector	stitching/detail/warpers.hpp	/^struct CylindricalPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
CylindricalPortraitWarper	stitching/detail/warpers.hpp	/^    CylindricalPortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::CylindricalPortraitWarper
CylindricalPortraitWarper	stitching/detail/warpers.hpp	/^class CylindricalPortraitWarper : public RotationWarperBase<CylindricalPortraitProjector>$/;"	c	namespace:cv::detail
CylindricalProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS CylindricalProjector : ProjectorBase$/;"	s	namespace:cv::detail
CylindricalWarper	stitching/detail/warpers.hpp	/^    CylindricalWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::CylindricalWarper
CylindricalWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalWarper : public RotationWarperBase<CylindricalProjector>$/;"	c	namespace:cv::detail
CylindricalWarper	stitching/warpers.hpp	/^class CylindricalWarper: public WarperCreator$/;"	c	namespace:cv
CylindricalWarperGpu	stitching/detail/warpers.hpp	/^    CylindricalWarperGpu(float scale) : CylindricalWarper(scale) {}$/;"	f	class:cv::detail::CylindricalWarperGpu
CylindricalWarperGpu	stitching/detail/warpers.hpp	/^class CV_EXPORTS CylindricalWarperGpu : public CylindricalWarper$/;"	c	namespace:cv::detail
CylindricalWarperGpu	stitching/warpers.hpp	/^class CylindricalWarperGpu: public WarperCreator$/;"	c	namespace:cv
DCT_INVERSE	core/core.hpp	/^    DCT_INVERSE = DFT_INVERSE, DCT_ROWS=DFT_ROWS };$/;"	e	enum:cv::__anon206
DCT_ROWS	core/core.hpp	/^    DCT_INVERSE = DFT_INVERSE, DCT_ROWS=DFT_ROWS };$/;"	e	enum:cv::__anon206
DECOMP_CHOLESKY	core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon202
DECOMP_EIG	core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon202
DECOMP_LU	core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon202
DECOMP_NORMAL	core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon202
DECOMP_QR	core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon202
DECOMP_SVD	core/core.hpp	/^enum { DECOMP_LU=0, DECOMP_SVD=1, DECOMP_EIG=2, DECOMP_CHOLESKY=3, DECOMP_QR=4, DECOMP_NORMAL=16 };$/;"	e	enum:cv::__anon202
DEFAULT	features2d/features2d.hpp	/^    enum{ DEFAULT = 0, \/\/ Output image matrix will be created (Mat::create),$/;"	e	enum:cv::DrawMatchesFlags::__anon242
DEFAULT	ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon254
DEFAULT_COMPRESSION_METHOD	legacy/legacy.hpp	/^        DEFAULT_COMPRESSION_METHOD = COMPRESSION_NONE$/;"	e	enum:cv::FernClassifier::__anon12
DEFAULT_DEPTH	legacy/legacy.hpp	/^    static const int DEFAULT_DEPTH = 9;$/;"	m	class:cv::RandomizedTree
DEFAULT_FAST_THRESHOLD	gpu/gpu.hpp	/^        DEFAULT_FAST_THRESHOLD = 20$/;"	e	enum:cv::gpu::ORB_GPU::__anon74
DEFAULT_ITERS	gpu/gpu.hpp	/^    enum { DEFAULT_ITERS    = 8   };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon63
DEFAULT_ITERS	gpu/gpu.hpp	/^    enum { DEFAULT_ITERS  = 1 };$/;"	e	enum:cv::gpu::DisparityBilateralFilter::__anon68
DEFAULT_ITERS	gpu/gpu.hpp	/^    enum { DEFAULT_ITERS  = 5  };$/;"	e	enum:cv::gpu::StereoBeliefPropagation::__anon60
DEFAULT_LARGE_SIZE	contrib/contrib.hpp	/^        enum { DEFAULT_SMALL_SIZE = 5, DEFAULT_LARGE_SIZE = 41,$/;"	e	enum:cv::SelfSimDescriptor::__anon22
DEFAULT_LEVELS	gpu/gpu.hpp	/^    enum { DEFAULT_LEVELS   = 4   };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon64
DEFAULT_LEVELS	gpu/gpu.hpp	/^    enum { DEFAULT_LEVELS = 5  };$/;"	e	enum:cv::gpu::StereoBeliefPropagation::__anon61
DEFAULT_MAX_ITERS	ml/ml.hpp	/^    enum {DEFAULT_NCLUSTERS=5, DEFAULT_MAX_ITERS=100};$/;"	e	enum:cv::EM::__anon249
DEFAULT_NCLUSTERS	ml/ml.hpp	/^    enum {DEFAULT_NCLUSTERS=5, DEFAULT_MAX_ITERS=100};$/;"	e	enum:cv::EM::__anon249
DEFAULT_NDISP	gpu/gpu.hpp	/^    enum { DEFAULT_NDISP    = 128 };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon62
DEFAULT_NDISP	gpu/gpu.hpp	/^    enum { DEFAULT_NDISP  = 64 };$/;"	e	enum:cv::gpu::DisparityBilateralFilter::__anon66
DEFAULT_NDISP	gpu/gpu.hpp	/^    enum { DEFAULT_NDISP  = 64 };$/;"	e	enum:cv::gpu::StereoBeliefPropagation::__anon59
DEFAULT_NDISP	gpu/gpu.hpp	/^    enum { DEFAULT_NDISP = 64, DEFAULT_WINSZ = 19 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon58
DEFAULT_NLEVELS	gpu/gpu.hpp	/^    enum { DEFAULT_NLEVELS = 64 };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon70
DEFAULT_NLEVELS	objdetect/objdetect.hpp	/^    enum { DEFAULT_NLEVELS=64 };$/;"	e	enum:cv::HOGDescriptor::__anon233
DEFAULT_NLEVELS	ocl/ocl.hpp	/^            enum { DEFAULT_NLEVELS = 64 };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon262
DEFAULT_NR_PLANE	gpu/gpu.hpp	/^    enum { DEFAULT_NR_PLANE = 4   };$/;"	e	enum:cv::gpu::StereoConstantSpaceBP::__anon65
DEFAULT_NUM_ANGLES	contrib/contrib.hpp	/^            DEFAULT_NUM_ANGLES = 20, DEFAULT_START_DISTANCE_BUCKET = 3,$/;"	e	enum:cv::SelfSimDescriptor::__anon22
DEFAULT_NUM_DISTANCE_BUCKETS	contrib/contrib.hpp	/^            DEFAULT_NUM_DISTANCE_BUCKETS = 7 };$/;"	e	enum:cv::SelfSimDescriptor::__anon22
DEFAULT_NUM_QUANT_BITS	legacy/legacy.hpp	/^    static const size_t DEFAULT_NUM_QUANT_BITS = 4;$/;"	m	class:cv::RTreeClassifier
DEFAULT_RADIUS	gpu/gpu.hpp	/^    enum { DEFAULT_RADIUS = 3 };$/;"	e	enum:cv::gpu::DisparityBilateralFilter::__anon67
DEFAULT_REDUCED_NUM_DIM	legacy/legacy.hpp	/^    static const size_t DEFAULT_REDUCED_NUM_DIM = 176;$/;"	m	class:cv::RandomizedTree
DEFAULT_SIGNATURE_SIZE	legacy/legacy.hpp	/^        DEFAULT_SIGNATURE_SIZE = 176,$/;"	e	enum:cv::FernClassifier::__anon12
DEFAULT_SMALL_SIZE	contrib/contrib.hpp	/^        enum { DEFAULT_SMALL_SIZE = 5, DEFAULT_LARGE_SIZE = 41,$/;"	e	enum:cv::SelfSimDescriptor::__anon22
DEFAULT_START_DISTANCE_BUCKET	contrib/contrib.hpp	/^            DEFAULT_NUM_ANGLES = 20, DEFAULT_START_DISTANCE_BUCKET = 3,$/;"	e	enum:cv::SelfSimDescriptor::__anon22
DEFAULT_STRUCTS	legacy/legacy.hpp	/^        DEFAULT_STRUCTS = 50,$/;"	e	enum:cv::FernClassifier::__anon12
DEFAULT_STRUCT_SIZE	legacy/legacy.hpp	/^        DEFAULT_STRUCT_SIZE = 9,$/;"	e	enum:cv::FernClassifier::__anon12
DEFAULT_TREES	legacy/legacy.hpp	/^    static const int DEFAULT_TREES = 48;$/;"	m	class:cv::RTreeClassifier
DEFAULT_VIEWS	legacy/legacy.hpp	/^        DEFAULT_VIEWS = 5000,$/;"	e	enum:cv::FernClassifier::__anon12
DEFAULT_VIEWS	legacy/legacy.hpp	/^    static const int DEFAULT_VIEWS = 5000;$/;"	m	class:cv::RandomizedTree
DEFAULT_WINSZ	gpu/gpu.hpp	/^    enum { DEFAULT_NDISP = 64, DEFAULT_WINSZ = 19 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon58
DEFAULT_WIN_SIGMA	gpu/gpu.hpp	/^    enum { DEFAULT_WIN_SIGMA = -1 };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon69
DEFAULT_WIN_SIGMA	ocl/ocl.hpp	/^            enum { DEFAULT_WIN_SIGMA = -1 };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon261
DEGREE	ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon247
DESCR_FORMAT_COL_BY_COL	gpu/gpu.hpp	/^    enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon71
DESCR_FORMAT_COL_BY_COL	ocl/ocl.hpp	/^            enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon263
DESCR_FORMAT_ROW_BY_ROW	gpu/gpu.hpp	/^    enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::gpu::HOGDescriptor::__anon71
DESCR_FORMAT_ROW_BY_ROW	ocl/ocl.hpp	/^            enum { DESCR_FORMAT_ROW_BY_ROW, DESCR_FORMAT_COL_BY_COL };$/;"	e	enum:cv::ocl::HOGDescriptor::__anon263
DEVIANCE_LOSS	ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon255
DFT_COMPLEX_OUTPUT	core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon206
DFT_INVERSE	core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon206
DFT_REAL_OUTPUT	core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon206
DFT_ROWS	core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon206
DFT_SCALE	core/core.hpp	/^enum { DFT_INVERSE=1, DFT_SCALE=2, DFT_ROWS=4, DFT_COMPLEX_OUTPUT=16, DFT_REAL_OUTPUT=32,$/;"	e	enum:cv::__anon206
DIMode	gpu/gpu.hpp	/^        int       DIMode;          \/\/    NVVE_SET_DEINTERLACE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DISCRETE	ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon253
DISP_SCALE	calib3d/calib3d.hpp	/^    enum { DISP_SHIFT=4, DISP_SCALE = (1<<DISP_SHIFT) };$/;"	e	enum:cv::StereoSGBM::__anon319
DISP_SHIFT	calib3d/calib3d.hpp	/^    enum { DISP_SHIFT=4, DISP_SCALE = (1<<DISP_SHIFT) };$/;"	e	enum:cv::StereoSGBM::__anon319
DIST_LABEL_CCOMP	imgproc/imgproc.hpp	/^    DIST_LABEL_CCOMP = 0,$/;"	e	enum:cv::__anon279
DIST_LABEL_PIXEL	imgproc/imgproc.hpp	/^    DIST_LABEL_PIXEL = 1$/;"	e	enum:cv::__anon279
DMatch	features2d/features2d.hpp	/^    CV_WRAP DMatch( int _queryIdx, int _trainIdx, float _distance ) :$/;"	f	struct:cv::DMatch
DMatch	features2d/features2d.hpp	/^    CV_WRAP DMatch( int _queryIdx, int _trainIdx, int _imgIdx, float _distance ) :$/;"	f	struct:cv::DMatch
DMatch	features2d/features2d.hpp	/^    CV_WRAP DMatch() : queryIdx(-1), trainIdx(-1), imgIdx(-1), distance(FLT_MAX) {}$/;"	f	struct:cv::DMatch
DMatch	features2d/features2d.hpp	/^struct CV_EXPORTS_W_SIMPLE DMatch$/;"	s	namespace:cv
DONE	calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon311
DO_CANNY_PRUNING	objdetect/objdetect.hpp	/^    enum { DO_CANNY_PRUNING = 1, SCALE_IMAGE = 2,$/;"	e	enum:cv::CascadeClassifier::__anon231
DO_ROUGH_SEARCH	objdetect/objdetect.hpp	/^           FIND_BIGGEST_OBJECT = 4, DO_ROUGH_SEARCH = 8 };$/;"	e	enum:cv::CascadeClassifier::__anon231
DP	legacy/legacy.hpp	/^    int DP;$/;"	m	struct:CvConDensation
DP	video/tracking.hpp	/^    int DP;                     \/* number of state vector dimensions *\/$/;"	m	struct:CvKalman
DRAW_OVER_OUTIMG	features2d/features2d.hpp	/^          DRAW_OVER_OUTIMG = 1, \/\/ Output image matrix will not be created (Mat::create).$/;"	e	enum:cv::DrawMatchesFlags::__anon242
DRAW_RICH_KEYPOINTS	features2d/features2d.hpp	/^          DRAW_RICH_KEYPOINTS = 4 \/\/ For each keypoint the circle around keypoint with keypoint size and$/;"	e	enum:cv::DrawMatchesFlags::__anon242
DTree	objdetect/objdetect.hpp	/^        struct CV_EXPORTS DTree$/;"	s	class:cv::CascadeClassifier::Data
DTreeNode	objdetect/objdetect.hpp	/^        struct CV_EXPORTS DTreeNode$/;"	s	class:cv::CascadeClassifier::Data
DTreeParams	ml/ml.hpp	/^typedef CvDTreeParams DTreeParams;$/;"	t	namespace:cv
DXY	videostab/fast_marching.hpp	/^        DXY() : dist(0), x(0), y(0) {}$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
DXY	videostab/fast_marching.hpp	/^        DXY(float _dist, int _x, int _y) : dist(_dist), x(_x), y(_y) {}$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
DXY	videostab/fast_marching.hpp	/^    struct DXY$/;"	s	class:cv::videostab::FastMarchingMethod
Data	objdetect/objdetect.hpp	/^    class Data$/;"	c	class:cv::CascadeClassifier
DataDepth	core/core.hpp	/^template<> class DataDepth<bool> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<char> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<double> { public: enum { value = CV_64F, fmt=(int)'d' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<float> { public: enum { value = CV_32F, fmt=(int)'f' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<int> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<schar> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<short> { public: enum { value = CV_16S, fmt=(int)'s' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<uchar> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<unsigned> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<> class DataDepth<ushort> { public: enum { value = CV_16U, fmt=(int)'w' }; };$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS DataDepth {};$/;"	c	namespace:cv
DataDepth	core/core.hpp	/^template<typename _Tp> class DataDepth<_Tp*> { public: enum { value = CV_USRTYPE1, fmt=(int)'r' }; };$/;"	c	namespace:cv
Datatype	flann/saving.h	/^struct Datatype {};$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<char> { static flann_datatype_t type() { return FLANN_INT8; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<double> { static flann_datatype_t type() { return FLANN_FLOAT64; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<float> { static flann_datatype_t type() { return FLANN_FLOAT32; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<int> { static flann_datatype_t type() { return FLANN_INT32; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<short> { static flann_datatype_t type() { return FLANN_INT16; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<unsigned char> { static flann_datatype_t type() { return FLANN_UINT8; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<unsigned int> { static flann_datatype_t type() { return FLANN_UINT32; } };$/;"	s	namespace:cvflann
Datatype	flann/saving.h	/^struct Datatype<unsigned short> { static flann_datatype_t type() { return FLANN_UINT16; } };$/;"	s	namespace:cvflann
DeathTest	ts/ts_gtest.h	/^class GTEST_API_ DeathTest {$/;"	c	namespace:testing::internal
DeathTestFactory	ts/ts_gtest.h	/^class DeathTestFactory {$/;"	c	namespace:testing::internal
DeblockMode	gpu/gpu.hpp	/^        int       DeblockMode;     \/\/    NVVE_DEBLOCK_MODE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DeblurerBase	videostab/deblurring.hpp	/^    DeblurerBase() : radius_(0), frames_(0), motions_(0) {}$/;"	f	class:cv::videostab::DeblurerBase
DeblurerBase	videostab/deblurring.hpp	/^class CV_EXPORTS DeblurerBase$/;"	c	namespace:cv::videostab
DecisionTree	ml/ml.hpp	/^typedef CvDTree DecisionTree;$/;"	t	namespace:cv
DefaultBinaryShift	gpu/device/functional.hpp	/^        template <typename T1, typename T2, typename D> struct DefaultBinaryShift$/;"	s	namespace:cv::gpu::device::functional_detail
DefaultDeathTestFactory	ts/ts_gtest.h	/^class DefaultDeathTestFactory : public DeathTestFactory {$/;"	c	namespace:testing::internal
DefaultPrintNonContainerTo	ts/ts_gtest.h	/^void DefaultPrintNonContainerTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing_internal
DefaultPrintTo	ts/ts_gtest.h	/^void DefaultPrintTo(IsContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultPrintTo	ts/ts_gtest.h	/^void DefaultPrintTo(IsNotContainer \/* dummy *\/,$/;"	f	namespace:testing::internal
DefaultRngAuto	ts/ts.hpp	/^    DefaultRngAuto() : old_state(cv::theRNG().state) { cv::theRNG().state = (uint64)-1; }$/;"	f	struct:cvtest::DefaultRngAuto
DefaultRngAuto	ts/ts.hpp	/^struct CV_EXPORTS DefaultRngAuto$/;"	s	namespace:cvtest
DefaultTransformFunctorTraits	gpu/device/functional.hpp	/^    template <typename Func> struct DefaultTransformFunctorTraits$/;"	s	namespace:cv::gpu::device
DefaultTransformShift	gpu/device/functional.hpp	/^    template <typename Func> struct DefaultTransformShift$/;"	s	namespace:cv::gpu::device
DefaultUnaryShift	gpu/device/functional.hpp	/^        template <typename T, typename D> struct DefaultUnaryShift$/;"	s	namespace:cv::gpu::device::functional_detail
DelBlob	legacy/blobtrack.hpp	/^    virtual void DelBlob(int BlobIndex)$/;"	f	class:CvBlobSeq
DelBlobByID	legacy/blobtrack.hpp	/^    virtual void DelBlobByID(int BlobID)$/;"	f	class:CvBlobSeq
DeleteSelf_	ts/ts_gtest.h	/^  void DeleteSelf_() { delete this; }$/;"	f	class:testing::Test
DeleteThreadLocalValue	ts/ts_gtest.h	/^extern "C" inline void DeleteThreadLocalValue(void* value_holder) {$/;"	f	namespace:std::tr1
DenseFeatureDetector	features2d/features2d.hpp	/^class CV_EXPORTS DenseFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
DensePyrLkOptFlowEstimatorGpu	videostab/optical_flow.hpp	/^class CV_EXPORTS DensePyrLkOptFlowEstimatorGpu$/;"	c	namespace:cv::videostab
Depth	core/wimage.hpp	/^inline int WImage<double>::Depth() const {return IPL_DEPTH_64F; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<float>::Depth() const {return IPL_DEPTH_32F; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<int>::Depth() const {return IPL_DEPTH_32S; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<short>::Depth() const {return IPL_DEPTH_16S; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<signed char>::Depth() const {return IPL_DEPTH_8S; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<uchar>::Depth() const {return IPL_DEPTH_8U; }$/;"	f	class:cv::WImage
Depth	core/wimage.hpp	/^inline int WImage<ushort>::Depth() const {return IPL_DEPTH_16U; }$/;"	f	class:cv::WImage
DepthNormal	objdetect/objdetect.hpp	/^class CV_EXPORTS DepthNormal : public Modality$/;"	c	namespace:cv::linemod
DescriptionPair	features2d/features2d.hpp	/^    struct DescriptionPair$/;"	s	class:cv::FREAK
DescriptorCollection	features2d/features2d.hpp	/^    class CV_EXPORTS DescriptorCollection$/;"	c	class:cv::DescriptorMatcher
DescriptorExtractor	features2d/features2d.hpp	/^class CV_EXPORTS_W DescriptorExtractor : public virtual Algorithm$/;"	c	namespace:cv
DescriptorMatcher	features2d/features2d.hpp	/^class CV_EXPORTS_W DescriptorMatcher : public Algorithm$/;"	c	namespace:cv
DetectionBasedTracker	contrib/detection_based_tracker.hpp	/^class DetectionBasedTracker$/;"	c
DetectionROI	objdetect/objdetect.hpp	/^struct DetectionROI$/;"	s	namespace:cv
Detector	objdetect/objdetect.hpp	/^class CV_EXPORTS Detector$/;"	c	namespace:cv::linemod
DevMem2D	core/cuda_devptrs.hpp	/^        typedef DevMem2Db DevMem2D;$/;"	t	namespace:cv::gpu
DevMem2D_	core/cuda_devptrs.hpp	/^            DevMem2D_() {}$/;"	f	struct:cv::gpu::DevMem2D_
DevMem2D_	core/cuda_devptrs.hpp	/^            DevMem2D_(int rows_, int cols_, T* data_, size_t step_) : PtrStepSz<T>(rows_, cols_, data_, step_) {}$/;"	f	struct:cv::gpu::DevMem2D_
DevMem2D_	core/cuda_devptrs.hpp	/^            explicit __CV_GPU_DEPR_BEFORE__ DevMem2D_(const DevMem2D_<U>& d) : PtrStepSz<T>(d.rows, d.cols, (T*)d.data, d.step) {}$/;"	f	struct:cv::gpu::DevMem2D_
DevMem2D_	core/cuda_devptrs.hpp	/^        template <typename T> struct __CV_GPU_DEPR_BEFORE__ DevMem2D_ : public PtrStepSz<T>$/;"	s	namespace:cv::gpu
DevMem2Db	core/cuda_devptrs.hpp	/^        typedef DevMem2D_<unsigned char> DevMem2Db;$/;"	t	namespace:cv::gpu
DevMem2Df	core/cuda_devptrs.hpp	/^        typedef DevMem2D_<float> DevMem2Df;$/;"	t	namespace:cv::gpu
DevMem2Di	core/cuda_devptrs.hpp	/^        typedef DevMem2D_<int> DevMem2Di;$/;"	t	namespace:cv::gpu
DevPtr	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ DevPtr() : data(0) {}$/;"	f	struct:cv::gpu::DevPtr
DevPtr	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ DevPtr(T* data_) : data(data_) {}$/;"	f	struct:cv::gpu::DevPtr
DevPtr	core/cuda_devptrs.hpp	/^        template<typename T> struct DevPtr$/;"	s	namespace:cv::gpu
DeviceInfo	core/gpumat.hpp	/^        DeviceInfo() : device_id_(getDevice()) { query(); }$/;"	f	class:cv::gpu::DeviceInfo
DeviceInfo	core/gpumat.hpp	/^        DeviceInfo(int device_id) : device_id_(device_id) { query(); }$/;"	f	class:cv::gpu::DeviceInfo
DeviceInfo	core/gpumat.hpp	/^    class CV_EXPORTS DeviceInfo$/;"	c	namespace:cv::gpu
DeviceName	ocl/ocl.hpp	/^            std::vector<string> DeviceName;$/;"	m	class:cv::ocl::Info
Directory	contrib/contrib.hpp	/^    class CV_EXPORTS Directory$/;"	c	namespace:cv
DisableCabac	gpu/gpu.hpp	/^        int       DisableCabac;    \/\/    NVVE_DISABLE_CABAC,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DisableSPSPPS	gpu/gpu.hpp	/^        int       DisableSPSPPS;   \/\/    NVVE_DISABLE_SPS_PPS$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DisjointSets	stitching/detail/util.hpp	/^    DisjointSets(int elem_count = 0) { createOneElemSets(elem_count); }$/;"	f	class:cv::detail::DisjointSets
DisjointSets	stitching/detail/util.hpp	/^class CV_EXPORTS DisjointSets$/;"	c	namespace:cv::detail
DisparityBilateralFilter	gpu/gpu.hpp	/^class CV_EXPORTS DisparityBilateralFilter$/;"	c	namespace:cv::gpu
DistIndex	flann/result_set.h	/^        DistIndex(DistanceType dist, unsigned int index) :$/;"	f	struct:cvflann::UniqueResultSet::DistIndex
DistIndex	flann/result_set.h	/^    struct DistIndex$/;"	s	class:cvflann::UniqueResultSet
DistIndex	flann/result_set.h	/^    typedef typename UniqueResultSet<DistanceType>::DistIndex DistIndex;$/;"	t	class:cvflann::KNNUniqueResultSet
DistIndex	flann/result_set.h	/^    typedef typename UniqueResultSet<DistanceType>::DistIndex DistIndex;$/;"	t	class:cvflann::RadiusUniqueResultSet
DistType	gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	g	class:cv::gpu::BruteForceMatcher_GPU_base
DistType	ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	g	class:cv::ocl::BruteForceMatcher_OCL_base
DistanceBetweenSignAndMagnitudeNumbers	ts/ts_gtest.h	/^  static Bits DistanceBetweenSignAndMagnitudeNumbers(const Bits &sam1,$/;"	f	class:testing::internal::FloatingPoint
DistanceType	flann/autotuned_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::AutotunedIndex
DistanceType	flann/composite_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::CompositeIndex
DistanceType	flann/flann.hpp	/^        typedef typename Distance::ResultType DistanceType;$/;"	t	class:cv::flann::GenericIndex
DistanceType	flann/flann.hpp	/^        typedef typename L2<T>::ResultType DistanceType;$/;"	t	class:cv::flann::Index_
DistanceType	flann/flann_base.hpp	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::Index
DistanceType	flann/hierarchical_clustering_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::HierarchicalClusteringIndex
DistanceType	flann/kdtree_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KDTreeIndex
DistanceType	flann/kdtree_single_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KDTreeSingleIndex
DistanceType	flann/kmeans_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::KMeansIndex
DistanceType	flann/linear_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::LinearIndex
DistanceType	flann/lsh_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::LshIndex
DistanceType	flann/nn_index.h	/^    typedef typename Distance::ResultType DistanceType;$/;"	t	class:cvflann::NNIndex
Double	legacy/blobtrack.hpp	/^    double              Double;$/;"	m	struct:CvDefParam
Double	ts/ts_gtest.h	/^typedef FloatingPoint<double> Double;$/;"	t	namespace:testing::internal
DownCast_	ts/ts_gtest.h	/^inline To DownCast_(From* f) {  \/\/ so we only accept pointers$/;"	f	namespace:std::tr1
DpSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS DpSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
DrawMatchesFlags	features2d/features2d.hpp	/^struct CV_EXPORTS DrawMatchesFlags$/;"	s	namespace:cv
Dx_	gpu/gpu.hpp	/^    GpuMat Dx_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
Dy_	gpu/gpu.hpp	/^    GpuMat Dy_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
DynamMatr	legacy/legacy.hpp	/^    float* DynamMatr;       \/* Matrix of the linear Dynamics system  *\/$/;"	m	struct:CvConDensation
DynamMatr	video/tracking.hpp	/^    float* DynamMatr;           \/* =transition_matrix->data.fl *\/$/;"	m	struct:CvKalman
DynamicAdaptedFeatureDetector	features2d/features2d.hpp	/^class CV_EXPORTS DynamicAdaptedFeatureDetector: public FeatureDetector$/;"	c	namespace:cv
DynamicBitset	flann/dynamic_bitset.h	/^    DynamicBitset()$/;"	f	class:cvflann::DynamicBitset
DynamicBitset	flann/dynamic_bitset.h	/^    DynamicBitset(size_t sz)$/;"	f	class:cvflann::DynamicBitset
DynamicBitset	flann/dynamic_bitset.h	/^class DynamicBitset$/;"	c	namespace:cvflann
DynamicBitset	flann/dynamic_bitset.h	/^typedef boost::dynamic_bitset<> DynamicBitset;$/;"	t
DynamicGOP	gpu/gpu.hpp	/^        int       DynamicGOP;      \/\/    NVVE_DYNAMIC_GOP,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
DynamicSharedMem	gpu/device/dynamic_smem.hpp	/^    template<> struct DynamicSharedMem<double>$/;"	s	namespace:cv::gpu::device
DynamicSharedMem	gpu/device/dynamic_smem.hpp	/^    template<class T> struct DynamicSharedMem$/;"	s	namespace:cv::gpu::device
ELLIPSE	legacy/blobtrack.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon5
EM	contrib/hybridtracker.hpp	/^    enum {LOW_PASS_FILTER = 0, KALMAN_FILTER = 1, EM = 2};$/;"	e	enum:cv::CvMotionModel::__anon14
EM	ml/ml.hpp	/^class CV_EXPORTS_W EM : public Algorithm$/;"	c	namespace:cv
EMParams	legacy/legacy.hpp	/^typedef CvEMParams EMParams;$/;"	t	namespace:cv
ENABLE_LOG	stitching/detail/util.hpp	49;"	d
EPNP	calib3d/calib3d.hpp	/^    EPNP=CV_EPNP,$/;"	e	enum:cv::__anon313
EPS_SVR	ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon245
ERROR_ABSOLUTE	ts/ts_perf.hpp	/^    ERROR_ABSOLUTE = 0,$/;"	e	enum:perf::ERROR_TYPE
ERROR_RELATIVE	ts/ts_perf.hpp	/^    ERROR_RELATIVE = 1$/;"	e	enum:perf::ERROR_TYPE
ERROR_TYPE	ts/ts_perf.hpp	/^enum ERROR_TYPE$/;"	g	namespace:perf
ERR_NEED_MORE_IMGS	stitching/stitcher.hpp	/^    enum Status { OK, ERR_NEED_MORE_IMGS };$/;"	e	enum:cv::Stitcher::Status
ERTree	ml/ml.hpp	/^typedef CvForestERTree ERTree;$/;"	t	namespace:cv
ERTreeTRainData	ml/ml.hpp	/^typedef CvERTreeTrainData ERTreeTRainData;$/;"	t	namespace:cv
ERTrees	ml/ml.hpp	/^typedef CvERTrees ERTrees;$/;"	t	namespace:cv
ETAyx	contrib/contrib.hpp	/^        Mat ETAyx;$/;"	m	class:cv::LogPolar_Interp
ETAyx	contrib/contrib.hpp	/^        Mat ETAyx;$/;"	m	class:cv::LogPolar_Overlapping
EUCLIDEAN	flann/defines.h	/^    EUCLIDEAN = 1,$/;"	e	enum:cvflann::flann_distance_t
EVENT_FLAG_ALTKEY	highgui/highgui.hpp	/^    EVENT_FLAG_ALTKEY    =32$/;"	e	enum:cv::__anon48
EVENT_FLAG_CTRLKEY	highgui/highgui.hpp	/^    EVENT_FLAG_CTRLKEY   =8,$/;"	e	enum:cv::__anon48
EVENT_FLAG_LBUTTON	highgui/highgui.hpp	/^    EVENT_FLAG_LBUTTON   =1,$/;"	e	enum:cv::__anon48
EVENT_FLAG_MBUTTON	highgui/highgui.hpp	/^    EVENT_FLAG_MBUTTON   =4,$/;"	e	enum:cv::__anon48
EVENT_FLAG_RBUTTON	highgui/highgui.hpp	/^    EVENT_FLAG_RBUTTON   =2,$/;"	e	enum:cv::__anon48
EVENT_FLAG_SHIFTKEY	highgui/highgui.hpp	/^    EVENT_FLAG_SHIFTKEY  =16,$/;"	e	enum:cv::__anon48
EVENT_LBUTTONDBLCLK	highgui/highgui.hpp	/^    EVENT_LBUTTONDBLCLK  =7,$/;"	e	enum:cv::__anon47
EVENT_LBUTTONDOWN	highgui/highgui.hpp	/^    EVENT_LBUTTONDOWN    =1,$/;"	e	enum:cv::__anon47
EVENT_LBUTTONUP	highgui/highgui.hpp	/^    EVENT_LBUTTONUP      =4,$/;"	e	enum:cv::__anon47
EVENT_MBUTTONDBLCLK	highgui/highgui.hpp	/^    EVENT_MBUTTONDBLCLK  =9$/;"	e	enum:cv::__anon47
EVENT_MBUTTONDOWN	highgui/highgui.hpp	/^    EVENT_MBUTTONDOWN    =3,$/;"	e	enum:cv::__anon47
EVENT_MBUTTONUP	highgui/highgui.hpp	/^    EVENT_MBUTTONUP      =6,$/;"	e	enum:cv::__anon47
EVENT_MOUSEMOVE	highgui/highgui.hpp	/^    EVENT_MOUSEMOVE      =0,$/;"	e	enum:cv::__anon47
EVENT_RBUTTONDBLCLK	highgui/highgui.hpp	/^    EVENT_RBUTTONDBLCLK  =8,$/;"	e	enum:cv::__anon47
EVENT_RBUTTONDOWN	highgui/highgui.hpp	/^    EVENT_RBUTTONDOWN    =2,$/;"	e	enum:cv::__anon47
EVENT_RBUTTONUP	highgui/highgui.hpp	/^    EVENT_RBUTTONUP      =5,$/;"	e	enum:cv::__anon47
EXCLUSIVE	gpu/device/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	e	enum:cv::gpu::device::ScanKind
EXECUTE_TEST	ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
EXIT	core/internal.hpp	87;"	d
EXPECT_ANY_THROW	ts/ts_gtest.h	19392;"	d
EXPECT_DEATH	ts/ts_gtest.h	8520;"	d
EXPECT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8617;"	d
EXPECT_DEATH_IF_SUPPORTED	ts/ts_gtest.h	8622;"	d
EXPECT_DEBUG_DEATH	ts/ts_gtest.h	8594;"	d
EXPECT_DEBUG_DEATH	ts/ts_gtest.h	8602;"	d
EXPECT_DOUBLE_EQ	ts/ts_gtest.h	19933;"	d
EXPECT_EQ	ts/ts_gtest.h	19824;"	d
EXPECT_EXIT	ts/ts_gtest.h	8509;"	d
EXPECT_FALSE	ts/ts_gtest.h	19407;"	d
EXPECT_FLOAT_EQ	ts/ts_gtest.h	19929;"	d
EXPECT_GE	ts/ts_gtest.h	19834;"	d
EXPECT_GT	ts/ts_gtest.h	19836;"	d
EXPECT_HRESULT_FAILED	ts/ts_gtest.h	19983;"	d
EXPECT_HRESULT_SUCCEEDED	ts/ts_gtest.h	19977;"	d
EXPECT_LE	ts/ts_gtest.h	19830;"	d
EXPECT_LT	ts/ts_gtest.h	19832;"	d
EXPECT_NE	ts/ts_gtest.h	19828;"	d
EXPECT_NEAR	ts/ts_gtest.h	19945;"	d
EXPECT_NO_FATAL_FAILURE	ts/ts_gtest.h	20003;"	d
EXPECT_NO_THROW	ts/ts_gtest.h	19390;"	d
EXPECT_PRED1	ts/ts_gtest.h	19533;"	d
EXPECT_PRED2	ts/ts_gtest.h	19581;"	d
EXPECT_PRED3	ts/ts_gtest.h	19636;"	d
EXPECT_PRED4	ts/ts_gtest.h	19698;"	d
EXPECT_PRED5	ts/ts_gtest.h	19767;"	d
EXPECT_PRED_FORMAT1	ts/ts_gtest.h	19531;"	d
EXPECT_PRED_FORMAT2	ts/ts_gtest.h	19579;"	d
EXPECT_PRED_FORMAT3	ts/ts_gtest.h	19634;"	d
EXPECT_PRED_FORMAT4	ts/ts_gtest.h	19696;"	d
EXPECT_PRED_FORMAT5	ts/ts_gtest.h	19765;"	d
EXPECT_STRCASEEQ	ts/ts_gtest.h	19901;"	d
EXPECT_STRCASENE	ts/ts_gtest.h	19903;"	d
EXPECT_STREQ	ts/ts_gtest.h	19897;"	d
EXPECT_STRNE	ts/ts_gtest.h	19899;"	d
EXPECT_THROW	ts/ts_gtest.h	19388;"	d
EXPECT_TRUE	ts/ts_gtest.h	19404;"	d
ElementType	flann/autotuned_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::AutotunedIndex
ElementType	flann/composite_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::CompositeIndex
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::ChiSquareDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::Hamming
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::Hamming2
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::HellingerDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::HistIntersectionDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::KL_Divergence
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L1
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L2
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::L2_Simple
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::MaxDistance
ElementType	flann/dist.h	/^    typedef T ElementType;$/;"	t	struct:cvflann::MinkowskiDistance
ElementType	flann/dist.h	/^    typedef unsigned char ElementType;$/;"	t	struct:cvflann::HammingLUT
ElementType	flann/dist.h	/^    typedef unsigned char ElementType;$/;"	t	struct:cvflann::HammingLUT2
ElementType	flann/flann.hpp	/^        typedef typename Distance::ElementType ElementType;$/;"	t	class:cv::flann::GenericIndex
ElementType	flann/flann.hpp	/^        typedef typename L2<T>::ElementType ElementType;$/;"	t	class:cv::flann::Index_
ElementType	flann/flann_base.hpp	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::Index
ElementType	flann/hierarchical_clustering_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::HierarchicalClusteringIndex
ElementType	flann/kdtree_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KDTreeIndex
ElementType	flann/kdtree_single_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KDTreeSingleIndex
ElementType	flann/kmeans_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::KMeansIndex
ElementType	flann/linear_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::LinearIndex
ElementType	flann/lsh_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::LshIndex
ElementType	flann/nn_index.h	/^    typedef typename Distance::ElementType ElementType;$/;"	t	class:cvflann::NNIndex
EmptyMeshException	contrib/contrib.hpp	/^        struct EmptyMeshException {};$/;"	s	class:cv::Mesh3D
EmptyTestEventListener	ts/ts_gtest.h	/^class EmptyTestEventListener : public TestEventListener {$/;"	c	namespace:testing
Emulation	gpu/device/emulation.hpp	/^    struct Emulation$/;"	s	namespace:cv::gpu::device
EnableIf	ts/ts_gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
EncoderCallBack	gpu/gpu.hpp	/^    class CV_EXPORTS EncoderCallBack$/;"	c	class:cv::gpu::VideoWriter_GPU
EncoderParams	gpu/gpu.hpp	/^    struct CV_EXPORTS EncoderParams$/;"	s	class:cv::gpu::VideoWriter_GPU
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator10
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator2
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator3
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator4
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator5
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator6
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator7
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator8
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<ParamType>* End() const {$/;"	f	class:testing::internal::CartesianProductGenerator9
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::RangeGenerator
End	ts/ts_gtest.h	/^  virtual ParamIteratorInterface<T>* End() const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
Environment	ts/ts_gtest.h	/^class Environment {$/;"	c	namespace:testing
EqHelper	ts/ts_gtest.h	/^class EqHelper {$/;"	c	namespace:testing::internal
EqHelper	ts/ts_gtest.h	/^class EqHelper<true> {$/;"	c	namespace:testing::internal
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<ParamType>& other) const {$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::RangeGenerator::Iterator
Equals	ts/ts_gtest.h	/^    virtual bool Equals(const ParamIteratorInterface<T>& other) const {$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
ErrorCallback	core/core.hpp	/^typedef int (CV_CDECL *ErrorCallback)( int status, const char* func_name,$/;"	t	namespace:cv
Estimator	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS Estimator$/;"	c	namespace:cv::detail
Exception	core/core.hpp	/^class CV_EXPORTS Exception : public std::exception$/;"	c	namespace:cv
ExitedWithCode	ts/ts_gtest.h	/^class GTEST_API_ ExitedWithCode {$/;"	c	namespace:testing
ExpectationMaximization	legacy/legacy.hpp	/^typedef CvEM ExpectationMaximization;$/;"	t	namespace:cv
ExposureCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS ExposureCompensator$/;"	c	namespace:cv::detail
FAIL	ts/ts_gtest.h	19367;"	d
FAIL_ARITHM_EXCEPTION	ts/ts.hpp	/^        FAIL_ARITHM_EXCEPTION=-6,$/;"	e	enum:cvtest::TS::__anon191
FAIL_BAD_ACCURACY	ts/ts.hpp	/^        FAIL_BAD_ACCURACY=-12,$/;"	e	enum:cvtest::TS::__anon191
FAIL_BAD_ARG_CHECK	ts/ts.hpp	/^        FAIL_BAD_ARG_CHECK=-14,$/;"	e	enum:cvtest::TS::__anon191
FAIL_ERROR_IN_CALLED_FUNC	ts/ts.hpp	/^        FAIL_ERROR_IN_CALLED_FUNC=-3,$/;"	e	enum:cvtest::TS::__anon191
FAIL_EXCEPTION	ts/ts.hpp	/^        FAIL_EXCEPTION=-4,$/;"	e	enum:cvtest::TS::__anon191
FAIL_GENERIC	ts/ts.hpp	/^        FAIL_GENERIC=-1,$/;"	e	enum:cvtest::TS::__anon191
FAIL_HANG	ts/ts.hpp	/^        FAIL_HANG=-13,$/;"	e	enum:cvtest::TS::__anon191
FAIL_INVALID_OUTPUT	ts/ts.hpp	/^        FAIL_INVALID_OUTPUT=-10,$/;"	e	enum:cvtest::TS::__anon191
FAIL_INVALID_TEST_DATA	ts/ts.hpp	/^        FAIL_INVALID_TEST_DATA=-15,$/;"	e	enum:cvtest::TS::__anon191
FAIL_MEMORY_CORRUPTION_BEGIN	ts/ts.hpp	/^        FAIL_MEMORY_CORRUPTION_BEGIN=-7,$/;"	e	enum:cvtest::TS::__anon191
FAIL_MEMORY_CORRUPTION_END	ts/ts.hpp	/^        FAIL_MEMORY_CORRUPTION_END=-8,$/;"	e	enum:cvtest::TS::__anon191
FAIL_MEMORY_EXCEPTION	ts/ts.hpp	/^        FAIL_MEMORY_EXCEPTION=-5,$/;"	e	enum:cvtest::TS::__anon191
FAIL_MEMORY_LEAK	ts/ts.hpp	/^        FAIL_MEMORY_LEAK=-9,$/;"	e	enum:cvtest::TS::__anon191
FAIL_MISMATCH	ts/ts.hpp	/^        FAIL_MISMATCH=-11,$/;"	e	enum:cvtest::TS::__anon191
FAIL_MISSING_TEST_DATA	ts/ts.hpp	/^        FAIL_MISSING_TEST_DATA=-2,$/;"	e	enum:cvtest::TS::__anon191
FALSE	core/internal.hpp	79;"	d
FAST_GPU	gpu/gpu.hpp	/^class CV_EXPORTS FAST_GPU$/;"	c	namespace:cv::gpu
FAST_SCORE	features2d/features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon234
FClose	ts/ts_gtest.h	/^inline int FClose(FILE* fp) { return fclose(fp); }$/;"	f	namespace:std::tr1::posix
FDOpen	ts/ts_gtest.h	/^inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }$/;"	f	namespace:std::tr1::posix
FEATHER	stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon51
FEATURE_SET_COMPUTE_10	core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_10 = 10,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_11	core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_11 = 11,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_12	core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_12 = 12,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_13	core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_13 = 13,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_20	core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_20 = 20,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_21	core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_21 = 21,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SET_COMPUTE_30	core/gpumat.hpp	/^        FEATURE_SET_COMPUTE_30 = 30,$/;"	e	enum:cv::gpu::FeatureSet
FEATURE_SIZE	gpu/gpu.hpp	/^    static const int FEATURE_SIZE = 7;$/;"	m	class:cv::gpu::FAST_GPU
FGDStatModel	gpu/gpu.hpp	/^class CV_EXPORTS FGDStatModel$/;"	c	namespace:cv::gpu
FGTrainFrames	legacy/blobtrack.hpp	/^    int                     FGTrainFrames; \/* Number of frames needed for FG (foreground) detector to train.        *\/$/;"	m	struct:CvBlobTrackerAutoParam1
FIND_BIGGEST_OBJECT	objdetect/objdetect.hpp	/^           FIND_BIGGEST_OBJECT = 4, DO_ROUGH_SEARCH = 8 };$/;"	e	enum:cv::CascadeClassifier::__anon231
FIRST	stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
FISH_EYE_PRESET	calib3d/calib3d.hpp	/^        BASIC_PRESET=0, FISH_EYE_PRESET=1, NARROW_PRESET=2 };$/;"	e	enum:cv::StereoBM::__anon318
FLANNException	flann/general.h	/^    FLANNException(const char* message) : std::runtime_error(message) { }$/;"	f	class:cvflann::FLANNException
FLANNException	flann/general.h	/^    FLANNException(const std::string& message) : std::runtime_error(message) { }$/;"	f	class:cvflann::FLANNException
FLANNException	flann/general.h	/^class FLANNException : public std::runtime_error$/;"	c	namespace:cvflann
FLANN_ARRAY_LEN	flann/defines.h	75;"	d
FLANN_ARRAY_LEN	flann/defines.h	76;"	d
FLANN_CENTERS_GONZALES	flann/defines.h	/^    FLANN_CENTERS_GONZALES = 1,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CENTERS_KMEANSPP	flann/defines.h	/^    FLANN_CENTERS_KMEANSPP = 2,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CENTERS_RANDOM	flann/defines.h	/^    FLANN_CENTERS_RANDOM = 0,$/;"	e	enum:cvflann::flann_centers_init_t
FLANN_CHECKS_AUTOTUNED	flann/defines.h	/^    FLANN_CHECKS_AUTOTUNED = -2$/;"	e	enum:cvflann::__anon198
FLANN_CHECKS_UNLIMITED	flann/defines.h	/^    FLANN_CHECKS_UNLIMITED = -1,$/;"	e	enum:cvflann::__anon198
FLANN_DEPRECATED	flann/defines.h	54;"	d
FLANN_DEPRECATED	flann/defines.h	57;"	d
FLANN_DEPRECATED	flann/defines.h	59;"	d
FLANN_DEPRECATED	flann/defines.h	62;"	d
FLANN_DISTANCE_CHECK	flann/flann.hpp	130;"	d
FLANN_DIST_CHI_SQUARE	flann/defines.h	/^    FLANN_DIST_CHI_SQUARE = 7,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_CS	flann/defines.h	/^    FLANN_DIST_CS         = 7,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_EUCLIDEAN	flann/defines.h	/^    FLANN_DIST_EUCLIDEAN = 1,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HAMMING	flann/defines.h	/^    FLANN_DIST_HAMMING          = 9,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HELLINGER	flann/defines.h	/^    FLANN_DIST_HELLINGER = 6,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_HIST_INTERSECT	flann/defines.h	/^    FLANN_DIST_HIST_INTERSECT   = 5,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_KL	flann/defines.h	/^    FLANN_DIST_KL                = 8,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_KULLBACK_LEIBLER	flann/defines.h	/^    FLANN_DIST_KULLBACK_LEIBLER  = 8,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_L1	flann/defines.h	/^    FLANN_DIST_L1 = 2,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_L2	flann/defines.h	/^    FLANN_DIST_L2 = 1,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MANHATTAN	flann/defines.h	/^    FLANN_DIST_MANHATTAN = 2,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MAX	flann/defines.h	/^    FLANN_DIST_MAX   = 4,$/;"	e	enum:cvflann::flann_distance_t
FLANN_DIST_MINKOWSKI	flann/defines.h	/^    FLANN_DIST_MINKOWSKI = 3,$/;"	e	enum:cvflann::flann_distance_t
FLANN_EXPORT	flann/defines.h	36;"	d
FLANN_EXPORT	flann/defines.h	41;"	d
FLANN_EXPORT	flann/defines.h	43;"	d
FLANN_EXPORT	flann/defines.h	45;"	d
FLANN_EXPORT	flann/defines.h	49;"	d
FLANN_FLOAT32	flann/defines.h	/^    FLANN_FLOAT32 = 8,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_FLOAT64	flann/defines.h	/^    FLANN_FLOAT64 = 9$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INDEX_AUTOTUNED	flann/defines.h	/^    FLANN_INDEX_AUTOTUNED = 255,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_COMPOSITE	flann/defines.h	/^    FLANN_INDEX_COMPOSITE = 3,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_HIERARCHICAL	flann/defines.h	/^    FLANN_INDEX_HIERARCHICAL = 5,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KDTREE	flann/defines.h	/^    FLANN_INDEX_KDTREE = 1,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KDTREE_SINGLE	flann/defines.h	/^    FLANN_INDEX_KDTREE_SINGLE = 4,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_KMEANS	flann/defines.h	/^    FLANN_INDEX_KMEANS = 2,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_LINEAR	flann/defines.h	/^    FLANN_INDEX_LINEAR = 0,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_LSH	flann/defines.h	/^    FLANN_INDEX_LSH = 6,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INDEX_SAVED	flann/defines.h	/^    FLANN_INDEX_SAVED = 254,$/;"	e	enum:cvflann::flann_algorithm_t
FLANN_INT16	flann/defines.h	/^    FLANN_INT16 = 1,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT32	flann/defines.h	/^    FLANN_INT32 = 2,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT64	flann/defines.h	/^    FLANN_INT64 = 3,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_INT8	flann/defines.h	/^    FLANN_INT8 = 0,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_LOG_ERROR	flann/defines.h	/^    FLANN_LOG_ERROR = 2,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_FATAL	flann/defines.h	/^    FLANN_LOG_FATAL = 1,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_INFO	flann/defines.h	/^    FLANN_LOG_INFO = 4$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_NONE	flann/defines.h	/^    FLANN_LOG_NONE = 0,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_LOG_WARN	flann/defines.h	/^    FLANN_LOG_WARN = 3,$/;"	e	enum:cvflann::flann_log_level_t
FLANN_PLATFORM_32_BIT	flann/defines.h	66;"	d
FLANN_PLATFORM_32_BIT	flann/defines.h	71;"	d
FLANN_PLATFORM_64_BIT	flann/defines.h	67;"	d
FLANN_PLATFORM_64_BIT	flann/defines.h	69;"	d
FLANN_SIGNATURE_	flann/saving.h	39;"	d
FLANN_SIGNATURE_	flann/saving.h	41;"	d
FLANN_UINT16	flann/defines.h	/^    FLANN_UINT16 = 5,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT32	flann/defines.h	/^    FLANN_UINT32 = 6,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT64	flann/defines.h	/^    FLANN_UINT64 = 7,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_UINT8	flann/defines.h	/^    FLANN_UINT8 = 4,$/;"	e	enum:cvflann::flann_datatype_t
FLANN_USE_BOOST	flann/dynamic_bitset.h	39;"	d
FLANN_VERSION_	flann/config.h	34;"	d
FLANN_VERSION_	flann/config.h	36;"	d
FLOODFILL_FIXED_RANGE	imgproc/imgproc.hpp	/^enum { FLOODFILL_FIXED_RANGE = 1 << 16, FLOODFILL_MASK_ONLY = 1 << 17 };$/;"	e	enum:cv::__anon280
FLOODFILL_MASK_ONLY	imgproc/imgproc.hpp	/^enum { FLOODFILL_FIXED_RANGE = 1 << 16, FLOODFILL_MASK_ONLY = 1 << 17 };$/;"	e	enum:cv::__anon280
FM_7POINT	calib3d/calib3d.hpp	/^    FM_7POINT = CV_FM_7POINT, \/\/!< 7-point algorithm$/;"	e	enum:cv::__anon317
FM_8POINT	calib3d/calib3d.hpp	/^    FM_8POINT = CV_FM_8POINT, \/\/!< 8-point algorithm$/;"	e	enum:cv::__anon317
FM_LMEDS	calib3d/calib3d.hpp	/^    FM_LMEDS = CV_FM_LMEDS,  \/\/!< least-median algorithm$/;"	e	enum:cv::__anon317
FM_RANSAC	calib3d/calib3d.hpp	/^    FM_RANSAC = CV_FM_RANSAC  \/\/!< RANSAC algorithm$/;"	e	enum:cv::__anon317
FOpen	ts/ts_gtest.h	/^inline FILE* FOpen(const char* path, const char* mode) {$/;"	f	namespace:std::tr1::posix
FREAK	features2d/features2d.hpp	/^class CV_EXPORTS FREAK : public DescriptorExtractor$/;"	c	namespace:cv
FRIEND_TEST	ts/ts_gtest.h	17171;"	d
FReopen	ts/ts_gtest.h	/^inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {$/;"	f	namespace:std::tr1::posix
FabMap	contrib/openfabmap.hpp	/^class CV_EXPORTS FabMap {$/;"	c	namespace:cv::of2
FabMap1	contrib/openfabmap.hpp	/^class CV_EXPORTS FabMap1: public FabMap {$/;"	c	namespace:cv::of2
FabMap2	contrib/openfabmap.hpp	/^class CV_EXPORTS FabMap2: public FabMap {$/;"	c	namespace:cv::of2
FabMapFBO	contrib/openfabmap.hpp	/^class CV_EXPORTS FabMapFBO: public FabMap {$/;"	c	namespace:cv::of2
FabMapLUT	contrib/openfabmap.hpp	/^class CV_EXPORTS FabMapLUT: public FabMap {$/;"	c	namespace:cv::of2
FaceRecognizer	contrib/contrib.hpp	/^    class CV_EXPORTS_W FaceRecognizer : public Algorithm$/;"	c	namespace:cv
Failed	ts/ts_gtest.h	/^  bool Failed() const { return failed_test_count() > 0; }$/;"	f	class:testing::TestCase
False	flann/dist.h	/^class False$/;"	c	namespace:cvflann
False	flann/dist.h	81;"	d
FarnebackOpticalFlow	gpu/gpu.hpp	/^    FarnebackOpticalFlow()$/;"	f	class:cv::gpu::FarnebackOpticalFlow
FarnebackOpticalFlow	gpu/gpu.hpp	/^class CV_EXPORTS FarnebackOpticalFlow$/;"	c	namespace:cv::gpu
FastAdjuster	features2d/features2d.hpp	/^class CV_EXPORTS FastAdjuster: public AdjusterAdapter$/;"	c	namespace:cv
FastFeatureDetector	features2d/features2d.hpp	/^class CV_EXPORTS_W FastFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
FastMarchingMethod	videostab/fast_marching.hpp	/^    FastMarchingMethod() : inf_(1e6f) {}$/;"	f	class:cv::videostab::FastMarchingMethod
FastMarchingMethod	videostab/fast_marching.hpp	/^class CV_EXPORTS FastMarchingMethod$/;"	c	namespace:cv::videostab
FastNonLocalMeansDenoising	gpu/gpu.hpp	/^class CV_EXPORTS FastNonLocalMeansDenoising$/;"	c	namespace:cv::gpu
Fbd	legacy/legacy.hpp	/^    IplImage*              Fbd;$/;"	m	struct:CvFGDStatModel
FeatherBlender	stitching/detail/blenders.hpp	/^class CV_EXPORTS FeatherBlender : public Blender$/;"	c	namespace:cv::detail
FeatherBlender	stitching/detail/blenders.hpp	/^inline FeatherBlender::FeatherBlender(float _sharpness) { setSharpness(_sharpness); }$/;"	f	class:cv::detail::FeatherBlender
Feature	legacy/legacy.hpp	/^        Feature() : x1(0), y1(0), x2(0), y2(0) {}$/;"	f	struct:cv::FernClassifier::Feature
Feature	legacy/legacy.hpp	/^        Feature(int _x1, int _y1, int _x2, int _y2)$/;"	f	struct:cv::FernClassifier::Feature
Feature	legacy/legacy.hpp	/^    struct Feature$/;"	s	class:cv::FernClassifier
Feature	objdetect/objdetect.hpp	/^  Feature() : x(0), y(0), label(0) {}$/;"	f	struct:cv::linemod::Feature
Feature	objdetect/objdetect.hpp	/^inline Feature::Feature(int _x, int _y, int _label) : x(_x), y(_y), label(_label) {}$/;"	f	class:cv::linemod::Feature
Feature	objdetect/objdetect.hpp	/^struct CV_EXPORTS Feature$/;"	s	namespace:cv::linemod
Feature2D	features2d/features2d.hpp	/^class CV_EXPORTS_W Feature2D : public FeatureDetector, public DescriptorExtractor$/;"	c	namespace:cv
FeatureDetector	features2d/features2d.hpp	/^class CV_EXPORTS_W FeatureDetector : public virtual Algorithm$/;"	c	namespace:cv
FeatureEvaluator	objdetect/objdetect.hpp	/^class CV_EXPORTS FeatureEvaluator$/;"	c	namespace:cv
FeatureIndex	flann/lsh_table.h	/^typedef uint32_t FeatureIndex;$/;"	t	namespace:cvflann::lsh
FeatureSet	core/gpumat.hpp	/^    enum FeatureSet$/;"	g	namespace:cv::gpu
FeatureTracker	contrib/hybridtracker.hpp	/^typedef CvFeatureTracker FeatureTracker;$/;"	t	namespace:cv
FeatureTrackerParams	contrib/hybridtracker.hpp	/^typedef CvFeatureTrackerParams FeatureTrackerParams;$/;"	t	namespace:cv
FeaturesFinder	stitching/detail/matchers.hpp	/^class CV_EXPORTS FeaturesFinder$/;"	c	namespace:cv::detail
FeaturesMatcher	stitching/detail/matchers.hpp	/^    FeaturesMatcher(bool is_thread_safe = false) : is_thread_safe_(is_thread_safe) {}$/;"	f	class:cv::detail::FeaturesMatcher
FeaturesMatcher	stitching/detail/matchers.hpp	/^class CV_EXPORTS FeaturesMatcher$/;"	c	namespace:cv::detail
FernClassifier	legacy/legacy.hpp	/^class CV_EXPORTS FernClassifier$/;"	c	namespace:cv
FernDescriptorMatch	legacy/legacy.hpp	/^typedef FernDescriptorMatcher FernDescriptorMatch;$/;"	t	namespace:cv
FernDescriptorMatcher	legacy/legacy.hpp	/^class CV_EXPORTS FernDescriptorMatcher : public GenericDescriptorMatcher$/;"	c	namespace:cv
FileNo	ts/ts_gtest.h	/^inline int FileNo(FILE* file) { return _fileno(file); }$/;"	f	namespace:std::tr1::posix
FileNo	ts/ts_gtest.h	/^inline int FileNo(FILE* file) { return reinterpret_cast<int>(_fileno(file)); }$/;"	f	namespace:std::tr1::posix
FileNode	core/operations.hpp	/^inline FileNode::FileNode() : fs(0), node(0) {}$/;"	f	class:cv::FileNode
FileNode	core/operations.hpp	/^inline FileNode::FileNode(const CvFileStorage* _fs, const CvFileNode* _node)$/;"	f	class:cv::FileNode
FileNode	core/operations.hpp	/^inline FileNode::FileNode(const FileNode& _node) : fs(_node.fs), node(_node.node) {}$/;"	f	class:cv::FileNode
FilePath	ts/ts_gtest.h	/^  FilePath() : pathname_("") { }$/;"	f	class:testing::internal::FilePath
FilePath	ts/ts_gtest.h	/^  FilePath(const FilePath& rhs) : pathname_(rhs.pathname_) { }$/;"	f	class:testing::internal::FilePath
FilePath	ts/ts_gtest.h	/^  explicit FilePath(const String& pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	ts/ts_gtest.h	/^  explicit FilePath(const char* pathname) : pathname_(pathname) {$/;"	f	class:testing::internal::FilePath
FilePath	ts/ts_gtest.h	/^class GTEST_API_ FilePath {$/;"	c	namespace:testing::internal
FilterEngine	imgproc/imgproc.hpp	/^class CV_EXPORTS FilterEngine$/;"	c	namespace:cv
FilterEngine_GPU	gpu/gpu.hpp	/^class CV_EXPORTS FilterEngine_GPU$/;"	c	namespace:cv::gpu
FilterEngine_GPU	ocl/ocl.hpp	/^        class CV_EXPORTS FilterEngine_GPU$/;"	c	namespace:cv::ocl
FisheyeProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS FisheyeProjector : ProjectorBase$/;"	s	namespace:cv::detail
FisheyeWarper	stitching/detail/warpers.hpp	/^    FisheyeWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::FisheyeWarper
FisheyeWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS FisheyeWarper : public RotationWarperBase<FisheyeProjector>$/;"	c	namespace:cv::detail
FisheyeWarper	stitching/warpers.hpp	/^class FisheyeWarper : public WarperCreator$/;"	c	namespace:cv
FlannBasedMatcher	features2d/features2d.hpp	/^class CV_EXPORTS_W FlannBasedMatcher : public DescriptorMatcher$/;"	c	namespace:cv
Float	legacy/blobtrack.hpp	/^    float               Float;$/;"	m	struct:CvDefParam
Float	ts/ts_gtest.h	/^typedef FloatingPoint<float> Float;$/;"	t	namespace:testing::internal
FloatingPoint	ts/ts_gtest.h	/^  explicit FloatingPoint(const RawType& x) { u_.value_ = x; }$/;"	f	class:testing::internal::FloatingPoint
FloatingPoint	ts/ts_gtest.h	/^class FloatingPoint {$/;"	c	namespace:testing::internal
FloatingPointUnion	ts/ts_gtest.h	/^  union FloatingPointUnion {$/;"	u	class:testing::internal::FloatingPoint
FlushInfoLog	ts/ts_gtest.h	/^inline void FlushInfoLog() { fflush(NULL); }$/;"	f	namespace:std::tr1
ForceGlob	gpu/device/datamov_utils.hpp	/^        template <typename T> struct ForceGlob$/;"	s	namespace:cv::gpu::device
ForceIDR	gpu/gpu.hpp	/^        int       ForceIDR;        \/\/    NVVE_FORCE_IDR,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ForceIntra	gpu/gpu.hpp	/^        int       ForceIntra;      \/\/    NVVE_FORCE_INTRA,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ForestTree	ml/ml.hpp	/^typedef CvForestTree ForestTree;$/;"	t	namespace:cv
Format	ts/ts_gtest.h	/^  static ::std::string Format(const ToPrint& value) {$/;"	f	class:testing::internal::FormatForComparison
Format	ts/ts_gtest.h	/^  static ::std::string Format(const ToPrint* value) {$/;"	f	class:testing::internal::FormatForComparison
FormatForComparison	ts/ts_gtest.h	/^class FormatForComparison {$/;"	c	namespace:testing::internal
FormatForComparison	ts/ts_gtest.h	/^class FormatForComparison<ToPrint[N], OtherOperand> {$/;"	c	namespace:testing::internal
FormatForComparisonFailureMessage	ts/ts_gtest.h	/^String FormatForComparisonFailureMessage(const T1& value,$/;"	f	namespace:testing::internal
FormatInfo	gpu/gpu.hpp	/^    struct FormatInfo$/;"	s	class:cv::gpu::VideoReader_GPU
Formatted	core/operations.hpp	/^struct CV_EXPORTS Formatted$/;"	s	namespace:cv
Formatter	core/operations.hpp	/^class CV_EXPORTS Formatter$/;"	c	namespace:cv
Ftd	legacy/legacy.hpp	/^    IplImage*              Ftd;$/;"	m	struct:CvFGDStatModel
FullMatch	ts/ts_gtest.h	/^  static bool FullMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FullMatch	ts/ts_gtest.h	/^  static bool FullMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
FuzzyResizer	contrib/contrib.hpp	/^    class FuzzyResizer$/;"	c	class:CvFuzzyMeanShiftTracker
G	ml/ml.hpp	/^    double* G;$/;"	m	class:CvSVMSolver
G2Y	gpu/device/detail/color_detail.hpp	/^            G2Y        = 9617,$/;"	e	enum:cv::gpu::device::color_detail::__anon96
GAIN	stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon52
GAIN_BLOCKS	stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon52
GAMMA	ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon247
GAUSSIAN	ml/ml.hpp	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon257
GC_BGD	imgproc/imgproc.hpp	/^    GC_BGD    = 0,  \/\/!< background$/;"	e	enum:cv::__anon277
GC_EVAL	imgproc/imgproc.hpp	/^    GC_EVAL            = 2$/;"	e	enum:cv::__anon278
GC_FGD	imgproc/imgproc.hpp	/^    GC_FGD    = 1,  \/\/!< foreground$/;"	e	enum:cv::__anon277
GC_INIT_WITH_MASK	imgproc/imgproc.hpp	/^    GC_INIT_WITH_MASK  = 1,$/;"	e	enum:cv::__anon278
GC_INIT_WITH_RECT	imgproc/imgproc.hpp	/^    GC_INIT_WITH_RECT  = 0,$/;"	e	enum:cv::__anon278
GC_PR_BGD	imgproc/imgproc.hpp	/^    GC_PR_BGD = 2,  \/\/!< most probably background$/;"	e	enum:cv::__anon277
GC_PR_FGD	imgproc/imgproc.hpp	/^    GC_PR_FGD = 3   \/\/!< most probably foreground$/;"	e	enum:cv::__anon277
GEMM_1_T	core/core.hpp	/^enum { GEMM_1_T=1, GEMM_2_T=2, GEMM_3_T=4 };$/;"	e	enum:cv::__anon205
GEMM_2_T	core/core.hpp	/^enum { GEMM_1_T=1, GEMM_2_T=2, GEMM_3_T=4 };$/;"	e	enum:cv::__anon205
GEMM_3_T	core/core.hpp	/^enum { GEMM_1_T=1, GEMM_2_T=2, GEMM_3_T=4 };$/;"	e	enum:cv::__anon205
GENTLE	ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon253
GET_LOWER_QUANT_PERC	legacy/legacy.hpp	/^    static float GET_LOWER_QUANT_PERC() { return .03f; }$/;"	f	class:cv::RandomizedTree
GET_MAX_SCALE	legacy/legacy.hpp	/^        static float GET_MAX_SCALE() { return 1.5f; }$/;"	f	class:cv::OneWayDescriptorMatcher::Params
GET_MIN_SCALE	legacy/legacy.hpp	/^        static float GET_MIN_SCALE() { return 0.7f; }$/;"	f	class:cv::OneWayDescriptorMatcher::Params
GET_STEP_SCALE	legacy/legacy.hpp	/^        static float GET_STEP_SCALE() { return 1.2f; }$/;"	f	class:cv::OneWayDescriptorMatcher::Params
GET_UPPER_QUANT_PERC	legacy/legacy.hpp	/^    static float GET_UPPER_QUANT_PERC() { return .92f; }$/;"	f	class:cv::RandomizedTree
GFTTDetector	features2d/features2d.hpp	/^class CV_EXPORTS GFTTDetector : public FeatureDetector$/;"	c	namespace:cv
GHT_POSITION	imgproc/imgproc.hpp	/^    GHT_POSITION = 0,$/;"	e	enum:cv::__anon271
GHT_ROTATION	imgproc/imgproc.hpp	/^    GHT_ROTATION = 2$/;"	e	enum:cv::__anon271
GHT_SCALE	imgproc/imgproc.hpp	/^    GHT_SCALE = 1,$/;"	e	enum:cv::__anon271
GINI	ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon254
GLOBAL_ATOMICS	core/gpumat.hpp	/^        GLOBAL_ATOMICS = FEATURE_SET_COMPUTE_11,$/;"	e	enum:cv::gpu::FeatureSet
GMG_GPU	gpu/gpu.hpp	/^class CV_EXPORTS GMG_GPU$/;"	c	namespace:cv::gpu
GSD_HUE_LT	contrib/contrib.hpp	/^        GSD_HUE_LT = 3,$/;"	e	enum:CvAdaptiveSkinDetector::__anon17
GSD_HUE_UT	contrib/contrib.hpp	/^        GSD_HUE_UT = 33,$/;"	e	enum:CvAdaptiveSkinDetector::__anon17
GSD_INTENSITY_LT	contrib/contrib.hpp	/^        GSD_INTENSITY_LT = 15,$/;"	e	enum:CvAdaptiveSkinDetector::__anon17
GSD_INTENSITY_UT	contrib/contrib.hpp	/^        GSD_INTENSITY_UT = 250$/;"	e	enum:CvAdaptiveSkinDetector::__anon17
GTEST_0_TUPLE_	ts/ts_gtest.h	1596;"	d
GTEST_0_TUPLE_	ts/ts_gtest.h	670;"	d
GTEST_0_TYPENAMES_	ts/ts_gtest.h	1608;"	d
GTEST_0_TYPENAMES_	ts/ts_gtest.h	693;"	d
GTEST_10_TUPLE_	ts/ts_gtest.h	1606;"	d
GTEST_10_TUPLE_	ts/ts_gtest.h	689;"	d
GTEST_10_TYPENAMES_	ts/ts_gtest.h	1618;"	d
GTEST_10_TYPENAMES_	ts/ts_gtest.h	710;"	d
GTEST_1_TUPLE_	ts/ts_gtest.h	/^class GTEST_1_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_1_TUPLE_	ts/ts_gtest.h	1597;"	d
GTEST_1_TUPLE_	ts/ts_gtest.h	671;"	d
GTEST_1_TYPENAMES_	ts/ts_gtest.h	1609;"	d
GTEST_1_TYPENAMES_	ts/ts_gtest.h	694;"	d
GTEST_2_TUPLE_	ts/ts_gtest.h	/^class GTEST_2_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_2_TUPLE_	ts/ts_gtest.h	1598;"	d
GTEST_2_TUPLE_	ts/ts_gtest.h	673;"	d
GTEST_2_TYPENAMES_	ts/ts_gtest.h	1610;"	d
GTEST_2_TYPENAMES_	ts/ts_gtest.h	695;"	d
GTEST_3_TUPLE_	ts/ts_gtest.h	/^class GTEST_3_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_3_TUPLE_	ts/ts_gtest.h	1599;"	d
GTEST_3_TUPLE_	ts/ts_gtest.h	675;"	d
GTEST_3_TYPENAMES_	ts/ts_gtest.h	1611;"	d
GTEST_3_TYPENAMES_	ts/ts_gtest.h	696;"	d
GTEST_4_TUPLE_	ts/ts_gtest.h	/^class GTEST_4_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_4_TUPLE_	ts/ts_gtest.h	1600;"	d
GTEST_4_TUPLE_	ts/ts_gtest.h	677;"	d
GTEST_4_TYPENAMES_	ts/ts_gtest.h	1612;"	d
GTEST_4_TYPENAMES_	ts/ts_gtest.h	697;"	d
GTEST_5_TUPLE_	ts/ts_gtest.h	/^class GTEST_5_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_5_TUPLE_	ts/ts_gtest.h	1601;"	d
GTEST_5_TUPLE_	ts/ts_gtest.h	679;"	d
GTEST_5_TYPENAMES_	ts/ts_gtest.h	1613;"	d
GTEST_5_TYPENAMES_	ts/ts_gtest.h	699;"	d
GTEST_6_TUPLE_	ts/ts_gtest.h	/^class GTEST_6_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_6_TUPLE_	ts/ts_gtest.h	1602;"	d
GTEST_6_TUPLE_	ts/ts_gtest.h	681;"	d
GTEST_6_TYPENAMES_	ts/ts_gtest.h	1614;"	d
GTEST_6_TYPENAMES_	ts/ts_gtest.h	701;"	d
GTEST_7_TUPLE_	ts/ts_gtest.h	/^class GTEST_7_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_7_TUPLE_	ts/ts_gtest.h	1603;"	d
GTEST_7_TUPLE_	ts/ts_gtest.h	683;"	d
GTEST_7_TYPENAMES_	ts/ts_gtest.h	1615;"	d
GTEST_7_TYPENAMES_	ts/ts_gtest.h	703;"	d
GTEST_8_TUPLE_	ts/ts_gtest.h	/^class GTEST_8_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_8_TUPLE_	ts/ts_gtest.h	1604;"	d
GTEST_8_TUPLE_	ts/ts_gtest.h	685;"	d
GTEST_8_TYPENAMES_	ts/ts_gtest.h	1616;"	d
GTEST_8_TYPENAMES_	ts/ts_gtest.h	705;"	d
GTEST_9_TUPLE_	ts/ts_gtest.h	/^class GTEST_9_TUPLE_(T) {$/;"	f	namespace:std::tr1
GTEST_9_TUPLE_	ts/ts_gtest.h	1605;"	d
GTEST_9_TUPLE_	ts/ts_gtest.h	687;"	d
GTEST_9_TYPENAMES_	ts/ts_gtest.h	1617;"	d
GTEST_9_TYPENAMES_	ts/ts_gtest.h	707;"	d
GTEST_ADD_REFERENCE_	ts/ts_gtest.h	7621;"	d
GTEST_ADD_REF_	ts/ts_gtest.h	1622;"	d
GTEST_ADD_REF_	ts/ts_gtest.h	747;"	d
GTEST_AMBIGUOUS_ELSE_BLOCKER_	ts/ts_gtest.h	1768;"	d
GTEST_API_	ts/ts_gtest.h	1831;"	d
GTEST_API_	ts/ts_gtest.h	1839;"	d
GTEST_ASSERT_	ts/ts_gtest.h	19493;"	d
GTEST_ASSERT_EQ	ts/ts_gtest.h	19839;"	d
GTEST_ASSERT_GE	ts/ts_gtest.h	19849;"	d
GTEST_ASSERT_GT	ts/ts_gtest.h	19851;"	d
GTEST_ASSERT_LE	ts/ts_gtest.h	19845;"	d
GTEST_ASSERT_LT	ts/ts_gtest.h	19847;"	d
GTEST_ASSERT_NE	ts/ts_gtest.h	19843;"	d
GTEST_ATTRIBUTE_UNUSED_	ts/ts_gtest.h	/^  } GTEST_ATTRIBUTE_UNUSED_;$/;"	m	class:testing::internal::DeathTest	typeref:class:testing::internal::DeathTest::ReturnSentinel
GTEST_ATTRIBUTE_UNUSED_	ts/ts_gtest.h	/^} GTEST_ATTRIBUTE_UNUSED_;  \/\/ A ScopedTrace object does its job in its$/;"	m	namespace:testing::internal	typeref:class:testing::internal::ScopedTrace
GTEST_ATTRIBUTE_UNUSED_	ts/ts_gtest.h	1785;"	d
GTEST_BIND_	ts/ts_gtest.h	5214;"	d
GTEST_BY_REF_	ts/ts_gtest.h	1621;"	d
GTEST_BY_REF_	ts/ts_gtest.h	737;"	d
GTEST_CAN_COMPARE_NULL	ts/ts_gtest.h	2668;"	d
GTEST_CAN_STREAM_RESULTS_	ts/ts_gtest.h	1752;"	d
GTEST_CASE_NAMESPACE_	ts/ts_gtest.h	17546;"	d
GTEST_CHECK_	ts/ts_gtest.h	2129;"	d
GTEST_CHECK_POSIX_SUCCESS_	ts/ts_gtest.h	2141;"	d
GTEST_COMPILE_ASSERT_	ts/ts_gtest.h	1883;"	d
GTEST_CONCAT_TOKEN_	ts/ts_gtest.h	6915;"	d
GTEST_CONCAT_TOKEN_IMPL_	ts/ts_gtest.h	6916;"	d
GTEST_DEATH_TEST_	ts/ts_gtest.h	8243;"	d
GTEST_DECLARE_STATIC_MUTEX_	ts/ts_gtest.h	2449;"	d
GTEST_DECLARE_STATIC_MUTEX_	ts/ts_gtest.h	2622;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ts/ts_gtest.h	1620;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ts/ts_gtest.h	662;"	d
GTEST_DECLARE_TUPLE_AS_FRIEND_	ts/ts_gtest.h	664;"	d
GTEST_DECLARE_bool_	ts/ts_gtest.h	2981;"	d
GTEST_DECLARE_int32_	ts/ts_gtest.h	2982;"	d
GTEST_DECLARE_string_	ts/ts_gtest.h	2984;"	d
GTEST_DEFINE_STATIC_MUTEX_	ts/ts_gtest.h	2458;"	d
GTEST_DEFINE_STATIC_MUTEX_	ts/ts_gtest.h	2625;"	d
GTEST_DEFINE_bool_	ts/ts_gtest.h	2988;"	d
GTEST_DEFINE_int32_	ts/ts_gtest.h	2990;"	d
GTEST_DEFINE_string_	ts/ts_gtest.h	2992;"	d
GTEST_DEV_EMAIL_	ts/ts_gtest.h	298;"	d
GTEST_DISALLOW_ASSIGN_	ts/ts_gtest.h	1792;"	d
GTEST_DISALLOW_COPY_AND_ASSIGN_	ts/ts_gtest.h	1797;"	d
GTEST_DONT_DEFINE_ASSERT_EQ	ts/ts.hpp	32;"	d
GTEST_DONT_DEFINE_ASSERT_GE	ts/ts.hpp	36;"	d
GTEST_DONT_DEFINE_ASSERT_GT	ts/ts.hpp	37;"	d
GTEST_DONT_DEFINE_ASSERT_LE	ts/ts.hpp	34;"	d
GTEST_DONT_DEFINE_ASSERT_LT	ts/ts.hpp	35;"	d
GTEST_DONT_DEFINE_ASSERT_NE	ts/ts.hpp	33;"	d
GTEST_DONT_DEFINE_FAIL	ts/ts.hpp	30;"	d
GTEST_DONT_DEFINE_SUCCEED	ts/ts.hpp	31;"	d
GTEST_DONT_DEFINE_TEST	ts/ts.hpp	38;"	d
GTEST_ELLIPSIS_NEEDS_POD_	ts/ts_gtest.h	2666;"	d
GTEST_ERROR	ts/ts_gtest.h	/^  GTEST_ERROR,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_EXCLUSIVE_LOCK_REQUIRED_	ts/ts_gtest.h	2996;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	ts/ts_gtest.h	8219;"	d
GTEST_EXECUTE_DEATH_TEST_STATEMENT_	ts/ts_gtest.h	8236;"	d
GTEST_EXECUTE_STATEMENT_	ts/ts_gtest.h	8282;"	d
GTEST_FAIL	ts/ts_gtest.h	19362;"	d
GTEST_FATAL	ts/ts_gtest.h	/^  GTEST_FATAL$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_FATAL_FAILURE_	ts/ts_gtest.h	7892;"	d
GTEST_FLAG	ts/ts_gtest.h	2978;"	d
GTEST_FLAG_PREFIX_	ts/ts_gtest.h	299;"	d
GTEST_FLAG_PREFIX_DASH_	ts/ts_gtest.h	300;"	d
GTEST_FLAG_PREFIX_UPPER_	ts/ts_gtest.h	301;"	d
GTEST_GCC_VER_	ts/ts_gtest.h	308;"	d
GTEST_HAS_ALT_PATH_SEP_	ts/ts_gtest.h	2712;"	d
GTEST_HAS_ALT_PATH_SEP_	ts/ts_gtest.h	2717;"	d
GTEST_HAS_CLONE	ts/ts.hpp	15;"	d
GTEST_HAS_CLONE	ts/ts_gtest.h	1690;"	d
GTEST_HAS_COMBINE	ts/ts_gtest.h	1743;"	d
GTEST_HAS_CXXABI_H_	ts/ts_gtest.h	1851;"	d
GTEST_HAS_DEATH_TEST	ts/ts_gtest.h	1717;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	443;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	446;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	451;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	454;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	458;"	d
GTEST_HAS_EXCEPTIONS	ts/ts_gtest.h	462;"	d
GTEST_HAS_GLOBAL_STRING	ts/ts_gtest.h	479;"	d
GTEST_HAS_GLOBAL_WSTRING	ts/ts_gtest.h	500;"	d
GTEST_HAS_PARAM_TEST	ts/ts_gtest.h	1726;"	d
GTEST_HAS_POSIX_RE	ts/ts.hpp	16;"	d
GTEST_HAS_POSIX_RE	ts/ts_gtest.h	403;"	d
GTEST_HAS_PTHREAD	ts/ts_gtest.h	565;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	512;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	514;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	521;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	523;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	531;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	538;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	540;"	d
GTEST_HAS_RTTI	ts/ts_gtest.h	546;"	d
GTEST_HAS_SEH	ts/ts_gtest.h	1820;"	d
GTEST_HAS_STD_STRING	ts/ts_gtest.h	469;"	d
GTEST_HAS_STD_WSTRING	ts/ts.hpp	18;"	d
GTEST_HAS_STD_WSTRING	ts/ts.hpp	20;"	d
GTEST_HAS_STD_WSTRING	ts/ts_gtest.h	492;"	d
GTEST_HAS_STREAM_REDIRECTION	ts/ts_gtest.h	1703;"	d
GTEST_HAS_TR1_TUPLE	ts/ts_gtest.h	583;"	d
GTEST_HAS_TYPED_TEST	ts/ts_gtest.h	1734;"	d
GTEST_HAS_TYPED_TEST_P	ts/ts_gtest.h	1735;"	d
GTEST_IMPL_CMP_HELPER_	ts/ts_gtest.h	19053;"	d
GTEST_IMPL_CMP_HELPER_	ts/ts_gtest.h	19082;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	ts/ts_gtest.h	18869;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_	ts/ts_gtest.h	18883;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	ts/ts_gtest.h	18888;"	d
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_	ts/ts_gtest.h	18915;"	d
GTEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_	ts/ts_gtest.h	8058;"	d
GTEST_INCLUDE_GTEST_GTEST_H_	ts/ts_gtest.h	52;"	d
GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_	ts/ts_gtest.h	8677;"	d
GTEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_	ts/ts_gtest.h	8900;"	d
GTEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_	ts/ts_gtest.h	19454;"	d
GTEST_INCLUDE_GTEST_GTEST_PRINTERS_H_	ts/ts_gtest.h	9418;"	d
GTEST_INCLUDE_GTEST_GTEST_PROD_H_	ts/ts_gtest.h	17151;"	d
GTEST_INCLUDE_GTEST_GTEST_TEST_PART_H_	ts/ts_gtest.h	17208;"	d
GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_	ts/ts_gtest.h	17382;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_	ts/ts_gtest.h	8097;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_	ts/ts_gtest.h	3407;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_	ts/ts_gtest.h	95;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_LINKED_PTR_H_	ts/ts_gtest.h	9159;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_GENERATED_H_	ts/ts_gtest.h	10794;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_	ts/ts_gtest.h	9082;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_	ts/ts_gtest.h	133;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_	ts/ts_gtest.h	3072;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TUPLE_H_	ts/ts_gtest.h	652;"	d
GTEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_	ts/ts_gtest.h	3620;"	d
GTEST_INFO	ts/ts_gtest.h	/^  GTEST_INFO,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_IS_NULL_LITERAL_	ts/ts_gtest.h	7007;"	d
GTEST_IS_NULL_LITERAL_	ts/ts_gtest.h	7009;"	d
GTEST_IS_THREADSAFE	ts/ts_gtest.h	2605;"	d
GTEST_IS_THREADSAFE	ts/ts_gtest.h	2649;"	d
GTEST_LINKED_AS_SHARED_LIBRARY	ts/ts.hpp	9;"	d
GTEST_LOCK_EXCLUDED_	ts/ts_gtest.h	/^      GTEST_LOCK_EXCLUDED_(g_linked_ptr_mutex) {$/;"	f	class:testing::internal::linked_ptr_internal
GTEST_LOCK_EXCLUDED_	ts/ts_gtest.h	2997;"	d
GTEST_LOG_	ts/ts_gtest.h	2108;"	d
GTEST_MESSAGE_	ts/ts_gtest.h	7889;"	d
GTEST_MESSAGE_AT_	ts/ts_gtest.h	7885;"	d
GTEST_MUST_USE_RESULT_	ts/ts_gtest.h	/^  int Run() GTEST_MUST_USE_RESULT_;$/;"	m	class:testing::UnitTest
GTEST_MUST_USE_RESULT_	ts/ts_gtest.h	1807;"	d
GTEST_NAME_	ts/ts_gtest.h	302;"	d
GTEST_NEEDS_IS_POINTER_	ts/ts_gtest.h	2676;"	d
GTEST_NONFATAL_FAILURE_	ts/ts_gtest.h	7895;"	d
GTEST_NO_INLINE_	ts/ts_gtest.h	1844;"	d
GTEST_OS_AIX	ts/ts_gtest.h	324;"	d
GTEST_OS_AIX	ts/ts_gtest.h	366;"	d
GTEST_OS_AIX	ts/ts_gtest.h	367;"	d
GTEST_OS_CYGWIN	ts/ts_gtest.h	313;"	d
GTEST_OS_CYGWIN	ts/ts_gtest.h	331;"	d
GTEST_OS_CYGWIN	ts/ts_gtest.h	332;"	d
GTEST_OS_HPUX	ts/ts_gtest.h	325;"	d
GTEST_OS_HPUX	ts/ts_gtest.h	369;"	d
GTEST_OS_HPUX	ts/ts_gtest.h	370;"	d
GTEST_OS_LINUX	ts/ts_gtest.h	320;"	d
GTEST_OS_LINUX	ts/ts_gtest.h	353;"	d
GTEST_OS_LINUX	ts/ts_gtest.h	354;"	d
GTEST_OS_LINUX_ANDROID	ts/ts_gtest.h	321;"	d
GTEST_OS_LINUX_ANDROID	ts/ts_gtest.h	356;"	d
GTEST_OS_LINUX_ANDROID	ts/ts_gtest.h	357;"	d
GTEST_OS_MAC	ts/ts_gtest.h	319;"	d
GTEST_OS_MAC	ts/ts_gtest.h	350;"	d
GTEST_OS_MAC	ts/ts_gtest.h	351;"	d
GTEST_OS_NACL	ts/ts_gtest.h	326;"	d
GTEST_OS_NACL	ts/ts_gtest.h	372;"	d
GTEST_OS_NACL	ts/ts_gtest.h	373;"	d
GTEST_OS_OPENBSD	ts/ts_gtest.h	327;"	d
GTEST_OS_OPENBSD	ts/ts_gtest.h	375;"	d
GTEST_OS_OPENBSD	ts/ts_gtest.h	376;"	d
GTEST_OS_QNX	ts/ts_gtest.h	328;"	d
GTEST_OS_QNX	ts/ts_gtest.h	378;"	d
GTEST_OS_QNX	ts/ts_gtest.h	379;"	d
GTEST_OS_SOLARIS	ts/ts_gtest.h	323;"	d
GTEST_OS_SOLARIS	ts/ts_gtest.h	363;"	d
GTEST_OS_SOLARIS	ts/ts_gtest.h	364;"	d
GTEST_OS_SYMBIAN	ts/ts_gtest.h	314;"	d
GTEST_OS_SYMBIAN	ts/ts_gtest.h	334;"	d
GTEST_OS_SYMBIAN	ts/ts_gtest.h	335;"	d
GTEST_OS_WINDOWS	ts/ts_gtest.h	315;"	d
GTEST_OS_WINDOWS	ts/ts_gtest.h	337;"	d
GTEST_OS_WINDOWS	ts/ts_gtest.h	338;"	d
GTEST_OS_WINDOWS_DESKTOP	ts/ts_gtest.h	318;"	d
GTEST_OS_WINDOWS_DESKTOP	ts/ts_gtest.h	346;"	d
GTEST_OS_WINDOWS_DESKTOP	ts/ts_gtest.h	347;"	d
GTEST_OS_WINDOWS_MINGW	ts/ts_gtest.h	317;"	d
GTEST_OS_WINDOWS_MINGW	ts/ts_gtest.h	343;"	d
GTEST_OS_WINDOWS_MINGW	ts/ts_gtest.h	344;"	d
GTEST_OS_WINDOWS_MOBILE	ts/ts_gtest.h	316;"	d
GTEST_OS_WINDOWS_MOBILE	ts/ts_gtest.h	340;"	d
GTEST_OS_WINDOWS_MOBILE	ts/ts_gtest.h	341;"	d
GTEST_OS_ZOS	ts/ts_gtest.h	322;"	d
GTEST_OS_ZOS	ts/ts_gtest.h	360;"	d
GTEST_OS_ZOS	ts/ts_gtest.h	361;"	d
GTEST_PATH_SEP_	ts/ts_gtest.h	2711;"	d
GTEST_PATH_SEP_	ts/ts_gtest.h	2716;"	d
GTEST_PRED1_	ts/ts_gtest.h	19524;"	d
GTEST_PRED2_	ts/ts_gtest.h	19570;"	d
GTEST_PRED3_	ts/ts_gtest.h	19623;"	d
GTEST_PRED4_	ts/ts_gtest.h	19683;"	d
GTEST_PRED5_	ts/ts_gtest.h	19750;"	d
GTEST_PRED_FORMAT1_	ts/ts_gtest.h	19518;"	d
GTEST_PRED_FORMAT2_	ts/ts_gtest.h	19564;"	d
GTEST_PRED_FORMAT3_	ts/ts_gtest.h	19617;"	d
GTEST_PRED_FORMAT4_	ts/ts_gtest.h	19677;"	d
GTEST_PRED_FORMAT5_	ts/ts_gtest.h	19744;"	d
GTEST_PROJECT_URL_	ts/ts_gtest.h	303;"	d
GTEST_REFERENCE_TO_CONST_	ts/ts_gtest.h	7633;"	d
GTEST_REGISTERED_TEST_NAMES_	ts/ts_gtest.h	17560;"	d
GTEST_REMOVE_CONST_	ts/ts_gtest.h	7604;"	d
GTEST_REMOVE_REFERENCE_	ts/ts_gtest.h	7573;"	d
GTEST_REMOVE_REFERENCE_AND_CONST_	ts/ts_gtest.h	7608;"	d
GTEST_SNPRINTF_	ts/ts_gtest.h	2897;"	d
GTEST_SUCCEED	ts/ts_gtest.h	19371;"	d
GTEST_SUCCESS_	ts/ts_gtest.h	7898;"	d
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_	ts/ts_gtest.h	7904;"	d
GTEST_TEMPLATE_	ts/ts_gtest.h	5196;"	d
GTEST_TEST	ts/ts_gtest.h	20082;"	d
GTEST_TEST_	ts/ts_gtest.h	7997;"	d
GTEST_TEST_ANY_THROW_	ts/ts_gtest.h	7947;"	d
GTEST_TEST_BOOLEAN_	ts/ts_gtest.h	7969;"	d
GTEST_TEST_CLASS_NAME_	ts/ts_gtest.h	7993;"	d
GTEST_TEST_NO_FATAL_FAILURE_	ts/ts_gtest.h	7978;"	d
GTEST_TEST_NO_THROW_	ts/ts_gtest.h	7933;"	d
GTEST_TEST_THROW_	ts/ts_gtest.h	7907;"	d
GTEST_TUPLE_ELEMENT_	ts/ts_gtest.h	1406;"	d
GTEST_TUPLE_ELEMENT_	ts/ts_gtest.h	1623;"	d
GTEST_TYPED_TEST_CASE_P_STATE_	ts/ts_gtest.h	17553;"	d
GTEST_TYPE_PARAMS_	ts/ts_gtest.h	17507;"	d
GTEST_UNSUPPORTED_DEATH_TEST_	ts/ts_gtest.h	8359;"	d
GTEST_USES_POSIX_RE	ts/ts.hpp	46;"	d
GTEST_USES_POSIX_RE	ts/ts_gtest.h	414;"	d
GTEST_USES_POSIX_RE	ts/ts_gtest.h	422;"	d
GTEST_USES_POSIX_RE	ts/ts_gtest.h	429;"	d
GTEST_USES_SIMPLE_RE	ts/ts.hpp	43;"	d
GTEST_USES_SIMPLE_RE	ts/ts_gtest.h	415;"	d
GTEST_USES_SIMPLE_RE	ts/ts_gtest.h	421;"	d
GTEST_USES_SIMPLE_RE	ts/ts_gtest.h	428;"	d
GTEST_USE_OWN_TR1_TUPLE	ts/ts_gtest.h	601;"	d
GTEST_USE_OWN_TR1_TUPLE	ts/ts_gtest.h	603;"	d
GTEST_WARNING	ts/ts_gtest.h	/^  GTEST_WARNING,$/;"	e	enum:std::tr1::GTestLogSeverity
GTEST_WIDE_STRING_USES_UTF16_	ts/ts_gtest.h	1747;"	d
GTestLog	ts/ts_gtest.h	/^class GTEST_API_ GTestLog {$/;"	c	namespace:std::tr1
GTestLogSeverity	ts/ts_gtest.h	/^enum GTestLogSeverity {$/;"	g	namespace:std::tr1
GTestMutexLock	ts/ts_gtest.h	/^  explicit GTestMutexLock(Mutex*) {}  \/\/ NOLINT$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	ts/ts_gtest.h	/^  explicit GTestMutexLock(MutexBase* mutex)$/;"	f	class:std::tr1::GTestMutexLock
GTestMutexLock	ts/ts_gtest.h	/^class GTestMutexLock {$/;"	c	namespace:std::tr1
GTestStreamToHelper	ts/ts_gtest.h	/^inline void GTestStreamToHelper(std::ostream* os, const T& val) {$/;"	f
GainCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS GainCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
GaussianMotionFilter	videostab/motion_stabilizing.hpp	/^    GaussianMotionFilter() : stdev_(-1.f) {}$/;"	f	class:cv::videostab::GaussianMotionFilter
GaussianMotionFilter	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS GaussianMotionFilter : public MotionFilterBase$/;"	c	namespace:cv::videostab
GeneralizedHough	imgproc/imgproc.hpp	/^class CV_EXPORTS GeneralizedHough : public Algorithm$/;"	c	namespace:cv
GeneralizedHough_GPU	gpu/gpu.hpp	/^class CV_EXPORTS GeneralizedHough_GPU : public Algorithm$/;"	c	namespace:cv::gpu
GeneratorCreationFunc	ts/ts_gtest.h	/^  typedef ParamGenerator<ParamType>(GeneratorCreationFunc)();$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
GenericDescriptorMatch	features2d/features2d.hpp	/^typedef GenericDescriptorMatcher GenericDescriptorMatch;$/;"	t	namespace:cv
GenericDescriptorMatcher	features2d/features2d.hpp	/^class CV_EXPORTS GenericDescriptorMatcher$/;"	c	namespace:cv
GenericIndex	flann/flann.hpp	/^GenericIndex<Distance>::GenericIndex(const Mat& dataset, const ::cvflann::IndexParams& params, Distance distance)$/;"	f	class:cv::flann::GenericIndex
GenericIndex	flann/flann.hpp	/^class GenericIndex$/;"	c	namespace:cv::flann
GetBlob	legacy/blobtrack.hpp	/^    virtual CvBlob* GetBlob(int BlobIndex)$/;"	f	class:CvBlobSeq
GetBlobByID	legacy/blobtrack.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobSeq
GetBlobByID	legacy/blobtrack.hpp	/^    virtual CvBlob* GetBlobByID(int BlobID)$/;"	f	class:CvBlobTrackPostProc
GetBlobNum	legacy/blobtrack.hpp	/^    virtual int GetBlobNum()$/;"	f	class:CvBlobSeq
GetCameraCount	legacy/legacy.hpp	/^    int GetCameraCount() const { return cameraCount; }$/;"	f	class:CvCalibFilter
GetConfidence	legacy/blobtrack.hpp	/^    virtual double GetConfidence(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/,$/;"	f	class:CvBlobTrackerOne
GetDescriptor	legacy/legacy.hpp	/^    const OneWayDescriptor* GetDescriptor(int desc_idx) const {return &m_descriptors[desc_idx];};$/;"	f	class:cv::OneWayDescriptorBase
GetDescriptorCount	legacy/legacy.hpp	/^    int GetDescriptorCount() const {return m_train_feature_count;};$/;"	f	class:cv::OneWayDescriptorBase
GetEnv	ts/ts_gtest.h	/^inline const char* GetEnv(const char* name) {$/;"	f	namespace:std::tr1::posix
GetFGMask	legacy/blobtrack.hpp	/^    virtual IplImage*   GetFGMask(){return NULL;};$/;"	f	class:CvBlobTrackerAuto
GetFVVar	legacy/blobtrack.hpp	/^    virtual float*  GetFVVar(){return NULL;}; \/* Returns pointer to array of variation of values of FV, if returns 0 then FVVar does not exist. *\/$/;"	f	class:CvBlobTrackFVGen
GetImage	legacy/blobtrack.hpp	/^    IplImage* GetImage() { return m_image; }$/;"	f	class:CvImageDrawer
GetInputPatchSize	legacy/legacy.hpp	/^    CvSize GetInputPatchSize() const$/;"	f	class:cv::OneWayDescriptor
GetLabeledFeatures	legacy/legacy.hpp	/^    const vector<KeyPoint>& GetLabeledFeatures() const {return m_train_features;};$/;"	f	class:cv::OneWayDescriptorObject
GetLabeledFeatures	legacy/legacy.hpp	/^    vector<KeyPoint>& GetLabeledFeatures() {return m_train_features;};$/;"	f	class:cv::OneWayDescriptorObject
GetLowPCA	legacy/legacy.hpp	/^    int GetLowPCA(CvMat** avg, CvMat** eigenvectors)$/;"	f	class:cv::OneWayDescriptorBase
GetObjectFeatureCount	legacy/legacy.hpp	/^    int GetObjectFeatureCount() const {return m_object_feature_count;};$/;"	f	class:cv::OneWayDescriptorObject
GetOrCreateValue	ts/ts_gtest.h	/^  T* GetOrCreateValue() const {$/;"	f	class:std::tr1::ThreadLocal
GetPCACoeffs	legacy/legacy.hpp	/^    CvMat** GetPCACoeffs() const {return m_pca_coeffs;}$/;"	f	class:cv::OneWayDescriptor
GetPCADimHigh	legacy/legacy.hpp	/^    int GetPCADimHigh() const {return m_pca_dim_high;};$/;"	f	class:cv::OneWayDescriptorBase
GetPCADimLow	legacy/legacy.hpp	/^    int GetPCADimLow() const {return m_pca_dim_low;};$/;"	f	class:cv::OneWayDescriptorBase
GetPCAFilename	legacy/legacy.hpp	/^    static string GetPCAFilename () { return "pca.yml"; }$/;"	f	class:cv::OneWayDescriptorBase
GetParam	ts/ts_gtest.h	/^  const ParamType& GetParam() const { return *parameter_; }$/;"	f	class:testing::WithParamInterface
GetPatchSize	legacy/legacy.hpp	/^    CvSize GetPatchSize() const {return m_patch_size;};$/;"	f	class:cv::OneWayDescriptorBase
GetPatchSize	legacy/legacy.hpp	/^    CvSize GetPatchSize() const$/;"	f	class:cv::OneWayDescriptor
GetPoseCount	legacy/legacy.hpp	/^    int GetPoseCount() const {return m_pose_count;};$/;"	f	class:cv::OneWayDescriptorBase
GetPrefixUntilComma	ts/ts_gtest.h	/^inline String GetPrefixUntilComma(const char* str) {$/;"	f	namespace:testing::internal
GetPyrLevels	legacy/legacy.hpp	/^    int GetPyrLevels() const {return m_pyr_levels;};$/;"	f	class:cv::OneWayDescriptorBase
GetRow	ml/ml.hpp	/^    typedef float* (CvSVMSolver::*GetRow)( int i, float* row, float* dst, bool existed );$/;"	t	class:CvSVMSolver
GetStateDesc	legacy/blobtrack.hpp	/^    virtual const char*   GetStateDesc(int \/*BlobID*\/){return NULL;};$/;"	f	class:CvBlobTrackAnalysis
GetStream	ts/ts_gtest.h	/^  ::std::ostream& GetStream() { return ::std::cerr; }$/;"	f	class:std::tr1::GTestLog
GetString	ts/ts_gtest.h	/^  internal::String GetString() const {$/;"	f	class:testing::Message
GetTestCaseName	ts/ts_gtest.h	/^  virtual const string& GetTestCaseName() const { return test_case_name_; }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTestCasePatternHolder	ts/ts_gtest.h	/^  ParameterizedTestCaseInfo<TestCase>* GetTestCasePatternHolder($/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
GetTestCaseTypeId	ts/ts_gtest.h	/^  virtual TypeId GetTestCaseTypeId() const { return GetTypeId<TestCase>(); }$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
GetTypeId	ts/ts_gtest.h	/^TypeId GetTypeId() {$/;"	f	namespace:testing::internal
GetTypeName	ts/ts_gtest.h	/^String GetTypeName() {$/;"	f	namespace:testing::internal
GlArrays	core/opengl_interop.hpp	/^    inline GlArrays()$/;"	f	class:cv::GlArrays
GlArrays	core/opengl_interop.hpp	/^class CV_EXPORTS GlArrays$/;"	c	namespace:cv
GlBuffer	core/opengl_interop.hpp	/^class CV_EXPORTS GlBuffer$/;"	c	namespace:cv
GlCamera	core/opengl_interop.hpp	/^class CV_EXPORTS GlCamera$/;"	c	namespace:cv
GlFont	core/opengl_interop.hpp	/^class CV_EXPORTS GlFont$/;"	c	namespace:cv
GlTexture	core/opengl_interop.hpp	/^class CV_EXPORTS GlTexture$/;"	c	namespace:cv
GoodFeaturesToTrackDetector	features2d/features2d.hpp	/^typedef GFTTDetector GoodFeaturesToTrackDetector;$/;"	t	namespace:cv
GoodFeaturesToTrackDetector_GPU	gpu/gpu.hpp	/^class CV_EXPORTS GoodFeaturesToTrackDetector_GPU$/;"	c	namespace:cv::gpu
GoodFeaturesToTrackDetector_GPU	gpu/gpu.hpp	/^inline GoodFeaturesToTrackDetector_GPU::GoodFeaturesToTrackDetector_GPU(int maxCorners_, double qualityLevel_, double minDistance_,$/;"	f	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
GpuMat	core/gpumat.hpp	/^    class CV_EXPORTS GpuMat$/;"	c	namespace:cv::gpu
GpuMat	core/gpumat.hpp	/^    inline GpuMat::GpuMat()$/;"	f	class:cv::gpu::GpuMat
GpuMat	core/gpumat.hpp	/^    inline GpuMat::GpuMat(Size size_, int type_)$/;"	f	class:cv::gpu::GpuMat
GpuMat	core/gpumat.hpp	/^    inline GpuMat::GpuMat(Size size_, int type_, Scalar s_)$/;"	f	class:cv::gpu::GpuMat
GpuMat	core/gpumat.hpp	/^    inline GpuMat::GpuMat(int rows_, int cols_, int type_)$/;"	f	class:cv::gpu::GpuMat
GpuMat	core/gpumat.hpp	/^    inline GpuMat::GpuMat(int rows_, int cols_, int type_, Scalar s_)$/;"	f	class:cv::gpu::GpuMat
GpuPerf	ts/ts_perf.hpp	/^class CV_EXPORTS GpuPerf$/;"	c	namespace:perf
GradientBoostingTreeParams	ml/ml.hpp	/^typedef CvGBTreesParams GradientBoostingTreeParams;$/;"	t	namespace:cv
GradientBoostingTrees	ml/ml.hpp	/^typedef CvGBTrees GradientBoostingTrees;$/;"	t	namespace:cv
Graph	legacy/legacy.hpp	/^CVAPI(int) cvReleaseLinearContorModelStorage(CvGraph** Graph);$/;"	v
Graph	stitching/detail/util.hpp	/^    Graph(int num_vertices = 0) { create(num_vertices); }$/;"	f	class:cv::detail::Graph
Graph	stitching/detail/util.hpp	/^class CV_EXPORTS Graph$/;"	c	namespace:cv::detail
GraphCutSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinder : public GraphCutSeamFinderBase, public SeamFinder$/;"	c	namespace:cv::detail
GraphCutSeamFinderBase	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinderBase$/;"	c	namespace:cv::detail
GraphCutSeamFinderGpu	stitching/detail/seam_finders.hpp	/^    GraphCutSeamFinderGpu(int cost_type = COST_COLOR_GRAD, float terminal_cost = 10000.f,$/;"	f	class:cv::detail::GraphCutSeamFinderGpu
GraphCutSeamFinderGpu	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS GraphCutSeamFinderGpu : public GraphCutSeamFinderBase, public PairwiseSeamFinder$/;"	c	namespace:cv::detail
GraphEdge	stitching/detail/util.hpp	/^inline GraphEdge::GraphEdge(int _from, int _to, float _weight) : from(_from), to(_to), weight(_weight) {}$/;"	f	class:cv::detail::GraphEdge
GraphEdge	stitching/detail/util.hpp	/^struct CV_EXPORTS GraphEdge$/;"	s	namespace:cv::detail
Gray2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB():unary_function<T, typename TypeVec<T, dcn>::vec_type>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB():unary_function<uchar, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB(const Gray2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB(const Gray2RGB& other_):unary_function<uchar, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
Gray2RGB	gpu/device/detail/color_detail.hpp	/^        template <> struct Gray2RGB<uchar, 4> : unary_function<uchar, uint>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB	gpu/device/detail/color_detail.hpp	/^        template <typename T, int dcn> struct Gray2RGB : unary_function<T, typename TypeVec<T, dcn>::vec_type>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB5x5	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB5x5():unary_function<uchar, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5
Gray2RGB5x5	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ Gray2RGB5x5(const Gray2RGB5x5& other_):unary_function<uchar, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5
Gray2RGB5x5	gpu/device/detail/color_detail.hpp	/^        template<int green_bits> struct Gray2RGB5x5 : unary_function<uchar, ushort>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB5x5Converter	gpu/device/detail/color_detail.hpp	/^        template<> struct Gray2RGB5x5Converter<5>$/;"	s	namespace:cv::gpu::device::color_detail
Gray2RGB5x5Converter	gpu/device/detail/color_detail.hpp	/^        template<> struct Gray2RGB5x5Converter<6>$/;"	s	namespace:cv::gpu::device::color_detail
GreaterEq	core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS GreaterEq$/;"	c	namespace:cv
GreaterEqIdx	core/operations.hpp	/^    GreaterEqIdx( const _Tp* _arr ) : arr(_arr) {}$/;"	f	class:cv::GreaterEqIdx
GreaterEqIdx	core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS GreaterEqIdx$/;"	c	namespace:cv
GridAdaptedFeatureDetector	features2d/features2d.hpp	/^class CV_EXPORTS_W GridAdaptedFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
H	contrib/hybridtracker.hpp	/^    enum {  H = 0, HS = 1, HSV = 2  };$/;"	e	enum:cv::CvMeanShiftTrackerParams::__anon15
H	objdetect/objdetect.hpp	/^    float *H;$/;"	m	struct:CvLSVMFilterObject
H	stitching/detail/matchers.hpp	/^    Mat H;                              \/\/ Estimated homography$/;"	m	struct:cv::detail::MatchesInfo
H264	gpu/gpu.hpp	/^        H264,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
H264_MVC	gpu/gpu.hpp	/^        H264_MVC,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
H264_SVC	gpu/gpu.hpp	/^        H264_SVC,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
HAAR	objdetect/objdetect.hpp	/^    enum { HAAR = 0, LBP = 1, HOG = 2 };$/;"	e	enum:cv::FeatureEvaluator::__anon228
HARRIS_SCORE	features2d/features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon234
HAVE_IPL	core/types_c.h	106;"	d
HAVE_OPENCV_CALIB3D	opencv_modules.hpp	9;"	d
HAVE_OPENCV_CONTRIB	opencv_modules.hpp	10;"	d
HAVE_OPENCV_CORE	opencv_modules.hpp	11;"	d
HAVE_OPENCV_FEATURES2D	opencv_modules.hpp	12;"	d
HAVE_OPENCV_FLANN	opencv_modules.hpp	13;"	d
HAVE_OPENCV_GPU	opencv_modules.hpp	14;"	d
HAVE_OPENCV_HIGHGUI	opencv_modules.hpp	15;"	d
HAVE_OPENCV_IMGPROC	opencv_modules.hpp	16;"	d
HAVE_OPENCV_LEGACY	opencv_modules.hpp	17;"	d
HAVE_OPENCV_ML	opencv_modules.hpp	18;"	d
HAVE_OPENCV_NONFREE	opencv_modules.hpp	19;"	d
HAVE_OPENCV_OBJDETECT	opencv_modules.hpp	20;"	d
HAVE_OPENCV_OCL	opencv_modules.hpp	21;"	d
HAVE_OPENCV_PHOTO	opencv_modules.hpp	22;"	d
HAVE_OPENCV_STITCHING	opencv_modules.hpp	23;"	d
HAVE_OPENCV_TS	opencv_modules.hpp	24;"	d
HAVE_OPENCV_VIDEO	opencv_modules.hpp	25;"	d
HAVE_OPENCV_VIDEOSTAB	opencv_modules.hpp	26;"	d
HAVE_TBB	core/internal.hpp	175;"	d
HELLINGER	flann/defines.h	/^    HELLINGER = 6,$/;"	e	enum:cvflann::flann_distance_t
HESSIAN_ROW	gpu/gpu.hpp	/^        HESSIAN_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
HESSIAN_ROW	ocl/ocl.hpp	/^                HESSIAN_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
HG_AUTOSIZE	highgui/highgui_c.h	602;"	d
HIST_INTERSECT	flann/defines.h	/^    HIST_INTERSECT   = 5,$/;"	e	enum:cvflann::flann_distance_t
HLS2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB()$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB(const HLS2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HLS2RGB(const HLS2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
HLS2RGB	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct HLS2RGB<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
HLS2RGB	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct HLS2RGB$/;"	s	namespace:cv::gpu::device::color_detail
HLS2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HLS2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HLS2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HLS2RGBConvert(const T& src, uchar* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HLS2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint HLS2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
HOG	objdetect/objdetect.hpp	/^    enum { HAAR = 0, LBP = 1, HOG = 2 };$/;"	e	enum:cv::FeatureEvaluator::__anon228
HOGConfidence	gpu/gpu.hpp	/^struct CV_EXPORTS HOGConfidence$/;"	s	namespace:cv::gpu
HOGDescriptor	gpu/gpu.hpp	/^struct CV_EXPORTS HOGDescriptor$/;"	s	namespace:cv::gpu
HOGDescriptor	objdetect/objdetect.hpp	/^    CV_WRAP HOGDescriptor() : winSize(64,128), blockSize(16,16), blockStride(8,8),$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect/objdetect.hpp	/^    CV_WRAP HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride,$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect/objdetect.hpp	/^    CV_WRAP HOGDescriptor(const String& filename)$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect/objdetect.hpp	/^    HOGDescriptor(const HOGDescriptor& d)$/;"	f	struct:cv::HOGDescriptor
HOGDescriptor	objdetect/objdetect.hpp	/^struct CV_EXPORTS_W HOGDescriptor$/;"	s	namespace:cv
HOGDescriptor	ocl/ocl.hpp	/^        struct CV_EXPORTS HOGDescriptor$/;"	s	namespace:cv::ocl
HS	contrib/hybridtracker.hpp	/^    enum {  H = 0, HS = 1, HSV = 2  };$/;"	e	enum:cv::CvMeanShiftTrackerParams::__anon15
HSV	contrib/hybridtracker.hpp	/^    enum {  H = 0, HS = 1, HSV = 2  };$/;"	e	enum:cv::CvMeanShiftTrackerParams::__anon15
HSV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB()$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB():unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB(const HSV2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ HSV2RGB(const HSV2RGB& other_):unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
HSV2RGB	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct HSV2RGB<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
HSV2RGB	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct HSV2RGB$/;"	s	namespace:cv::gpu::device::color_detail
HSV2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int HR, typename T> static __device__ void HSV2RGBConvert(const T& src, uchar* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HSV2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename T> static __device__ void HSV2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
HSV2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint HSV2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
HUBER_LOSS	ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon255
Hamming	features2d/features2d.hpp	/^struct CV_EXPORTS Hamming$/;"	s	namespace:cv
Hamming	flann/dist.h	/^struct Hamming$/;"	s	namespace:cvflann
Hamming	ocl/ocl.hpp	/^        struct CV_EXPORTS Hamming$/;"	s	namespace:cv::ocl
Hamming2	flann/dist.h	/^struct Hamming2$/;"	s	namespace:cvflann
HammingDist	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ HammingDist() : mySum(0) {}$/;"	f	struct:cv::gpu::device::HammingDist
HammingDist	gpu/device/vec_distance.hpp	/^    struct HammingDist$/;"	s	namespace:cv::gpu::device
HammingDist	gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::gpu::BruteForceMatcher_GPU_base::DistType
HammingDist	ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::ocl::BruteForceMatcher_OCL_base::DistType
HammingLUT	features2d/features2d.hpp	/^typedef Hamming HammingLUT;$/;"	t	namespace:cv
HammingLUT	flann/dist.h	/^struct HammingLUT$/;"	s	namespace:cvflann
HammingLUT2	flann/dist.h	/^struct HammingLUT2$/;"	s	namespace:cvflann
HammingMultilevel	features2d/features2d.hpp	/^template<int cellsize> struct CV_EXPORTS HammingMultilevel$/;"	s	namespace:cv
HasFailure	ts/ts_gtest.h	/^  static bool HasFailure() { return HasFatalFailure() || HasNonfatalFailure(); }$/;"	f	class:testing::Test
HasNewFatalFailureHelper	ts/ts_gtest.h	/^class GTEST_API_ HasNewFatalFailureHelper$/;"	c	namespace:testing::internal
Hdr	core/operations.hpp	/^        Hdr() : data(0), datastart(0), refcount(0), size(0), capacity(0) {};$/;"	f	struct:cv::Vector::Hdr
Hdr	core/operations.hpp	/^    struct CV_EXPORTS Hdr$/;"	s	class:cv::Vector
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types1
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types10
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types11
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types12
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types13
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types14
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types15
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types16
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types17
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types18
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types19
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types2
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types20
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types21
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types22
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types23
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types24
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types25
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types26
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types27
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types28
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types29
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types3
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types30
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types31
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types32
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types33
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types34
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types35
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types36
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types37
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types38
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types39
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types4
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types40
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types41
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types42
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types43
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types44
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types45
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types46
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types47
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types48
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types49
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types5
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types50
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types6
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types7
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types8
Head	ts/ts_gtest.h	/^  typedef T1 Head;$/;"	t	struct:testing::internal::Types9
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates1
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates10
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates11
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates12
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates13
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates14
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates15
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates16
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates17
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates18
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates19
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates2
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates20
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates21
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates22
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates23
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates24
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates25
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates26
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates27
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates28
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates29
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates3
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates30
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates31
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates32
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates33
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates34
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates35
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates36
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates37
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates38
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates39
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates4
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates40
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates41
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates42
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates43
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates44
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates45
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates46
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates47
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates48
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates49
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates5
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates50
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates6
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates7
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates8
Head	ts/ts_gtest.h	/^  typedef TemplateSel<T1> Head;$/;"	t	struct:testing::internal::Templates9
Heap	flann/heap.h	/^    Heap(int sz)$/;"	f	class:cvflann::Heap
Heap	flann/heap.h	/^class Heap$/;"	c	namespace:cvflann
Height	core/wimage.hpp	/^    int Height() const {return image_->height; }$/;"	f	class:cv::WImage
HellingerDistance	flann/dist.h	/^struct HellingerDistance$/;"	s	namespace:cvflann
HierarchicalClusteringIndex	flann/hierarchical_clustering_index.h	/^    HierarchicalClusteringIndex(const Matrix<ElementType>& inputData, const IndexParams& index_params = HierarchicalClusteringIndexParams(),$/;"	f	class:cvflann::HierarchicalClusteringIndex
HierarchicalClusteringIndex	flann/hierarchical_clustering_index.h	/^class HierarchicalClusteringIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
HierarchicalClusteringIndexParams	flann/hierarchical_clustering_index.h	/^    HierarchicalClusteringIndexParams(int branching = 32,$/;"	f	struct:cvflann::HierarchicalClusteringIndexParams
HierarchicalClusteringIndexParams	flann/hierarchical_clustering_index.h	/^struct HierarchicalClusteringIndexParams : public IndexParams$/;"	s	namespace:cvflann
HierarchicalClusteringIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS HierarchicalClusteringIndexParams : public IndexParams$/;"	s	namespace:cv::flann
HistIntersectionDistance	flann/dist.h	/^struct HistIntersectionDistance$/;"	s	namespace:cvflann
HistType	legacy/blobtrack.hpp	/^    int     HistType; \/* see Prob.h *\/$/;"	m	struct:CvBlobTrackerParamLH
Histogram	contrib/contrib.hpp	/^    class CV_EXPORTS Histogram$/;"	c	class:CvAdaptiveSkinDetector
HistogramSize	contrib/contrib.hpp	/^            HistogramSize = (GSD_HUE_UT - GSD_HUE_LT + 1)$/;"	e	enum:CvAdaptiveSkinDetector::Histogram::__anon18
HomographyBasedEstimator	stitching/detail/motion_estimators.hpp	/^    HomographyBasedEstimator(bool is_focals_estimated = false)$/;"	f	class:cv::detail::HomographyBasedEstimator
HomographyBasedEstimator	stitching/detail/motion_estimators.hpp	/^class CV_EXPORTS HomographyBasedEstimator : public Estimator$/;"	c	namespace:cv::detail
HoughCirclesBuf	gpu/gpu.hpp	/^struct HoughCirclesBuf$/;"	s	namespace:cv::gpu
HoughLinesBuf	gpu/gpu.hpp	/^struct HoughLinesBuf$/;"	s	namespace:cv::gpu
HybridTracker	contrib/hybridtracker.hpp	/^typedef CvHybridTracker HybridTracker;$/;"	t	namespace:cv
HybridTrackerParams	contrib/hybridtracker.hpp	/^typedef CvHybridTrackerParams HybridTrackerParams;$/;"	t	namespace:cv
ID	core/types_c.h	/^    int  ID;                \/* version (=0)*\/$/;"	m	struct:_IplImage
ID	legacy/blobtrack.hpp	/^    int     ID;  \/* blob ID         *\/$/;"	m	struct:CvBlob
IDENTITY	ml/ml.hpp	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon257
IDR_Period	gpu/gpu.hpp	/^        int       IDR_Period;      \/\/    NVVE_IDR_PERIOD,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
IDenseOptFlowEstimator	videostab/optical_flow.hpp	/^class CV_EXPORTS IDenseOptFlowEstimator$/;"	c	namespace:cv::videostab
IFRAME	gpu/gpu.hpp	/^            IFRAME = 1,$/;"	e	enum:cv::gpu::VideoWriter_GPU::EncoderCallBack::PicType
IFrameSource	videostab/frame_source.hpp	/^class CV_EXPORTS IFrameSource$/;"	c	namespace:cv::videostab
IGlobalMotionEstimator	videostab/global_motion.hpp	/^class CV_EXPORTS IGlobalMotionEstimator$/;"	c	namespace:cv::videostab
ILog	videostab/log.hpp	/^class CV_EXPORTS ILog$/;"	c	namespace:cv::videostab
IMREAD_ANYCOLOR	highgui/highgui.hpp	/^    IMREAD_ANYCOLOR   =4$/;"	e	enum:cv::__anon49
IMREAD_ANYDEPTH	highgui/highgui.hpp	/^    IMREAD_ANYDEPTH   =2,$/;"	e	enum:cv::__anon49
IMREAD_COLOR	highgui/highgui.hpp	/^    IMREAD_COLOR      =1,$/;"	e	enum:cv::__anon49
IMREAD_GRAYSCALE	highgui/highgui.hpp	/^    IMREAD_GRAYSCALE  =0,$/;"	e	enum:cv::__anon49
IMREAD_UNCHANGED	highgui/highgui.hpp	/^    IMREAD_UNCHANGED  =-1,$/;"	e	enum:cv::__anon49
IMWRITE_JPEG_QUALITY	highgui/highgui.hpp	/^    IMWRITE_JPEG_QUALITY =1,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_BILEVEL	highgui/highgui.hpp	/^    IMWRITE_PNG_BILEVEL =18,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_COMPRESSION	highgui/highgui.hpp	/^    IMWRITE_PNG_COMPRESSION =16,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_STRATEGY	highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY =17,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_STRATEGY_DEFAULT	highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_DEFAULT =0,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_STRATEGY_FILTERED	highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_FILTERED =1,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_STRATEGY_FIXED	highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_FIXED =4,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY	highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY =2,$/;"	e	enum:cv::__anon50
IMWRITE_PNG_STRATEGY_RLE	highgui/highgui.hpp	/^    IMWRITE_PNG_STRATEGY_RLE =3,$/;"	e	enum:cv::__anon50
IMWRITE_PXM_BINARY	highgui/highgui.hpp	/^    IMWRITE_PXM_BINARY =32$/;"	e	enum:cv::__anon50
IMatch	contrib/openfabmap.hpp	/^    IMatch() :$/;"	f	struct:cv::of2::IMatch
IMatch	contrib/openfabmap.hpp	/^    IMatch(int _queryIdx, int _imgIdx, double _likelihood, double _match) :$/;"	f	struct:cv::of2::IMatch
IMatch	contrib/openfabmap.hpp	/^struct CV_EXPORTS IMatch {$/;"	s	namespace:cv::of2
IMotionStabilizer	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS IMotionStabilizer$/;"	c	namespace:cv::videostab
INCLUSIVE	gpu/device/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	e	enum:cv::gpu::device::ScanKind
INPAINT_NS	photo/photo.hpp	/^    INPAINT_NS=CV_INPAINT_NS, \/\/ Navier-Stokes algorithm$/;"	e	enum:cv::__anon188
INPAINT_TELEA	photo/photo.hpp	/^    INPAINT_TELEA=CV_INPAINT_TELEA \/\/ A. Telea algorithm$/;"	e	enum:cv::__anon188
INPUT	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
INPUT_OUTPUT	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
INSIDE	videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon187
INSTANTIATE_TEST_CASE_P	ts/ts_gtest.h	17101;"	d
INSTANTIATE_TYPED_TEST_CASE_P	ts/ts_gtest.h	17597;"	d
INTERS	stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTERS_FIRST	stitching/detail/seam_finders.hpp	/^        INTERS_FIRST = INTERS | FIRST,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTERS_SECOND	stitching/detail/seam_finders.hpp	/^        INTERS_SECOND = INTERS | SECOND$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
INTER_AREA	imgproc/imgproc.hpp	/^    INTER_AREA=CV_INTER_AREA, \/\/!< area-based (or super) interpolation$/;"	e	enum:cv::__anon272
INTER_BITS	imgproc/imgproc.hpp	/^    INTER_BITS=5, INTER_BITS2=INTER_BITS*2,$/;"	e	enum:cv::__anon273
INTER_BITS2	imgproc/imgproc.hpp	/^    INTER_BITS=5, INTER_BITS2=INTER_BITS*2,$/;"	e	enum:cv::__anon273
INTER_CUBIC	imgproc/imgproc.hpp	/^    INTER_CUBIC=CV_INTER_CUBIC, \/\/!< bicubic interpolation$/;"	e	enum:cv::__anon272
INTER_LANCZOS4	imgproc/imgproc.hpp	/^    INTER_LANCZOS4=CV_INTER_LANCZOS4, \/\/!< Lanczos interpolation over 8x8 neighborhood$/;"	e	enum:cv::__anon272
INTER_LINEAR	imgproc/imgproc.hpp	/^    INTER_LINEAR=CV_INTER_LINEAR, \/\/!< bilinear interpolation$/;"	e	enum:cv::__anon272
INTER_MAX	imgproc/imgproc.hpp	/^    INTER_MAX=7,$/;"	e	enum:cv::__anon272
INTER_NEAREST	imgproc/imgproc.hpp	/^    INTER_NEAREST=CV_INTER_NN, \/\/!< nearest neighbor interpolation$/;"	e	enum:cv::__anon272
INTER_TAB_SIZE	imgproc/imgproc.hpp	/^    INTER_TAB_SIZE=(1<<INTER_BITS),$/;"	e	enum:cv::__anon273
INTER_TAB_SIZE2	imgproc/imgproc.hpp	/^    INTER_TAB_SIZE2=INTER_TAB_SIZE*INTER_TAB_SIZE$/;"	e	enum:cv::__anon273
IPL2CV_DEPTH	core/types_c.h	729;"	d
IPL_ALIGN_16BYTES	core/types_c.h	459;"	d
IPL_ALIGN_32BYTES	core/types_c.h	460;"	d
IPL_ALIGN_4BYTES	core/types_c.h	457;"	d
IPL_ALIGN_8BYTES	core/types_c.h	458;"	d
IPL_ALIGN_DWORD	core/types_c.h	462;"	d
IPL_ALIGN_QWORD	core/types_c.h	463;"	d
IPL_BORDER_CONSTANT	core/types_c.h	465;"	d
IPL_BORDER_REFLECT	core/types_c.h	467;"	d
IPL_BORDER_REFLECT_101	core/types_c.h	545;"	d
IPL_BORDER_REPLICATE	core/types_c.h	466;"	d
IPL_BORDER_TRANSPARENT	core/types_c.h	546;"	d
IPL_BORDER_WRAP	core/types_c.h	468;"	d
IPL_DATA_ORDER_PIXEL	core/types_c.h	451;"	d
IPL_DATA_ORDER_PLANE	core/types_c.h	452;"	d
IPL_DEPTH_16S	core/types_c.h	448;"	d
IPL_DEPTH_16U	core/types_c.h	444;"	d
IPL_DEPTH_1U	core/types_c.h	442;"	d
IPL_DEPTH_32F	core/types_c.h	445;"	d
IPL_DEPTH_32S	core/types_c.h	449;"	d
IPL_DEPTH_64F	core/types_c.h	559;"	d
IPL_DEPTH_8S	core/types_c.h	447;"	d
IPL_DEPTH_8U	core/types_c.h	443;"	d
IPL_DEPTH_SIGN	core/types_c.h	440;"	d
IPL_GAUSSIAN_5x5	legacy/compat.hpp	/^    IPL_GAUSSIAN_5x5 = 7$/;"	e	enum:__anon2
IPL_IMAGE_DATA	core/types_c.h	539;"	d
IPL_IMAGE_HEADER	core/types_c.h	538;"	d
IPL_IMAGE_MAGIC_VAL	core/types_c.h	548;"	d
IPL_IMAGE_ROI	core/types_c.h	540;"	d
IPL_ORIGIN_BL	core/types_c.h	455;"	d
IPL_ORIGIN_TL	core/types_c.h	454;"	d
IPPI_CALL	core/internal.hpp	100;"	d
ISparseOptFlowEstimator	videostab/optical_flow.hpp	/^class CV_EXPORTS ISparseOptFlowEstimator$/;"	c	namespace:cv::videostab
ITERATIVE	calib3d/calib3d.hpp	/^    ITERATIVE=CV_ITERATIVE,$/;"	e	enum:cv::__anon313
ImageData	core/wimage.hpp	/^    T* ImageData() { return reinterpret_cast<T*>(image_->imageData); }$/;"	f	class:cv::WImage
ImageData	core/wimage.hpp	/^    const T* ImageData() const {$/;"	f	class:cv::WImage
ImageFeatures	stitching/detail/matchers.hpp	/^struct CV_EXPORTS ImageFeatures$/;"	s	namespace:cv::detail
ImagePairLess	stitching/detail/seam_finders.hpp	/^        ImagePairLess(const std::vector<Mat> &images, const std::vector<Point> &corners)$/;"	f	class:cv::detail::DpSeamFinder::ImagePairLess
ImagePairLess	stitching/detail/seam_finders.hpp	/^    class ImagePairLess$/;"	c	class:cv::detail::DpSeamFinder
ImagePyramid	gpu/gpu.hpp	/^    inline ImagePyramid() : nLayers_(0) {}$/;"	f	class:cv::gpu::ImagePyramid
ImagePyramid	gpu/gpu.hpp	/^    inline ImagePyramid(const GpuMat& img, int nLayers, Stream& stream = Stream::Null())$/;"	f	class:cv::gpu::ImagePyramid
ImagePyramid	gpu/gpu.hpp	/^class CV_EXPORTS ImagePyramid$/;"	c	namespace:cv::gpu
ImplicitCast_	ts/ts_gtest.h	/^inline To ImplicitCast_(To x) { return x; }$/;"	f	namespace:std::tr1
ImplicitlyConvertible	ts/ts_gtest.h	/^class ImplicitlyConvertible {$/;"	c	namespace:testing::internal
Index	flann/flann_base.hpp	/^    Index(const Matrix<ElementType>& features, const IndexParams& params, Distance distance = Distance() )$/;"	f	class:cvflann::Index
Index	flann/flann_base.hpp	/^class Index : public NNIndex<Distance>$/;"	c	namespace:cvflann
Index	flann/miniflann.hpp	/^class CV_EXPORTS_W Index$/;"	c	namespace:cv::flann
IndexHeader	flann/saving.h	/^struct IndexHeader$/;"	s	namespace:cvflann
IndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS IndexParams$/;"	s	namespace:cv::flann
IndexParams	flann/params.h	/^typedef std::map<std::string, any> IndexParams;$/;"	t	namespace:cvflann
Index_	flann/flann.hpp	/^ Index_ {$/;"	c	namespace:cv::flann
Index_	flann/flann.hpp	/^Index_<T>::Index_(const Mat& dataset, const ::cvflann::IndexParams& params)$/;"	f	class:cv::flann::Index_
Index_	flann/flann.hpp	/^class FLANN_DEPRECATED Index_;$/;"	m	namespace:cv::flann	typeref:class:cv::flann::FLANN_DEPRECATED
Infinity	ts/ts_gtest.h	/^  static RawType Infinity() {$/;"	f	class:testing::internal::FloatingPoint
Info	ocl/ocl.hpp	/^        class CV_EXPORTS Info$/;"	c	namespace:cv::ocl
Init	ts/ts_gtest.h	/^  void Init(const Element* array, size_t a_size, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
InnerParameters	contrib/detection_based_tracker.hpp	/^        struct InnerParameters$/;"	s	class:DetectionBasedTracker
InpainterBase	videostab/inpainting.hpp	/^    InpainterBase()$/;"	f	class:cv::videostab::InpainterBase
InpainterBase	videostab/inpainting.hpp	/^class CV_EXPORTS InpainterBase$/;"	c	namespace:cv::videostab
InpaintingPipeline	videostab/inpainting.hpp	/^class CV_EXPORTS InpaintingPipeline : public InpainterBase$/;"	c	namespace:cv::videostab
InstantiationContainer	ts/ts_gtest.h	/^      InstantiationContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
Int	legacy/blobtrack.hpp	/^    int                 Int;$/;"	m	struct:CvDefParam
Int	ts/ts_gtest.h	/^  typedef __int64 Int;$/;"	t	class:std::tr1::TypeWithSize
Int	ts/ts_gtest.h	/^  typedef int Int;$/;"	t	class:std::tr1::TypeWithSize
Int32	ts/ts_gtest.h	/^typedef TypeWithSize<4>::Int Int32;$/;"	t	namespace:std::tr1
Int64	ts/ts_gtest.h	/^typedef TypeWithSize<8>::Int Int64;$/;"	t	namespace:std::tr1
IntegerAreaFilter	gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ IntegerAreaFilter(const Ptr2D& src_, float scale_x_, float scale_y_)$/;"	f	struct:cv::gpu::device::IntegerAreaFilter
IntegerAreaFilter	gpu/device/filters.hpp	/^    template <typename Ptr2D> struct IntegerAreaFilter$/;"	s	namespace:cv::gpu::device
InternalRunDeathTestFlag	ts/ts_gtest.h	/^  InternalRunDeathTestFlag(const String& a_file,$/;"	f	class:testing::internal::InternalRunDeathTestFlag
InternalRunDeathTestFlag	ts/ts_gtest.h	/^class InternalRunDeathTestFlag {$/;"	c	namespace:testing::internal
Interval	flann/kdtree_single_index.h	/^    struct Interval$/;"	s	class:cvflann::KDTreeSingleIndex
Ipl	core/wimage.hpp	/^    IplImage* Ipl() {return image_; }$/;"	f	class:cv::WImage
Ipl	core/wimage.hpp	/^    const IplImage* Ipl() const {return image_; }$/;"	f	class:cv::WImage
IplConvKernel	core/types_c.h	/^IplConvKernel;$/;"	t	typeref:struct:_IplConvKernel
IplConvKernelFP	core/types_c.h	/^IplConvKernelFP;$/;"	t	typeref:struct:_IplConvKernelFP
IplImage	core/types_c.h	/^IplImage;$/;"	t	typeref:struct:_IplImage
IplMagno	contrib/retina.hpp	/^            struct IplMagnoParameters IplMagno;$/;"	m	struct:cv::Retina::RetinaParameters	typeref:struct:cv::Retina::RetinaParameters::IplMagnoParameters
IplMagnoParameters	contrib/retina.hpp	/^               IplMagnoParameters():$/;"	f	struct:cv::Retina::RetinaParameters::IplMagnoParameters
IplMagnoParameters	contrib/retina.hpp	/^           struct IplMagnoParameters{ \/\/ Inner Plexiform Layer Magnocellular channel (IplMagno)$/;"	s	struct:cv::Retina::RetinaParameters
IplROI	core/types_c.h	/^IplROI;$/;"	t	typeref:struct:_IplROI
IplTileInfo	core/types_c.h	/^typedef struct _IplTileInfo IplTileInfo;$/;"	t	typeref:struct:_IplTileInfo
IsAProtocolMessage	ts/ts_gtest.h	/^struct IsAProtocolMessage$/;"	s	namespace:testing::internal
IsATTY	ts/ts_gtest.h	/^inline int IsATTY(int \/* fd *\/) { return 0; }$/;"	f	namespace:std::tr1::posix
IsATTY	ts/ts_gtest.h	/^inline int IsATTY(int fd) { return _isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsATTY	ts/ts_gtest.h	/^inline int IsATTY(int fd) { return isatty(fd); }$/;"	f	namespace:std::tr1::posix
IsAlNum	ts/ts_gtest.h	/^inline bool IsAlNum(char ch) {$/;"	f	namespace:std::tr1
IsAlpha	ts/ts_gtest.h	/^inline bool IsAlpha(char ch) {$/;"	f	namespace:std::tr1
IsBinaryFunction	gpu/device/functional.hpp	/^    template <typename F> struct IsBinaryFunction$/;"	s	namespace:cv::gpu::device
IsCalibrated	legacy/legacy.hpp	/^    bool IsCalibrated() const { return isCalibrated; }$/;"	f	class:CvCalibFilter
IsContainer	ts/ts_gtest.h	/^typedef int IsContainer;$/;"	t	namespace:testing::internal
IsContainerTest	ts/ts_gtest.h	/^IsContainer IsContainerTest(int \/* dummy *\/,$/;"	f	namespace:testing::internal
IsContainerTest	ts/ts_gtest.h	/^IsNotContainer IsContainerTest(long \/* dummy *\/) { return '\\0'; }$/;"	f	namespace:testing::internal
IsDigit	ts/ts_gtest.h	/^inline bool IsDigit(char ch) {$/;"	f	namespace:std::tr1
IsDir	ts/ts_gtest.h	/^inline bool IsDir(const StatStruct& st) {$/;"	f	namespace:std::tr1::posix
IsEmpty	ts/ts_gtest.h	/^  bool IsEmpty() const { return c_str() == NULL || *c_str() == '\\0'; }$/;"	f	class:testing::internal::FilePath
IsFloat	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<double> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsFloat	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<float> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsFloat	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsFloat { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsLower	ts/ts_gtest.h	/^inline bool IsLower(char ch) {$/;"	f	namespace:std::tr1
IsNotContainer	ts/ts_gtest.h	/^typedef char IsNotContainer;$/;"	t	namespace:testing::internal
IsNull	core/wimage.hpp	/^    bool IsNull() const {return WImage<T>::image_ == NULL; }$/;"	f	class:cv::WImageBuffer
IsNull	core/wimage.hpp	/^    bool IsNull() const {return WImage<T>::image_ == NULL; }$/;"	f	class:cv::WImageBufferC
IsSignedIntergral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<char1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSignedIntergral	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsSimpleParameter	gpu/device/type_traits.hpp	/^    template <typename T> struct IsSimpleParameter$/;"	s	namespace:cv::gpu::device
IsSpace	ts/ts_gtest.h	/^inline bool IsSpace(char ch) {$/;"	f	namespace:std::tr1
IsUnaryFunction	gpu/device/functional.hpp	/^    template <typename F> struct IsUnaryFunction$/;"	s	namespace:cv::gpu::device
IsUnsignedIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUnsignedIntegral	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsUpper	ts/ts_gtest.h	/^inline bool IsUpper(char ch) {$/;"	f	namespace:std::tr1
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort8> { enum {value = 1}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsVec	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsVec { enum {value = 0}; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
IsXDigit	ts/ts_gtest.h	/^inline bool IsXDigit(char ch) {$/;"	f	namespace:std::tr1
IsXDigit	ts/ts_gtest.h	/^inline bool IsXDigit(wchar_t ch) {$/;"	f	namespace:std::tr1
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const Iterator& other)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<ParamType>* base,$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base, T value, int index,$/;"	f	class:testing::internal::RangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^    Iterator(const ParamGeneratorInterface<T>* base,$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator10
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator2
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator3
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator4
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator5
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator6
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator7
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator8
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<ParamType> {$/;"	c	class:testing::internal::CartesianProductGenerator9
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::RangeGenerator
Iterator	ts/ts_gtest.h	/^  class Iterator : public ParamIteratorInterface<T> {$/;"	c	class:testing::internal::ValuesInIteratorRangeGenerator
IteratorTraits	ts/ts_gtest.h	/^struct IteratorTraits {$/;"	s	namespace:std::tr1
IteratorTraits	ts/ts_gtest.h	/^struct IteratorTraits<T*> {$/;"	s	namespace:std::tr1
IteratorTraits	ts/ts_gtest.h	/^struct IteratorTraits<const T*> {$/;"	s	namespace:std::tr1
Ithreshold	legacy/legacy.hpp	/^    int Ithreshold;$/;"	m	struct:CvStereoGCState
J	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> J;$/;"	m	class:CvLevMarq
JPEG	gpu/gpu.hpp	/^        JPEG,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Join	ts/ts_gtest.h	/^  void Join() {$/;"	f	class:std::tr1::ThreadWithParam
JtErr	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtErr;$/;"	m	class:CvLevMarq
JtJ	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJ;$/;"	m	class:CvLevMarq
JtJN	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJN;$/;"	m	class:CvLevMarq
JtJV	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJV;$/;"	m	class:CvLevMarq
JtJW	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> JtJW;$/;"	m	class:CvLevMarq
JtJ_diag	contrib/contrib.hpp	/^        CvMat* JtJ_diag; \/\/diagonal of JtJ,  used to backup diagonal elements before augmentation$/;"	m	class:cv::LevMarqSparse
K	legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
KALMAN_FILTER	contrib/hybridtracker.hpp	/^    enum {LOW_PASS_FILTER = 0, KALMAN_FILTER = 1, EM = 2};$/;"	e	enum:cv::CvMotionModel::__anon14
KDTREE	flann/defines.h	/^    KDTREE = 1,$/;"	e	enum:cvflann::flann_algorithm_t
KDTREE_SINGLE	flann/defines.h	/^    KDTREE_SINGLE = 4,$/;"	e	enum:cvflann::flann_algorithm_t
KDTreeIndex	flann/kdtree_index.h	/^    KDTreeIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KDTreeIndexParams(),$/;"	f	class:cvflann::KDTreeIndex
KDTreeIndex	flann/kdtree_index.h	/^class KDTreeIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KDTreeIndexParams	flann/kdtree_index.h	/^    KDTreeIndexParams(int trees = 4)$/;"	f	struct:cvflann::KDTreeIndexParams
KDTreeIndexParams	flann/kdtree_index.h	/^struct KDTreeIndexParams : public IndexParams$/;"	s	namespace:cvflann
KDTreeIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS KDTreeIndexParams : public IndexParams$/;"	s	namespace:cv::flann
KDTreeSingleIndex	flann/kdtree_single_index.h	/^    KDTreeSingleIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KDTreeSingleIndexParams(),$/;"	f	class:cvflann::KDTreeSingleIndex
KDTreeSingleIndex	flann/kdtree_single_index.h	/^class KDTreeSingleIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KDTreeSingleIndexParams	flann/kdtree_single_index.h	/^    KDTreeSingleIndexParams(int leaf_max_size = 10, bool reorder = true, int dim = -1)$/;"	f	struct:cvflann::KDTreeSingleIndexParams
KDTreeSingleIndexParams	flann/kdtree_single_index.h	/^struct KDTreeSingleIndexParams : public IndexParams$/;"	s	namespace:cvflann
KERNEL_ASYMMETRICAL	imgproc/imgproc.hpp	/^enum { KERNEL_GENERAL=0, KERNEL_SYMMETRICAL=1, KERNEL_ASYMMETRICAL=2,$/;"	e	enum:cv::__anon268
KERNEL_GENERAL	imgproc/imgproc.hpp	/^enum { KERNEL_GENERAL=0, KERNEL_SYMMETRICAL=1, KERNEL_ASYMMETRICAL=2,$/;"	e	enum:cv::__anon268
KERNEL_INTEGER	imgproc/imgproc.hpp	/^       KERNEL_SMOOTH=4, KERNEL_INTEGER=8 };$/;"	e	enum:cv::__anon268
KERNEL_SIZE	features2d/features2d.hpp	/^    static const int KERNEL_SIZE = 9;$/;"	m	class:cv::BriefDescriptorExtractor
KERNEL_SMOOTH	imgproc/imgproc.hpp	/^       KERNEL_SMOOTH=4, KERNEL_INTEGER=8 };$/;"	e	enum:cv::__anon268
KERNEL_SYMMETRICAL	imgproc/imgproc.hpp	/^enum { KERNEL_GENERAL=0, KERNEL_SYMMETRICAL=1, KERNEL_ASYMMETRICAL=2,$/;"	e	enum:cv::__anon268
KL	flann/defines.h	/^    KL         = 8,$/;"	e	enum:cvflann::flann_distance_t
KL_Divergence	flann/dist.h	/^struct KL_Divergence$/;"	s	namespace:cvflann
KMEANS	flann/defines.h	/^    KMEANS = 2,$/;"	e	enum:cvflann::flann_algorithm_t
KMeansIndex	flann/kmeans_index.h	/^    KMeansIndex(const Matrix<ElementType>& inputData, const IndexParams& params = KMeansIndexParams(),$/;"	f	class:cvflann::KMeansIndex
KMeansIndex	flann/kmeans_index.h	/^class KMeansIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
KMeansIndexParams	flann/kmeans_index.h	/^    KMeansIndexParams(int branching = 32, int iterations = 11,$/;"	f	struct:cvflann::KMeansIndexParams
KMeansIndexParams	flann/kmeans_index.h	/^struct KMeansIndexParams : public IndexParams$/;"	s	namespace:cvflann
KMeansIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS KMeansIndexParams : public IndexParams$/;"	s	namespace:cv::flann
KMeansNode	flann/kmeans_index.h	/^    struct KMeansNode$/;"	s	class:cvflann::KMeansIndex
KMeansNodePtr	flann/kmeans_index.h	/^    typedef KMeansNode* KMeansNodePtr;$/;"	t	class:cvflann::KMeansIndex
KNNRadiusUniqueResultSet	flann/result_set.h	/^    KNNRadiusUniqueResultSet(unsigned int capacity, DistanceType radius)$/;"	f	class:cvflann::KNNRadiusUniqueResultSet
KNNRadiusUniqueResultSet	flann/result_set.h	/^class KNNRadiusUniqueResultSet : public KNNUniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNResultSet	flann/result_set.h	/^    KNNResultSet(int capacity_) : capacity(capacity_), count(0)$/;"	f	class:cvflann::KNNResultSet
KNNResultSet	flann/result_set.h	/^class KNNResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNSimpleResultSet	flann/result_set.h	/^    KNNSimpleResultSet(int capacity_) : capacity(capacity_), count(0)$/;"	f	class:cvflann::KNNSimpleResultSet
KNNSimpleResultSet	flann/result_set.h	/^class KNNSimpleResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
KNNUniqueResultSet	flann/result_set.h	/^    KNNUniqueResultSet(unsigned int capacity) : capacity_(capacity)$/;"	f	class:cvflann::KNNUniqueResultSet
KNNUniqueResultSet	flann/result_set.h	/^class KNNUniqueResultSet : public UniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
KNOWN	videostab/fast_marching.hpp	/^    enum { INSIDE = 0, BAND = 1, KNOWN = 255 };$/;"	e	enum:cv::videostab::FastMarchingMethod::__anon187
KNearest	ml/ml.hpp	/^typedef CvKNearest KNearest;$/;"	t	namespace:cv
KULLBACK_LEIBLER	flann/defines.h	/^    KULLBACK_LEIBLER  = 8$/;"	e	enum:cvflann::flann_distance_t
KalmGainMatr	video/tracking.hpp	/^    float* KalmGainMatr;        \/* =gain->data.fl *\/$/;"	m	struct:CvKalman
KalmanFilter	video/tracking.hpp	/^class CV_EXPORTS_W KalmanFilter$/;"	c	namespace:cv
KeyPoint	features2d/features2d.hpp	/^    CV_WRAP KeyPoint() : pt(0,0), size(0), angle(-1), response(0), octave(0), class_id(-1) {}$/;"	f	class:cv::KeyPoint
KeyPoint	features2d/features2d.hpp	/^    CV_WRAP KeyPoint(float x, float y, float _size, float _angle=-1,$/;"	f	class:cv::KeyPoint
KeyPoint	features2d/features2d.hpp	/^    KeyPoint(Point2f _pt, float _size, float _angle=-1,$/;"	f	class:cv::KeyPoint
KeyPoint	features2d/features2d.hpp	/^class CV_EXPORTS_W_SIMPLE KeyPoint$/;"	c	namespace:cv
KeyPointCollection	features2d/features2d.hpp	/^    class CV_EXPORTS KeyPointCollection$/;"	c	class:cv::GenericDescriptorMatcher
KeyPointsFilter	features2d/features2d.hpp	/^    KeyPointsFilter(){}$/;"	f	class:cv::KeyPointsFilter
KeyPointsFilter	features2d/features2d.hpp	/^class CV_EXPORTS KeyPointsFilter$/;"	c	namespace:cv
KeypointGreater	ts/ts_perf.hpp	/^struct CV_EXPORTS KeypointGreater$/;"	s	namespace:perf::comparators
KeypointLayout	gpu/gpu.hpp	/^    enum KeypointLayout$/;"	g	class:cv::gpu::SURF_GPU
KeypointLayout	ocl/ocl.hpp	/^            enum KeypointLayout$/;"	g	class:cv::ocl::SURF_OCL
KilledBySignal	ts/ts_gtest.h	/^class GTEST_API_ KilledBySignal {$/;"	c	namespace:testing
L	contrib/contrib.hpp	/^        vector<vector<pixel> > L;$/;"	m	class:cv::LogPolar_Adjacent
L1	features2d/features2d.hpp	/^struct CV_EXPORTS L1$/;"	s	namespace:cv
L1	flann/dist.h	/^struct L1$/;"	s	namespace:cvflann
L1	ocl/ocl.hpp	/^        struct CV_EXPORTS L1$/;"	s	namespace:cv::ocl
L1Dist	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ L1Dist() : mySum(0) {}$/;"	f	struct:cv::gpu::device::L1Dist
L1Dist	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ L1Dist() : mySum(0.0f) {}$/;"	f	struct:cv::gpu::device::L1Dist
L1Dist	gpu/device/vec_distance.hpp	/^    template <> struct L1Dist<float>$/;"	s	namespace:cv::gpu::device
L1Dist	gpu/device/vec_distance.hpp	/^    template <typename T> struct L1Dist$/;"	s	namespace:cv::gpu::device
L1Dist	gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::gpu::BruteForceMatcher_GPU_base::DistType
L1Dist	ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::ocl::BruteForceMatcher_OCL_base::DistType
L2	features2d/features2d.hpp	/^struct CV_EXPORTS L2$/;"	s	namespace:cv
L2	flann/dist.h	/^struct L2$/;"	s	namespace:cvflann
L2	ocl/ocl.hpp	/^        struct CV_EXPORTS L2$/;"	s	namespace:cv::ocl
L2Dist	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ L2Dist() : mySum(0.0f) {}$/;"	f	struct:cv::gpu::device::L2Dist
L2Dist	gpu/device/vec_distance.hpp	/^    struct L2Dist$/;"	s	namespace:cv::gpu::device
L2Dist	gpu/gpu.hpp	/^    enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::gpu::BruteForceMatcher_GPU_base::DistType
L2Dist	ocl/ocl.hpp	/^            enum DistType {L1Dist = 0, L2Dist, HammingDist};$/;"	e	enum:cv::ocl::BruteForceMatcher_OCL_base::DistType
L2Hys	objdetect/objdetect.hpp	/^    enum { L2Hys=0 };$/;"	e	enum:cv::HOGDescriptor::__anon232
L2HysThreshold	objdetect/objdetect.hpp	/^    CV_PROP double L2HysThreshold;$/;"	m	struct:cv::HOGDescriptor
L2_Simple	flann/dist.h	/^struct L2_Simple$/;"	s	namespace:cvflann
LAPLACIAN_ROW	gpu/gpu.hpp	/^        LAPLACIAN_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
LAPLACIAN_ROW	ocl/ocl.hpp	/^                LAPLACIAN_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
LBP	objdetect/objdetect.hpp	/^    enum { HAAR = 0, LBP = 1, HOG = 2 };$/;"	e	enum:cv::FeatureEvaluator::__anon228
LDA	contrib/contrib.hpp	/^        LDA(InputArrayOfArrays src, InputArray labels,$/;"	f	class:cv::LDA
LDA	contrib/contrib.hpp	/^        LDA(const Mat& src, vector<int> labels,$/;"	f	class:cv::LDA
LDA	contrib/contrib.hpp	/^        LDA(int num_components = 0) :$/;"	f	class:cv::LDA
LDA	contrib/contrib.hpp	/^    class CV_EXPORTS LDA$/;"	c	namespace:cv
LDetector	legacy/legacy.hpp	/^class CV_EXPORTS LDetector$/;"	c	namespace:cv
LINEAR	flann/defines.h	/^    LINEAR = 0,$/;"	e	enum:cvflann::flann_algorithm_t
LINEAR	ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon246
LINEAR_SIMILARITY	videostab/global_motion.hpp	/^    LINEAR_SIMILARITY = 2,$/;"	e	enum:cv::videostab::MotionModel
LINES	core/opengl_interop.hpp	/^        LINES          = 0x0001,$/;"	e	enum:cv::RenderMode::__anon219
LINE_LOOP	core/opengl_interop.hpp	/^        LINE_LOOP      = 0x0002,$/;"	e	enum:cv::RenderMode::__anon219
LINE_STRIP	core/opengl_interop.hpp	/^        LINE_STRIP     = 0x0003,$/;"	e	enum:cv::RenderMode::__anon219
LMEDS	calib3d/calib3d.hpp	/^    LMEDS=CV_LMEDS, \/\/!< least-median algorithm$/;"	e	enum:cv::__anon312
LOCATION_ROW	gpu/gpu.hpp	/^        LOCATION_ROW = 0,$/;"	e	enum:cv::gpu::FAST_GPU::__anon72
LOG	stitching/detail/util.hpp	82;"	d
LOG	ts/ts.hpp	/^        LOG=1 << LOG_IDX,$/;"	e	enum:cvtest::TS::__anon190
LOGD	ts/ts_perf.hpp	17;"	d
LOGD	ts/ts_perf.hpp	22;"	d
LOGE	ts/ts_perf.hpp	20;"	d
LOGE	ts/ts_perf.hpp	25;"	d
LOGI	ts/ts_perf.hpp	18;"	d
LOGI	ts/ts_perf.hpp	23;"	d
LOGIT	ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon253
LOGLN	stitching/detail/util.hpp	85;"	d
LOGLN_CHAT	stitching/detail/util.hpp	86;"	d
LOGW	ts/ts_perf.hpp	19;"	d
LOGW	ts/ts_perf.hpp	24;"	d
LOG_	stitching/detail/util.hpp	71;"	d
LOG_CHAT	stitching/detail/util.hpp	83;"	d
LOG_IDX	ts/ts.hpp	/^        LOG_IDX=1,$/;"	e	enum:cvtest::TS::__anon190
LOG_METHOD	flann/logger.h	108;"	d
LOG_STITCHING_MSG	stitching/detail/util.hpp	57;"	d
LOG_STITCHING_MSG	stitching/detail/util.hpp	65;"	d
LOG_STITCHING_MSG	stitching/detail/util.hpp	68;"	d
LOG_WARP_SIZE	gpu/device/warp.hpp	/^            LOG_WARP_SIZE = 5,$/;"	e	enum:cv::gpu::device::Warp::__anon76
LOW_PASS_FILTER	contrib/hybridtracker.hpp	/^    enum {LOW_PASS_FILTER = 0, KALMAN_FILTER = 1, EM = 2};$/;"	e	enum:cv::CvMotionModel::__anon14
LatentSvmDetector	objdetect/objdetect.hpp	/^class CV_EXPORTS LatentSvmDetector$/;"	c	namespace:cv
Lc	gpu/gpu.hpp	/^        int Lc;  \/\/ Quantized levels per 'color' component. Power of two, typically 32, 64 or 128.$/;"	m	struct:cv::gpu::FGDStatModel::Params
Lc	legacy/legacy.hpp	/^    int    Lc;			\/* Quantized levels per 'color' component. Power of two, typically 32, 64 or 128.				*\/$/;"	m	struct:CvFGDStatModelParams
Lcc	gpu/gpu.hpp	/^        int Lcc;  \/\/ Quantized levels per 'color co-occurrence' component.  Power of two, typically 16, 32 or 64.$/;"	m	struct:cv::gpu::FGDStatModel::Params
Lcc	legacy/legacy.hpp	/^    int    Lcc;			\/* Quantized levels per 'color co-occurrence' component.  Power of two, typically 16, 32 or 64.			*\/$/;"	m	struct:CvFGDStatModelParams
LeftEyeRect	legacy/legacy.hpp	/^    CvRect LeftEyeRect;$/;"	m	struct:CvFace
LessThan	core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS LessThan$/;"	c	namespace:cv
LessThanIdx	core/operations.hpp	/^    LessThanIdx( const _Tp* _arr ) : arr(_arr) {}$/;"	f	class:cv::LessThanIdx
LessThanIdx	core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS LessThanIdx$/;"	c	namespace:cv
LevMarqSparse	contrib/contrib.hpp	/^    class LevMarqSparse {$/;"	c	namespace:cv
LinearFilter	gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ LinearFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::gpu::device::LinearFilter
LinearFilter	gpu/device/filters.hpp	/^    template <typename Ptr2D> struct LinearFilter$/;"	s	namespace:cv::gpu::device
LinearIndex	flann/linear_index.h	/^    LinearIndex(const Matrix<ElementType>& inputData, const IndexParams& params = LinearIndexParams(),$/;"	f	class:cvflann::LinearIndex
LinearIndex	flann/linear_index.h	/^class LinearIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
LinearIndexParams	flann/linear_index.h	/^    LinearIndexParams()$/;"	f	struct:cvflann::LinearIndexParams
LinearIndexParams	flann/linear_index.h	/^struct LinearIndexParams : public IndexParams$/;"	s	namespace:cvflann
LinearIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS LinearIndexParams : public IndexParams$/;"	s	namespace:cv::flann
LinearMemories	objdetect/objdetect.hpp	/^  typedef std::vector<Mat> LinearMemories;$/;"	t	class:cv::linemod::Detector
LinearMemoryPyramid	objdetect/objdetect.hpp	/^  typedef std::vector< std::vector<LinearMemories> > LinearMemoryPyramid;$/;"	t	class:cv::linemod::Detector
Load	gpu/device/datamov_utils.hpp	/^            __device__ __forceinline__ static void Load(const T* ptr, int offset, T& val)  { val = ptr[offset];  }$/;"	f	struct:cv::gpu::device::ForceGlob
Load	legacy/blobtrack.hpp	/^    virtual void Load(CvFileStorage* fs, CvFileNode* node)$/;"	f	class:CvBlobSeq
Lock	ts/ts_gtest.h	/^  void Lock() {$/;"	f	class:std::tr1::MutexBase
Lock	ts/ts_gtest.h	/^  void Lock() {}$/;"	f	class:std::tr1::Mutex
LogPolar_Adjacent	contrib/contrib.hpp	/^        LogPolar_Adjacent() {}$/;"	f	class:cv::LogPolar_Adjacent
LogPolar_Adjacent	contrib/contrib.hpp	/^    class CV_EXPORTS LogPolar_Adjacent$/;"	c	namespace:cv
LogPolar_Interp	contrib/contrib.hpp	/^        LogPolar_Interp() {}$/;"	f	class:cv::LogPolar_Interp
LogPolar_Interp	contrib/contrib.hpp	/^    class CV_EXPORTS LogPolar_Interp$/;"	c	namespace:cv
LogPolar_Overlapping	contrib/contrib.hpp	/^        LogPolar_Overlapping() {}$/;"	f	class:cv::LogPolar_Overlapping
LogPolar_Overlapping	contrib/contrib.hpp	/^    class CV_EXPORTS LogPolar_Overlapping$/;"	c	namespace:cv
LogToStderr	ts/ts_gtest.h	/^inline void LogToStderr() {}$/;"	f	namespace:std::tr1
LogToStdout	videostab/log.hpp	/^class CV_EXPORTS LogToStdout : public ILog$/;"	c	namespace:cv::videostab
Logger	flann/logger.h	/^    Logger() : stream(stdout), logLevel(FLANN_LOG_WARN) {}$/;"	f	class:cvflann::Logger
Logger	flann/logger.h	/^class Logger$/;"	c	namespace:cvflann
LshIndex	flann/lsh_index.h	/^    LshIndex(const Matrix<ElementType>& input_data, const IndexParams& params = LshIndexParams(),$/;"	f	class:cvflann::LshIndex
LshIndex	flann/lsh_index.h	/^class LshIndex : public NNIndex<Distance>$/;"	c	namespace:cvflann
LshIndexParams	flann/lsh_index.h	/^    LshIndexParams(unsigned int table_number = 12, unsigned int key_size = 20, unsigned int multi_probe_level = 2)$/;"	f	struct:cvflann::LshIndexParams
LshIndexParams	flann/lsh_index.h	/^struct LshIndexParams : public IndexParams$/;"	s	namespace:cvflann
LshIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS LshIndexParams : public IndexParams$/;"	s	namespace:cv::flann
LshStats	flann/lsh_table.h	/^struct LshStats$/;"	s	namespace:cvflann::lsh
LshTable	flann/lsh_table.h	/^    LshTable()$/;"	f	class:cvflann::lsh::LshTable
LshTable	flann/lsh_table.h	/^    LshTable(unsigned int \/*feature_size*\/, unsigned int \/*key_size*\/)$/;"	f	class:cvflann::lsh::LshTable
LshTable	flann/lsh_table.h	/^class LshTable$/;"	c	namespace:cvflann::lsh
LshTable	flann/lsh_table.h	/^inline LshTable<unsigned char>::LshTable(unsigned int feature_size, unsigned int subsignature_size)$/;"	f	class:cvflann::lsh::LshTable
M	contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
M	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
M	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
M	contrib/openfabmap.hpp	/^        mutable double M;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
MANHATTAN	flann/defines.h	/^    MANHATTAN = 2,$/;"	e	enum:cvflann::flann_distance_t
MASK	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
MAX	core/types_c.h	288;"	d
MAX_ARR	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
MAX_CAMERAS	legacy/legacy.hpp	/^    enum { MAX_CAMERAS = 3 };$/;"	e	enum:CvCalibFilter::__anon9
MAX_DIST	flann/defines.h	/^    MAX_DIST   = 4,$/;"	e	enum:cvflann::flann_distance_t
MAX_IDX	ts/ts.hpp	/^        MAX_IDX=4$/;"	e	enum:cvtest::TS::__anon190
MEAN_FIELD	contrib/openfabmap.hpp	/^        MEAN_FIELD = 1,$/;"	e	enum:cv::of2::FabMap::__anon13
MIN	core/types_c.h	284;"	d
MINKOWSKI	flann/defines.h	/^    MINKOWSKI = 3,$/;"	e	enum:cvflann::flann_distance_t
MISCLASS	ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon254
MNCovariance	video/tracking.hpp	/^    float* MNCovariance;        \/* =measurement_noise_cov->data.fl *\/$/;"	m	struct:CvKalman
MOG2_GPU	gpu/gpu.hpp	/^class CV_EXPORTS MOG2_GPU$/;"	c	namespace:cv::gpu
MOG_GPU	gpu/gpu.hpp	/^class CV_EXPORTS MOG_GPU$/;"	c	namespace:cv::gpu
MORPHING_METHOD_ERODE	contrib/contrib.hpp	/^        MORPHING_METHOD_ERODE = 1,$/;"	e	enum:CvAdaptiveSkinDetector::__anon19
MORPHING_METHOD_ERODE_DILATE	contrib/contrib.hpp	/^        MORPHING_METHOD_ERODE_DILATE = 3$/;"	e	enum:CvAdaptiveSkinDetector::__anon19
MORPHING_METHOD_ERODE_ERODE	contrib/contrib.hpp	/^        MORPHING_METHOD_ERODE_ERODE = 2,$/;"	e	enum:CvAdaptiveSkinDetector::__anon19
MORPHING_METHOD_NONE	contrib/contrib.hpp	/^        MORPHING_METHOD_NONE = 0,$/;"	e	enum:CvAdaptiveSkinDetector::__anon19
MORPH_BLACKHAT	imgproc/imgproc.hpp	/^       MORPH_BLACKHAT=CV_MOP_BLACKHAT };$/;"	e	enum:cv::__anon269
MORPH_CLOSE	imgproc/imgproc.hpp	/^       MORPH_OPEN=CV_MOP_OPEN, MORPH_CLOSE=CV_MOP_CLOSE,$/;"	e	enum:cv::__anon269
MORPH_CROSS	imgproc/imgproc.hpp	/^enum { MORPH_RECT=0, MORPH_CROSS=1, MORPH_ELLIPSE=2 };$/;"	e	enum:cv::__anon270
MORPH_DILATE	imgproc/imgproc.hpp	/^enum { MORPH_ERODE=CV_MOP_ERODE, MORPH_DILATE=CV_MOP_DILATE,$/;"	e	enum:cv::__anon269
MORPH_ELLIPSE	imgproc/imgproc.hpp	/^enum { MORPH_RECT=0, MORPH_CROSS=1, MORPH_ELLIPSE=2 };$/;"	e	enum:cv::__anon270
MORPH_ERODE	imgproc/imgproc.hpp	/^enum { MORPH_ERODE=CV_MOP_ERODE, MORPH_DILATE=CV_MOP_DILATE,$/;"	e	enum:cv::__anon269
MORPH_GRADIENT	imgproc/imgproc.hpp	/^       MORPH_GRADIENT=CV_MOP_GRADIENT, MORPH_TOPHAT=CV_MOP_TOPHAT,$/;"	e	enum:cv::__anon269
MORPH_OPEN	imgproc/imgproc.hpp	/^       MORPH_OPEN=CV_MOP_OPEN, MORPH_CLOSE=CV_MOP_CLOSE,$/;"	e	enum:cv::__anon269
MORPH_RECT	imgproc/imgproc.hpp	/^enum { MORPH_RECT=0, MORPH_CROSS=1, MORPH_ELLIPSE=2 };$/;"	e	enum:cv::__anon270
MORPH_TOPHAT	imgproc/imgproc.hpp	/^       MORPH_GRADIENT=CV_MOP_GRADIENT, MORPH_TOPHAT=CV_MOP_TOPHAT,$/;"	e	enum:cv::__anon269
MOTION_MODEL	contrib/openfabmap.hpp	/^        MOTION_MODEL = 16$/;"	e	enum:cv::of2::FabMap::__anon13
MP	legacy/legacy.hpp	/^    int MP;$/;"	m	struct:CvConDensation
MP	video/tracking.hpp	/^    int MP;                     \/* number of measurement vector dimensions *\/$/;"	m	struct:CvKalman
MPEG1	gpu/gpu.hpp	/^        MPEG1 = 0,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
MPEG2	gpu/gpu.hpp	/^        MPEG2,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
MPEG4	gpu/gpu.hpp	/^        MPEG4,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
MSER	features2d/features2d.hpp	/^class CV_EXPORTS_W MSER : public FeatureDetector$/;"	c	namespace:cv
MSize	core/mat.hpp	/^inline Mat::MSize::MSize(int* _p) : p(_p) {}$/;"	f	class:cv::Mat::MSize
MStep	core/mat.hpp	/^inline Mat::MStep::MStep() { p = buf; p[0] = p[1] = 0; }$/;"	f	class:cv::Mat::MStep
MStep	core/mat.hpp	/^inline Mat::MStep::MStep(size_t s) { p = buf; p[0] = s; p[1] = 0; }$/;"	f	class:cv::Mat::MStep
MULTI_BAND	stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon51
M_	gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
MaskCollection	gpu/device/utility.hpp	/^        __device__ __forceinline__ MaskCollection(const MaskCollection& masks_)$/;"	f	struct:cv::gpu::device::MaskCollection
MaskCollection	gpu/device/utility.hpp	/^        explicit __host__ __device__ __forceinline__ MaskCollection(PtrStepb* maskCollection_)$/;"	f	struct:cv::gpu::device::MaskCollection
MaskCollection	gpu/device/utility.hpp	/^    struct MaskCollection$/;"	s	namespace:cv::gpu::device
MaskGenerator	objdetect/objdetect.hpp	/^    class CV_EXPORTS MaskGenerator$/;"	c	class:cv::CascadeClassifier
Mat	core/mat.hpp	/^inline Mat::Mat() : size(&rows)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(Size _sz, int _type) : size(&rows)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(Size _sz, int _type, const Scalar& _s) : size(&rows)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(Size _sz, int _type, void* _data, size_t _step)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(const Mat& m)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(int _dims, const int* _sz, int _type) : size(&rows)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(int _dims, const int* _sz, int _type, const Scalar& _s) : size(&rows)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(int _rows, int _cols, int _type) : size(&rows)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(int _rows, int _cols, int _type, const Scalar& _s) : size(&rows)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^inline Mat::Mat(int _rows, int _cols, int _type, void* _data, size_t _step)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^template<typename _Tp, int m, int n> inline Mat::Mat(const Matx<_Tp,m,n>& M, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^template<typename _Tp, int n> inline Mat::Mat(const Vec<_Tp, n>& vec, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const MatCommaInitializer_<_Tp>& commaInitializer)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const Point3_<_Tp>& pt, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const Point_<_Tp>& pt, bool copyData)$/;"	f	class:cv::Mat
Mat	core/mat.hpp	/^template<typename _Tp> inline Mat::Mat(const vector<_Tp>& vec, bool copyData)$/;"	f	class:cv::Mat
MatArg	core/core.hpp	/^class CV_EXPORTS MatArg;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatCommaInitializer_	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS MatCommaInitializer_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatCommaInitializer_	core/mat.hpp	/^template<typename _Tp> inline MatCommaInitializer_<_Tp>::MatCommaInitializer_(Mat_<_Tp>* _m) : it(_m) {}$/;"	f	class:cv::MatCommaInitializer_
MatComparator	ts/ts.hpp	/^struct CV_EXPORTS MatComparator$/;"	s	namespace:cvtest
MatConstIterator	core/core.hpp	/^class CV_EXPORTS MatConstIterator;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatConstIterator	core/mat.hpp	/^inline MatConstIterator::MatConstIterator()$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const Mat* _m)$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const Mat* _m, Point _pt)$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const Mat* _m, int _row, int _col)$/;"	f	class:cv::MatConstIterator
MatConstIterator	core/mat.hpp	/^inline MatConstIterator::MatConstIterator(const MatConstIterator& it)$/;"	f	class:cv::MatConstIterator
MatConstIterator_	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS MatConstIterator_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatConstIterator_	core/mat.hpp	/^    MatConstIterator_(const MatConstIterator_& it)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.hpp	/^    MatConstIterator_(const Mat_<_Tp>* _m, Point _pt)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.hpp	/^    MatConstIterator_(const Mat_<_Tp>* _m, int _row, int _col)$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>::MatConstIterator_() {}$/;"	f	class:cv::MatConstIterator_
MatConstIterator_	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>::MatConstIterator_(const Mat_<_Tp>* _m)$/;"	f	class:cv::MatConstIterator_
MatExpr	core/core.hpp	/^class CV_EXPORTS MatExpr;$/;"	m	namespace:cv	typeref:class:cv::gpu
MatExpr	core/mat.hpp	/^    MatExpr() : op(0), flags(0), a(Mat()), b(Mat()), c(Mat()), alpha(0), beta(0), s(Scalar()) {}$/;"	f	class:cv::MatExpr
MatExpr	core/mat.hpp	/^    MatExpr(const MatOp* _op, int _flags, const Mat& _a=Mat(), const Mat& _b=Mat(),$/;"	f	class:cv::MatExpr
MatExpr	core/mat.hpp	/^class CV_EXPORTS MatExpr$/;"	c	namespace:cv
MatInfo	ts/ts.hpp	/^    MatInfo(const Mat& _m) : m(&_m) {}$/;"	f	struct:cvtest::MatInfo
MatInfo	ts/ts.hpp	/^struct CV_EXPORTS MatInfo$/;"	s	namespace:cvtest
MatIterator_	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS MatIterator_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatIterator_	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_() : MatConstIterator_<_Tp>() {}$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(Mat_<_Tp>* _m, int _row, int _col)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(const MatIterator_& it)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(const Mat_<_Tp>* _m, Point _pt)$/;"	f	class:cv::MatIterator_
MatIterator_	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>::MatIterator_(const Mat_<_Tp>* _m, const int* _idx)$/;"	f	class:cv::MatIterator_
MatND	core/core.hpp	/^typedef Mat MatND;$/;"	t	namespace:cv
MatOp	core/mat.hpp	/^    MatOp() {};$/;"	f	class:cv::MatOp
MatOp	core/mat.hpp	/^class CV_EXPORTS MatOp$/;"	c	namespace:cv
MatOp_Base	core/core.hpp	/^class CV_EXPORTS MatOp_Base;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
MatType	ts/ts_perf.hpp	/^    MatType(int val=0) : _type(val) {}$/;"	f	class:perf::MatType
MatType	ts/ts_perf.hpp	/^class MatType$/;"	c	namespace:perf
Mat_	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Mat_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Mat_	core/mat.hpp	/^    Mat_<_Tp>::Mat_(const Matx<typename DataType<_Tp>::channel_type,m,n>& M, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^    Mat_<_Tp>::Mat_(const Vec<typename DataType<_Tp>::channel_type, n>& vec, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_()$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(Size _sz)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(Size _sz, const _Tp& value)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat& m)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const MatCommaInitializer_<_Tp>& commaInitializer)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const MatExpr& e)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_& m)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_& m, const Range& _rowRange, const Range& _colRange)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_& m, const Rect& roi)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Mat_<_Tp>& m, const Range* ranges)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Point3_<typename DataType<_Tp>::channel_type>& pt, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const Point_<typename DataType<_Tp>::channel_type>& pt, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(const vector<_Tp>& vec, bool copyData)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _dims, const int* _sz)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _dims, const int* _sz, const _Tp& _s)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _rows, int _cols)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _rows, int _cols, _Tp* _data, size_t steps)$/;"	f	class:cv::Mat_
Mat_	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::Mat_(int _rows, int _cols, const _Tp& value)$/;"	f	class:cv::Mat_
Match	objdetect/objdetect.hpp	/^  Match()$/;"	f	struct:cv::linemod::Match
Match	objdetect/objdetect.hpp	/^inline  Match::Match(int _x, int _y, float _similarity, const std::string& _class_id, int _template_id)$/;"	f	class:cv::linemod::Match
Match	objdetect/objdetect.hpp	/^struct CV_EXPORTS Match$/;"	s	namespace:cv::linemod
MatchTemplateBuf	gpu/gpu.hpp	/^struct CV_EXPORTS MatchTemplateBuf$/;"	s	namespace:cv::gpu
MatchTemplateBuf	ocl/ocl.hpp	/^        struct CV_EXPORTS MatchTemplateBuf$/;"	s	namespace:cv::ocl
MatchesInfo	stitching/detail/matchers.hpp	/^struct CV_EXPORTS MatchesInfo$/;"	s	namespace:cv::detail
Matrix	flann/matrix.h	/^    Matrix() : rows(0), cols(0), stride(0), data(NULL)$/;"	f	class:cvflann::Matrix
Matrix	flann/matrix.h	/^    Matrix(T* data_, size_t rows_, size_t cols_, size_t stride_ = 0) :$/;"	f	class:cvflann::Matrix
Matrix	flann/matrix.h	/^class Matrix$/;"	c	namespace:cvflann
Matx	core/core.hpp	/^template<typename _Tp, int m, int n> class CV_EXPORTS Matx$/;"	c	namespace:cv
Matx	core/core.hpp	/^template<typename _Tp, int m, int n> class CV_EXPORTS Matx;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Matx	core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, l>& a, const Matx<_Tp, l, n>& b, Matx_MatMulOp)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, _T2 alpha, Matx_ScaleOp)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_AddOp)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_MulOp)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b, Matx_SubOp)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^Matx<_Tp,m,n>::Matx(const Matx<_Tp, n, m>& a, Matx_TOp)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^inline Matx<_Tp,m,n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3,$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx()$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4)$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(_Tp v0, _Tp v1, _Tp v2, _Tp v3,$/;"	f	class:cv::Matx
Matx	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n>::Matx(const _Tp* values)$/;"	f	class:cv::Matx
MatxCommaInitializer	core/operations.hpp	/^MatxCommaInitializer<_Tp, m, n>::MatxCommaInitializer(Matx<_Tp, m, n>* _mtx)$/;"	f	class:cv::MatxCommaInitializer
Matx_AddOp	core/core.hpp	/^struct CV_EXPORTS Matx_AddOp {};$/;"	s	namespace:cv
Matx_DetOp	core/operations.hpp	/^template<typename _Tp, int m> struct CV_EXPORTS Matx_DetOp$/;"	s	namespace:cv
Matx_DetOp	core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_DetOp<_Tp, 1>$/;"	s	namespace:cv
Matx_DetOp	core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_DetOp<_Tp, 2>$/;"	s	namespace:cv
Matx_DetOp	core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_DetOp<_Tp, 3>$/;"	s	namespace:cv
Matx_FastInvOp	core/operations.hpp	/^template<typename _Tp, int m> struct CV_EXPORTS Matx_FastInvOp$/;"	s	namespace:cv
Matx_FastInvOp	core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastInvOp<_Tp, 2>$/;"	s	namespace:cv
Matx_FastInvOp	core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastInvOp<_Tp, 3>$/;"	s	namespace:cv
Matx_FastSolveOp	core/operations.hpp	/^template<typename _Tp, int m, int n> struct CV_EXPORTS Matx_FastSolveOp$/;"	s	namespace:cv
Matx_FastSolveOp	core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastSolveOp<_Tp, 2, 1>$/;"	s	namespace:cv
Matx_FastSolveOp	core/operations.hpp	/^template<typename _Tp> struct CV_EXPORTS Matx_FastSolveOp<_Tp, 3, 1>$/;"	s	namespace:cv
Matx_MatMulOp	core/core.hpp	/^struct CV_EXPORTS Matx_MatMulOp {};$/;"	s	namespace:cv
Matx_MulOp	core/core.hpp	/^struct CV_EXPORTS Matx_MulOp {};$/;"	s	namespace:cv
Matx_ScaleOp	core/core.hpp	/^struct CV_EXPORTS Matx_ScaleOp {};$/;"	s	namespace:cv
Matx_SubOp	core/core.hpp	/^struct CV_EXPORTS Matx_SubOp {};$/;"	s	namespace:cv
Matx_TOp	core/core.hpp	/^struct CV_EXPORTS Matx_TOp {};$/;"	s	namespace:cv
MaxDistance	flann/dist.h	/^struct MaxDistance$/;"	s	namespace:cvflann
MaxMeanShiftIteration	contrib/contrib.hpp	/^        MaxMeanShiftIteration   = 5,$/;"	e	enum:CvFuzzyMeanShiftTracker::__anon21
MaxSetSizeIteration	contrib/contrib.hpp	/^        MaxSetSizeIteration     = 5$/;"	e	enum:CvFuzzyMeanShiftTracker::__anon21
MeanShiftTracker	contrib/hybridtracker.hpp	/^typedef CvMeanShiftTracker MeanShiftTracker;$/;"	t	namespace:cv
MeanShiftTrackerParams	contrib/hybridtracker.hpp	/^typedef CvMeanShiftTrackerParams MeanShiftTrackerParams;$/;"	t	namespace:cv
MeasurementMatr	video/tracking.hpp	/^    float* MeasurementMatr;     \/* =measurement_matrix->data.fl *\/$/;"	m	struct:CvKalman
MercatorProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS MercatorProjector : ProjectorBase$/;"	s	namespace:cv::detail
MercatorWarper	stitching/detail/warpers.hpp	/^    MercatorWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::MercatorWarper
MercatorWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS MercatorWarper : public RotationWarperBase<MercatorProjector>$/;"	c	namespace:cv::detail
MercatorWarper	stitching/warpers.hpp	/^class MercatorWarper: public WarperCreator$/;"	c	namespace:cv
Mesh3D	contrib/contrib.hpp	/^    class CV_EXPORTS Mesh3D$/;"	c	namespace:cv
Message	ts/ts_gtest.h	/^  Message() : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	ts/ts_gtest.h	/^  Message(const Message& msg) : ss_(new ::std::stringstream) {  \/\/ NOLINT$/;"	f	class:testing::Message
Message	ts/ts_gtest.h	/^  explicit Message(const char* str) : ss_(new ::std::stringstream) {$/;"	f	class:testing::Message
Message	ts/ts_gtest.h	/^class GTEST_API_ Message {$/;"	c	namespace:testing
MinKernelMass	contrib/contrib.hpp	/^        MinKernelMass           = 1000$/;"	e	enum:CvFuzzyMeanShiftTracker::__anon20
MinkowskiDistance	flann/dist.h	/^    MinkowskiDistance(int order_) : order(order_) {}$/;"	f	struct:cvflann::MinkowskiDistance
MinkowskiDistance	flann/dist.h	/^struct MinkowskiDistance$/;"	s	namespace:cvflann
Modality	objdetect/objdetect.hpp	/^class CV_EXPORTS Modality$/;"	c	namespace:cv::linemod
Moments	imgproc/imgproc.hpp	/^class CV_EXPORTS_W_MAP Moments$/;"	c	namespace:cv
Monochrome	gpu/gpu.hpp	/^        Monochrome=0,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
MotionFilterBase	videostab/motion_stabilizing.hpp	/^    MotionFilterBase() : radius_(0) {}$/;"	f	class:cv::videostab::MotionFilterBase
MotionFilterBase	videostab/motion_stabilizing.hpp	/^class CV_EXPORTS MotionFilterBase : public IMotionStabilizer$/;"	c	namespace:cv::videostab
MotionInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS MotionInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
MotionModel	contrib/hybridtracker.hpp	/^typedef CvMotionModel MotionModel;$/;"	t	namespace:cv
MotionModel	videostab/global_motion.hpp	/^enum MotionModel$/;"	g	namespace:cv::videostab
MouseCallback	highgui/highgui.hpp	/^typedef void (*MouseCallback)(int event, int x, int y, int flags, void* userdata);$/;"	t	namespace:cv
MouthRect	legacy/legacy.hpp	/^    CvRect MouthRect;$/;"	m	struct:CvFace
MserFeatureDetector	features2d/features2d.hpp	/^typedef MSER MserFeatureDetector;$/;"	t	namespace:cv
MultiBandBlender	stitching/detail/blenders.hpp	/^class CV_EXPORTS MultiBandBlender : public Blender$/;"	c	namespace:cv::detail
Mutex	ts/ts_gtest.h	/^  Mutex() {$/;"	f	class:std::tr1::Mutex
Mutex	ts/ts_gtest.h	/^  Mutex() {}$/;"	f	class:std::tr1::Mutex
Mutex	ts/ts_gtest.h	/^class Mutex : public MutexBase {$/;"	c	namespace:std::tr1
Mutex	ts/ts_gtest.h	/^class Mutex {$/;"	c	namespace:std::tr1
MutexBase	ts/ts_gtest.h	/^class MutexBase {$/;"	c	namespace:std::tr1
MutexLock	ts/ts_gtest.h	/^typedef GTestMutexLock MutexLock;$/;"	t	namespace:std::tr1
N	contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
N	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
N	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
N	legacy/legacy.hpp	/^    int N; \/\/graph size$/;"	m	struct:CvCliqueFinder
N1c	gpu/gpu.hpp	/^        int N1c; \/\/ Number of color vectors used to model normal background color variation at a given pixel.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N1c	legacy/legacy.hpp	/^    int    N1c;			\/* Number of color vectors used to model normal background color variation at a given pixel.			*\/$/;"	m	struct:CvFGDStatModelParams
N1cc	gpu/gpu.hpp	/^        int N1cc; \/\/ Number of color co-occurrence vectors used to model normal background color variation at a given pixel.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N1cc	legacy/legacy.hpp	/^    int    N1cc;		\/* Number of color co-occurrence vectors used to model normal background color variation at a given pixel.	*\/$/;"	m	struct:CvFGDStatModelParams
N2c	gpu/gpu.hpp	/^        int N2c; \/\/ Number of color vectors retained at given pixel.  Must be > N1c, typically ~ 5\/3 of N1c.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N2c	legacy/legacy.hpp	/^    int    N2c;			\/* Number of color vectors retained at given pixel.  Must be > N1c, typically ~ 5\/3 of N1c.			*\/$/;"	m	struct:CvFGDStatModelParams
N2cc	gpu/gpu.hpp	/^        int N2cc; \/\/ Number of color co-occurrence vectors retained at given pixel.  Must be > N1cc, typically ~ 5\/3 of N1cc.$/;"	m	struct:cv::gpu::FGDStatModel::Params
N2cc	legacy/legacy.hpp	/^    int    N2cc;		\/* Number of color co-occurrence vectors retained at given pixel.  Must be > N1cc, typically ~ 5\/3 of N1cc.	*\/$/;"	m	struct:CvFGDStatModelParams
NAIVE_BAYES	contrib/openfabmap.hpp	/^        NAIVE_BAYES = 4,$/;"	e	enum:cv::of2::FabMap::__anon13
NARROW_PRESET	calib3d/calib3d.hpp	/^        BASIC_PRESET=0, FISH_EYE_PRESET=1, NARROW_PRESET=2 };$/;"	e	enum:cv::StereoBM::__anon318
NATIVE_DOUBLE	core/gpumat.hpp	/^        NATIVE_DOUBLE = FEATURE_SET_COMPUTE_13,$/;"	e	enum:cv::gpu::FeatureSet
NB_ORIENPAIRS	features2d/features2d.hpp	/^        NB_SCALES = 64, NB_PAIRS = 512, NB_ORIENPAIRS = 45$/;"	e	enum:cv::FREAK::__anon235
NB_PAIRS	features2d/features2d.hpp	/^        NB_SCALES = 64, NB_PAIRS = 512, NB_ORIENPAIRS = 45$/;"	e	enum:cv::FREAK::__anon235
NB_SCALES	features2d/features2d.hpp	/^        NB_SCALES = 64, NB_PAIRS = 512, NB_ORIENPAIRS = 45$/;"	e	enum:cv::FREAK::__anon235
NEXT_AROUND_DST	imgproc/imgproc.hpp	/^        NEXT_AROUND_DST   = 0x22,$/;"	e	enum:cv::Subdiv2D::__anon286
NEXT_AROUND_LEFT	imgproc/imgproc.hpp	/^        NEXT_AROUND_LEFT  = 0x13,$/;"	e	enum:cv::Subdiv2D::__anon286
NEXT_AROUND_ORG	imgproc/imgproc.hpp	/^        NEXT_AROUND_ORG   = 0x00,$/;"	e	enum:cv::Subdiv2D::__anon286
NEXT_AROUND_RIGHT	imgproc/imgproc.hpp	/^        NEXT_AROUND_RIGHT = 0x31,$/;"	e	enum:cv::Subdiv2D::__anon286
NNIndex	flann/nn_index.h	/^class NNIndex$/;"	c	namespace:cvflann
NO	stitching/detail/blenders.hpp	/^    enum { NO, FEATHER, MULTI_BAND };$/;"	e	enum:cv::detail::Blender::__anon51
NO	stitching/detail/exposure_compensate.hpp	/^    enum { NO, GAIN, GAIN_BLOCKS };$/;"	e	enum:cv::detail::ExposureCompensator::__anon52
NORM_HAMMING	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_HAMMING2	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_INF	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_L1	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_L2	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_L2SQR	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_MINMAX	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_RELATIVE	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NORM_TYPE_MASK	core/core.hpp	/^enum { NORM_INF=1, NORM_L1=2, NORM_L2=4, NORM_L2SQR=5, NORM_HAMMING=6, NORM_HAMMING2=7, NORM_TYPE_MASK=7, NORM_RELATIVE=8, NORM_MINMAX=32 };$/;"	e	enum:cv::__anon203
NOT_DRAW_SINGLE_POINTS	features2d/features2d.hpp	/^          NOT_DRAW_SINGLE_POINTS = 2, \/\/ Single keypoints will not be drawn.$/;"	e	enum:cv::DrawMatchesFlags::__anon242
NO_INPUT_SCALE	ml/ml.hpp	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon258
NO_OUTPUT_SCALE	ml/ml.hpp	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon258
NU	ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon247
NUL	ts/ts.hpp	/^        NUL=0,$/;"	e	enum:cvtest::TS::__anon190
NU_SVC	ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon245
NU_SVR	ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon245
NaluFramingType	gpu/gpu.hpp	/^        int       NaluFramingType; \/\/    NVVE_CONFIGURE_NALU_FRAMING_TYPE$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
NativeArray	ts/ts_gtest.h	/^  NativeArray(const Element* array, size_t count, RelationToSource relation) {$/;"	f	class:testing::internal::NativeArray
NativeArray	ts/ts_gtest.h	/^  NativeArray(const NativeArray& rhs) {$/;"	f	class:testing::internal::NativeArray
NativeArray	ts/ts_gtest.h	/^class NativeArray {$/;"	c	namespace:testing::internal
NeuralNet_MLP	ml/ml.hpp	/^typedef CvANN_MLP NeuralNet_MLP;$/;"	t	namespace:cv
No	gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	s	struct:cv::gpu::device::IsBinaryFunction
No	gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	s	struct:cv::gpu::device::IsUnaryFunction
NoExposureCompensator	stitching/detail/exposure_compensate.hpp	/^class CV_EXPORTS NoExposureCompensator : public ExposureCompensator$/;"	c	namespace:cv::detail
NoSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS NoSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
Node	contrib/contrib.hpp	/^            Node() {}$/;"	f	struct:cv::Octree::Node
Node	contrib/contrib.hpp	/^        struct Node$/;"	s	class:cv::Octree
Node	flann/hierarchical_clustering_index.h	/^    struct Node$/;"	s	class:cvflann::HierarchicalClusteringIndex
Node	flann/kdtree_index.h	/^    struct Node$/;"	s	class:cvflann::KDTreeIndex
Node	flann/kdtree_single_index.h	/^    struct Node$/;"	s	class:cvflann::KDTreeSingleIndex
NodePtr	flann/hierarchical_clustering_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::HierarchicalClusteringIndex
NodePtr	flann/kdtree_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::KDTreeIndex
NodePtr	flann/kdtree_single_index.h	/^    typedef Node* NodePtr;$/;"	t	class:cvflann::KDTreeSingleIndex
NonConstType	gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::UnConst<T>::type                                                NonConstType;$/;"	t	struct:cv::gpu::device::TypeTraits
NonVolatileType	gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::UnVolatile<T>::type                                             NonVolatileType;$/;"	t	struct:cv::gpu::device::TypeTraits
None	ts/ts_gtest.h	/^struct None {};$/;"	s	namespace:testing::internal
NoneT	ts/ts_gtest.h	/^struct NoneT {};$/;"	s	namespace:testing::internal
NormalBayesClassifier	ml/ml.hpp	/^typedef CvNormalBayesClassifier NormalBayesClassifier;$/;"	t	namespace:cv
Notification	ts/ts_gtest.h	/^  Notification() : notified_(false) {$/;"	f	class:std::tr1::Notification
Notification	ts/ts_gtest.h	/^class Notification {$/;"	c	namespace:std::tr1
Notify	ts/ts_gtest.h	/^  void Notify() {$/;"	f	class:std::tr1::Notification
NullDeblurer	videostab/deblurring.hpp	/^class CV_EXPORTS NullDeblurer : public DeblurerBase$/;"	c	namespace:cv::videostab
NullFrameSource	videostab/frame_source.hpp	/^class CV_EXPORTS NullFrameSource : public IFrameSource$/;"	c	namespace:cv::videostab
NullInpainter	videostab/inpainting.hpp	/^class CV_EXPORTS NullInpainter : public InpainterBase$/;"	c	namespace:cv::videostab
NullLog	videostab/log.hpp	/^class CV_EXPORTS NullLog : public ILog$/;"	c	namespace:cv::videostab
OCTAVE_ROW	gpu/gpu.hpp	/^        OCTAVE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon73
OCTAVE_ROW	gpu/gpu.hpp	/^        OCTAVE_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
OCTAVE_ROW	ocl/ocl.hpp	/^                OCTAVE_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
OK	stitching/stitcher.hpp	/^    enum Status { OK, ERR_NEED_MORE_IMGS };$/;"	e	enum:cv::Stitcher::Status
OK	ts/ts.hpp	/^        OK=0,$/;"	e	enum:cvtest::TS::__anon191
ONE_CLASS	ml/ml.hpp	/^    enum { C_SVC=100, NU_SVC=101, ONE_CLASS=102, EPS_SVR=103, NU_SVR=104 };$/;"	e	enum:CvSVM::__anon245
OPENCV_ASSERT	core/core_c.h	1786;"	d
OPENCV_CALL	core/core_c.h	1792;"	d
OPENCV_ERRCHK	core/core_c.h	1782;"	d
OPENCV_ERROR	core/core_c.h	1779;"	d
OPENCV_FLANN_ALLOCATOR_H_	flann/allocator.h	32;"	d
OPENCV_FLANN_ALL_INDICES_H_	flann/all_indices.h	31;"	d
OPENCV_FLANN_ANY_H_	flann/any.h	2;"	d
OPENCV_FLANN_AUTOTUNED_INDEX_H_	flann/autotuned_index.h	31;"	d
OPENCV_FLANN_BASE_HPP_	flann/flann_base.hpp	32;"	d
OPENCV_FLANN_COMPOSITE_INDEX_H_	flann/composite_index.h	32;"	d
OPENCV_FLANN_CONFIG_H_	flann/config.h	31;"	d
OPENCV_FLANN_DATASET_H_	flann/matrix.h	32;"	d
OPENCV_FLANN_DEFINES_H_	flann/defines.h	31;"	d
OPENCV_FLANN_DIST_H_	flann/dist.h	32;"	d
OPENCV_FLANN_DUMMY_H_	flann/dummy.h	3;"	d
OPENCV_FLANN_DYNAMIC_BITSET_H_	flann/dynamic_bitset.h	36;"	d
OPENCV_FLANN_GENERAL_H_	flann/general.h	32;"	d
OPENCV_FLANN_GROUND_TRUTH_H_	flann/ground_truth.h	32;"	d
OPENCV_FLANN_HDF5_H_	flann/hdf5.h	31;"	d
OPENCV_FLANN_HEAP_H_	flann/heap.h	32;"	d
OPENCV_FLANN_HIERARCHICAL_CLUSTERING_INDEX_H_	flann/hierarchical_clustering_index.h	32;"	d
OPENCV_FLANN_INDEX_TESTING_H_	flann/index_testing.h	32;"	d
OPENCV_FLANN_KDTREE_INDEX_H_	flann/kdtree_index.h	32;"	d
OPENCV_FLANN_KDTREE_SINGLE_INDEX_H_	flann/kdtree_single_index.h	32;"	d
OPENCV_FLANN_KMEANS_INDEX_H_	flann/kmeans_index.h	32;"	d
OPENCV_FLANN_LINEAR_INDEX_H_	flann/linear_index.h	32;"	d
OPENCV_FLANN_LOGGER_H	flann/logger.h	32;"	d
OPENCV_FLANN_LSH_INDEX_H_	flann/lsh_index.h	36;"	d
OPENCV_FLANN_LSH_TABLE_H_	flann/lsh_table.h	36;"	d
OPENCV_FLANN_NNINDEX_H	flann/nn_index.h	32;"	d
OPENCV_FLANN_OBJECT_FACTORY_H_	flann/object_factory.h	32;"	d
OPENCV_FLANN_PARAMS_H_	flann/params.h	31;"	d
OPENCV_FLANN_RANDOM_H	flann/random.h	32;"	d
OPENCV_FLANN_RESULTSET_H	flann/result_set.h	32;"	d
OPENCV_FLANN_SAMPLING_H_	flann/sampling.h	31;"	d
OPENCV_FLANN_SAVING_H_	flann/saving.h	30;"	d
OPENCV_FLANN_SIMPLEX_DOWNHILL_H_	flann/simplex_downhill.h	32;"	d
OPENCV_FLANN_TIMER_H	flann/timer.h	32;"	d
OPENCV_GPU_EMULATION_HPP_	gpu/device/emulation.hpp	44;"	d
OPENCV_GPU_IMPLEMENT_BIN_FUNCTOR	gpu/device/functional.hpp	369;"	d
OPENCV_GPU_IMPLEMENT_BIN_FUNCTOR	gpu/device/functional.hpp	412;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB5x5_TRAITS	gpu/device/color.hpp	96;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB5x5_TRAITS	gpu/device/detail/color_detail.hpp	392;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB_TRAITS	gpu/device/color.hpp	91;"	d
OPENCV_GPU_IMPLEMENT_GRAY2RGB_TRAITS	gpu/device/detail/color_detail.hpp	350;"	d
OPENCV_GPU_IMPLEMENT_HLS2RGB_TRAITS	gpu/device/color.hpp	218;"	d
OPENCV_GPU_IMPLEMENT_HLS2RGB_TRAITS	gpu/device/detail/color_detail.hpp	1505;"	d
OPENCV_GPU_IMPLEMENT_HSV2RGB_TRAITS	gpu/device/color.hpp	196;"	d
OPENCV_GPU_IMPLEMENT_HSV2RGB_TRAITS	gpu/device/detail/color_detail.hpp	1228;"	d
OPENCV_GPU_IMPLEMENT_MINMAX	gpu/device/functional.hpp	301;"	d
OPENCV_GPU_IMPLEMENT_MINMAX	gpu/device/functional.hpp	349;"	d
OPENCV_GPU_IMPLEMENT_RGB2GRAY_TRAITS	gpu/device/color.hpp	108;"	d
OPENCV_GPU_IMPLEMENT_RGB2GRAY_TRAITS	gpu/device/detail/color_detail.hpp	486;"	d
OPENCV_GPU_IMPLEMENT_RGB2HLS_TRAITS	gpu/device/color.hpp	207;"	d
OPENCV_GPU_IMPLEMENT_RGB2HLS_TRAITS	gpu/device/detail/color_detail.hpp	1363;"	d
OPENCV_GPU_IMPLEMENT_RGB2HSV_TRAITS	gpu/device/color.hpp	185;"	d
OPENCV_GPU_IMPLEMENT_RGB2HSV_TRAITS	gpu/device/detail/color_detail.hpp	1086;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB5x5_TRAITS	gpu/device/color.hpp	75;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB5x5_TRAITS	gpu/device/detail/color_detail.hpp	222;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB_TRAITS	gpu/device/color.hpp	64;"	d
OPENCV_GPU_IMPLEMENT_RGB2RGB_TRAITS	gpu/device/detail/color_detail.hpp	149;"	d
OPENCV_GPU_IMPLEMENT_RGB2XYZ_TRAITS	gpu/device/color.hpp	163;"	d
OPENCV_GPU_IMPLEMENT_RGB2XYZ_TRAITS	gpu/device/detail/color_detail.hpp	869;"	d
OPENCV_GPU_IMPLEMENT_RGB2YCrCb_TRAITS	gpu/device/color.hpp	141;"	d
OPENCV_GPU_IMPLEMENT_RGB2YCrCb_TRAITS	gpu/device/detail/color_detail.hpp	710;"	d
OPENCV_GPU_IMPLEMENT_RGB2YUV_TRAITS	gpu/device/color.hpp	119;"	d
OPENCV_GPU_IMPLEMENT_RGB2YUV_TRAITS	gpu/device/detail/color_detail.hpp	539;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52GRAY_TRAITS	gpu/device/color.hpp	101;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52GRAY_TRAITS	gpu/device/detail/color_detail.hpp	434;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52RGB_TRAITS	gpu/device/color.hpp	86;"	d
OPENCV_GPU_IMPLEMENT_RGB5x52RGB_TRAITS	gpu/device/detail/color_detail.hpp	303;"	d
OPENCV_GPU_IMPLEMENT_TYPE_VEC	gpu/device/vec_traits.hpp	125;"	d
OPENCV_GPU_IMPLEMENT_TYPE_VEC	gpu/device/vec_traits.hpp	146;"	d
OPENCV_GPU_IMPLEMENT_UN_FUNCTOR	gpu/device/functional.hpp	353;"	d
OPENCV_GPU_IMPLEMENT_UN_FUNCTOR	gpu/device/functional.hpp	410;"	d
OPENCV_GPU_IMPLEMENT_UN_FUNCTOR_NO_DOUBLE	gpu/device/functional.hpp	411;"	d
OPENCV_GPU_IMPLEMENT_VEC_BINOP	gpu/device/vec_math.hpp	196;"	d
OPENCV_GPU_IMPLEMENT_VEC_BINOP	gpu/device/vec_math.hpp	325;"	d
OPENCV_GPU_IMPLEMENT_VEC_INT_OP	gpu/device/vec_math.hpp	308;"	d
OPENCV_GPU_IMPLEMENT_VEC_INT_OP	gpu/device/vec_math.hpp	327;"	d
OPENCV_GPU_IMPLEMENT_VEC_OP	gpu/device/vec_math.hpp	266;"	d
OPENCV_GPU_IMPLEMENT_VEC_OP	gpu/device/vec_math.hpp	326;"	d
OPENCV_GPU_IMPLEMENT_VEC_TRAITS	gpu/device/vec_traits.hpp	162;"	d
OPENCV_GPU_IMPLEMENT_VEC_TRAITS	gpu/device/vec_traits.hpp	220;"	d
OPENCV_GPU_IMPLEMENT_VEC_UNOP	gpu/device/vec_math.hpp	130;"	d
OPENCV_GPU_IMPLEMENT_VEC_UNOP	gpu/device/vec_math.hpp	324;"	d
OPENCV_GPU_IMPLEMENT_XYZ2RGB_TRAITS	gpu/device/color.hpp	174;"	d
OPENCV_GPU_IMPLEMENT_XYZ2RGB_TRAITS	gpu/device/detail/color_detail.hpp	946;"	d
OPENCV_GPU_IMPLEMENT_YCrCb2RGB_TRAITS	gpu/device/color.hpp	152;"	d
OPENCV_GPU_IMPLEMENT_YCrCb2RGB_TRAITS	gpu/device/detail/color_detail.hpp	791;"	d
OPENCV_GPU_IMPLEMENT_YUV2RGB_TRAITS	gpu/device/color.hpp	130;"	d
OPENCV_GPU_IMPLEMENT_YUV2RGB_TRAITS	gpu/device/detail/color_detail.hpp	629;"	d
OPENCV_GPU_LOG_MEM_BANKS	gpu/device/utility.hpp	54;"	d
OPENCV_GPU_LOG_WARP_SIZE	gpu/device/utility.hpp	52;"	d
OPENCV_GPU_MEM_BANKS	gpu/device/utility.hpp	55;"	d
OPENCV_GPU_TRANSFORM_FUNCTOR_TRAITS	gpu/device/functional.hpp	682;"	d
OPENCV_GPU_WARP_REDUCE_HPP__	gpu/device/warp_reduce.hpp	45;"	d
OPENCV_GPU_WARP_SIZE	gpu/device/utility.hpp	53;"	d
OPENCV_RSTERR	core/core_c.h	1790;"	d
OPLandIplParvo	contrib/retina.hpp	/^            struct OPLandIplParvoParameters OPLandIplParvo;$/;"	m	struct:cv::Retina::RetinaParameters	typeref:struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
OPLandIplParvoParameters	contrib/retina.hpp	/^               OPLandIplParvoParameters():colorMode(true),$/;"	f	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
OPLandIplParvoParameters	contrib/retina.hpp	/^        struct OPLandIplParvoParameters{ \/\/ Outer Plexiform Layer (OPL) and Inner Plexiform Layer Parvocellular (IplParvo) parameters$/;"	s	struct:cv::Retina::RetinaParameters
OPTFLOW_FARNEBACK_GAUSSIAN	video/tracking.hpp	/^    OPTFLOW_FARNEBACK_GAUSSIAN = 256$/;"	e	enum:cv::__anon195
OPTFLOW_LK_GET_MIN_EIGENVALS	video/tracking.hpp	/^    OPTFLOW_LK_GET_MIN_EIGENVALS = CV_LKFLOW_GET_MIN_EIGENVALS,$/;"	e	enum:cv::__anon195
OPTFLOW_USE_INITIAL_FLOW	video/tracking.hpp	/^    OPTFLOW_USE_INITIAL_FLOW = CV_LKFLOW_INITIAL_GUESSES,$/;"	e	enum:cv::__anon195
OPTICAL_FLOW	contrib/hybridtracker.hpp	/^    enum {  SIFT = 0, SURF = 1, OPTICAL_FLOW = 2 };$/;"	e	enum:cv::CvFeatureTrackerParams::__anon16
ORB	features2d/features2d.hpp	/^class CV_EXPORTS_W ORB : public Feature2D$/;"	c	namespace:cv
ORB_GPU	gpu/gpu.hpp	/^class CV_EXPORTS ORB_GPU$/;"	c	namespace:cv::gpu
ORIG_RESOL	stitching/stitcher.hpp	/^    enum { ORIG_RESOL = -1 };$/;"	e	enum:cv::Stitcher::__anon54
OUTPUT	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
OVERSEE_TEST	ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	e	enum:testing::internal::DeathTest::TestRole
Object	contrib/detection_based_tracker.hpp	/^        typedef std::pair<cv::Rect, int> Object;$/;"	t	class:DetectionBasedTracker
ObjectDetection	objdetect/objdetect.hpp	/^    struct CV_EXPORTS ObjectDetection$/;"	s	class:cv::LatentSvmDetector
ObjectFactory	flann/object_factory.h	/^    ObjectFactory() {}$/;"	f	class:cvflann::ObjectFactory
ObjectFactory	flann/object_factory.h	/^class ObjectFactory$/;"	c	namespace:cvflann
ObjectRegistry	flann/object_factory.h	/^    typedef std::map<UniqueIdType, ObjectCreator> ObjectRegistry;$/;"	t	class:cvflann::ObjectFactory
OclCascadeClassifier	ocl/ocl.hpp	/^            OclCascadeClassifier() {};$/;"	f	class:cv::ocl::OclCascadeClassifier
OclCascadeClassifier	ocl/ocl.hpp	/^        class CV_EXPORTS_W OclCascadeClassifier : public  cv::CascadeClassifier$/;"	c	namespace:cv::ocl
Octree	contrib/contrib.hpp	/^    class CV_EXPORTS Octree$/;"	c	namespace:cv
OnEnvironmentsSetUpEnd	ts/ts_gtest.h	/^  virtual void OnEnvironmentsSetUpEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsSetUpStart	ts/ts_gtest.h	/^  virtual void OnEnvironmentsSetUpStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownEnd	ts/ts_gtest.h	/^  virtual void OnEnvironmentsTearDownEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnEnvironmentsTearDownStart	ts/ts_gtest.h	/^  virtual void OnEnvironmentsTearDownStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseEnd	ts/ts_gtest.h	/^  virtual void OnTestCaseEnd(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestCaseStart	ts/ts_gtest.h	/^  virtual void OnTestCaseStart(const TestCase& \/*test_case*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestEnd	ts/ts_gtest.h	/^  virtual void OnTestEnd(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationEnd	ts/ts_gtest.h	/^  virtual void OnTestIterationEnd(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestIterationStart	ts/ts_gtest.h	/^  virtual void OnTestIterationStart(const UnitTest& \/*unit_test*\/,$/;"	f	class:testing::EmptyTestEventListener
OnTestPartResult	ts/ts_gtest.h	/^  virtual void OnTestPartResult(const TestPartResult& \/*test_part_result*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramEnd	ts/ts_gtest.h	/^  virtual void OnTestProgramEnd(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestProgramStart	ts/ts_gtest.h	/^  virtual void OnTestProgramStart(const UnitTest& \/*unit_test*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnTestStart	ts/ts_gtest.h	/^  virtual void OnTestStart(const TestInfo& \/*test_info*\/) {}$/;"	f	class:testing::EmptyTestEventListener
OnePassStabilizer	videostab/stabilizer.hpp	/^class CV_EXPORTS OnePassStabilizer : public StabilizerBase, public IFrameSource$/;"	c	namespace:cv::videostab
OneWayDescriptor	legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptor$/;"	c	namespace:cv
OneWayDescriptorBase	legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptorBase$/;"	c	namespace:cv
OneWayDescriptorMatch	legacy/legacy.hpp	/^typedef OneWayDescriptorMatcher OneWayDescriptorMatch;$/;"	t	namespace:cv
OneWayDescriptorMatcher	legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptorMatcher : public GenericDescriptorMatcher$/;"	c	namespace:cv
OneWayDescriptorObject	legacy/legacy.hpp	/^class CV_EXPORTS OneWayDescriptorObject : public OneWayDescriptorBase$/;"	c	namespace:cv
OpUnroller	gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<1>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<2>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<3>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<4>$/;"	s	namespace:cv::gpu::device::transform_detail
OpUnroller	gpu/device/detail/transform_detail.hpp	/^        template <> struct OpUnroller<8>$/;"	s	namespace:cv::gpu::device::transform_detail
OpenGlDrawCallback	highgui/highgui.hpp	/^typedef void (*OpenGlDrawCallback)(void* userdata);$/;"	t	namespace:cv
OpponentColorDescriptorExtractor	features2d/features2d.hpp	/^class CV_EXPORTS OpponentColorDescriptorExtractor : public DescriptorExtractor$/;"	c	namespace:cv
OrbDescriptorExtractor	features2d/features2d.hpp	/^typedef ORB OrbDescriptorExtractor;$/;"	t	namespace:cv
OrbFeatureDetector	features2d/features2d.hpp	/^typedef ORB OrbFeatureDetector;$/;"	t	namespace:cv
OrbFeaturesFinder	stitching/detail/matchers.hpp	/^class CV_EXPORTS OrbFeaturesFinder : public FeaturesFinder$/;"	c	namespace:cv::detail
OrientationPair	features2d/features2d.hpp	/^    struct OrientationPair$/;"	s	class:cv::FREAK
P	contrib/contrib.hpp	/^        CvMat* P; \/\/ parameters used to evaluate function with new params$/;"	m	class:cv::LevMarqSparse
P	ml/ml.hpp	/^    enum { C=0, GAMMA=1, P=2, NU=3, COEF=4, DEGREE=5 };$/;"	e	enum:CvSVM::__anon247
P1	calib3d/calib3d.hpp	/^    CV_PROP_RW int P1;$/;"	m	class:cv::StereoSGBM
P2	calib3d/calib3d.hpp	/^    CV_PROP_RW int P2;$/;"	m	class:cv::StereoSGBM
P3P	calib3d/calib3d.hpp	/^    P3P=CV_P3P$/;"	e	enum:cv::__anon313
PATCH_HEIGHT	legacy/legacy.hpp	/^        static const int PATCH_HEIGHT = 24;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
PATCH_SIZE	features2d/features2d.hpp	/^    static const int PATCH_SIZE = 48;$/;"	m	class:cv::BriefDescriptorExtractor
PATCH_SIZE	legacy/legacy.hpp	/^        PATCH_SIZE = 31,$/;"	e	enum:cv::FernClassifier::__anon12
PATCH_SIZE	legacy/legacy.hpp	/^    static const uchar PATCH_SIZE = 32;$/;"	m	class:cv::RandomizedTree
PATCH_WIDTH	legacy/legacy.hpp	/^        static const int PATCH_WIDTH = 24;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
PENALIZATION_CHARBONNIER	contrib/contrib.hpp	/^        enum {PENALIZATION_TICHONOV, PENALIZATION_CHARBONNIER, PENALIZATION_PERONA_MALIK};$/;"	e	enum:cv::StereoVar::__anon25
PENALIZATION_PERONA_MALIK	contrib/contrib.hpp	/^        enum {PENALIZATION_TICHONOV, PENALIZATION_CHARBONNIER, PENALIZATION_PERONA_MALIK};$/;"	e	enum:cv::StereoVar::__anon25
PENALIZATION_TICHONOV	contrib/contrib.hpp	/^        enum {PENALIZATION_TICHONOV, PENALIZATION_CHARBONNIER, PENALIZATION_PERONA_MALIK};$/;"	e	enum:cv::StereoVar::__anon25
PERF_PROXY_NAMESPACE_NAME_	ts/ts_perf.hpp	378;"	d
PERF_RUN_GPU	ts/ts_perf.hpp	218;"	d
PERF_RUN_GPU	ts/ts_perf.hpp	220;"	d
PERF_TEST	ts/ts_perf.hpp	393;"	d
PERF_TESTS_LOG_TAG	ts/ts_perf.hpp	16;"	d
PERF_TEST_F	ts/ts_perf.hpp	431;"	d
PERF_TEST_P	ts/ts_perf.hpp	466;"	d
PFRAME	gpu/gpu.hpp	/^            PFRAME = 2,$/;"	e	enum:cv::gpu::VideoWriter_GPU::EncoderCallBack::PicType
PNCovariance	video/tracking.hpp	/^    float* PNCovariance;        \/* =process_noise_cov->data.fl *\/$/;"	m	struct:CvKalman
POINTS	core/opengl_interop.hpp	/^        POINTS         = 0x0000,$/;"	e	enum:cv::RenderMode::__anon219
POLY	ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon246
POLYGON	core/opengl_interop.hpp	/^        POLYGON        = 0x0009$/;"	e	enum:cv::RenderMode::__anon219
POSE_COUNT	legacy/legacy.hpp	/^        static const int POSE_COUNT = 500;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
PREFILTER_NORMALIZED_RESPONSE	calib3d/calib3d.hpp	/^    enum { PREFILTER_NORMALIZED_RESPONSE = 0, PREFILTER_XSOBEL = 1,$/;"	e	enum:cv::StereoBM::__anon318
PREFILTER_XSOBEL	calib3d/calib3d.hpp	/^    enum { PREFILTER_NORMALIZED_RESPONSE = 0, PREFILTER_XSOBEL = 1,$/;"	e	enum:cv::StereoBM::__anon318
PREFILTER_XSOBEL	gpu/gpu.hpp	/^    enum { BASIC_PRESET = 0, PREFILTER_XSOBEL = 1 };$/;"	e	enum:cv::gpu::StereoBM_GPU::__anon57
PREV_AROUND_DST	imgproc/imgproc.hpp	/^        PREV_AROUND_DST   = 0x33,$/;"	e	enum:cv::Subdiv2D::__anon286
PREV_AROUND_LEFT	imgproc/imgproc.hpp	/^        PREV_AROUND_LEFT  = 0x20,$/;"	e	enum:cv::Subdiv2D::__anon286
PREV_AROUND_ORG	imgproc/imgproc.hpp	/^        PREV_AROUND_ORG   = 0x11,$/;"	e	enum:cv::Subdiv2D::__anon286
PREV_AROUND_RIGHT	imgproc/imgproc.hpp	/^        PREV_AROUND_RIGHT = 0x02$/;"	e	enum:cv::Subdiv2D::__anon286
PROFILE_DOG	legacy/blobtrack.hpp	536;"	d
PROFILE_EPANECHNIKOV	legacy/blobtrack.hpp	535;"	d
PROJ_SPHERICAL_EQRECT	imgproc/imgproc.hpp	/^    PROJ_SPHERICAL_EQRECT = 1$/;"	e	enum:cv::__anon276
PROJ_SPHERICAL_ORTHO	imgproc/imgproc.hpp	/^    PROJ_SPHERICAL_ORTHO = 0,$/;"	e	enum:cv::__anon276
PTLOC_ERROR	imgproc/imgproc.hpp	/^        PTLOC_ERROR = -2,$/;"	e	enum:cv::Subdiv2D::__anon285
PTLOC_INSIDE	imgproc/imgproc.hpp	/^        PTLOC_INSIDE = 0,$/;"	e	enum:cv::Subdiv2D::__anon285
PTLOC_ON_EDGE	imgproc/imgproc.hpp	/^        PTLOC_ON_EDGE = 2$/;"	e	enum:cv::Subdiv2D::__anon285
PTLOC_OUTSIDE_RECT	imgproc/imgproc.hpp	/^        PTLOC_OUTSIDE_RECT = -1,$/;"	e	enum:cv::Subdiv2D::__anon285
PTLOC_VERTEX	imgproc/imgproc.hpp	/^        PTLOC_VERTEX = 1,$/;"	e	enum:cv::Subdiv2D::__anon285
P_Interval	gpu/gpu.hpp	/^        int       P_Interval;      \/\/    NVVE_P_INTERVAL,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
PairwiseSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS PairwiseSeamFinder : public SeamFinder$/;"	c	namespace:cv::detail
PaniniPortraitProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS PaniniPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
PaniniPortraitWarper	stitching/detail/warpers.hpp	/^   PaniniPortraitWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::PaniniPortraitWarper
PaniniPortraitWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS PaniniPortraitWarper : public RotationWarperBase<PaniniPortraitProjector>$/;"	c	namespace:cv::detail
PaniniPortraitWarper	stitching/warpers.hpp	/^    PaniniPortraitWarper(float A = 1, float B = 1)$/;"	f	class:cv::PaniniPortraitWarper
PaniniPortraitWarper	stitching/warpers.hpp	/^class PaniniPortraitWarper: public WarperCreator$/;"	c	namespace:cv
PaniniProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS PaniniProjector : ProjectorBase$/;"	s	namespace:cv::detail
PaniniWarper	stitching/detail/warpers.hpp	/^   PaniniWarper(float scale, float A = 1, float B = 1)$/;"	f	class:cv::detail::PaniniWarper
PaniniWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS PaniniWarper : public RotationWarperBase<PaniniProjector>$/;"	c	namespace:cv::detail
PaniniWarper	stitching/warpers.hpp	/^    PaniniWarper(float A = 1, float B = 1)$/;"	f	class:cv::PaniniWarper
PaniniWarper	stitching/warpers.hpp	/^class PaniniWarper: public WarperCreator$/;"	c	namespace:cv
ParamGenerator	ts/ts_gtest.h	/^  ParamGenerator(const ParamGenerator& other) : impl_(other.impl_) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	ts/ts_gtest.h	/^  explicit ParamGenerator(ParamGeneratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamGenerator
ParamGenerator	ts/ts_gtest.h	/^class ParamGenerator {$/;"	c	namespace:testing::internal
ParamGeneratorInterface	ts/ts_gtest.h	/^class ParamGeneratorInterface {$/;"	c	namespace:testing::internal
ParamGrid	ml/ml.hpp	/^typedef CvParamGrid ParamGrid;$/;"	t	namespace:cv
ParamIterator	ts/ts_gtest.h	/^  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	ts/ts_gtest.h	/^  explicit ParamIterator(ParamIteratorInterface<T>* impl) : impl_(impl) {}$/;"	f	class:testing::internal::ParamIterator
ParamIterator	ts/ts_gtest.h	/^class ParamIterator {$/;"	c	namespace:testing::internal
ParamIteratorInterface	ts/ts_gtest.h	/^class ParamIteratorInterface {$/;"	c	namespace:testing::internal
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator10
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator9
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator8
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator7
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator6
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4, T5> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator5
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3, T4> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator4
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2, T3> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator3
ParamType	ts/ts_gtest.h	/^  typedef ::std::tr1::tuple<T1, T2> ParamType;$/;"	t	class:testing::internal::CartesianProductGenerator2
ParamType	ts/ts_gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::WithParamInterface
ParamType	ts/ts_gtest.h	/^  typedef T ParamType;$/;"	t	class:testing::internal::ParamGeneratorInterface
ParamType	ts/ts_gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
ParamType	ts/ts_gtest.h	/^  typedef typename TestCase::ParamType ParamType;$/;"	t	class:testing::internal::TestMetaFactory
ParamType	ts/ts_gtest.h	/^  typedef typename TestClass::ParamType ParamType;$/;"	t	class:testing::internal::ParameterizedTestFactory
ParameterType	gpu/device/type_traits.hpp	/^            T, typename type_traits_detail::AddParameterType<T>::type>::type ParameterType;$/;"	t	struct:cv::gpu::device::TypeTraits
ParameterizedTestCaseInfo	ts/ts_gtest.h	/^  explicit ParameterizedTestCaseInfo(const char* name)$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
ParameterizedTestCaseInfo	ts/ts_gtest.h	/^class ParameterizedTestCaseInfo : public ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseInfoBase	ts/ts_gtest.h	/^  ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
ParameterizedTestCaseInfoBase	ts/ts_gtest.h	/^class ParameterizedTestCaseInfoBase {$/;"	c	namespace:testing::internal
ParameterizedTestCaseRegistry	ts/ts_gtest.h	/^  ParameterizedTestCaseRegistry() {}$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
ParameterizedTestCaseRegistry	ts/ts_gtest.h	/^class ParameterizedTestCaseRegistry {$/;"	c	namespace:testing::internal
ParameterizedTestFactory	ts/ts_gtest.h	/^  explicit ParameterizedTestFactory(ParamType parameter) :$/;"	f	class:testing::internal::ParameterizedTestFactory
ParameterizedTestFactory	ts/ts_gtest.h	/^class ParameterizedTestFactory : public TestFactoryBase {$/;"	c	namespace:testing::internal
Parameters	contrib/detection_based_tracker.hpp	/^        struct Parameters$/;"	s	class:DetectionBasedTracker
Params	features2d/features2d.hpp	/^  struct CV_EXPORTS_W_SIMPLE Params$/;"	s	class:cv::SimpleBlobDetector
Params	gpu/gpu.hpp	/^    struct CV_EXPORTS Params$/;"	s	class:cv::gpu::FGDStatModel
Params	legacy/legacy.hpp	/^    class CV_EXPORTS Params$/;"	c	class:cv::FernDescriptorMatcher
Params	legacy/legacy.hpp	/^    class CV_EXPORTS Params$/;"	c	class:cv::OneWayDescriptorMatcher
PartialMatch	ts/ts_gtest.h	/^  static bool PartialMatch(const ::std::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
PartialMatch	ts/ts_gtest.h	/^  static bool PartialMatch(const ::string& str, const RE& re) {$/;"	f	class:std::tr1::RE
Passed	ts/ts_gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestCase
Passed	ts/ts_gtest.h	/^  bool Passed() const { return !Failed(); }$/;"	f	class:testing::TestResult
PatchGenerator	legacy/legacy.hpp	/^class CV_EXPORTS PatchGenerator$/;"	c	namespace:cv
PatternPoint	features2d/features2d.hpp	/^    struct PatternPoint$/;"	s	class:cv::FREAK
Pbc	legacy/legacy.hpp	/^    float                 Pbc;$/;"	m	struct:CvBGPixelStat
Pbcc	legacy/legacy.hpp	/^    float                 Pbcc;$/;"	m	struct:CvBGPixelStat
PeakBitrate	gpu/gpu.hpp	/^        int       PeakBitrate;     \/\/    NVVE_PEAK_BITRATE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
PicType	gpu/gpu.hpp	/^        enum PicType$/;"	g	class:cv::gpu::VideoWriter_GPU::EncoderCallBack
PixelSize	core/wimage.hpp	/^    int PixelSize() const {return Channels() * ChannelSize(); }$/;"	f	class:cv::WImage
PixelTestFn	features2d/features2d.hpp	/^    typedef void(*PixelTestFn)(const Mat&, const vector<KeyPoint>&, Mat&);$/;"	t	class:cv::BriefDescriptorExtractor
PlanarObjectDetector	legacy/legacy.hpp	/^class CV_EXPORTS PlanarObjectDetector$/;"	c	namespace:cv
PlanePortraitProjector	stitching/detail/warpers.hpp	/^struct PlanePortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
PlanePortraitWarper	stitching/detail/warpers.hpp	/^    PlanePortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlanePortraitWarper
PlanePortraitWarper	stitching/detail/warpers.hpp	/^class PlanePortraitWarper : public RotationWarperBase<PlanePortraitProjector>$/;"	c	namespace:cv::detail
PlaneProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS PlaneProjector : ProjectorBase$/;"	s	namespace:cv::detail
PlaneWarper	stitching/detail/warpers.hpp	/^    PlaneWarper(float scale = 1.f) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlaneWarper
PlaneWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS PlaneWarper : public RotationWarperBase<PlaneProjector>$/;"	c	namespace:cv::detail
PlaneWarper	stitching/warpers.hpp	/^class PlaneWarper : public WarperCreator$/;"	c	namespace:cv
PlaneWarperGpu	stitching/detail/warpers.hpp	/^    PlaneWarperGpu(float scale = 1.f) : PlaneWarper(scale) {}$/;"	f	class:cv::detail::PlaneWarperGpu
PlaneWarperGpu	stitching/detail/warpers.hpp	/^class CV_EXPORTS PlaneWarperGpu : public PlaneWarper$/;"	c	namespace:cv::detail
PlaneWarperGpu	stitching/warpers.hpp	/^class PlaneWarperGpu: public WarperCreator$/;"	c	namespace:cv
Pnew	contrib/openfabmap.hpp	/^    double Pnew;$/;"	m	class:cv::of2::FabMap
Point3_	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_() : x(0), y(0), z(0) {}$/;"	f	class:cv::Point3_
Point3_	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(_Tp _x, _Tp _y, _Tp _z) : x(_x), y(_y), z(_z) {}$/;"	f	class:cv::Point3_
Point3_	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const CvPoint3D32f& pt) :$/;"	f	class:cv::Point3_
Point3_	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const Point3_& pt) : x(pt.x), y(pt.y), z(pt.z) {}$/;"	f	class:cv::Point3_
Point3_	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const Point_<_Tp>& pt) : x(pt.x), y(pt.y), z(_Tp()) {}$/;"	f	class:cv::Point3_
Point3_	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::Point3_(const Vec<_Tp, 3>& v) : x(v[0]), y(v[1]), z(v[2]) {}$/;"	f	class:cv::Point3_
PointFilter	gpu/device/filters.hpp	/^        explicit __host__ __device__ __forceinline__ PointFilter(const Ptr2D& src_, float fx = 0.f, float fy = 0.f)$/;"	f	struct:cv::gpu::device::PointFilter
PointFilter	gpu/device/filters.hpp	/^    template <typename Ptr2D> struct PointFilter$/;"	s	namespace:cv::gpu::device
Point_	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Point_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Point_	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_() : x(0), y(0) {}$/;"	f	class:cv::Point_
Point_	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(_Tp _x, _Tp _y) : x(_x), y(_y) {}$/;"	f	class:cv::Point_
Point_	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const CvPoint& pt) : x((_Tp)pt.x), y((_Tp)pt.y) {}$/;"	f	class:cv::Point_
Point_	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const CvPoint2D32f& pt)$/;"	f	class:cv::Point_
Point_	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const Point_& pt) : x(pt.x), y(pt.y) {}$/;"	f	class:cv::Point_
Point_	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const Size_<_Tp>& sz) : x(sz.width), y(sz.height) {}$/;"	f	class:cv::Point_
Point_	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::Point_(const Vec<_Tp,2>& v) : x(v[0]), y(v[1]) {}$/;"	f	class:cv::Point_
PointeeType	gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::PointerTraits<UnqualifiedType>::type                            PointeeType;$/;"	t	struct:cv::gpu::device::TypeTraits
PointerTraits	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits$/;"	s	namespace:cv::gpu::device::type_traits_detail
PointerTraits	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits<U*&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
PointerTraits	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct PointerTraits<U*>$/;"	s	namespace:cv::gpu::device::type_traits_detail
PooledAllocator	flann/allocator.h	/^    PooledAllocator(int blockSize = BLOCKSIZE)$/;"	f	class:cvflann::PooledAllocator
PooledAllocator	flann/allocator.h	/^class PooledAllocator$/;"	c	namespace:cvflann
PositionsVector	contrib/detection_based_tracker.hpp	/^            typedef std::vector<cv::Rect> PositionsVector;$/;"	t	struct:DetectionBasedTracker::TrackedObject
PosterErrorCovariance	video/tracking.hpp	/^    float* PosterErrorCovariance;\/* =error_cov_post->data.fl *\/$/;"	m	struct:CvKalman
PosterState	video/tracking.hpp	/^    float* PosterState;         \/* =state_pre->data.fl *\/$/;"	m	struct:CvKalman
PredVal2ReductionDispatcher	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredVal2ReductionDispatcher<false>$/;"	s	namespace:cv::gpu::device::utility_detail
PredVal2ReductionDispatcher	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredVal2ReductionDispatcher<true>$/;"	s	namespace:cv::gpu::device::utility_detail
PredVal2WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredVal2WarpReductor<16>$/;"	s	namespace:cv::gpu::device::utility_detail
PredVal2WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredVal2WarpReductor<32>$/;"	s	namespace:cv::gpu::device::utility_detail
PredVal2WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredVal2WarpReductor<64>$/;"	s	namespace:cv::gpu::device::utility_detail
PredVal2WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredVal2WarpReductor<8>$/;"	s	namespace:cv::gpu::device::utility_detail
PredValReductionDispatcher	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredValReductionDispatcher<false>$/;"	s	namespace:cv::gpu::device::utility_detail
PredValReductionDispatcher	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredValReductionDispatcher<true>$/;"	s	namespace:cv::gpu::device::utility_detail
PredValWarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredValWarpReductor<16>$/;"	s	namespace:cv::gpu::device::utility_detail
PredValWarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredValWarpReductor<32>$/;"	s	namespace:cv::gpu::device::utility_detail
PredValWarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredValWarpReductor<64>$/;"	s	namespace:cv::gpu::device::utility_detail
PredValWarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct PredValWarpReductor<8>$/;"	s	namespace:cv::gpu::device::utility_detail
Presets	gpu/gpu.hpp	/^        int       Presets;         \/\/    NVVE_PRESETS,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
Print	ts/ts_gtest.h	/^  static void Print(char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalPrinter
Print	ts/ts_gtest.h	/^  static void Print(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(const char* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(const wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
Print	ts/ts_gtest.h	/^  static void Print(wchar_t* str, ::std::ostream* os) {$/;"	f	class:testing::internal::UniversalTersePrinter
PrintPrefixTo	ts/ts_gtest.h	/^  static void PrintPrefixTo(const Tuple& t, ::std::ostream* os) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintPrefixTo	ts/ts_gtest.h	/^  static void PrintPrefixTo(const Tuple&, ::std::ostream*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
PrintRawArrayTo	ts/ts_gtest.h	/^void PrintRawArrayTo(const T a[], size_t count, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(bool x, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(char c, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::std::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::std::tr1::tuple<>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::std::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::string& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const ::wstring& s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(const unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(signed char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(unsigned char* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^inline void PrintTo(wchar_t* s, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo($/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::pair<T1, T2>& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5, T6>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4, T5>& t,$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3, T4>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2, T3>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1, T2>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const ::std::tr1::tuple<T1>& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintTo	ts/ts_gtest.h	/^void PrintTo(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintToString	ts/ts_gtest.h	/^::std::string PrintToString(const T& value) {$/;"	f	namespace:testing
PrintTupleTo	ts/ts_gtest.h	/^void PrintTupleTo(const T& t, ::std::ostream* os) {$/;"	f	namespace:testing::internal
PrintValue	ts/ts_gtest.h	/^  static void PrintValue(const T& value, ::std::ostream* os) {$/;"	f	class:testing::internal2::TypeWithoutFormatter
PriorErrorCovariance	video/tracking.hpp	/^    float* PriorErrorCovariance;\/* =error_cov_pre->data.fl *\/$/;"	m	struct:CvKalman
PriorState	video/tracking.hpp	/^    float* PriorState;          \/* =state_post->data.fl *\/$/;"	m	struct:CvKalman
ProfileLevel	gpu/gpu.hpp	/^        int       ProfileLevel;    \/\/    NVVE_PROFILE_LEVEL,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
ProjectorBase	stitching/detail/warpers.hpp	/^struct CV_EXPORTS ProjectorBase$/;"	s	namespace:cv::detail
PsGd	contrib/openfabmap.hpp	/^    double PsGd;$/;"	m	class:cv::of2::FabMapFBO
Ptr	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::Ptr() : obj(0), refcount(0) {}$/;"	f	class:cv::Ptr
Ptr	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::Ptr(_Tp* _obj) : obj(_obj)$/;"	f	class:cv::Ptr
Ptr	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::Ptr(const Ptr<_Tp>& _ptr)$/;"	f	class:cv::Ptr
Ptr	core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> Ptr<_Tp>::Ptr(const Ptr<_Tp2>& p)$/;"	f	class:cv::Ptr
PtrElemStep	core/cuda_devptrs.hpp	/^        typedef PtrElemStep_<unsigned char> PtrElemStep;$/;"	t	namespace:cv::gpu
PtrElemStep_	core/cuda_devptrs.hpp	/^            PtrElemStep_(const DevMem2D_<T>& mem) : PtrStep<T>(mem.data, mem.step)$/;"	f	struct:cv::gpu::PtrElemStep_
PtrElemStep_	core/cuda_devptrs.hpp	/^        template<typename T> struct PtrElemStep_ : public PtrStep<T>$/;"	s	namespace:cv::gpu
PtrElemStepf	core/cuda_devptrs.hpp	/^        typedef PtrElemStep_<float> PtrElemStepf;$/;"	t	namespace:cv::gpu
PtrElemStepi	core/cuda_devptrs.hpp	/^        typedef PtrElemStep_<int> PtrElemStepi;$/;"	t	namespace:cv::gpu
PtrStep	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStep() : step(0) {}$/;"	f	struct:cv::gpu::PtrStep
PtrStep	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStep(T* data_, size_t step_) : DevPtr<T>(data_), step(step_) {}$/;"	f	struct:cv::gpu::PtrStep
PtrStep	core/cuda_devptrs.hpp	/^        template<typename T> struct PtrStep : public DevPtr<T>$/;"	s	namespace:cv::gpu
PtrStepSz	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStepSz() : cols(0), rows(0) {}$/;"	f	struct:cv::gpu::PtrStepSz
PtrStepSz	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrStepSz(int rows_, int cols_, T* data_, size_t step_)$/;"	f	struct:cv::gpu::PtrStepSz
PtrStepSz	core/cuda_devptrs.hpp	/^            explicit PtrStepSz(const PtrStepSz<U>& d) : PtrStep<T>((T*)d.data, d.step), cols(d.cols), rows(d.rows){}$/;"	f	struct:cv::gpu::PtrStepSz
PtrStepSz	core/cuda_devptrs.hpp	/^        template <typename T> struct PtrStepSz : public PtrStep<T>$/;"	s	namespace:cv::gpu
PtrStepSzb	core/cuda_devptrs.hpp	/^        typedef PtrStepSz<unsigned char> PtrStepSzb;$/;"	t	namespace:cv::gpu
PtrStepSzf	core/cuda_devptrs.hpp	/^        typedef PtrStepSz<float> PtrStepSzf;$/;"	t	namespace:cv::gpu
PtrStepSzi	core/cuda_devptrs.hpp	/^        typedef PtrStepSz<int> PtrStepSzi;$/;"	t	namespace:cv::gpu
PtrStep_	core/cuda_devptrs.hpp	/^            PtrStep_() {}$/;"	f	struct:cv::gpu::PtrStep_
PtrStep_	core/cuda_devptrs.hpp	/^            PtrStep_(const DevMem2D_<T>& mem) : PtrStep<T>(mem.data, mem.step) {}$/;"	f	struct:cv::gpu::PtrStep_
PtrStep_	core/cuda_devptrs.hpp	/^        template<typename T> struct PtrStep_ : public PtrStep<T>$/;"	s	namespace:cv::gpu
PtrStepb	core/cuda_devptrs.hpp	/^        typedef PtrStep<unsigned char> PtrStepb;$/;"	t	namespace:cv::gpu
PtrStepf	core/cuda_devptrs.hpp	/^        typedef PtrStep<float> PtrStepf;$/;"	t	namespace:cv::gpu
PtrStepi	core/cuda_devptrs.hpp	/^        typedef PtrStep<int> PtrStepi;$/;"	t	namespace:cv::gpu
PtrSz	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrSz() : size(0) {}$/;"	f	struct:cv::gpu::PtrSz
PtrSz	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ PtrSz(T* data_, size_t size_) : DevPtr<T>(data_), size(size_) {}$/;"	f	struct:cv::gpu::PtrSz
PtrSz	core/cuda_devptrs.hpp	/^        template<typename T> struct PtrSz : public DevPtr<T>$/;"	s	namespace:cv::gpu
Pv	legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable
Pv	legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable
Pvb	legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable
Pvb	legacy/legacy.hpp	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable
PyrLKOpticalFlow	gpu/gpu.hpp	/^    PyrLKOpticalFlow()$/;"	f	class:cv::gpu::PyrLKOpticalFlow
PyrLKOpticalFlow	gpu/gpu.hpp	/^class CV_EXPORTS PyrLKOpticalFlow$/;"	c	namespace:cv::gpu
PyrLKOpticalFlow	ocl/ocl.hpp	/^            PyrLKOpticalFlow()$/;"	f	class:cv::ocl::PyrLKOpticalFlow
PyrLKOpticalFlow	ocl/ocl.hpp	/^        class CV_EXPORTS PyrLKOpticalFlow$/;"	c	namespace:cv::ocl
PyrLkOptFlowEstimatorBase	videostab/optical_flow.hpp	/^    PyrLkOptFlowEstimatorBase() { setWinSize(Size(21, 21)); setMaxLevel(3); }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
PyrLkOptFlowEstimatorBase	videostab/optical_flow.hpp	/^class CV_EXPORTS PyrLkOptFlowEstimatorBase$/;"	c	namespace:cv::videostab
PyrLkRobustMotionEstimator	videostab/global_motion.hpp	/^class CV_EXPORTS PyrLkRobustMotionEstimator : public IGlobalMotionEstimator$/;"	c	namespace:cv::videostab
PyramidAdaptedFeatureDetector	features2d/features2d.hpp	/^class CV_EXPORTS_W PyramidAdaptedFeatureDetector : public FeatureDetector$/;"	c	namespace:cv
PzGL	contrib/openfabmap.hpp	/^    double (FabMap::*PzGL)(int q, bool zq, bool zpq, bool Lzq);$/;"	m	class:cv::of2::FabMap
PzGNe	contrib/openfabmap.hpp	/^    double PzGNe;$/;"	m	class:cv::of2::FabMap
PzGe	contrib/openfabmap.hpp	/^    double PzGe;$/;"	m	class:cv::of2::FabMap
QP_Level_InterB	gpu/gpu.hpp	/^        int       QP_Level_InterB; \/\/    NVVE_QP_LEVEL_INTER_B,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
QP_Level_InterP	gpu/gpu.hpp	/^        int       QP_Level_InterP; \/\/    NVVE_QP_LEVEL_INTER_P,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
QP_Level_Intra	gpu/gpu.hpp	/^        int       QP_Level_Intra;  \/\/    NVVE_QP_LEVEL_INTRA,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
QUADS	core/opengl_interop.hpp	/^        QUADS          = 0x0007,$/;"	e	enum:cv::RenderMode::__anon219
QUAD_STRIP	core/opengl_interop.hpp	/^        QUAD_STRIP     = 0x0008,$/;"	e	enum:cv::RenderMode::__anon219
QuadEdge	imgproc/imgproc.hpp	/^    struct CV_EXPORTS QuadEdge$/;"	s	class:cv::Subdiv2D
QuantizedPyramid	objdetect/objdetect.hpp	/^class QuantizedPyramid$/;"	c	namespace:cv::linemod
R	contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
R	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
R	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
R	stitching/detail/camera.hpp	/^    Mat R; \/\/ Rotation$/;"	m	struct:cv::detail::CameraParams
R2Y	gpu/device/detail/color_detail.hpp	/^            R2Y        = 4899,$/;"	e	enum:cv::gpu::device::color_detail::__anon96
RAND_DIM	flann/kdtree_index.h	/^        RAND_DIM=5$/;"	e	enum:cvflann::KDTreeIndex::__anon196
RANSAC	calib3d/calib3d.hpp	/^    RANSAC=CV_RANSAC \/\/!< RANSAC algorithm$/;"	e	enum:cv::__anon312
RBF	ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon246
RCType	gpu/gpu.hpp	/^        int       RCType;          \/\/    NVVE_RC_TYPE,$/;"	m	struct:cv::gpu::VideoWriter_GPU::EncoderParams
RE	ts/ts_gtest.h	/^  RE(const ::std::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^  RE(const ::string& regex) { Init(regex.c_str()); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^  RE(const RE& other) { Init(other.pattern()); }$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^  RE(const char* regex) { Init(regex); }  \/\/ NOLINT$/;"	f	class:std::tr1::RE
RE	ts/ts_gtest.h	/^class GTEST_API_ RE {$/;"	c	namespace:std::tr1
REAL	ml/ml.hpp	/^    enum { DISCRETE=0, REAL=1, LOGIT=2, GENTLE=3 };$/;"	e	enum:CvBoost::__anon253
RECT	legacy/blobtrack.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon5
REF_INPUT_OUTPUT	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
REF_OUTPUT	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
REGISTER_TYPED_TEST_CASE_P	ts/ts_gtest.h	17586;"	d
RESPONSE_ROW	gpu/gpu.hpp	/^        RESPONSE_ROW,$/;"	e	enum:cv::gpu::FAST_GPU::__anon72
RESPONSE_ROW	gpu/gpu.hpp	/^        RESPONSE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon73
RETINA_COLORSAMPLINGMETHOD	contrib/retina.hpp	/^enum RETINA_COLORSAMPLINGMETHOD$/;"	g	namespace:cv
RETINA_COLOR_BAYER	contrib/retina.hpp	/^    RETINA_COLOR_BAYER\/\/!< standard bayer sampling$/;"	e	enum:cv::RETINA_COLORSAMPLINGMETHOD
RETINA_COLOR_DIAGONAL	contrib/retina.hpp	/^    RETINA_COLOR_DIAGONAL,\/\/!< color sampling is RGBRGBRGB..., line 2 BRGBRGBRG..., line 3, GBRGBRGBR...$/;"	e	enum:cv::RETINA_COLORSAMPLINGMETHOD
RETINA_COLOR_RANDOM	contrib/retina.hpp	/^    RETINA_COLOR_RANDOM, \/\/!< each pixel position is either R, G or B in a random choice$/;"	e	enum:cv::RETINA_COLORSAMPLINGMETHOD
RETR_CCOMP	imgproc/imgproc.hpp	/^    RETR_CCOMP=CV_RETR_CCOMP, \/\/!< retrieve the connected components (that can possibly be nested)$/;"	e	enum:cv::__anon283
RETR_EXTERNAL	imgproc/imgproc.hpp	/^    RETR_EXTERNAL=CV_RETR_EXTERNAL, \/\/!< retrieve only the most external (top-level) contours$/;"	e	enum:cv::__anon283
RETR_FLOODFILL	imgproc/imgproc.hpp	/^    RETR_FLOODFILL=CV_RETR_FLOODFILL$/;"	e	enum:cv::__anon283
RETR_LIST	imgproc/imgproc.hpp	/^    RETR_LIST=CV_RETR_LIST, \/\/!< retrieve all the contours without any hierarchical information$/;"	e	enum:cv::__anon283
RETR_TREE	imgproc/imgproc.hpp	/^    RETR_TREE=CV_RETR_TREE, \/\/!< retrieve all the contours and the whole hierarchy$/;"	e	enum:cv::__anon283
RGB2Gray	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray() : unary_function<typename TypeVec<T, scn>::vec_type, T>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray() : unary_function<uint, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray(const RGB2Gray& other_) : unary_function<uint, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2Gray(const RGB2Gray& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
RGB2Gray	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB2Gray<uchar, 4, bidx> : unary_function<uint, uchar>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2Gray	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int bidx> struct RGB2Gray : unary_function<typename TypeVec<T, scn>::vec_type, T>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2GrayConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ T RGB2GrayConvert(const T* src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2GrayConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ float RGB2GrayConvert(const float* src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2GrayConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uchar RGB2GrayConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HLS	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS()$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS(const RGB2HLS& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HLS(const RGB2HLS& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
RGB2HLS	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct RGB2HLS<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HLS	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct RGB2HLS$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HLSConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HLSConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HLSConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HLSConvert(const uchar* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HLSConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint RGB2HLSConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HSV	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV()$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV():unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV(const RGB2HSV& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2HSV(const RGB2HSV& other_):unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
RGB2HSV	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> struct RGB2HSV<uchar, 4, 4, bidx, hr> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HSV	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx, int hr> struct RGB2HSV$/;"	s	namespace:cv::gpu::device::color_detail
RGB2HSVConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HSVConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HSVConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr, typename D> static __device__ void RGB2HSVConvert(const uchar* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2HSVConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int hr> static __device__ uint RGB2HSVConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB()$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB():unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB(const RGB2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB(const RGB2RGB& other_):unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
RGB2RGB	gpu/device/detail/color_detail.hpp	/^        template <> struct RGB2RGB<uchar, 4, 4, 2> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2RGB$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5():unary_function<uchar3, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5():unary_function<uint, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5(const RGB2RGB5x5& other_):unary_function<uchar3, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2RGB5x5(const RGB2RGB5x5& other_):unary_function<uint, ushort>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
RGB2RGB5x5	gpu/device/detail/color_detail.hpp	/^        template<int bidx, int green_bits> struct RGB2RGB5x5<3, bidx,green_bits> : unary_function<uchar3, ushort>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5	gpu/device/detail/color_detail.hpp	/^        template<int bidx, int green_bits> struct RGB2RGB5x5<4, bidx,green_bits> : unary_function<uint, ushort>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5Converter	gpu/device/detail/color_detail.hpp	/^        template<int bidx> struct RGB2RGB5x5Converter<5, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2RGB5x5Converter	gpu/device/detail/color_detail.hpp	/^        template<int bidx> struct RGB2RGB5x5Converter<6, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2XYZ	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ()$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ(const RGB2XYZ& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2XYZ(const RGB2XYZ& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
RGB2XYZ	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB2XYZ<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2XYZ	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2XYZ$/;"	s	namespace:cv::gpu::device::color_detail
RGB2XYZConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2XYZConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2XYZConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ __forceinline__ void RGB2XYZConvert(const T* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2XYZConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uint RGB2XYZConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YCrCb	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb()$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb(const RGB2YCrCb& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YCrCb(const RGB2YCrCb& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
RGB2YCrCb	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB2YCrCb<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB2YCrCb	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2YCrCb$/;"	s	namespace:cv::gpu::device::color_detail
RGB2YCrCbConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2YCrCbConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YCrCbConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void RGB2YCrCbConvert(const T* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YCrCbConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint RGB2YCrCbConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YUV	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YUV()$/;"	f	struct:cv::gpu::device::color_detail::RGB2YUV
RGB2YUV	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB2YUV(const RGB2YUV& other_)$/;"	f	struct:cv::gpu::device::color_detail::RGB2YUV
RGB2YUV	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct RGB2YUV$/;"	s	namespace:cv::gpu::device::color_detail
RGB2YUVConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename D> static __device__ __forceinline__ void RGB2YUVConvert(const float* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB2YUVConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void RGB2YUVConvert(const T* src, D& dst)$/;"	f	namespace:cv::gpu::device::color_detail
RGB5x52Gray	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52Gray() : unary_function<ushort, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52Gray
RGB5x52Gray	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52Gray(const RGB5x52Gray& other_) : unary_function<ushort, uchar>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52Gray
RGB5x52Gray	gpu/device/detail/color_detail.hpp	/^        template<int green_bits> struct RGB5x52Gray : unary_function<ushort, uchar>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52GrayConverter	gpu/device/detail/color_detail.hpp	/^        template <> struct RGB5x52GrayConverter<5>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52GrayConverter	gpu/device/detail/color_detail.hpp	/^        template <> struct RGB5x52GrayConverter<6>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB():unary_function<ushort, uchar3>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB():unary_function<ushort, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB(const RGB5x52RGB& other_):unary_function<ushort, uchar3>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ RGB5x52RGB(const RGB5x52RGB& other_):unary_function<ushort, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
RGB5x52RGB	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int green_bits> struct RGB5x52RGB<3, bidx, green_bits> : unary_function<ushort, uchar3>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGB	gpu/device/detail/color_detail.hpp	/^        template <int bidx, int green_bits> struct RGB5x52RGB<4, bidx, green_bits> : unary_function<ushort, uint>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGBConverter	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB5x52RGBConverter<5, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RGB5x52RGBConverter	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct RGB5x52RGBConverter<6, bidx>$/;"	s	namespace:cv::gpu::device::color_detail
RIGID_BODY_MOTION	contrib/contrib.hpp	/^           RIGID_BODY_MOTION = 4$/;"	e	enum:cv::__anon26
RNG	core/operations.hpp	/^inline RNG::RNG() { state = 0xffffffff; }$/;"	f	class:cv::RNG
RNG	core/operations.hpp	/^inline RNG::RNG(uint64 _state) { state = _state ? _state : 0xffffffff; }$/;"	f	class:cv::RNG
ROTATION	contrib/contrib.hpp	/^    enum { ROTATION          = 1,$/;"	e	enum:cv::__anon26
ROWS_COUNT	gpu/gpu.hpp	/^        ROWS_COUNT$/;"	e	enum:cv::gpu::FAST_GPU::__anon72
ROWS_COUNT	gpu/gpu.hpp	/^        ROWS_COUNT$/;"	e	enum:cv::gpu::ORB_GPU::__anon73
ROWS_COUNT	gpu/gpu.hpp	/^        ROWS_COUNT$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
ROWS_COUNT	ocl/ocl.hpp	/^                ROWS_COUNT$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
RPROP	ml/ml.hpp	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon256
RTTIImpl	core/operations.hpp	/^template<typename _ClsName> struct CV_EXPORTS RTTIImpl$/;"	s	namespace:cv
RTreeClassifier	legacy/legacy.hpp	/^class CV_EXPORTS RTreeClassifier$/;"	c	namespace:cv
RTreeNode	legacy/legacy.hpp	/^    RTreeNode() {}$/;"	f	struct:cv::RTreeNode
RTreeNode	legacy/legacy.hpp	/^    RTreeNode(uchar x1, uchar y1, uchar x2, uchar y2)$/;"	f	struct:cv::RTreeNode
RTreeNode	legacy/legacy.hpp	/^struct CV_EXPORTS RTreeNode$/;"	s	namespace:cv
RUN_ALL_TESTS	ts/ts_gtest.h	20128;"	d
R_	gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
RadiusResultSet	flann/result_set.h	/^    RadiusResultSet(DistanceType radius_, int* indices_, DistanceType* dists_, int capacity_) :$/;"	f	class:cvflann::RadiusResultSet
RadiusResultSet	flann/result_set.h	/^class RadiusResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
RadiusUniqueResultSet	flann/result_set.h	/^    RadiusUniqueResultSet(DistanceType radius) :$/;"	f	class:cvflann::RadiusUniqueResultSet
RadiusUniqueResultSet	flann/result_set.h	/^class RadiusUniqueResultSet : public UniqueResultSet<DistanceType>$/;"	c	namespace:cvflann
RandS	legacy/legacy.hpp	/^    struct CvRandState* RandS; \/* Array of structures to generate random vectors *\/$/;"	m	struct:CvConDensation	typeref:struct:CvConDensation::CvRandState
Random	ts/ts_gtest.h	/^  explicit Random(UInt32 seed) : state_(seed) {}$/;"	f	class:testing::internal::Random
Random	ts/ts_gtest.h	/^class GTEST_API_ Random {$/;"	c	namespace:testing::internal
RandomSample	legacy/legacy.hpp	/^    float* RandomSample;    \/* RandomVector to update sample set     *\/$/;"	m	struct:CvConDensation
RandomTreeParams	ml/ml.hpp	/^typedef CvRTParams RandomTreeParams;$/;"	t	namespace:cv
RandomTrees	ml/ml.hpp	/^typedef CvRTrees RandomTrees;$/;"	t	namespace:cv
RandomizedTree	legacy/legacy.hpp	/^class CV_EXPORTS RandomizedTree$/;"	c	namespace:cv
Range	core/operations.hpp	/^inline Range::Range() : start(0), end(0) {}$/;"	f	class:cv::Range
Range	core/operations.hpp	/^inline Range::Range(const CvSlice& slice) : start(slice.start_index), end(slice.end_index)$/;"	f	class:cv::Range
Range	core/operations.hpp	/^inline Range::Range(int _start, int _end) : start(_start), end(_end) {}$/;"	f	class:cv::Range
Range	ts/ts_gtest.h	/^internal::ParamGenerator<T> Range(T start, T end) {$/;"	f	namespace:testing
Range	ts/ts_gtest.h	/^internal::ParamGenerator<T> Range(T start, T end, IncrementT step) {$/;"	f	namespace:testing
RangeGenerator	ts/ts_gtest.h	/^  RangeGenerator(T begin, T end, IncrementT step)$/;"	f	class:testing::internal::RangeGenerator
RangeGenerator	ts/ts_gtest.h	/^class RangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
RansacParams	videostab/global_motion.hpp	/^    RansacParams(int _size, float _thresh, float _eps, float _prob)$/;"	f	struct:cv::videostab::RansacParams
RansacParams	videostab/global_motion.hpp	/^struct CV_EXPORTS RansacParams$/;"	s	namespace:cv::videostab
Read	ts/ts_gtest.h	/^inline int Read(int fd, void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
RectLess	ts/ts_perf.hpp	/^typedef RectLess_<int> RectLess;$/;"	t	namespace:perf::comparators
RectLess_	ts/ts_perf.hpp	/^struct CV_EXPORTS RectLess_$/;"	s	namespace:perf::comparators
Rect_	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Rect_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Rect_	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_() : x(0), y(0), width(0), height(0) {}$/;"	f	class:cv::Rect_
Rect_	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(_Tp _x, _Tp _y, _Tp _width, _Tp _height) : x(_x), y(_y), width(_width), height(_height) {}$/;"	f	class:cv::Rect_
Rect_	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const CvRect& r) : x((_Tp)r.x), y((_Tp)r.y), width((_Tp)r.width), height((_Tp)r.height) {}$/;"	f	class:cv::Rect_
Rect_	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const Point_<_Tp>& org, const Size_<_Tp>& sz) :$/;"	f	class:cv::Rect_
Rect_	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const Point_<_Tp>& pt1, const Point_<_Tp>& pt2)$/;"	f	class:cv::Rect_
Rect_	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::Rect_(const Rect_<_Tp>& r) : x(r.x), y(r.y), width(r.width), height(r.height) {}$/;"	f	class:cv::Rect_
ReductionDispatcher	gpu/device/detail/reduction_detail.hpp	/^        template <> struct ReductionDispatcher<false>$/;"	s	namespace:cv::gpu::device::utility_detail
ReductionDispatcher	gpu/device/detail/reduction_detail.hpp	/^        template <> struct ReductionDispatcher<true>$/;"	s	namespace:cv::gpu::device::utility_detail
ReferenceTraits	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct ReferenceTraits$/;"	s	namespace:cv::gpu::device::type_traits_detail
ReferenceTraits	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct ReferenceTraits<U&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
ReferredType	gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::ReferenceTraits<T>::type                                        ReferredType;$/;"	t	struct:cv::gpu::device::TypeTraits
Register	ts/ts_gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	ts/ts_gtest.h	/^  static bool Register(const char* \/*prefix*\/, const char* \/*case_name*\/,$/;"	f	class:testing::internal::TypeParameterizedTestCase
Register	ts/ts_gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTest
Register	ts/ts_gtest.h	/^  static bool Register(const char* prefix, const char* case_name,$/;"	f	class:testing::internal::TypeParameterizedTestCase
RegisterTests	ts/ts_gtest.h	/^  virtual void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseInfo
RegisterTests	ts/ts_gtest.h	/^  void RegisterTests() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
Regression	ts/ts_perf.hpp	/^class CV_EXPORTS Regression$/;"	c	namespace:perf
ReinterpretBits	ts/ts_gtest.h	/^  static RawType ReinterpretBits(const Bits bits) {$/;"	f	class:testing::internal::FloatingPoint
RelationToSource	ts/ts_gtest.h	/^enum RelationToSource {$/;"	g	namespace:testing::internal
ReleaseImage	core/wimage.hpp	/^    void ReleaseImage() {$/;"	f	class:cv::WImageBuffer
ReleaseImage	core/wimage.hpp	/^    void ReleaseImage() {$/;"	f	class:cv::WImageBufferC
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst<T[N]> {$/;"	s	namespace:testing::internal
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveConst	ts/ts_gtest.h	/^struct RemoveConst<const T[N]> {$/;"	s	namespace:testing::internal
RemoveReference	ts/ts_gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RemoveReference	ts/ts_gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	s	namespace:testing::internal
RenderMode	core/opengl_interop.hpp	/^namespace RenderMode {$/;"	n	namespace:cv
Reseed	ts/ts_gtest.h	/^  void Reseed(UInt32 seed) { state_ = seed; }$/;"	f	class:testing::internal::Random
ResizeMethod	contrib/contrib.hpp	/^    enum ResizeMethod {$/;"	g	class:CvFuzzyMeanShiftTracker
ResultSet	flann/result_set.h	/^class ResultSet$/;"	c	namespace:cvflann
ResultType	features2d/features2d.hpp	/^    typedef int ResultType;$/;"	t	struct:cv::Hamming
ResultType	features2d/features2d.hpp	/^    typedef int ResultType;$/;"	t	struct:cv::HammingMultilevel
ResultType	features2d/features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::L1
ResultType	features2d/features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::L2
ResultType	features2d/features2d.hpp	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::SL2
ResultType	flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::Hamming
ResultType	flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::Hamming2
ResultType	flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::HammingLUT
ResultType	flann/dist.h	/^    typedef int ResultType;$/;"	t	struct:cvflann::HammingLUT2
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::ChiSquareDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::HellingerDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::HistIntersectionDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::KL_Divergence
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L1
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L2
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::L2_Simple
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::MaxDistance
ResultType	flann/dist.h	/^    typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cvflann::MinkowskiDistance
ResultType	ocl/ocl.hpp	/^            typedef int ResultType;$/;"	t	struct:cv::ocl::Hamming
ResultType	ocl/ocl.hpp	/^            typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::ocl::L1
ResultType	ocl/ocl.hpp	/^            typedef typename Accumulator<T>::Type ResultType;$/;"	t	struct:cv::ocl::L2
Retina	contrib/retina.hpp	/^class CV_EXPORTS Retina {$/;"	c	namespace:cv
RetinaParameters	contrib/retina.hpp	/^        struct RetinaParameters{$/;"	s	class:cv::Retina
ReturnSentinel	ts/ts_gtest.h	/^    explicit ReturnSentinel(DeathTest* test) : test_(test) { }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
ReturnSentinel	ts/ts_gtest.h	/^  class ReturnSentinel {$/;"	c	class:testing::internal::DeathTest
RightEyeRect	legacy/legacy.hpp	/^    CvRect RightEyeRect;$/;"	m	struct:CvFace
RmDir	ts/ts_gtest.h	/^inline int RmDir(const char* dir) { return _rmdir(dir); }$/;"	f	namespace:std::tr1::posix
RotatedRect	core/operations.hpp	/^inline RotatedRect::RotatedRect() { angle = 0; }$/;"	f	class:cv::RotatedRect
RotatedRect	core/operations.hpp	/^inline RotatedRect::RotatedRect(const CvBox2D& box)$/;"	f	class:cv::RotatedRect
RotatedRect	core/operations.hpp	/^inline RotatedRect::RotatedRect(const Point2f& _center, const Size2f& _size, float _angle)$/;"	f	class:cv::RotatedRect
RotationWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS RotationWarper$/;"	c	namespace:cv::detail
RotationWarperBase	stitching/detail/warpers.hpp	/^class CV_EXPORTS RotationWarperBase : public RotationWarper$/;"	c	namespace:cv::detail
Row	core/wimage.hpp	/^    inline T* Row(int r) {$/;"	f	class:cv::WImage
Row	core/wimage.hpp	/^    inline const T* Row(int r) const {$/;"	f	class:cv::WImage
Rsr	contrib/contrib.hpp	/^        vector<int> Rsr;$/;"	m	class:cv::LogPolar_Overlapping
Rsri	contrib/contrib.hpp	/^        Mat Rsri;$/;"	m	class:cv::LogPolar_Interp
Rsri	contrib/contrib.hpp	/^        Mat Rsri;$/;"	m	class:cv::LogPolar_Overlapping
Run	ts/ts_gtest.h	/^  virtual void Run() {$/;"	f	class:std::tr1::ThreadWithParam
RunSetUpTestCase	ts/ts_gtest.h	/^  void RunSetUpTestCase() { (*set_up_tc_)(); }$/;"	f	class:testing::TestCase
RunTearDownTestCase	ts/ts_gtest.h	/^  void RunTearDownTestCase() { (*tear_down_tc_)(); }$/;"	f	class:testing::TestCase
S	contrib/contrib.hpp	/^        CvMat* S; \/\/big matrix of block Sjk  , each block has size num_cam_params x num_cam_params$/;"	m	class:cv::LevMarqSparse
S	contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
S	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Adjacent
S	contrib/contrib.hpp	/^        int S, R, M, N;$/;"	m	class:cv::LogPolar_Interp
SADWindowSize	calib3d/calib3d.hpp	/^    CV_PROP_RW int SADWindowSize;$/;"	m	class:cv::StereoSGBM
SADWindowSize	calib3d/calib3d.hpp	/^    int SADWindowSize; \/\/ ~5x5..21x21$/;"	m	struct:CvStereoBMState
SAMPLED	contrib/openfabmap.hpp	/^        SAMPLED = 2,$/;"	e	enum:cv::of2::FabMap::__anon13
SAMPLE_MEAN	flann/kdtree_index.h	/^        SAMPLE_MEAN = 100,$/;"	e	enum:cvflann::KDTreeIndex::__anon196
SANITY_CHECK	ts/ts_perf.hpp	207;"	d
SANITY_CHECK_KEYPOINTS	ts/ts_perf.hpp	208;"	d
SANITY_CHECK_MATCHES	ts/ts_perf.hpp	209;"	d
SAVED	flann/defines.h	/^    SAVED = 254,$/;"	e	enum:cvflann::flann_algorithm_t
SCALE_IMAGE	objdetect/objdetect.hpp	/^    enum { DO_CANNY_PRUNING = 1, SCALE_IMAGE = 2,$/;"	e	enum:cv::CascadeClassifier::__anon231
SCOPED_TRACE	ts/ts_gtest.h	20017;"	d
SECOND	stitching/detail/seam_finders.hpp	/^        FIRST = 1, SECOND = 2, INTERS = 4,$/;"	e	enum:cv::detail::DpSeamFinder::ComponentState
SF_BGR	gpu/gpu.hpp	/^        SF_BGR,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_GRAY	gpu/gpu.hpp	/^        SF_GRAY = SF_BGR$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_IYUV	gpu/gpu.hpp	/^        SF_IYUV,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_NV12	gpu/gpu.hpp	/^        SF_NV12,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_UYVY	gpu/gpu.hpp	/^        SF_UYVY = 0,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_YUY2	gpu/gpu.hpp	/^        SF_YUY2,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SF_YV12	gpu/gpu.hpp	/^        SF_YV12,$/;"	e	enum:cv::gpu::VideoWriter_GPU::SurfaceFormat
SHARED_ATOMICS	core/gpumat.hpp	/^        SHARED_ATOMICS = FEATURE_SET_COMPUTE_12,$/;"	e	enum:cv::gpu::FeatureSet
SIFT	contrib/hybridtracker.hpp	/^    enum {  SIFT = 0, SURF = 1, OPTICAL_FLOW = 2 };$/;"	e	enum:cv::CvFeatureTrackerParams::__anon16
SIFT	nonfree/features2d.hpp	/^class CV_EXPORTS_W SIFT : public Feature2D$/;"	c	namespace:cv
SIGMOID	ml/ml.hpp	/^    enum { LINEAR=0, POLY=1, RBF=2, SIGMOID=3 };$/;"	e	enum:CvSVM::__anon246
SIGMOID_SYM	ml/ml.hpp	/^    enum { IDENTITY = 0, SIGMOID_SYM = 1, GAUSSIAN = 2 };$/;"	e	enum:CvANN_MLP::__anon257
SIZE_ROW	gpu/gpu.hpp	/^        SIZE_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon73
SIZE_ROW	gpu/gpu.hpp	/^        SIZE_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
SIZE_ROW	ocl/ocl.hpp	/^                SIZE_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
SKIPPED	ts/ts.hpp	/^        SKIPPED=1$/;"	e	enum:cvtest::TS::__anon191
SL2	features2d/features2d.hpp	/^struct CV_EXPORTS SL2$/;"	s	namespace:cv
SMALL_POLICY	flann/any.h	135;"	d
SMALL_POLICY	flann/any.h	151;"	d
SQERR	ml/ml.hpp	/^    enum { DEFAULT=0, GINI=1, MISCLASS=3, SQERR=4 };$/;"	e	enum:CvBoost::__anon254
SQUARED_LOSS	ml/ml.hpp	/^    enum {SQUARED_LOSS=0, ABSOLUTE_LOSS, HUBER_LOSS=3, DEVIANCE_LOSS};$/;"	e	enum:CvGBTrees::__anon255
STARTED	calib3d/calib3d.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon311
START_AUTO_STEP	legacy/legacy.hpp	/^           START_AUTO_STEP=cv::EM::START_AUTO_STEP };$/;"	e	enum:CvEM::__anon11
START_AUTO_STEP	ml/ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::EM::__anon250
START_E_STEP	legacy/legacy.hpp	/^    enum { START_E_STEP=cv::EM::START_E_STEP,$/;"	e	enum:CvEM::__anon11
START_E_STEP	ml/ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::EM::__anon250
START_M_STEP	legacy/legacy.hpp	/^           START_M_STEP=cv::EM::START_M_STEP,$/;"	e	enum:CvEM::__anon11
START_M_STEP	ml/ml.hpp	/^    enum {START_E_STEP=1, START_M_STEP=2, START_AUTO_STEP=0};$/;"	e	enum:cv::EM::__anon250
STRIDE	gpu/device/warp.hpp	/^            STRIDE        = WARP_SIZE$/;"	e	enum:cv::gpu::device::Warp::__anon76
STYLE_ITALIC	core/opengl_interop.hpp	/^        STYLE_ITALIC    = 1,$/;"	e	enum:cv::GlFont::Style
STYLE_NORMAL	core/opengl_interop.hpp	/^        STYLE_NORMAL    = 0,$/;"	e	enum:cv::GlFont::Style
STYLE_UNDERLINE	core/opengl_interop.hpp	/^        STYLE_UNDERLINE = 2$/;"	e	enum:cv::GlFont::Style
SUCCEED	ts/ts_gtest.h	19376;"	d
SUMMARY	ts/ts.hpp	/^        SUMMARY=1 << SUMMARY_IDX,$/;"	e	enum:cvtest::TS::__anon190
SUMMARY_IDX	ts/ts.hpp	/^        SUMMARY_IDX=0,$/;"	e	enum:cvtest::TS::__anon190
SURF	contrib/hybridtracker.hpp	/^    enum {  SIFT = 0, SURF = 1, OPTICAL_FLOW = 2 };$/;"	e	enum:cv::CvFeatureTrackerParams::__anon16
SURF	nonfree/features2d.hpp	/^class CV_EXPORTS_W SURF : public Feature2D$/;"	c	namespace:cv
SURF_GPU	gpu/gpu.hpp	/^class CV_EXPORTS SURF_GPU$/;"	c	namespace:cv::gpu
SURF_OCL	ocl/ocl.hpp	/^        class CV_EXPORTS SURF_OCL$/;"	c	namespace:cv::ocl
SVD	core/mat.hpp	/^inline SVD::SVD( InputArray m, int flags ) { operator ()(m, flags); }$/;"	f	class:cv::SVD
SVD	core/mat.hpp	/^inline SVD::SVD() {}$/;"	f	class:cv::SVD
SVM	ml/ml.hpp	/^typedef CvSVM SVM;$/;"	t	namespace:cv
SVMKernel	ml/ml.hpp	/^typedef CvSVMKernel SVMKernel;$/;"	t	namespace:cv
SVMParams	ml/ml.hpp	/^typedef CvSVMParams SVMParams;$/;"	t	namespace:cv
SVMSolver	ml/ml.hpp	/^typedef CvSVMSolver SVMSolver;$/;"	t	namespace:cv
SVM_C	ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon244
SVM_COEF	ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon244
SVM_DEGREE	ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon244
SVM_GAMMA	ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon244
SVM_NU	ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon244
SVM_P	ml/ml.hpp	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon244
SZ_ALL	ts/ts_perf.hpp	67;"	d
SZ_ALL_GA	ts/ts_perf.hpp	64;"	d
SZ_ALL_HD	ts/ts_perf.hpp	65;"	d
SZ_ALL_SMALL	ts/ts_perf.hpp	66;"	d
SZ_ALL_VGA	ts/ts_perf.hpp	63;"	d
SZ_TYPICAL	ts/ts_perf.hpp	68;"	d
SamplesNum	legacy/legacy.hpp	/^    int SamplesNum;         \/* Number of the Samples                 *\/$/;"	m	struct:CvConDensation
SatCastHelper	gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<1, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SatCastHelper	gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<2, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SatCastHelper	gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<3, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SatCastHelper	gpu/device/vec_math.hpp	/^        template <typename VecD> struct SatCastHelper<4, VecD>$/;"	s	namespace:cv::gpu::device::vec_math_detail
SavedIndexParams	flann/flann_base.hpp	/^    SavedIndexParams(std::string filename)$/;"	f	struct:cvflann::SavedIndexParams
SavedIndexParams	flann/flann_base.hpp	/^struct SavedIndexParams : public IndexParams$/;"	s	namespace:cvflann
SavedIndexParams	flann/miniflann.hpp	/^struct CV_EXPORTS SavedIndexParams : public IndexParams$/;"	s	namespace:cv::flann
Scalar_	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_()$/;"	f	class:cv::Scalar_
Scalar_	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_(_Tp v0)$/;"	f	class:cv::Scalar_
Scalar_	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Scalar_
Scalar_	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::Scalar_(const CvScalar& s)$/;"	f	class:cv::Scalar_
ScaleAfter	legacy/blobtrack.hpp	/^    int     ScaleAfter;$/;"	m	struct:CvBlobTrackerParamLH
ScanKind	gpu/device/scan.hpp	/^    enum ScanKind { EXCLUSIVE = 0,  INCLUSIVE = 1 };$/;"	g	namespace:cv::gpu::device
ScopedTrace	ts/ts_gtest.h	/^class GTEST_API_ ScopedTrace {$/;"	c	namespace:testing::internal
ScoreIndexPair	flann/lsh_index.h	/^    typedef std::pair<float, unsigned int> ScoreIndexPair;$/;"	t	class:cvflann::LshIndex
SeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS SeamFinder$/;"	c	namespace:cv::detail
SearchParams	flann/miniflann.hpp	/^struct CV_EXPORTS SearchParams : public IndexParams$/;"	s	namespace:cv::flann
SearchParams	flann/params.h	/^    SearchParams(int checks = 32, float eps = 0, bool sorted = true )$/;"	f	struct:cvflann::SearchParams
SearchParams	flann/params.h	/^struct SearchParams : public IndexParams$/;"	s	namespace:cvflann
SearchWindow	contrib/contrib.hpp	/^    class SearchWindow$/;"	c	class:CvFuzzyMeanShiftTracker
Select	gpu/device/detail/type_traits_detail.hpp	/^        template <bool, typename T1, typename T2> struct Select { typedef T1 type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
Select	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T1, typename T2> struct Select<false, T1, T2> { typedef T2 type; };$/;"	s	namespace:cv::gpu::device::type_traits_detail
SelectWorkingSet	ml/ml.hpp	/^    typedef bool (CvSVMSolver::*SelectWorkingSet)( int& i, int& j );$/;"	t	class:CvSVMSolver
SelfSimDescriptor	contrib/contrib.hpp	/^    class CV_EXPORTS SelfSimDescriptor$/;"	c	namespace:cv
Seq	core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::Seq( MemStorage& storage,$/;"	f	class:cv::Seq
Seq	core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::Seq( const CvSeq* _seq ) : seq((CvSeq*)_seq)$/;"	f	class:cv::Seq
Seq	core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::Seq() : seq(0) {}$/;"	f	class:cv::Seq
SeqIterator	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>::SeqIterator()$/;"	f	class:cv::SeqIterator
SeqIterator	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>::SeqIterator(const Seq<_Tp>& _seq, bool seekEnd)$/;"	f	class:cv::SeqIterator
Set	ts/ts_gtest.h	/^  void Set(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
SetCollision	legacy/blobtrack.hpp	/^    virtual void SetCollision(int \/*CollisionFlag*\/){}; \/* call in case of blob collision situation*\/$/;"	f	class:CvBlobTrackerOne
SetFileName	legacy/blobtrack.hpp	/^    virtual void    SetFileName(char* \/*DataBaseName*\/){};$/;"	f	class:CvBlobTrackAnalysis
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* image) {$/;"	f	class:cv::WImage
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* image) {$/;"	f	class:cv::WImageC
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* img) {$/;"	f	class:cv::WImageBuffer
SetIpl	core/wimage.hpp	/^    void SetIpl(IplImage* img) {$/;"	f	class:cv::WImageBufferC
SetLabeledFeatures	legacy/legacy.hpp	/^    void SetLabeledFeatures(const vector<KeyPoint>& features) {m_train_features = features;};$/;"	f	class:cv::OneWayDescriptorObject
SetPCADimHigh	legacy/legacy.hpp	/^    void SetPCADimHigh(int pca_dim_high) {m_pca_dim_high = pca_dim_high;};$/;"	f	class:cv::OneWayDescriptor
SetPCADimLow	legacy/legacy.hpp	/^    void SetPCADimLow(int pca_dim_low) {m_pca_dim_low = pca_dim_low;};$/;"	f	class:cv::OneWayDescriptor
SetParam	ts/ts_gtest.h	/^  static void SetParam(const ParamType* parameter) {$/;"	f	class:testing::WithParamInterface
SetUp	ts/ts_gtest.h	/^  virtual void SetUp() {}$/;"	f	class:testing::Environment
SetUpTestCase	ts/ts_gtest.h	/^  static void SetUpTestCase() {}$/;"	f	class:testing::Test
SetUpTestCaseFunc	ts/ts_gtest.h	/^  typedef internal::SetUpTestCaseFunc SetUpTestCaseFunc;$/;"	t	class:testing::Test
SetUpTestCaseFunc	ts/ts_gtest.h	/^typedef void (*SetUpTestCaseFunc)();$/;"	t	namespace:testing::internal
SetValue	ts/ts_gtest.h	/^  void SetValue(const char* new_value) {$/;"	f	class:testing::TestProperty
SetZero	core/wimage.hpp	/^    void SetZero() { cvSetZero(image_); }$/;"	f	class:cv::WImage
Setup	ts/ts_gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Environment
Setup	ts/ts_gtest.h	/^  virtual Setup_should_be_spelled_SetUp* Setup() { return NULL; }$/;"	f	class:testing::Test
Setup_should_be_spelled_SetUp	ts/ts_gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Environment
Setup_should_be_spelled_SetUp	ts/ts_gtest.h	/^  struct Setup_should_be_spelled_SetUp {};$/;"	s	class:testing::Test
ShiftDispatcher	gpu/device/functional.hpp	/^        template <typename Func> struct ShiftDispatcher<Func, false>$/;"	s	namespace:cv::gpu::device::functional_detail
ShiftDispatcher	gpu/device/functional.hpp	/^        template <typename Func> struct ShiftDispatcher<Func, true>$/;"	s	namespace:cv::gpu::device::functional_detail
ShouldRunTest	ts/ts_gtest.h	/^  static bool ShouldRunTest(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
SiftDescriptorExtractor	nonfree/features2d.hpp	/^typedef SIFT SiftDescriptorExtractor;$/;"	t	namespace:cv
SiftFeatureDetector	nonfree/features2d.hpp	/^typedef SIFT SiftFeatureDetector;$/;"	t	namespace:cv
SignAndMagnitudeToBiased	ts/ts_gtest.h	/^  static Bits SignAndMagnitudeToBiased(const Bits &sam) {$/;"	f	class:testing::internal::FloatingPoint
SimpleBlobDetector	features2d/features2d.hpp	/^class CV_EXPORTS_W SimpleBlobDetector : public FeatureDetector$/;"	c	namespace:cv
SingleMask	gpu/device/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMask(const SingleMask& mask_): mask(mask_.mask){}$/;"	f	struct:cv::gpu::device::SingleMask
SingleMask	gpu/device/utility.hpp	/^        explicit __host__ __device__ __forceinline__ SingleMask(PtrStepb mask_) : mask(mask_) {}$/;"	f	struct:cv::gpu::device::SingleMask
SingleMask	gpu/device/utility.hpp	/^    struct SingleMask$/;"	s	namespace:cv::gpu::device
SingleMaskChannels	gpu/device/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMaskChannels(PtrStepb mask_, int channels_)$/;"	f	struct:cv::gpu::device::SingleMaskChannels
SingleMaskChannels	gpu/device/utility.hpp	/^        __host__ __device__ __forceinline__ SingleMaskChannels(const SingleMaskChannels& mask_)$/;"	f	struct:cv::gpu::device::SingleMaskChannels
SingleMaskChannels	gpu/device/utility.hpp	/^    struct SingleMaskChannels$/;"	s	namespace:cv::gpu::device
SizeVector	ts/ts_perf.hpp	/^    typedef std::vector<std::pair<int, cv::Size> > SizeVector;$/;"	t	class:perf::TestBase
Size_	core/core.hpp	/^template<typename _Tp> class CV_EXPORTS Size_;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Size_	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_()$/;"	f	class:cv::Size_
Size_	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(_Tp _width, _Tp _height)$/;"	f	class:cv::Size_
Size_	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const CvSize& sz)$/;"	f	class:cv::Size_
Size_	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const CvSize2D32f& sz)$/;"	f	class:cv::Size_
Size_	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const Point_<_Tp>& pt) : width(pt.x), height(pt.y) {}$/;"	f	class:cv::Size_
Size_	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::Size_(const Size_& sz)$/;"	f	class:cv::Size_
Size_MatType	ts/ts_perf.hpp	/^typedef TestBaseWithParam<Size_MatType_t> Size_MatType;$/;"	t	namespace:perf
Size_MatType_t	ts/ts_perf.hpp	/^typedef std::tr1::tuple<cv::Size, MatType> Size_MatType_t;$/;"	t	namespace:perf
SkipComma	ts/ts_gtest.h	/^inline const char* SkipComma(const char* str) {$/;"	f	namespace:testing::internal
SkipProcess	legacy/blobtrack.hpp	/^    virtual void SkipProcess(CvBlob* \/*pBlobPrev*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne
SleepMilliseconds	ts/ts_gtest.h	/^inline void SleepMilliseconds(int n) {$/;"	f	namespace:std::tr1
SortScoreIndexPairOnSecond	flann/lsh_index.h	/^    struct SortScoreIndexPairOnSecond$/;"	s	class:cvflann::LshIndex
SparseMat	core/mat.hpp	/^inline SparseMat::SparseMat()$/;"	f	class:cv::SparseMat
SparseMat	core/mat.hpp	/^inline SparseMat::SparseMat(const SparseMat& m)$/;"	f	class:cv::SparseMat
SparseMat	core/mat.hpp	/^inline SparseMat::SparseMat(int _dims, const int* _sizes, int _type)$/;"	f	class:cv::SparseMat
SparseMatConstIterator	core/mat.hpp	/^inline SparseMatConstIterator::SparseMatConstIterator()$/;"	f	class:cv::SparseMatConstIterator
SparseMatConstIterator	core/mat.hpp	/^inline SparseMatConstIterator::SparseMatConstIterator(const SparseMatConstIterator& it)$/;"	f	class:cv::SparseMatConstIterator
SparseMatConstIterator_	core/mat.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_()$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	core/mat.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMatConstIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatConstIterator_	core/mat.hpp	/^SparseMatConstIterator_<_Tp>::SparseMatConstIterator_(const SparseMat_<_Tp>* _m)$/;"	f	class:cv::SparseMatConstIterator_
SparseMatIterator	core/mat.hpp	/^inline SparseMatIterator::SparseMatIterator()$/;"	f	class:cv::SparseMatIterator
SparseMatIterator	core/mat.hpp	/^inline SparseMatIterator::SparseMatIterator(SparseMat* _m)$/;"	f	class:cv::SparseMatIterator
SparseMatIterator	core/mat.hpp	/^inline SparseMatIterator::SparseMatIterator(const SparseMatIterator& it)$/;"	f	class:cv::SparseMatIterator
SparseMatIterator_	core/mat.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_()$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	core/mat.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(SparseMat_<_Tp>* _m)$/;"	f	class:cv::SparseMatIterator_
SparseMatIterator_	core/mat.hpp	/^SparseMatIterator_<_Tp>::SparseMatIterator_(const SparseMatIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatIterator_
SparseMat_	core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_()$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const CvSparseMat* m)$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const Mat& m)$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const SparseMat& m)$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(const SparseMat_<_Tp>& m)$/;"	f	class:cv::SparseMat_
SparseMat_	core/mat.hpp	/^template<typename _Tp> inline SparseMat_<_Tp>::SparseMat_(int _dims, const int* _sizes)$/;"	f	class:cv::SparseMat_
SparsePyrLkOptFlowEstimator	videostab/optical_flow.hpp	/^class CV_EXPORTS SparsePyrLkOptFlowEstimator$/;"	c	namespace:cv::videostab
SpeedLevel	flann/lsh_table.h	/^    enum SpeedLevel$/;"	g	class:cvflann::lsh::LshTable
SphericalPortraitProjector	stitching/detail/warpers.hpp	/^struct SphericalPortraitProjector : ProjectorBase$/;"	s	namespace:cv::detail
SphericalPortraitWarper	stitching/detail/warpers.hpp	/^    SphericalPortraitWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::SphericalPortraitWarper
SphericalPortraitWarper	stitching/detail/warpers.hpp	/^class SphericalPortraitWarper : public RotationWarperBase<SphericalPortraitProjector>$/;"	c	namespace:cv::detail
SphericalProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS SphericalProjector : ProjectorBase$/;"	s	namespace:cv::detail
SphericalWarper	stitching/detail/warpers.hpp	/^    SphericalWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::SphericalWarper
SphericalWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalWarper : public RotationWarperBase<SphericalProjector>$/;"	c	namespace:cv::detail
SphericalWarper	stitching/warpers.hpp	/^class SphericalWarper: public WarperCreator$/;"	c	namespace:cv
SphericalWarperGpu	stitching/detail/warpers.hpp	/^    SphericalWarperGpu(float scale) : SphericalWarper(scale) {}$/;"	f	class:cv::detail::SphericalWarperGpu
SphericalWarperGpu	stitching/detail/warpers.hpp	/^class CV_EXPORTS SphericalWarperGpu : public SphericalWarper$/;"	c	namespace:cv::detail
SphericalWarperGpu	stitching/warpers.hpp	/^class SphericalWarperGpu: public WarperCreator$/;"	c	namespace:cv
SpinImageModel	contrib/contrib.hpp	/^    class CV_EXPORTS SpinImageModel$/;"	c	namespace:cv
Split	core/internal.hpp	/^    typedef tbb::split Split;$/;"	t	namespace:cv
StabilizerBase	videostab/stabilizer.hpp	/^class CV_EXPORTS StabilizerBase$/;"	c	namespace:cv::videostab
Stage	objdetect/objdetect.hpp	/^        struct CV_EXPORTS Stage$/;"	s	class:cv::CascadeClassifier::Data
StarAdjuster	features2d/features2d.hpp	/^class CV_EXPORTS StarAdjuster: public AdjusterAdapter$/;"	c	namespace:cv
StarDetector	features2d/features2d.hpp	/^class CV_EXPORTS_W StarDetector : public FeatureDetector$/;"	c	namespace:cv
StarFeatureDetector	features2d/features2d.hpp	/^typedef StarDetector StarFeatureDetector;$/;"	t	namespace:cv
StartFrame	legacy/blobtrack.hpp	/^    int         StartFrame;$/;"	m	struct:CvBlobTrack
StartStopTimer	flann/timer.h	/^    StartStopTimer()$/;"	f	class:cvflann::StartStopTimer
StartStopTimer	flann/timer.h	/^class StartStopTimer$/;"	c	namespace:cvflann
Stat	ts/ts_gtest.h	/^inline int Stat(const char* path, StatStruct* buf) { return _stat(path, buf); }$/;"	f	namespace:std::tr1::posix
StatModel	ml/ml.hpp	/^typedef CvStatModel StatModel;$/;"	t	namespace:cv
StatStruct	ts/ts_gtest.h	/^typedef struct _stat StatStruct;$/;"	t	namespace:std::tr1::posix	typeref:struct:std::tr1::posix::_stat
State	legacy/legacy.hpp	/^    float* State;           \/* Vector of State                       *\/$/;"	m	struct:CvConDensation
Static	gpu/device/static_check.hpp	/^        template<> struct Static<true>$/;"	s	namespace:cv::gpu::device
Static	gpu/device/static_check.hpp	/^        template<bool expr> struct Static {};$/;"	s	namespace:cv::gpu::device
StaticAssert	core/cuda_devptrs.hpp	/^        template <> struct StaticAssert<true> {static __CV_GPU_HOST_DEVICE__ void check(){}};$/;"	s	namespace:cv::gpu
StaticAssertTypeEq	ts/ts_gtest.h	/^bool StaticAssertTypeEq() {$/;"	f	namespace:testing
Status	stitching/stitcher.hpp	/^    enum Status { OK, ERR_NEED_MORE_IMGS };$/;"	g	class:cv::Stitcher
StereoBM	calib3d/calib3d.hpp	/^class CV_EXPORTS_W StereoBM$/;"	c	namespace:cv
StereoBM_GPU	gpu/gpu.hpp	/^class CV_EXPORTS StereoBM_GPU$/;"	c	namespace:cv::gpu
StereoBeliefPropagation	gpu/gpu.hpp	/^class CV_EXPORTS StereoBeliefPropagation$/;"	c	namespace:cv::gpu
StereoConstantSpaceBP	gpu/gpu.hpp	/^class CV_EXPORTS StereoConstantSpaceBP$/;"	c	namespace:cv::gpu
StereoSGBM	calib3d/calib3d.hpp	/^class CV_EXPORTS_W StereoSGBM$/;"	c	namespace:cv
StereoVar	contrib/contrib.hpp	/^    class CV_EXPORTS_W StereoVar$/;"	c	namespace:cv
StereographicProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS StereographicProjector : ProjectorBase$/;"	s	namespace:cv::detail
StereographicWarper	stitching/detail/warpers.hpp	/^    StereographicWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::StereographicWarper
StereographicWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS StereographicWarper : public RotationWarperBase<StereographicProjector>$/;"	c	namespace:cv::detail
StereographicWarper	stitching/warpers.hpp	/^class StereographicWarper: public WarperCreator$/;"	c	namespace:cv
Stitcher	stitching/stitcher.hpp	/^    Stitcher() {}$/;"	f	class:cv::Stitcher
Stitcher	stitching/stitcher.hpp	/^class CV_EXPORTS Stitcher$/;"	c	namespace:cv
Str	legacy/blobtrack.hpp	/^    char*               Str;$/;"	m	struct:CvDefParam
StrCaseCmp	ts/ts_gtest.h	/^inline int StrCaseCmp(const char* s1, const char* s2) {$/;"	f	namespace:std::tr1::posix
StrDup	ts/ts_gtest.h	/^inline char* StrDup(const char* src) { return _strdup(src); }$/;"	f	namespace:std::tr1::posix
StrDup	ts/ts_gtest.h	/^inline char* StrDup(const char* src) { return strdup(src); }$/;"	f	namespace:std::tr1::posix
StrError	ts/ts_gtest.h	/^inline const char* StrError(int errnum) { return strerror(errnum); }$/;"	f	namespace:std::tr1::posix
StrNCpy	ts/ts_gtest.h	/^inline const char* StrNCpy(char* dest, const char* src, size_t n) {$/;"	f	namespace:std::tr1::posix
Stream	gpu/gpu.hpp	/^class CV_EXPORTS Stream$/;"	c	namespace:cv::gpu
StreamAccessor	gpu/stream_accessor.hpp	/^        struct StreamAccessor$/;"	s	namespace:cv::gpu
StreamHelper	ts/ts_gtest.h	/^  inline void StreamHelper(internal::false_type \/*dummy*\/, const T& value) {$/;"	f	class:testing::Message
StreamHelper	ts/ts_gtest.h	/^  inline void StreamHelper(internal::true_type \/*dummy*\/, T* pointer) {$/;"	f	class:testing::Message
StreamableToString	ts/ts_gtest.h	/^String StreamableToString(const T& streamable) {$/;"	f	namespace:testing::internal
String	core/core.hpp	/^typedef std::string String;$/;"	t	namespace:cv
String	ts/ts_gtest.h	/^  String() : c_str_(NULL), length_(0) {}$/;"	f	class:testing::internal::String
String	ts/ts_gtest.h	/^  String(const ::std::string& str) {  \/\/ NOLINT$/;"	f	class:testing::internal::String
String	ts/ts_gtest.h	/^  String(const ::string& str) {  \/\/ NOLINT$/;"	f	class:testing::internal::String
String	ts/ts_gtest.h	/^  String(const String& str) : c_str_(NULL), length_(0) { *this = str; }$/;"	f	class:testing::internal::String
String	ts/ts_gtest.h	/^  String(const char* a_c_str) {  \/\/ NOLINT$/;"	f	class:testing::internal::String
String	ts/ts_gtest.h	/^  String(const char* buffer, size_t a_length) {$/;"	f	class:testing::internal::String
String	ts/ts_gtest.h	/^class GTEST_API_ String {$/;"	c	namespace:testing::internal
Strings	ts/ts_gtest.h	/^typedef ::std::vector<string> Strings;$/;"	t	namespace:testing::internal
Style	core/opengl_interop.hpp	/^    enum Style$/;"	g	class:cv::GlFont
Subdiv2D	imgproc/imgproc.hpp	/^class CV_EXPORTS_W Subdiv2D$/;"	c	namespace:cv
SurfAdjuster	features2d/features2d.hpp	/^class CV_EXPORTS SurfAdjuster: public AdjusterAdapter$/;"	c	namespace:cv
SurfDescriptorExtractor	nonfree/features2d.hpp	/^typedef SURF SurfDescriptorExtractor;$/;"	t	namespace:cv
SurfFeatureDetector	nonfree/features2d.hpp	/^typedef SURF SurfFeatureDetector;$/;"	t	namespace:cv
SurfFeaturesFinder	stitching/detail/matchers.hpp	/^class CV_EXPORTS SurfFeaturesFinder : public FeaturesFinder$/;"	c	namespace:cv::detail
SurfFeaturesFinderGpu	stitching/detail/matchers.hpp	/^class CV_EXPORTS SurfFeaturesFinderGpu : public FeaturesFinder$/;"	c	namespace:cv::detail
SurfaceFormat	gpu/gpu.hpp	/^    enum SurfaceFormat$/;"	g	class:cv::gpu::VideoWriter_GPU
T	gpu/gpu.hpp	/^        float T;       \/\/ A percentage value which determines when new features can be recognized as new background. (Typically 0.9).$/;"	m	struct:cv::gpu::FGDStatModel::Params
T	legacy/legacy.hpp	/^    float  T;			\/* "A percentage value which determines when new features can be recognized as new background." (Typically 0.9).*\/$/;"	m	struct:CvFGDStatModelParams
T	ts/ts_gtest.h	/^  static void Print(const T (&a)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalPrinter
T	ts/ts_gtest.h	/^  static void Print(const T (&value)[N], ::std::ostream* os) {$/;"	m	class:testing::internal::UniversalTersePrinter
T	ts/ts_gtest.h	/^inline bool ArrayEq(const T(&lhs)[N], const U(&rhs)[N]) {$/;"	m	namespace:testing::internal
T	ts/ts_gtest.h	/^inline void CopyArray(const T(&from)[N], U(*to)[N]) {$/;"	m	namespace:testing::internal
T	ts/ts_gtest.h	/^internal::ParamGenerator<T> ValuesIn(const T (&array)[N]);$/;"	m	namespace:testing
TAG_MASK	gpu/device/emulation.hpp	/^            enum { TAG_MASK = (1U << ( (sizeof(unsigned int) << 3) - 5U)) - 1U };$/;"	e	enum:cv::gpu::device::Emulation::smem::__anon77
TEMP	ts/ts.hpp	/^    enum { INPUT, INPUT_OUTPUT, OUTPUT, REF_INPUT_OUTPUT, REF_OUTPUT, TEMP, MASK, MAX_ARR };$/;"	e	enum:cvtest::ArrayTest::__anon192
TERM_EXCEPTION	ts/ts_perf.hpp	/^        TERM_EXCEPTION = 3,$/;"	e	enum:perf::performance_metrics::__anon193
TERM_INTERRUPT	ts/ts_perf.hpp	/^        TERM_INTERRUPT = 2,$/;"	e	enum:perf::performance_metrics::__anon193
TERM_ITERATIONS	ts/ts_perf.hpp	/^        TERM_ITERATIONS = 0,$/;"	e	enum:perf::performance_metrics::__anon193
TERM_TIME	ts/ts_perf.hpp	/^        TERM_TIME = 1,$/;"	e	enum:perf::performance_metrics::__anon193
TERM_UNKNOWN	ts/ts_perf.hpp	/^        TERM_UNKNOWN = -1$/;"	e	enum:perf::performance_metrics::__anon193
TEST	ts/ts_gtest.h	20089;"	d
TEST_CYCLE	ts/ts_perf.hpp	489;"	d
TEST_CYCLE_MULTIRUN	ts/ts_perf.hpp	490;"	d
TEST_CYCLE_N	ts/ts_perf.hpp	488;"	d
TEST_DID_NOT_DIE	ts/ts_gtest.h	/^    TEST_DID_NOT_DIE$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_ENCOUNTERED_RETURN_STATEMENT	ts/ts_gtest.h	/^    TEST_ENCOUNTERED_RETURN_STATEMENT,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEST_F	ts/ts_gtest.h	20118;"	d
TEST_P	ts/ts_gtest.h	17075;"	d
TEST_THREW_EXCEPTION	ts/ts_gtest.h	/^    TEST_THREW_EXCEPTION,$/;"	e	enum:testing::internal::DeathTest::AbortReason
TEXTURE_BUFFER	core/opengl_interop.hpp	/^        TEXTURE_BUFFER = 0x88EC \/\/ buffer will ise for OpenGL textures$/;"	e	enum:cv::GlBuffer::Usage
THRESH_BINARY	imgproc/imgproc.hpp	/^enum { THRESH_BINARY=CV_THRESH_BINARY, THRESH_BINARY_INV=CV_THRESH_BINARY_INV,$/;"	e	enum:cv::__anon274
THRESH_BINARY_INV	imgproc/imgproc.hpp	/^enum { THRESH_BINARY=CV_THRESH_BINARY, THRESH_BINARY_INV=CV_THRESH_BINARY_INV,$/;"	e	enum:cv::__anon274
THRESH_MASK	imgproc/imgproc.hpp	/^       THRESH_TOZERO_INV=CV_THRESH_TOZERO_INV, THRESH_MASK=CV_THRESH_MASK,$/;"	e	enum:cv::__anon274
THRESH_OTSU	imgproc/imgproc.hpp	/^       THRESH_OTSU=CV_THRESH_OTSU };$/;"	e	enum:cv::__anon274
THRESH_TOZERO	imgproc/imgproc.hpp	/^       THRESH_TRUNC=CV_THRESH_TRUNC, THRESH_TOZERO=CV_THRESH_TOZERO,$/;"	e	enum:cv::__anon274
THRESH_TOZERO_INV	imgproc/imgproc.hpp	/^       THRESH_TOZERO_INV=CV_THRESH_TOZERO_INV, THRESH_MASK=CV_THRESH_MASK,$/;"	e	enum:cv::__anon274
THRESH_TRUNC	imgproc/imgproc.hpp	/^       THRESH_TRUNC=CV_THRESH_TRUNC, THRESH_TOZERO=CV_THRESH_TOZERO,$/;"	e	enum:cv::__anon274
TM_CCOEFF	imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon282
TM_CCOEFF_NORMED	imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon282
TM_CCORR	imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon282
TM_CCORR_NORMED	imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon282
TM_SQDIFF	imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon282
TM_SQDIFF_NORMED	imgproc/imgproc.hpp	/^enum { TM_SQDIFF=0, TM_SQDIFF_NORMED=1, TM_CCORR=2, TM_CCORR_NORMED=3, TM_CCOEFF=4, TM_CCOEFF_NORMED=5 };$/;"	e	enum:cv::__anon282
TRANSLATION	contrib/contrib.hpp	/^           TRANSLATION       = 2,$/;"	e	enum:cv::__anon26
TRANSLATION	videostab/global_motion.hpp	/^    TRANSLATION = 0,$/;"	e	enum:cv::videostab::MotionModel
TRANSLATION_AND_SCALE	videostab/global_motion.hpp	/^    TRANSLATION_AND_SCALE = 1,$/;"	e	enum:cv::videostab::MotionModel
TRIANGLES	core/opengl_interop.hpp	/^        TRIANGLES      = 0x0004,$/;"	e	enum:cv::RenderMode::__anon219
TRIANGLE_FAN	core/opengl_interop.hpp	/^        TRIANGLE_FAN   = 0x0006,$/;"	e	enum:cv::RenderMode::__anon219
TRIANGLE_STRIP	core/opengl_interop.hpp	/^        TRIANGLE_STRIP = 0x0005,$/;"	e	enum:cv::RenderMode::__anon219
TRUE	core/internal.hpp	82;"	d
TS	ts/ts.hpp	/^class CV_EXPORTS TS$/;"	c	namespace:cvtest
TS	ts/ts.hpp	/^class CV_EXPORTS TS;$/;"	m	namespace:cvtest	typeref:class:cvtest::CV_EXPORTS
TSParams	ts/ts.hpp	/^struct CV_EXPORTS TSParams$/;"	s	namespace:cvtest
TYPED_TEST	ts/ts_gtest.h	17516;"	d
TYPED_TEST_CASE	ts/ts_gtest.h	17512;"	d
TYPED_TEST_CASE_P	ts/ts_gtest.h	17566;"	d
TYPED_TEST_P	ts/ts_gtest.h	17570;"	d
TYPE_5_8	features2d/features2d.hpp	/^      TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2$/;"	e	enum:cv::FastFeatureDetector::__anon236
TYPE_7_12	features2d/features2d.hpp	/^      TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2$/;"	e	enum:cv::FastFeatureDetector::__anon236
TYPE_9_16	features2d/features2d.hpp	/^      TYPE_5_8 = 0, TYPE_7_12 = 1, TYPE_9_16 = 2$/;"	e	enum:cv::FastFeatureDetector::__anon236
TYPICAL_MATS	ts/ts_perf.hpp	73;"	d
TYPICAL_MATS_C1	ts/ts_perf.hpp	74;"	d
TYPICAL_MATS_C4	ts/ts_perf.hpp	75;"	d
TYPICAL_MAT_SIZES	ts/ts_perf.hpp	71;"	d
TYPICAL_MAT_TYPES	ts/ts_perf.hpp	72;"	d
T_GeometriccConsistency	contrib/contrib.hpp	/^        float T_GeometriccConsistency;$/;"	m	class:cv::SpinImageModel
T_GroupingCorespondances	contrib/contrib.hpp	/^        float T_GroupingCorespondances;$/;"	m	class:cv::SpinImageModel
T_at_level	objdetect/objdetect.hpp	/^  std::vector<int> T_at_level;$/;"	m	class:cv::linemod::Detector
Tail	ts/ts_gtest.h	/^      T14> Tail;$/;"	t	struct:testing::internal::Templates14
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Templates27
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Templates26
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Templates25
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Templates24
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Templates23
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Templates22
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Templates21
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Templates20
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Templates19
Tail	ts/ts_gtest.h	/^      T15, T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Templates18
Tail	ts/ts_gtest.h	/^      T15, T16, T17> Tail;$/;"	t	struct:testing::internal::Templates17
Tail	ts/ts_gtest.h	/^      T15, T16> Tail;$/;"	t	struct:testing::internal::Templates16
Tail	ts/ts_gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Templates15
Tail	ts/ts_gtest.h	/^      T15> Tail;$/;"	t	struct:testing::internal::Types15
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> Tail;$/;"	t	struct:testing::internal::Types28
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> Tail;$/;"	t	struct:testing::internal::Types27
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> Tail;$/;"	t	struct:testing::internal::Types26
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Tail;$/;"	t	struct:testing::internal::Types25
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23, T24> Tail;$/;"	t	struct:testing::internal::Types24
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22, T23> Tail;$/;"	t	struct:testing::internal::Types23
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21, T22> Tail;$/;"	t	struct:testing::internal::Types22
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20, T21> Tail;$/;"	t	struct:testing::internal::Types21
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19, T20> Tail;$/;"	t	struct:testing::internal::Types20
Tail	ts/ts_gtest.h	/^      T16, T17, T18, T19> Tail;$/;"	t	struct:testing::internal::Types19
Tail	ts/ts_gtest.h	/^      T16, T17, T18> Tail;$/;"	t	struct:testing::internal::Types18
Tail	ts/ts_gtest.h	/^      T16, T17> Tail;$/;"	t	struct:testing::internal::Types17
Tail	ts/ts_gtest.h	/^      T16> Tail;$/;"	t	struct:testing::internal::Types16
Tail	ts/ts_gtest.h	/^      T28> Tail;$/;"	t	struct:testing::internal::Templates28
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Templates41
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Templates40
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Templates39
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Templates38
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Templates37
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Templates36
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Templates35
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Templates34
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Templates33
Tail	ts/ts_gtest.h	/^      T29, T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Templates32
Tail	ts/ts_gtest.h	/^      T29, T30, T31> Tail;$/;"	t	struct:testing::internal::Templates31
Tail	ts/ts_gtest.h	/^      T29, T30> Tail;$/;"	t	struct:testing::internal::Templates30
Tail	ts/ts_gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Templates29
Tail	ts/ts_gtest.h	/^      T29> Tail;$/;"	t	struct:testing::internal::Types29
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41, T42> Tail;$/;"	t	struct:testing::internal::Types42
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40, T41> Tail;$/;"	t	struct:testing::internal::Types41
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Tail;$/;"	t	struct:testing::internal::Types40
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Tail;$/;"	t	struct:testing::internal::Types39
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37, T38> Tail;$/;"	t	struct:testing::internal::Types38
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36, T37> Tail;$/;"	t	struct:testing::internal::Types37
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35, T36> Tail;$/;"	t	struct:testing::internal::Types36
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34, T35> Tail;$/;"	t	struct:testing::internal::Types35
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33, T34> Tail;$/;"	t	struct:testing::internal::Types34
Tail	ts/ts_gtest.h	/^      T30, T31, T32, T33> Tail;$/;"	t	struct:testing::internal::Types33
Tail	ts/ts_gtest.h	/^      T30, T31, T32> Tail;$/;"	t	struct:testing::internal::Types32
Tail	ts/ts_gtest.h	/^      T30, T31> Tail;$/;"	t	struct:testing::internal::Types31
Tail	ts/ts_gtest.h	/^      T30> Tail;$/;"	t	struct:testing::internal::Types30
Tail	ts/ts_gtest.h	/^      T42> Tail;$/;"	t	struct:testing::internal::Templates42
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Templates50
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Templates49
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Templates48
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Templates47
Tail	ts/ts_gtest.h	/^      T43, T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Templates46
Tail	ts/ts_gtest.h	/^      T43, T44, T45> Tail;$/;"	t	struct:testing::internal::Templates45
Tail	ts/ts_gtest.h	/^      T43, T44> Tail;$/;"	t	struct:testing::internal::Templates44
Tail	ts/ts_gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Templates43
Tail	ts/ts_gtest.h	/^      T43> Tail;$/;"	t	struct:testing::internal::Types43
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47, T48, T49, T50> Tail;$/;"	t	struct:testing::internal::Types50
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47, T48, T49> Tail;$/;"	t	struct:testing::internal::Types49
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47, T48> Tail;$/;"	t	struct:testing::internal::Types48
Tail	ts/ts_gtest.h	/^      T44, T45, T46, T47> Tail;$/;"	t	struct:testing::internal::Types47
Tail	ts/ts_gtest.h	/^      T44, T45, T46> Tail;$/;"	t	struct:testing::internal::Types46
Tail	ts/ts_gtest.h	/^      T44, T45> Tail;$/;"	t	struct:testing::internal::Types45
Tail	ts/ts_gtest.h	/^      T44> Tail;$/;"	t	struct:testing::internal::Types44
Tail	ts/ts_gtest.h	/^  typedef Templates0 Tail;$/;"	t	struct:testing::internal::Templates1
Tail	ts/ts_gtest.h	/^  typedef Templates10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Templates11
Tail	ts/ts_gtest.h	/^  typedef Templates11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Templates12
Tail	ts/ts_gtest.h	/^  typedef Templates12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Templates13
Tail	ts/ts_gtest.h	/^  typedef Templates1<T2> Tail;$/;"	t	struct:testing::internal::Templates2
Tail	ts/ts_gtest.h	/^  typedef Templates2<T2, T3> Tail;$/;"	t	struct:testing::internal::Templates3
Tail	ts/ts_gtest.h	/^  typedef Templates3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Templates4
Tail	ts/ts_gtest.h	/^  typedef Templates4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Templates5
Tail	ts/ts_gtest.h	/^  typedef Templates5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Templates6
Tail	ts/ts_gtest.h	/^  typedef Templates6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Templates7
Tail	ts/ts_gtest.h	/^  typedef Templates7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Templates8
Tail	ts/ts_gtest.h	/^  typedef Templates8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Templates9
Tail	ts/ts_gtest.h	/^  typedef Templates9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Templates10
Tail	ts/ts_gtest.h	/^  typedef Types0 Tail;$/;"	t	struct:testing::internal::Types1
Tail	ts/ts_gtest.h	/^  typedef Types10<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tail;$/;"	t	struct:testing::internal::Types11
Tail	ts/ts_gtest.h	/^  typedef Types11<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tail;$/;"	t	struct:testing::internal::Types12
Tail	ts/ts_gtest.h	/^  typedef Types12<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tail;$/;"	t	struct:testing::internal::Types13
Tail	ts/ts_gtest.h	/^  typedef Types13<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tail;$/;"	t	struct:testing::internal::Types14
Tail	ts/ts_gtest.h	/^  typedef Types1<T2> Tail;$/;"	t	struct:testing::internal::Types2
Tail	ts/ts_gtest.h	/^  typedef Types2<T2, T3> Tail;$/;"	t	struct:testing::internal::Types3
Tail	ts/ts_gtest.h	/^  typedef Types3<T2, T3, T4> Tail;$/;"	t	struct:testing::internal::Types4
Tail	ts/ts_gtest.h	/^  typedef Types4<T2, T3, T4, T5> Tail;$/;"	t	struct:testing::internal::Types5
Tail	ts/ts_gtest.h	/^  typedef Types5<T2, T3, T4, T5, T6> Tail;$/;"	t	struct:testing::internal::Types6
Tail	ts/ts_gtest.h	/^  typedef Types6<T2, T3, T4, T5, T6, T7> Tail;$/;"	t	struct:testing::internal::Types7
Tail	ts/ts_gtest.h	/^  typedef Types7<T2, T3, T4, T5, T6, T7, T8> Tail;$/;"	t	struct:testing::internal::Types8
Tail	ts/ts_gtest.h	/^  typedef Types8<T2, T3, T4, T5, T6, T7, T8, T9> Tail;$/;"	t	struct:testing::internal::Types9
Tail	ts/ts_gtest.h	/^  typedef Types9<T2, T3, T4, T5, T6, T7, T8, T9, T10> Tail;$/;"	t	struct:testing::internal::Types10
TargetArchs	core/gpumat.hpp	/^    class CV_EXPORTS TargetArchs$/;"	c	namespace:cv::gpu
TearDown	ts/ts_gtest.h	/^  virtual void TearDown() {}$/;"	f	class:testing::Environment
TearDownTestCase	ts/ts_gtest.h	/^  static void TearDownTestCase() {}$/;"	f	class:testing::Test
TearDownTestCaseFunc	ts/ts_gtest.h	/^  typedef internal::TearDownTestCaseFunc TearDownTestCaseFunc;$/;"	t	class:testing::Test
TearDownTestCaseFunc	ts/ts_gtest.h	/^typedef void (*TearDownTestCaseFunc)();$/;"	t	namespace:testing::internal
Temp	legacy/legacy.hpp	/^    float* Temp;            \/* Temporary vector                      *\/$/;"	m	struct:CvConDensation
Temp1	video/tracking.hpp	/^    float* Temp1;               \/* temp1->data.fl *\/$/;"	m	struct:CvKalman
Temp2	video/tracking.hpp	/^    float* Temp2;               \/* temp2->data.fl *\/$/;"	m	struct:CvKalman
Template	objdetect/objdetect.hpp	/^struct CV_EXPORTS Template$/;"	s	namespace:cv::linemod
TemplatePyramid	objdetect/objdetect.hpp	/^  typedef std::vector<Template> TemplatePyramid;$/;"	t	class:cv::linemod::Detector
TemplateSel	ts/ts_gtest.h	/^struct TemplateSel {$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates {$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, NoneT, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, NoneT, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, NoneT, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, NoneT, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, NoneT, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, NoneT,$/;"	s	namespace:testing::internal
Templates	ts/ts_gtest.h	/^struct Templates<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing::internal
Templates0	ts/ts_gtest.h	/^struct Templates0 {};$/;"	s	namespace:testing::internal
Templates1	ts/ts_gtest.h	/^struct Templates1 {$/;"	s	namespace:testing::internal
Templates10	ts/ts_gtest.h	/^struct Templates10 {$/;"	s	namespace:testing::internal
Templates11	ts/ts_gtest.h	/^struct Templates11 {$/;"	s	namespace:testing::internal
Templates12	ts/ts_gtest.h	/^struct Templates12 {$/;"	s	namespace:testing::internal
Templates13	ts/ts_gtest.h	/^struct Templates13 {$/;"	s	namespace:testing::internal
Templates14	ts/ts_gtest.h	/^struct Templates14 {$/;"	s	namespace:testing::internal
Templates15	ts/ts_gtest.h	/^struct Templates15 {$/;"	s	namespace:testing::internal
Templates16	ts/ts_gtest.h	/^struct Templates16 {$/;"	s	namespace:testing::internal
Templates17	ts/ts_gtest.h	/^struct Templates17 {$/;"	s	namespace:testing::internal
Templates18	ts/ts_gtest.h	/^struct Templates18 {$/;"	s	namespace:testing::internal
Templates19	ts/ts_gtest.h	/^struct Templates19 {$/;"	s	namespace:testing::internal
Templates2	ts/ts_gtest.h	/^struct Templates2 {$/;"	s	namespace:testing::internal
Templates20	ts/ts_gtest.h	/^struct Templates20 {$/;"	s	namespace:testing::internal
Templates21	ts/ts_gtest.h	/^struct Templates21 {$/;"	s	namespace:testing::internal
Templates22	ts/ts_gtest.h	/^struct Templates22 {$/;"	s	namespace:testing::internal
Templates23	ts/ts_gtest.h	/^struct Templates23 {$/;"	s	namespace:testing::internal
Templates24	ts/ts_gtest.h	/^struct Templates24 {$/;"	s	namespace:testing::internal
Templates25	ts/ts_gtest.h	/^struct Templates25 {$/;"	s	namespace:testing::internal
Templates26	ts/ts_gtest.h	/^struct Templates26 {$/;"	s	namespace:testing::internal
Templates27	ts/ts_gtest.h	/^struct Templates27 {$/;"	s	namespace:testing::internal
Templates28	ts/ts_gtest.h	/^struct Templates28 {$/;"	s	namespace:testing::internal
Templates29	ts/ts_gtest.h	/^struct Templates29 {$/;"	s	namespace:testing::internal
Templates3	ts/ts_gtest.h	/^struct Templates3 {$/;"	s	namespace:testing::internal
Templates30	ts/ts_gtest.h	/^struct Templates30 {$/;"	s	namespace:testing::internal
Templates31	ts/ts_gtest.h	/^struct Templates31 {$/;"	s	namespace:testing::internal
Templates32	ts/ts_gtest.h	/^struct Templates32 {$/;"	s	namespace:testing::internal
Templates33	ts/ts_gtest.h	/^struct Templates33 {$/;"	s	namespace:testing::internal
Templates34	ts/ts_gtest.h	/^struct Templates34 {$/;"	s	namespace:testing::internal
Templates35	ts/ts_gtest.h	/^struct Templates35 {$/;"	s	namespace:testing::internal
Templates36	ts/ts_gtest.h	/^struct Templates36 {$/;"	s	namespace:testing::internal
Templates37	ts/ts_gtest.h	/^struct Templates37 {$/;"	s	namespace:testing::internal
Templates38	ts/ts_gtest.h	/^struct Templates38 {$/;"	s	namespace:testing::internal
Templates39	ts/ts_gtest.h	/^struct Templates39 {$/;"	s	namespace:testing::internal
Templates4	ts/ts_gtest.h	/^struct Templates4 {$/;"	s	namespace:testing::internal
Templates40	ts/ts_gtest.h	/^struct Templates40 {$/;"	s	namespace:testing::internal
Templates41	ts/ts_gtest.h	/^struct Templates41 {$/;"	s	namespace:testing::internal
Templates42	ts/ts_gtest.h	/^struct Templates42 {$/;"	s	namespace:testing::internal
Templates43	ts/ts_gtest.h	/^struct Templates43 {$/;"	s	namespace:testing::internal
Templates44	ts/ts_gtest.h	/^struct Templates44 {$/;"	s	namespace:testing::internal
Templates45	ts/ts_gtest.h	/^struct Templates45 {$/;"	s	namespace:testing::internal
Templates46	ts/ts_gtest.h	/^struct Templates46 {$/;"	s	namespace:testing::internal
Templates47	ts/ts_gtest.h	/^struct Templates47 {$/;"	s	namespace:testing::internal
Templates48	ts/ts_gtest.h	/^struct Templates48 {$/;"	s	namespace:testing::internal
Templates49	ts/ts_gtest.h	/^struct Templates49 {$/;"	s	namespace:testing::internal
Templates5	ts/ts_gtest.h	/^struct Templates5 {$/;"	s	namespace:testing::internal
Templates50	ts/ts_gtest.h	/^struct Templates50 {$/;"	s	namespace:testing::internal
Templates6	ts/ts_gtest.h	/^struct Templates6 {$/;"	s	namespace:testing::internal
Templates7	ts/ts_gtest.h	/^struct Templates7 {$/;"	s	namespace:testing::internal
Templates8	ts/ts_gtest.h	/^struct Templates8 {$/;"	s	namespace:testing::internal
Templates9	ts/ts_gtest.h	/^struct Templates9 {$/;"	s	namespace:testing::internal
TemplatesMap	objdetect/objdetect.hpp	/^  typedef std::map<std::string, std::vector<TemplatePyramid> > TemplatesMap;$/;"	t	class:cv::linemod::Detector
TermCriteria	core/operations.hpp	/^inline TermCriteria::TermCriteria() : type(0), maxCount(0), epsilon(0) {}$/;"	f	class:cv::TermCriteria
TermCriteria	core/operations.hpp	/^inline TermCriteria::TermCriteria(const CvTermCriteria& criteria)$/;"	f	class:cv::TermCriteria
TermCriteria	core/operations.hpp	/^inline TermCriteria::TermCriteria(int _type, int _maxCount, double _epsilon)$/;"	f	class:cv::TermCriteria
TersePrintPrefixToStrings	ts/ts_gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple& t, Strings* strings) {$/;"	f	struct:testing::internal::TuplePrefixPrinter
TersePrintPrefixToStrings	ts/ts_gtest.h	/^  static void TersePrintPrefixToStrings(const Tuple&, Strings*) {}$/;"	f	struct:testing::internal::TuplePrefixPrinter
Test	ts/ts_gtest.h	/^class GTEST_API_ Test {$/;"	c	namespace:testing
TestBase	ts/ts_perf.hpp	/^class CV_EXPORTS TestBase: public ::testing::Test$/;"	c	namespace:perf
TestBaseWithParam	ts/ts_perf.hpp	/^template<typename T> class TestBaseWithParam: public TestBase, public ::testing::WithParamInterface<T> {};$/;"	c	namespace:perf
TestCase	ts/ts_gtest.h	/^class GTEST_API_ TestCase {$/;"	c	namespace:testing
TestCaseInfoContainer	ts/ts_gtest.h	/^  typedef ::std::vector<ParameterizedTestCaseInfoBase*> TestCaseInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseRegistry
TestDisabled	ts/ts_gtest.h	/^  static bool TestDisabled(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestEventListener	ts/ts_gtest.h	/^class TestEventListener {$/;"	c	namespace:testing
TestEventListeners	ts/ts_gtest.h	/^class GTEST_API_ TestEventListeners {$/;"	c	namespace:testing
TestFactoryBase	ts/ts_gtest.h	/^  TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
TestFactoryBase	ts/ts_gtest.h	/^class TestFactoryBase {$/;"	c	namespace:testing::internal
TestFactoryImpl	ts/ts_gtest.h	/^class TestFactoryImpl : public TestFactoryBase {$/;"	c	namespace:testing::internal
TestFailed	ts/ts_gtest.h	/^  static bool TestFailed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestInfo	ts/ts.hpp	/^struct TestInfo$/;"	s	namespace:cvtest
TestInfo	ts/ts_gtest.h	/^    TestInfo(const char* a_test_case_base_name,$/;"	f	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
TestInfo	ts/ts_gtest.h	/^  struct TestInfo {$/;"	s	class:testing::internal::ParameterizedTestCaseInfo
TestInfo	ts/ts_gtest.h	/^class GTEST_API_ TestInfo {$/;"	c	namespace:testing
TestInfoContainer	ts/ts_gtest.h	/^  typedef ::std::vector<linked_ptr<TestInfo> > TestInfoContainer;$/;"	t	class:testing::internal::ParameterizedTestCaseInfo
TestMetaFactory	ts/ts_gtest.h	/^  TestMetaFactory() {}$/;"	f	class:testing::internal::TestMetaFactory
TestMetaFactory	ts/ts_gtest.h	/^class TestMetaFactory$/;"	c	namespace:testing::internal
TestMetaFactoryBase	ts/ts_gtest.h	/^class TestMetaFactoryBase {$/;"	c	namespace:testing::internal
TestPartResult	ts/ts_gtest.h	/^  TestPartResult(Type a_type,$/;"	f	class:testing::TestPartResult
TestPartResult	ts/ts_gtest.h	/^class GTEST_API_ TestPartResult {$/;"	c	namespace:testing
TestPartResultArray	ts/ts_gtest.h	/^  TestPartResultArray() {}$/;"	f	class:testing::TestPartResultArray
TestPartResultArray	ts/ts_gtest.h	/^class GTEST_API_ TestPartResultArray {$/;"	c	namespace:testing
TestPartResultReporterInterface	ts/ts_gtest.h	/^class GTEST_API_ TestPartResultReporterInterface {$/;"	c	namespace:testing
TestPassed	ts/ts_gtest.h	/^  static bool TestPassed(const TestInfo* test_info) {$/;"	f	class:testing::TestCase
TestProperty	ts/ts_gtest.h	/^  TestProperty(const char* a_key, const char* a_value) :$/;"	f	class:testing::TestProperty
TestProperty	ts/ts_gtest.h	/^class TestProperty {$/;"	c	namespace:testing
TestResult	ts/ts_gtest.h	/^class GTEST_API_ TestResult {$/;"	c	namespace:testing
TestRole	ts/ts_gtest.h	/^  enum TestRole { OVERSEE_TEST, EXECUTE_TEST };$/;"	g	class:testing::internal::DeathTest
TestWithParam	ts/ts_gtest.h	/^class TestWithParam : public Test, public WithParamInterface<T> {$/;"	c	namespace:testing
ThisClass	flann/object_factory.h	/^    typedef ObjectFactory<BaseClass,UniqueIdType,ObjectCreator> ThisClass;$/;"	t	class:cvflann::ObjectFactory
ThreadFuncWithCLinkage	ts/ts_gtest.h	/^extern "C" inline void* ThreadFuncWithCLinkage(void* thread) {$/;"	f	namespace:std::tr1
ThreadLocal	ts/ts_gtest.h	/^  ThreadLocal() : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^  ThreadLocal() : value_() {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^  explicit ThreadLocal(const T& value) : key_(CreateKey()),$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^  explicit ThreadLocal(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal
ThreadLocal	ts/ts_gtest.h	/^class ThreadLocal {$/;"	c	namespace:std::tr1
ThreadLocalValueHolderBase	ts/ts_gtest.h	/^class ThreadLocalValueHolderBase {$/;"	c	namespace:std::tr1
ThreadWithParam	ts/ts_gtest.h	/^  ThreadWithParam($/;"	f	class:std::tr1::ThreadWithParam
ThreadWithParam	ts/ts_gtest.h	/^class ThreadWithParam : public ThreadWithParamBase {$/;"	c	namespace:std::tr1
ThreadWithParamBase	ts/ts_gtest.h	/^class ThreadWithParamBase {$/;"	c	namespace:std::tr1
TickMeter	contrib/contrib.hpp	/^    class CV_EXPORTS TickMeter$/;"	c	namespace:cv
TimeInMillis	ts/ts_gtest.h	/^typedef TypeWithSize<8>::Int TimeInMillis;  \/\/ Represents time in milliseconds.$/;"	t	namespace:std::tr1
TimeInMillis	ts/ts_gtest.h	/^typedef internal::TimeInMillis TimeInMillis;$/;"	t	namespace:testing
TimeVector	ts/ts_perf.hpp	/^    typedef std::vector<int64> TimeVector;$/;"	t	class:perf::TestBase
Tn	ml/ml.hpp	/^    int Tn;$/;"	m	struct:CvDTreeNode
ToLower	ts/ts_gtest.h	/^inline char ToLower(char ch) {$/;"	f	namespace:std::tr1
ToString	ts/ts_gtest.h	/^  String ToString() const { return pathname_; }$/;"	f	class:testing::internal::FilePath
ToUpper	ts/ts_gtest.h	/^inline char ToUpper(char ch) {$/;"	f	namespace:std::tr1
TrackID	legacy/blobtrack.hpp	/^    int         TrackID;$/;"	m	struct:CvBlobTrack
TrackbarCallback	highgui/highgui.hpp	/^typedef void (CV_CDECL *TrackbarCallback)(int pos, void* userdata);$/;"	t	namespace:cv
TrackedObject	contrib/detection_based_tracker.hpp	/^            TrackedObject(const cv::Rect& rect):numDetectedFrames(1), numFramesNotDetected(0)$/;"	f	struct:DetectionBasedTracker::TrackedObject
TrackedObject	contrib/detection_based_tracker.hpp	/^        struct TrackedObject$/;"	s	class:DetectionBasedTracker
TrackingState	contrib/contrib.hpp	/^    enum TrackingState$/;"	g	class:CvFuzzyMeanShiftTracker
TrainData	ml/ml.hpp	/^typedef CvMLData TrainData;$/;"	t	namespace:cv
TransformDispatcher	gpu/device/detail/transform_detail.hpp	/^        template<> struct TransformDispatcher<false>$/;"	s	namespace:cv::gpu::device::transform_detail
TransformDispatcher	gpu/device/detail/transform_detail.hpp	/^        template<> struct TransformDispatcher<true>$/;"	s	namespace:cv::gpu::device::transform_detail
TransformFunctorTraits	gpu/device/functional.hpp	/^    template <typename Func> struct TransformFunctorTraits : DefaultTransformFunctorTraits<Func> {};$/;"	s	namespace:cv::gpu::device
TransverseMercatorProjector	stitching/detail/warpers.hpp	/^struct CV_EXPORTS TransverseMercatorProjector : ProjectorBase$/;"	s	namespace:cv::detail
TransverseMercatorWarper	stitching/detail/warpers.hpp	/^    TransverseMercatorWarper(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::TransverseMercatorWarper
TransverseMercatorWarper	stitching/detail/warpers.hpp	/^class CV_EXPORTS TransverseMercatorWarper : public RotationWarperBase<TransverseMercatorProjector>$/;"	c	namespace:cv::detail
TransverseMercatorWarper	stitching/warpers.hpp	/^class TransverseMercatorWarper: public WarperCreator$/;"	c	namespace:cv
True	flann/dist.h	/^class True$/;"	c	namespace:cvflann
True	flann/dist.h	80;"	d
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 0, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 1, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 2, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 3, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 4, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 5, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 6, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 7, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 8, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TupleElement	ts/ts_gtest.h	/^struct TupleElement<true, 9, GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1::gtest_internal
TuplePrefixPrinter	ts/ts_gtest.h	/^struct TuplePrefixPrinter {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	ts/ts_gtest.h	/^struct TuplePrefixPrinter<0> {$/;"	s	namespace:testing::internal
TuplePrefixPrinter	ts/ts_gtest.h	/^struct TuplePrefixPrinter<1> {$/;"	s	namespace:testing::internal
TwoPassStabilizer	videostab/stabilizer.hpp	/^class CV_EXPORTS TwoPassStabilizer : public StabilizerBase, public IFrameSource$/;"	c	namespace:cv::videostab
Type	features2d/features2d.hpp	/^    typedef T Type;$/;"	t	struct:cv::Accumulator
Type	features2d/features2d.hpp	/^template<> struct Accumulator<char>   { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	features2d/features2d.hpp	/^template<> struct Accumulator<short>  { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	features2d/features2d.hpp	/^template<> struct Accumulator<unsigned char>  { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	features2d/features2d.hpp	/^template<> struct Accumulator<unsigned short> { typedef float Type; };$/;"	t	struct:cv::Accumulator
Type	flann/dist.h	/^struct Accumulator { typedef T Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<char>   { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<int> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<short>  { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<unsigned char>  { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<unsigned int> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	flann/dist.h	/^struct Accumulator<unsigned short> { typedef float Type; };$/;"	t	struct:cvflann::Accumulator
Type	ocl/ocl.hpp	/^            typedef T Type;$/;"	t	struct:cv::ocl::Accumulator
Type	ocl/ocl.hpp	/^            typedef float Type;$/;"	t	struct:cv::ocl::Accumulator
Type	ts/ts_gtest.h	/^  enum Type {$/;"	g	class:testing::TestPartResult
TypeId	ts/ts_gtest.h	/^typedef const void* TypeId;$/;"	t	namespace:testing::internal
TypeIdHelper	ts/ts_gtest.h	/^class TypeIdHelper {$/;"	c	namespace:testing::internal
TypeKind	ts/ts_gtest.h	/^enum TypeKind {$/;"	g	namespace:testing::internal2
TypeList	ts/ts_gtest.h	/^struct TypeList {$/;"	s	namespace:testing::internal
TypeList	ts/ts_gtest.h	/^struct TypeList<Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing::internal
TypeParameterizedTest	ts/ts_gtest.h	/^class TypeParameterizedTest {$/;"	c	namespace:testing::internal
TypeParameterizedTest	ts/ts_gtest.h	/^class TypeParameterizedTest<Fixture, TestSel, Types0> {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	ts/ts_gtest.h	/^class TypeParameterizedTestCase {$/;"	c	namespace:testing::internal
TypeParameterizedTestCase	ts/ts_gtest.h	/^class TypeParameterizedTestCase<Fixture, Templates0, Types> {$/;"	c	namespace:testing::internal
TypeTraits	gpu/device/type_traits.hpp	/^    template <typename T> struct TypeTraits$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 1> { typedef uchar vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 2> { typedef uchar2 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 3> { typedef uchar3 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 4> { typedef uchar4 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 8> { typedef uchar8 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 1> { typedef schar vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 2> { typedef char2 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 3> { typedef char3 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 4> { typedef char4 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeVec	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 8> { typedef char8 vec_type; };$/;"	s	namespace:cv::gpu::device
TypeWithSize	ts/ts_gtest.h	/^class TypeWithSize {$/;"	c	namespace:std::tr1
TypeWithSize	ts/ts_gtest.h	/^class TypeWithSize<4> {$/;"	c	namespace:std::tr1
TypeWithSize	ts/ts_gtest.h	/^class TypeWithSize<8> {$/;"	c	namespace:std::tr1
TypeWithoutFormatter	ts/ts_gtest.h	/^class TypeWithoutFormatter {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	ts/ts_gtest.h	/^class TypeWithoutFormatter<T, kConvertibleToInteger> {$/;"	c	namespace:testing::internal2
TypeWithoutFormatter	ts/ts_gtest.h	/^class TypeWithoutFormatter<T, kProtobuf> {$/;"	c	namespace:testing::internal2
TypedTestCasePState	ts/ts_gtest.h	/^  TypedTestCasePState() : registered_(false) {}$/;"	f	class:testing::internal::TypedTestCasePState
TypedTestCasePState	ts/ts_gtest.h	/^class GTEST_API_ TypedTestCasePState {$/;"	c	namespace:testing::internal
Types	ts/ts_gtest.h	/^struct Types {$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, T9, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, T8, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, T7, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, T6, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, T5, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, T4, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, T3, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, T2, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<T1, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types	ts/ts_gtest.h	/^struct Types<internal::None, internal::None, internal::None, internal::None,$/;"	s	namespace:testing
Types0	ts/ts_gtest.h	/^struct Types0 {};$/;"	s	namespace:testing::internal
Types1	ts/ts_gtest.h	/^struct Types1 {$/;"	s	namespace:testing::internal
Types10	ts/ts_gtest.h	/^struct Types10 {$/;"	s	namespace:testing::internal
Types11	ts/ts_gtest.h	/^struct Types11 {$/;"	s	namespace:testing::internal
Types12	ts/ts_gtest.h	/^struct Types12 {$/;"	s	namespace:testing::internal
Types13	ts/ts_gtest.h	/^struct Types13 {$/;"	s	namespace:testing::internal
Types14	ts/ts_gtest.h	/^struct Types14 {$/;"	s	namespace:testing::internal
Types15	ts/ts_gtest.h	/^struct Types15 {$/;"	s	namespace:testing::internal
Types16	ts/ts_gtest.h	/^struct Types16 {$/;"	s	namespace:testing::internal
Types17	ts/ts_gtest.h	/^struct Types17 {$/;"	s	namespace:testing::internal
Types18	ts/ts_gtest.h	/^struct Types18 {$/;"	s	namespace:testing::internal
Types19	ts/ts_gtest.h	/^struct Types19 {$/;"	s	namespace:testing::internal
Types2	ts/ts_gtest.h	/^struct Types2 {$/;"	s	namespace:testing::internal
Types20	ts/ts_gtest.h	/^struct Types20 {$/;"	s	namespace:testing::internal
Types21	ts/ts_gtest.h	/^struct Types21 {$/;"	s	namespace:testing::internal
Types22	ts/ts_gtest.h	/^struct Types22 {$/;"	s	namespace:testing::internal
Types23	ts/ts_gtest.h	/^struct Types23 {$/;"	s	namespace:testing::internal
Types24	ts/ts_gtest.h	/^struct Types24 {$/;"	s	namespace:testing::internal
Types25	ts/ts_gtest.h	/^struct Types25 {$/;"	s	namespace:testing::internal
Types26	ts/ts_gtest.h	/^struct Types26 {$/;"	s	namespace:testing::internal
Types27	ts/ts_gtest.h	/^struct Types27 {$/;"	s	namespace:testing::internal
Types28	ts/ts_gtest.h	/^struct Types28 {$/;"	s	namespace:testing::internal
Types29	ts/ts_gtest.h	/^struct Types29 {$/;"	s	namespace:testing::internal
Types3	ts/ts_gtest.h	/^struct Types3 {$/;"	s	namespace:testing::internal
Types30	ts/ts_gtest.h	/^struct Types30 {$/;"	s	namespace:testing::internal
Types31	ts/ts_gtest.h	/^struct Types31 {$/;"	s	namespace:testing::internal
Types32	ts/ts_gtest.h	/^struct Types32 {$/;"	s	namespace:testing::internal
Types33	ts/ts_gtest.h	/^struct Types33 {$/;"	s	namespace:testing::internal
Types34	ts/ts_gtest.h	/^struct Types34 {$/;"	s	namespace:testing::internal
Types35	ts/ts_gtest.h	/^struct Types35 {$/;"	s	namespace:testing::internal
Types36	ts/ts_gtest.h	/^struct Types36 {$/;"	s	namespace:testing::internal
Types37	ts/ts_gtest.h	/^struct Types37 {$/;"	s	namespace:testing::internal
Types38	ts/ts_gtest.h	/^struct Types38 {$/;"	s	namespace:testing::internal
Types39	ts/ts_gtest.h	/^struct Types39 {$/;"	s	namespace:testing::internal
Types4	ts/ts_gtest.h	/^struct Types4 {$/;"	s	namespace:testing::internal
Types40	ts/ts_gtest.h	/^struct Types40 {$/;"	s	namespace:testing::internal
Types41	ts/ts_gtest.h	/^struct Types41 {$/;"	s	namespace:testing::internal
Types42	ts/ts_gtest.h	/^struct Types42 {$/;"	s	namespace:testing::internal
Types43	ts/ts_gtest.h	/^struct Types43 {$/;"	s	namespace:testing::internal
Types44	ts/ts_gtest.h	/^struct Types44 {$/;"	s	namespace:testing::internal
Types45	ts/ts_gtest.h	/^struct Types45 {$/;"	s	namespace:testing::internal
Types46	ts/ts_gtest.h	/^struct Types46 {$/;"	s	namespace:testing::internal
Types47	ts/ts_gtest.h	/^struct Types47 {$/;"	s	namespace:testing::internal
Types48	ts/ts_gtest.h	/^struct Types48 {$/;"	s	namespace:testing::internal
Types49	ts/ts_gtest.h	/^struct Types49 {$/;"	s	namespace:testing::internal
Types5	ts/ts_gtest.h	/^struct Types5 {$/;"	s	namespace:testing::internal
Types50	ts/ts_gtest.h	/^struct Types50 {$/;"	s	namespace:testing::internal
Types6	ts/ts_gtest.h	/^struct Types6 {$/;"	s	namespace:testing::internal
Types7	ts/ts_gtest.h	/^struct Types7 {$/;"	s	namespace:testing::internal
Types8	ts/ts_gtest.h	/^struct Types8 {$/;"	s	namespace:testing::internal
Types9	ts/ts_gtest.h	/^struct Types9 {$/;"	s	namespace:testing::internal
U	contrib/contrib.hpp	/^        CvMat** U; \/\/size of array is equal to number of cameras$/;"	m	class:cv::LevMarqSparse
UInt	ts/ts_gtest.h	/^  typedef unsigned __int64 UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	ts/ts_gtest.h	/^  typedef unsigned int UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt	ts/ts_gtest.h	/^  typedef void UInt;$/;"	t	class:std::tr1::TypeWithSize
UInt32	ts/ts_gtest.h	/^typedef TypeWithSize<4>::UInt UInt32;$/;"	t	namespace:std::tr1
UInt64	ts/ts_gtest.h	/^typedef TypeWithSize<8>::UInt UInt64;$/;"	t	namespace:std::tr1
UPDATE_WEIGHTS	ml/ml.hpp	/^    enum { UPDATE_WEIGHTS = 1, NO_INPUT_SCALE = 2, NO_OUTPUT_SCALE = 4 };$/;"	e	enum:CvANN_MLP::__anon258
USE_AUTO_PARAMS	contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon23
USE_EQUALIZE_HIST	contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon23
USE_INITIAL_DISPARITY	contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon23
USE_MEDIAN_FILTERING	contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon23
USE_SMART_ID	contrib/contrib.hpp	/^        enum {USE_INITIAL_DISPARITY = 1, USE_EQUALIZE_HIST = 2, USE_SMART_ID = 4, USE_AUTO_PARAMS = 8, USE_MEDIAN_FILTERING = 16};$/;"	e	enum:cv::StereoVar::__anon23
USE_UNORDERED_MAP	flann/lsh_table.h	44;"	d
USE_UNORDERED_MAP	flann/lsh_table.h	46;"	d
UnConst	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnConst	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst<const U&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnConst	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnConst<const U>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnOpShift	gpu/device/functional.hpp	/^        template <size_t src_elem_size, size_t dst_elem_size> struct UnOpShift { enum { shift = 1 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
UnOpShift	gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 1> { enum { shift = 4 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
UnOpShift	gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 2> { enum { shift = 2 }; };$/;"	s	namespace:cv::gpu::device::functional_detail
UnVolatile	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnVolatile	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile<volatile U&>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnVolatile	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct UnVolatile<volatile U>$/;"	s	namespace:cv::gpu::device::type_traits_detail
UnaryReadWriteTraits	gpu/device/detail/transform_detail.hpp	/^        template <typename T, typename D, int shift> struct UnaryReadWriteTraits$/;"	s	namespace:cv::gpu::device::transform_detail
Uncompressed_NV12	gpu/gpu.hpp	/^        Uncompressed_NV12   = (('N'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/ Y,UV  (4:2:0)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_UYVY	gpu/gpu.hpp	/^        Uncompressed_UYVY   = (('U'<<24)|('Y'<<16)|('V'<<8)|('Y')),   \/\/ UYVY (4:2:2)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_YUV420	gpu/gpu.hpp	/^        Uncompressed_YUV420 = (('I'<<24)|('Y'<<16)|('U'<<8)|('V')),   \/\/ Y,U,V (4:2:0)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_YUYV	gpu/gpu.hpp	/^        Uncompressed_YUYV   = (('Y'<<24)|('U'<<16)|('Y'<<8)|('V')),   \/\/ YUYV\/YUY2 (4:2:2)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
Uncompressed_YV12	gpu/gpu.hpp	/^        Uncompressed_YV12   = (('Y'<<24)|('V'<<16)|('1'<<8)|('2')),   \/\/ Y,V,U (4:2:0)$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
UniqueRandom	flann/random.h	/^    UniqueRandom(int n)$/;"	f	class:cvflann::UniqueRandom
UniqueRandom	flann/random.h	/^class UniqueRandom$/;"	c	namespace:cvflann
UniqueResultSet	flann/result_set.h	/^    UniqueResultSet() :$/;"	f	class:cvflann::UniqueResultSet
UniqueResultSet	flann/result_set.h	/^class UniqueResultSet : public ResultSet<DistanceType>$/;"	c	namespace:cvflann
UnitTest	ts/ts_gtest.h	/^class GTEST_API_ UnitTest {$/;"	c	namespace:testing
UniversalPrint	ts/ts_gtest.h	/^void UniversalPrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrintArray	ts/ts_gtest.h	/^void UniversalPrintArray(const T* begin, size_t len, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalPrinter	ts/ts_gtest.h	/^class UniversalPrinter {$/;"	c	namespace:testing::internal
UniversalPrinter	ts/ts_gtest.h	/^class UniversalPrinter<T&> {$/;"	c	namespace:testing::internal
UniversalPrinter	ts/ts_gtest.h	/^class UniversalPrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrint	ts/ts_gtest.h	/^void UniversalTersePrint(const T& value, ::std::ostream* os) {$/;"	f	namespace:testing::internal
UniversalTersePrintTupleFieldsToStrings	ts/ts_gtest.h	/^Strings UniversalTersePrintTupleFieldsToStrings(const Tuple& value) {$/;"	f	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<T&> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<T[N]> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<const char*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<const wchar_t*> {$/;"	c	namespace:testing::internal
UniversalTersePrinter	ts/ts_gtest.h	/^class UniversalTersePrinter<wchar_t*> {$/;"	c	namespace:testing::internal
Unlock	ts/ts_gtest.h	/^  void Unlock() {$/;"	f	class:std::tr1::MutexBase
Unlock	ts/ts_gtest.h	/^  void Unlock() {}$/;"	f	class:std::tr1::Mutex
UnqualifiedType	gpu/device/type_traits.hpp	/^        typedef typename type_traits_detail::UnVolatile<typename type_traits_detail::UnConst<T>::type>::type UnqualifiedType;$/;"	t	struct:cv::gpu::device::TypeTraits
UnrollVecDiffCached	gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int N> struct UnrollVecDiffCached$/;"	s	namespace:cv::gpu::device::vec_distance_detail
UnrollVecDiffCached	gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM> struct UnrollVecDiffCached<THREAD_DIM, 0>$/;"	s	namespace:cv::gpu::device::vec_distance_detail
UntypedMatrix	flann/matrix.h	/^    UntypedMatrix(void* data_, long rows_, long cols_) :$/;"	f	class:cvflann::UntypedMatrix
UntypedMatrix	flann/matrix.h	/^class UntypedMatrix$/;"	c	namespace:cvflann
Update	legacy/blobtrack.hpp	/^    virtual void Update(CvBlob* \/*pBlob*\/, IplImage* \/*pImg*\/, IplImage* \/*pImgFG*\/ = NULL){};$/;"	f	class:CvBlobTrackerOne
Usage	core/opengl_interop.hpp	/^    enum Usage$/;"	g	class:cv::GlBuffer
UsePPData	legacy/blobtrack.hpp	/^    int                     UsePPData;$/;"	m	struct:CvBlobTrackerAutoParam1
UserThreadFunc	ts/ts_gtest.h	/^  typedef void (*UserThreadFunc)(T);$/;"	t	class:std::tr1::ThreadWithParam
V	contrib/contrib.hpp	/^        CvMat** V; \/\/size of array is equal to number of points$/;"	m	class:cv::LevMarqSparse
V	contrib/openfabmap.hpp	/^        mutable double V;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
V	objdetect/objdetect.hpp	/^    CvLSVMFilterPosition V;$/;"	m	struct:CvLSVMFilterObject
V0CompressionParameter	contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
VC1	gpu/gpu.hpp	/^        VC1,$/;"	e	enum:cv::gpu::VideoReader_GPU::Codec
VIBE_GPU	gpu/gpu.hpp	/^class CV_EXPORTS VIBE_GPU$/;"	c	namespace:cv::gpu
Value	legacy/blobtrack.hpp	/^    virtual double Value(int* \/*comp*\/, int \/*x*\/ = 0, int \/*y*\/ = 0){return -1;};$/;"	f	class:CvProb
ValueArray1	ts/ts_gtest.h	/^  explicit ValueArray1(T1 v1) : v1_(v1) {}$/;"	f	class:testing::internal::ValueArray1
ValueArray1	ts/ts_gtest.h	/^class ValueArray1 {$/;"	c	namespace:testing::internal
ValueArray10	ts/ts_gtest.h	/^  ValueArray10(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray10
ValueArray10	ts/ts_gtest.h	/^class ValueArray10 {$/;"	c	namespace:testing::internal
ValueArray11	ts/ts_gtest.h	/^  ValueArray11(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray11
ValueArray11	ts/ts_gtest.h	/^class ValueArray11 {$/;"	c	namespace:testing::internal
ValueArray12	ts/ts_gtest.h	/^  ValueArray12(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray12
ValueArray12	ts/ts_gtest.h	/^class ValueArray12 {$/;"	c	namespace:testing::internal
ValueArray13	ts/ts_gtest.h	/^  ValueArray13(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray13
ValueArray13	ts/ts_gtest.h	/^class ValueArray13 {$/;"	c	namespace:testing::internal
ValueArray14	ts/ts_gtest.h	/^  ValueArray14(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray14
ValueArray14	ts/ts_gtest.h	/^class ValueArray14 {$/;"	c	namespace:testing::internal
ValueArray15	ts/ts_gtest.h	/^  ValueArray15(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray15
ValueArray15	ts/ts_gtest.h	/^class ValueArray15 {$/;"	c	namespace:testing::internal
ValueArray16	ts/ts_gtest.h	/^  ValueArray16(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray16
ValueArray16	ts/ts_gtest.h	/^class ValueArray16 {$/;"	c	namespace:testing::internal
ValueArray17	ts/ts_gtest.h	/^  ValueArray17(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray17
ValueArray17	ts/ts_gtest.h	/^class ValueArray17 {$/;"	c	namespace:testing::internal
ValueArray18	ts/ts_gtest.h	/^  ValueArray18(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray18
ValueArray18	ts/ts_gtest.h	/^class ValueArray18 {$/;"	c	namespace:testing::internal
ValueArray19	ts/ts_gtest.h	/^  ValueArray19(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray19
ValueArray19	ts/ts_gtest.h	/^class ValueArray19 {$/;"	c	namespace:testing::internal
ValueArray2	ts/ts_gtest.h	/^  ValueArray2(T1 v1, T2 v2) : v1_(v1), v2_(v2) {}$/;"	f	class:testing::internal::ValueArray2
ValueArray2	ts/ts_gtest.h	/^class ValueArray2 {$/;"	c	namespace:testing::internal
ValueArray20	ts/ts_gtest.h	/^  ValueArray20(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray20
ValueArray20	ts/ts_gtest.h	/^class ValueArray20 {$/;"	c	namespace:testing::internal
ValueArray21	ts/ts_gtest.h	/^  ValueArray21(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray21
ValueArray21	ts/ts_gtest.h	/^class ValueArray21 {$/;"	c	namespace:testing::internal
ValueArray22	ts/ts_gtest.h	/^  ValueArray22(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray22
ValueArray22	ts/ts_gtest.h	/^class ValueArray22 {$/;"	c	namespace:testing::internal
ValueArray23	ts/ts_gtest.h	/^  ValueArray23(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray23
ValueArray23	ts/ts_gtest.h	/^class ValueArray23 {$/;"	c	namespace:testing::internal
ValueArray24	ts/ts_gtest.h	/^  ValueArray24(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray24
ValueArray24	ts/ts_gtest.h	/^class ValueArray24 {$/;"	c	namespace:testing::internal
ValueArray25	ts/ts_gtest.h	/^  ValueArray25(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray25
ValueArray25	ts/ts_gtest.h	/^class ValueArray25 {$/;"	c	namespace:testing::internal
ValueArray26	ts/ts_gtest.h	/^  ValueArray26(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray26
ValueArray26	ts/ts_gtest.h	/^class ValueArray26 {$/;"	c	namespace:testing::internal
ValueArray27	ts/ts_gtest.h	/^  ValueArray27(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray27
ValueArray27	ts/ts_gtest.h	/^class ValueArray27 {$/;"	c	namespace:testing::internal
ValueArray28	ts/ts_gtest.h	/^  ValueArray28(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray28
ValueArray28	ts/ts_gtest.h	/^class ValueArray28 {$/;"	c	namespace:testing::internal
ValueArray29	ts/ts_gtest.h	/^  ValueArray29(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray29
ValueArray29	ts/ts_gtest.h	/^class ValueArray29 {$/;"	c	namespace:testing::internal
ValueArray3	ts/ts_gtest.h	/^  ValueArray3(T1 v1, T2 v2, T3 v3) : v1_(v1), v2_(v2), v3_(v3) {}$/;"	f	class:testing::internal::ValueArray3
ValueArray3	ts/ts_gtest.h	/^class ValueArray3 {$/;"	c	namespace:testing::internal
ValueArray30	ts/ts_gtest.h	/^  ValueArray30(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray30
ValueArray30	ts/ts_gtest.h	/^class ValueArray30 {$/;"	c	namespace:testing::internal
ValueArray31	ts/ts_gtest.h	/^  ValueArray31(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray31
ValueArray31	ts/ts_gtest.h	/^class ValueArray31 {$/;"	c	namespace:testing::internal
ValueArray32	ts/ts_gtest.h	/^  ValueArray32(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray32
ValueArray32	ts/ts_gtest.h	/^class ValueArray32 {$/;"	c	namespace:testing::internal
ValueArray33	ts/ts_gtest.h	/^  ValueArray33(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray33
ValueArray33	ts/ts_gtest.h	/^class ValueArray33 {$/;"	c	namespace:testing::internal
ValueArray34	ts/ts_gtest.h	/^  ValueArray34(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray34
ValueArray34	ts/ts_gtest.h	/^class ValueArray34 {$/;"	c	namespace:testing::internal
ValueArray35	ts/ts_gtest.h	/^  ValueArray35(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray35
ValueArray35	ts/ts_gtest.h	/^class ValueArray35 {$/;"	c	namespace:testing::internal
ValueArray36	ts/ts_gtest.h	/^  ValueArray36(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray36
ValueArray36	ts/ts_gtest.h	/^class ValueArray36 {$/;"	c	namespace:testing::internal
ValueArray37	ts/ts_gtest.h	/^  ValueArray37(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray37
ValueArray37	ts/ts_gtest.h	/^class ValueArray37 {$/;"	c	namespace:testing::internal
ValueArray38	ts/ts_gtest.h	/^  ValueArray38(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray38
ValueArray38	ts/ts_gtest.h	/^class ValueArray38 {$/;"	c	namespace:testing::internal
ValueArray39	ts/ts_gtest.h	/^  ValueArray39(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray39
ValueArray39	ts/ts_gtest.h	/^class ValueArray39 {$/;"	c	namespace:testing::internal
ValueArray4	ts/ts_gtest.h	/^  ValueArray4(T1 v1, T2 v2, T3 v3, T4 v4) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray4
ValueArray4	ts/ts_gtest.h	/^class ValueArray4 {$/;"	c	namespace:testing::internal
ValueArray40	ts/ts_gtest.h	/^  ValueArray40(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray40
ValueArray40	ts/ts_gtest.h	/^class ValueArray40 {$/;"	c	namespace:testing::internal
ValueArray41	ts/ts_gtest.h	/^  ValueArray41(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray41
ValueArray41	ts/ts_gtest.h	/^class ValueArray41 {$/;"	c	namespace:testing::internal
ValueArray42	ts/ts_gtest.h	/^  ValueArray42(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray42
ValueArray42	ts/ts_gtest.h	/^class ValueArray42 {$/;"	c	namespace:testing::internal
ValueArray43	ts/ts_gtest.h	/^  ValueArray43(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray43
ValueArray43	ts/ts_gtest.h	/^class ValueArray43 {$/;"	c	namespace:testing::internal
ValueArray44	ts/ts_gtest.h	/^  ValueArray44(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray44
ValueArray44	ts/ts_gtest.h	/^class ValueArray44 {$/;"	c	namespace:testing::internal
ValueArray45	ts/ts_gtest.h	/^  ValueArray45(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray45
ValueArray45	ts/ts_gtest.h	/^class ValueArray45 {$/;"	c	namespace:testing::internal
ValueArray46	ts/ts_gtest.h	/^  ValueArray46(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray46
ValueArray46	ts/ts_gtest.h	/^class ValueArray46 {$/;"	c	namespace:testing::internal
ValueArray47	ts/ts_gtest.h	/^  ValueArray47(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray47
ValueArray47	ts/ts_gtest.h	/^class ValueArray47 {$/;"	c	namespace:testing::internal
ValueArray48	ts/ts_gtest.h	/^  ValueArray48(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray48
ValueArray48	ts/ts_gtest.h	/^class ValueArray48 {$/;"	c	namespace:testing::internal
ValueArray49	ts/ts_gtest.h	/^  ValueArray49(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray49
ValueArray49	ts/ts_gtest.h	/^class ValueArray49 {$/;"	c	namespace:testing::internal
ValueArray5	ts/ts_gtest.h	/^  ValueArray5(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5) : v1_(v1), v2_(v2), v3_(v3),$/;"	f	class:testing::internal::ValueArray5
ValueArray5	ts/ts_gtest.h	/^class ValueArray5 {$/;"	c	namespace:testing::internal
ValueArray50	ts/ts_gtest.h	/^  ValueArray50(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	class:testing::internal::ValueArray50
ValueArray50	ts/ts_gtest.h	/^class ValueArray50 {$/;"	c	namespace:testing::internal
ValueArray6	ts/ts_gtest.h	/^  ValueArray6(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6) : v1_(v1), v2_(v2),$/;"	f	class:testing::internal::ValueArray6
ValueArray6	ts/ts_gtest.h	/^class ValueArray6 {$/;"	c	namespace:testing::internal
ValueArray7	ts/ts_gtest.h	/^  ValueArray7(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7) : v1_(v1),$/;"	f	class:testing::internal::ValueArray7
ValueArray7	ts/ts_gtest.h	/^class ValueArray7 {$/;"	c	namespace:testing::internal
ValueArray8	ts/ts_gtest.h	/^  ValueArray8(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	class:testing::internal::ValueArray8
ValueArray8	ts/ts_gtest.h	/^class ValueArray8 {$/;"	c	namespace:testing::internal
ValueArray9	ts/ts_gtest.h	/^  ValueArray9(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	class:testing::internal::ValueArray9
ValueArray9	ts/ts_gtest.h	/^class ValueArray9 {$/;"	c	namespace:testing::internal
ValueHolder	ts/ts_gtest.h	/^    explicit ValueHolder(const T& value) : value_(value) {}$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
ValueHolder	ts/ts_gtest.h	/^  class ValueHolder : public ThreadLocalValueHolderBase {$/;"	c	class:std::tr1::ThreadLocal
ValueType	features2d/features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::L1
ValueType	features2d/features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::L2
ValueType	features2d/features2d.hpp	/^    typedef T ValueType;$/;"	t	struct:cv::SL2
ValueType	features2d/features2d.hpp	/^    typedef unsigned char ValueType;$/;"	t	struct:cv::Hamming
ValueType	features2d/features2d.hpp	/^    typedef unsigned char ValueType;$/;"	t	struct:cv::HammingMultilevel
ValueType	ocl/ocl.hpp	/^            typedef T ValueType;$/;"	t	struct:cv::ocl::L1
ValueType	ocl/ocl.hpp	/^            typedef T ValueType;$/;"	t	struct:cv::ocl::L2
ValueType	ocl/ocl.hpp	/^            typedef unsigned char ValueType;$/;"	t	struct:cv::ocl::Hamming
Values	ts/ts_gtest.h	/^    T11> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T12> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T13> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> Values(T1 v1,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21, T22> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20, T21> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19, T20> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18, T19> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17, T18> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16, T17> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15, T16> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14, T15> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T14> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T26> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T27> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T28> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> Values(T1 v1,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36, T37> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35, T36> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34, T35> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33, T34> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32, T33> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31, T32> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30, T31> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29, T30> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T29> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T41> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T42> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T43> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47, T48, T49, T50> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47, T48, T49> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47, T48> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46, T47> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45, T46> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44, T45> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^    T44> Values(T1 v1, T2 v2, T3 v3, T4 v4, T5 v5, T6 v6, T7 v7, T8 v8, T9 v9,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Values(T1 v1,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray1<T1> Values(T1 v1) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray2<T1, T2> Values(T1 v1, T2 v2) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray3<T1, T2, T3> Values(T1 v1, T2 v2, T3 v3) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray4<T1, T2, T3, T4> Values(T1 v1, T2 v2, T3 v3, T4 v4) {$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray5<T1, T2, T3, T4, T5> Values(T1 v1, T2 v2, T3 v3, T4 v4,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray6<T1, T2, T3, T4, T5, T6> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray7<T1, T2, T3, T4, T5, T6, T7> Values(T1 v1, T2 v2, T3 v3,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray8<T1, T2, T3, T4, T5, T6, T7, T8> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
Values	ts/ts_gtest.h	/^internal::ValueArray9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Values(T1 v1, T2 v2,$/;"	f	namespace:testing
ValuesIn	ts/ts_gtest.h	/^ValuesIn(ForwardIterator begin, ForwardIterator end) {$/;"	f	namespace:testing
ValuesIn	ts/ts_gtest.h	/^internal::ParamGenerator<typename Container::value_type> ValuesIn($/;"	f	namespace:testing
ValuesInIteratorRangeGenerator	ts/ts_gtest.h	/^  ValuesInIteratorRangeGenerator(ForwardIterator begin, ForwardIterator end)$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
ValuesInIteratorRangeGenerator	ts/ts_gtest.h	/^class ValuesInIteratorRangeGenerator : public ParamGeneratorInterface<T> {$/;"	c	namespace:testing::internal
Vec	core/core.hpp	/^template<typename _Tp, int cn> class CV_EXPORTS Vec;$/;"	m	namespace:cv	typeref:class:cv::CV_EXPORTS
Vec	core/operations.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, _T2 alpha, Matx_ScaleOp op)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, const Matx<_Tp, cn, 1>& b, Matx_AddOp op)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^Vec<_Tp, cn>::Vec(const Matx<_Tp, cn, 1>& a, const Matx<_Tp, cn, 1>& b, Matx_SubOp op)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec()$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3, _Tp v4, _Tp v5)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(_Tp v0, _Tp v1, _Tp v2, _Tp v3,$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(const Vec<_Tp, cn>& m)$/;"	f	class:cv::Vec
Vec	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::Vec(const _Tp* values)$/;"	f	class:cv::Vec
VecCommaInitializer	core/operations.hpp	/^VecCommaInitializer<_Tp, cn>::VecCommaInitializer(Vec<_Tp, cn>* _vec)$/;"	f	class:cv::VecCommaInitializer
VecDiffCachedCalculator	gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int MAX_LEN> struct VecDiffCachedCalculator<THREAD_DIM, MAX_LEN, false>$/;"	s	namespace:cv::gpu::device::vec_distance_detail
VecDiffCachedCalculator	gpu/device/detail/vec_distance_detail.hpp	/^        template <int THREAD_DIM, int MAX_LEN> struct VecDiffCachedCalculator<THREAD_DIM, MAX_LEN, true>$/;"	s	namespace:cv::gpu::device::vec_distance_detail
VecDiffCachedRegister	gpu/device/vec_distance.hpp	/^        template <typename T1> __device__ __forceinline__ VecDiffCachedRegister(const T1* vec1, int len, U* smem, int glob_tid, int tid)$/;"	f	struct:cv::gpu::device::VecDiffCachedRegister
VecDiffCachedRegister	gpu/device/vec_distance.hpp	/^    template <int THREAD_DIM, int MAX_LEN, bool LEN_EQ_MAX_LEN, typename U> struct VecDiffCachedRegister$/;"	s	namespace:cv::gpu::device
VecDiffGlobal	gpu/device/vec_distance.hpp	/^        explicit __device__ __forceinline__ VecDiffGlobal(const T1* vec1_, int = 0, void* = 0, int = 0, int = 0)$/;"	f	struct:cv::gpu::device::VecDiffGlobal
VecDiffGlobal	gpu/device/vec_distance.hpp	/^    template <int THREAD_DIM, typename T1> struct VecDiffGlobal$/;"	s	namespace:cv::gpu::device
VecReaderProxy	core/operations.hpp	/^    VecReaderProxy( FileNodeIterator* _it ) : it(_it) {}$/;"	f	class:cv::VecReaderProxy
VecReaderProxy	core/operations.hpp	/^template<typename _Tp, int numflag> class CV_EXPORTS VecReaderProxy$/;"	c	namespace:cv
VecReaderProxy	core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS VecReaderProxy<_Tp,1>$/;"	c	namespace:cv
VecTraits	gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char1>$/;"	s	namespace:cv::gpu::device
VecTraits	gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char2>$/;"	s	namespace:cv::gpu::device
VecTraits	gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char3>$/;"	s	namespace:cv::gpu::device
VecTraits	gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char4>$/;"	s	namespace:cv::gpu::device
VecTraits	gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char8>$/;"	s	namespace:cv::gpu::device
VecTraits	gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<char>$/;"	s	namespace:cv::gpu::device
VecTraits	gpu/device/vec_traits.hpp	/^    template<> struct VecTraits<schar>$/;"	s	namespace:cv::gpu::device
VecWriterProxy	core/operations.hpp	/^    VecWriterProxy( FileStorage* _fs ) : fs(_fs) {}$/;"	f	class:cv::VecWriterProxy
VecWriterProxy	core/operations.hpp	/^template<typename _Tp, int numflag> class CV_EXPORTS VecWriterProxy$/;"	c	namespace:cv
VecWriterProxy	core/operations.hpp	/^template<typename _Tp> class CV_EXPORTS VecWriterProxy<_Tp,1>$/;"	c	namespace:cv
Vector	core/operations.hpp	/^    Vector() {}$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^    Vector(_Tp* _data, size_t _size, bool _copyData=false)$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^    Vector(const Vector& d) { *this = d; }$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^    Vector(const Vector& d, const Range& r_)$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^    Vector(const std::vector<_Tp>& vec, bool _copyData=false)$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^    Vector(size_t _size)  { resize(_size); }$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^    Vector(size_t _size, const _Tp& val)$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^    template<int n> Vector(const Vec<_Tp, n>& vec)$/;"	f	class:cv::Vector
Vector	core/operations.hpp	/^template <typename _Tp> class CV_EXPORTS Vector$/;"	c	namespace:cv
VectorDescriptorMatch	features2d/features2d.hpp	/^typedef VectorDescriptorMatcher VectorDescriptorMatch;$/;"	t	namespace:cv
VectorDescriptorMatcher	features2d/features2d.hpp	/^class CV_EXPORTS VectorDescriptorMatcher : public GenericDescriptorMatcher$/;"	c	namespace:cv
Vertex	imgproc/imgproc.hpp	/^    struct CV_EXPORTS Vertex$/;"	s	class:cv::Subdiv2D
VideoCapture	highgui/highgui.hpp	/^class CV_EXPORTS_W VideoCapture$/;"	c	namespace:cv
VideoFileSource	videostab/frame_source.hpp	/^class CV_EXPORTS VideoFileSource : public IFrameSource$/;"	c	namespace:cv::videostab
VideoReader_GPU	gpu/gpu.hpp	/^class CV_EXPORTS VideoReader_GPU$/;"	c	namespace:cv::gpu
VideoSource	gpu/gpu.hpp	/^        VideoSource() : frameQueue_(0), videoParser_(0) {}$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
VideoSource	gpu/gpu.hpp	/^    class CV_EXPORTS VideoSource$/;"	c	class:cv::gpu::VideoReader_GPU
VideoWriter	highgui/highgui.hpp	/^class CV_EXPORTS_W VideoWriter$/;"	c	namespace:cv
VideoWriter_GPU	gpu/gpu.hpp	/^class CV_EXPORTS VideoWriter_GPU$/;"	c	namespace:cv::gpu
View	core/wimage.hpp	/^WImageView<T> WImage<T>::View(int c, int r, int width, int height) {$/;"	f	class:cv::WImage
View	core/wimage.hpp	/^WImageViewC<T, C> WImageC<T, C>::View(int c, int r, int width, int height) {$/;"	f	class:cv::WImageC
Vis_index	contrib/contrib.hpp	/^        CvMat* Vis_index; \/\/ matrix which element is index of measurement for point i and camera j$/;"	m	class:cv::LevMarqSparse
VoronoiSeamFinder	stitching/detail/seam_finders.hpp	/^class CV_EXPORTS VoronoiSeamFinder : public PairwiseSeamFinder$/;"	c	namespace:cv::detail
W	contrib/contrib.hpp	/^        CvMat** W;$/;"	m	class:cv::LevMarqSparse
WARMUP_NONE	ts/ts_perf.hpp	/^        WARMUP_NONE$/;"	e	enum:perf::TestBase::__anon194
WARMUP_READ	ts/ts_perf.hpp	/^        WARMUP_READ,$/;"	e	enum:perf::TestBase::__anon194
WARMUP_RNG	ts/ts_perf.hpp	/^        WARMUP_RNG,$/;"	e	enum:perf::TestBase::__anon194
WARMUP_WRITE	ts/ts_perf.hpp	/^        WARMUP_WRITE,$/;"	e	enum:perf::TestBase::__anon194
WARP_INVERSE_MAP	imgproc/imgproc.hpp	/^    WARP_INVERSE_MAP=CV_WARP_INVERSE_MAP$/;"	e	enum:cv::__anon272
WARP_SHUFFLE_FUNCTIONS	core/gpumat.hpp	/^        WARP_SHUFFLE_FUNCTIONS = FEATURE_SET_COMPUTE_30$/;"	e	enum:cv::gpu::FeatureSet
WARP_SIZE	gpu/device/warp.hpp	/^            WARP_SIZE     = 1 << LOG_WARP_SIZE,$/;"	e	enum:cv::gpu::device::Warp::__anon76
WAVE_CORRECT_HORIZ	stitching/detail/motion_estimators.hpp	/^    WAVE_CORRECT_HORIZ,$/;"	e	enum:cv::detail::WaveCorrectKind
WAVE_CORRECT_VERT	stitching/detail/motion_estimators.hpp	/^    WAVE_CORRECT_VERT$/;"	e	enum:cv::detail::WaveCorrectKind
WEIGHT_BLACK	core/opengl_interop.hpp	/^        WEIGHT_BLACK    = 900$/;"	e	enum:cv::GlFont::Weight
WEIGHT_BOLD	core/opengl_interop.hpp	/^        WEIGHT_BOLD     = 700,$/;"	e	enum:cv::GlFont::Weight
WEIGHT_LIGHT	core/opengl_interop.hpp	/^        WEIGHT_LIGHT    = 300,$/;"	e	enum:cv::GlFont::Weight
WEIGHT_NORMAL	core/opengl_interop.hpp	/^        WEIGHT_NORMAL   = 400,$/;"	e	enum:cv::GlFont::Weight
WEIGHT_SEMIBOLD	core/opengl_interop.hpp	/^        WEIGHT_SEMIBOLD = 600,$/;"	e	enum:cv::GlFont::Weight
WIN32	core/internal.hpp	55;"	d
WIN32	core/internal.hpp	68;"	d
WINDOW_AUTOSIZE	highgui/highgui.hpp	/^    WINDOW_AUTOSIZE = CV_WINDOW_AUTOSIZE, \/\/ the user cannot resize the window, the size is constrainted by the image displayed$/;"	e	enum:cv::__anon46
WINDOW_NORMAL	highgui/highgui.hpp	/^    WINDOW_NORMAL   = CV_WINDOW_NORMAL,   \/\/ the user can resize the window (no constraint) \/ also use to switch a fullscreen window to a normal size$/;"	e	enum:cv::__anon46
WINDOW_OPENGL	highgui/highgui.hpp	/^    WINDOW_OPENGL   = CV_WINDOW_OPENGL,   \/\/ window with opengl support$/;"	e	enum:cv::__anon46
WImage	core/wimage.hpp	/^    explicit WImage(IplImage* img) : image_(img) {$/;"	f	class:cv::WImage
WImage	core/wimage.hpp	/^class WImage$/;"	c	namespace:cv
WImage1_16s	core/wimage.hpp	/^typedef WImageC<short, 1>        WImage1_16s;$/;"	t	namespace:cv
WImage1_16u	core/wimage.hpp	/^typedef WImageC<ushort, 1>        WImage1_16u;$/;"	t	namespace:cv
WImage1_b	core/wimage.hpp	/^typedef WImageC<uchar, 1>        WImage1_b;$/;"	t	namespace:cv
WImage1_f	core/wimage.hpp	/^typedef WImageC<float, 1>        WImage1_f;$/;"	t	namespace:cv
WImage3_16s	core/wimage.hpp	/^typedef WImageC<short, 3>        WImage3_16s;$/;"	t	namespace:cv
WImage3_16u	core/wimage.hpp	/^typedef WImageC<ushort, 3>        WImage3_16u;$/;"	t	namespace:cv
WImage3_b	core/wimage.hpp	/^typedef WImageC<uchar, 3>        WImage3_b;$/;"	t	namespace:cv
WImage3_f	core/wimage.hpp	/^typedef WImageC<float, 3>        WImage3_f;$/;"	t	namespace:cv
WImageBuffer	core/wimage.hpp	/^    WImageBuffer() : WImage<T>(0) {}$/;"	f	class:cv::WImageBuffer
WImageBuffer	core/wimage.hpp	/^    WImageBuffer(int width, int height, int nchannels) : WImage<T>(0) {$/;"	f	class:cv::WImageBuffer
WImageBuffer	core/wimage.hpp	/^    explicit WImageBuffer(IplImage* img) : WImage<T>(img) {}$/;"	f	class:cv::WImageBuffer
WImageBuffer	core/wimage.hpp	/^class WImageBuffer : public WImage<T>$/;"	c	namespace:cv
WImageBuffer1_16s	core/wimage.hpp	/^typedef WImageBufferC<short, 1>  WImageBuffer1_16s;$/;"	t	namespace:cv
WImageBuffer1_16u	core/wimage.hpp	/^typedef WImageBufferC<ushort, 1>  WImageBuffer1_16u;$/;"	t	namespace:cv
WImageBuffer1_b	core/wimage.hpp	/^typedef WImageBufferC<uchar, 1>  WImageBuffer1_b;$/;"	t	namespace:cv
WImageBuffer1_f	core/wimage.hpp	/^typedef WImageBufferC<float, 1>  WImageBuffer1_f;$/;"	t	namespace:cv
WImageBuffer3_16s	core/wimage.hpp	/^typedef WImageBufferC<short, 3>  WImageBuffer3_16s;$/;"	t	namespace:cv
WImageBuffer3_16u	core/wimage.hpp	/^typedef WImageBufferC<ushort, 3>  WImageBuffer3_16u;$/;"	t	namespace:cv
WImageBuffer3_b	core/wimage.hpp	/^typedef WImageBufferC<uchar, 3>  WImageBuffer3_b;$/;"	t	namespace:cv
WImageBuffer3_f	core/wimage.hpp	/^typedef WImageBufferC<float, 3>  WImageBuffer3_f;$/;"	t	namespace:cv
WImageBufferC	core/wimage.hpp	/^    WImageBufferC() : WImageC<T, C>(0) {}$/;"	f	class:cv::WImageBufferC
WImageBufferC	core/wimage.hpp	/^    WImageBufferC(int width, int height) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageBufferC
WImageBufferC	core/wimage.hpp	/^    explicit WImageBufferC(IplImage* img) : WImageC<T, C>(img) {}$/;"	f	class:cv::WImageBufferC
WImageBufferC	core/wimage.hpp	/^class WImageBufferC : public WImageC<T, C>$/;"	c	namespace:cv
WImageBuffer_16s	core/wimage.hpp	/^typedef WImageBuffer<short>      WImageBuffer_16s;$/;"	t	namespace:cv
WImageBuffer_16u	core/wimage.hpp	/^typedef WImageBuffer<ushort>      WImageBuffer_16u;$/;"	t	namespace:cv
WImageBuffer_b	core/wimage.hpp	/^typedef WImageBuffer<uchar>      WImageBuffer_b;$/;"	t	namespace:cv
WImageBuffer_f	core/wimage.hpp	/^typedef WImageBuffer<float>      WImageBuffer_f;$/;"	t	namespace:cv
WImageC	core/wimage.hpp	/^    explicit WImageC(IplImage* img) : WImage<T>(img) {$/;"	f	class:cv::WImageC
WImageC	core/wimage.hpp	/^class WImageC : public WImage<T>$/;"	c	namespace:cv
WImageView	core/wimage.hpp	/^    WImageView(IplImage* img) : WImage<T>(img) {}$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^    WImageView(const WImage<T>& img) : WImage<T>(0) {$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^WImageView<T>::WImageView(T* data, int width, int height, int nchannels, int width_step)$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^WImageView<T>::WImageView(WImage<T>* img, int c, int r, int width, int height)$/;"	f	class:cv::WImageView
WImageView	core/wimage.hpp	/^class WImageView : public WImage<T>$/;"	c	namespace:cv
WImageView1_16s	core/wimage.hpp	/^typedef WImageViewC<short, 1>    WImageView1_16s;$/;"	t	namespace:cv
WImageView1_16u	core/wimage.hpp	/^typedef WImageViewC<ushort, 1>    WImageView1_16u;$/;"	t	namespace:cv
WImageView1_b	core/wimage.hpp	/^typedef WImageViewC<uchar, 1>    WImageView1_b;$/;"	t	namespace:cv
WImageView1_f	core/wimage.hpp	/^typedef WImageViewC<float, 1>    WImageView1_f;$/;"	t	namespace:cv
WImageView3_16s	core/wimage.hpp	/^typedef WImageViewC<short, 3>    WImageView3_16s;$/;"	t	namespace:cv
WImageView3_16u	core/wimage.hpp	/^typedef WImageViewC<ushort, 3>    WImageView3_16u;$/;"	t	namespace:cv
WImageView3_b	core/wimage.hpp	/^typedef WImageViewC<uchar, 3>    WImageView3_b;$/;"	t	namespace:cv
WImageView3_f	core/wimage.hpp	/^typedef WImageViewC<float, 3>    WImageView3_f;$/;"	t	namespace:cv
WImageViewC	core/wimage.hpp	/^    WImageViewC(IplImage* img) : WImageC<T, C>(img) {}$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^    WImageViewC(const WImageC<T, C>& img) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^    WImageViewC(const WImageViewC<T, C>& img) : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC() : WImageC<T, C>(0) {$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC(T* data, int width, int height, int width_step)$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^WImageViewC<T, C>::WImageViewC(WImageC<T, C>* img, int c, int r, int width, int height)$/;"	f	class:cv::WImageViewC
WImageViewC	core/wimage.hpp	/^class WImageViewC : public WImageC<T, C>$/;"	c	namespace:cv
WImageView_16s	core/wimage.hpp	/^typedef WImageView<short>        WImageView_16s;$/;"	t	namespace:cv
WImageView_16u	core/wimage.hpp	/^typedef WImageView<ushort>        WImageView_16u;$/;"	t	namespace:cv
WImageView_b	core/wimage.hpp	/^typedef WImageView<uchar>        WImageView_b;$/;"	t	namespace:cv
WImageView_f	core/wimage.hpp	/^typedef WImageView<float>        WImageView_f;$/;"	t	namespace:cv
WImage_16s	core/wimage.hpp	/^typedef WImage<short>            WImage_16s;$/;"	t	namespace:cv
WImage_16u	core/wimage.hpp	/^typedef WImage<ushort>            WImage_16u;$/;"	t	namespace:cv
WImage_b	core/wimage.hpp	/^typedef WImage<uchar>            WImage_b;$/;"	t	namespace:cv
WImage_f	core/wimage.hpp	/^typedef WImage<float>            WImage_f;$/;"	t	namespace:cv
WND_PROP_ASPECT_RATIO	highgui/highgui.hpp	/^    WND_PROP_ASPECT_RATIO = CV_WND_PROP_ASPECTRATIO, \/\/ window's aspect ration$/;"	e	enum:cv::__anon46
WND_PROP_AUTOSIZE	highgui/highgui.hpp	/^    WND_PROP_AUTOSIZE     = CV_WND_PROP_AUTOSIZE,    \/\/ autosize property$/;"	e	enum:cv::__anon46
WND_PROP_FULLSCREEN	highgui/highgui.hpp	/^    WND_PROP_FULLSCREEN   = CV_WND_PROP_FULLSCREEN,  \/\/ fullscreen property$/;"	e	enum:cv::__anon46
WND_PROP_OPENGL	highgui/highgui.hpp	/^    WND_PROP_OPENGL       = CV_WND_PROP_OPENGL       \/\/ opengl support$/;"	e	enum:cv::__anon46
WORDSIZE	flann/allocator.h	/^const size_t     WORDSIZE=16;$/;"	m	namespace:cvflann
WString	core/core.hpp	/^typedef std::basic_string<wchar_t> WString;$/;"	t	namespace:cv
WTA_K	features2d/features2d.hpp	/^    CV_PROP_RW int WTA_K;$/;"	m	class:cv::ORB
WTA_K_	gpu/gpu.hpp	/^    int WTA_K_;$/;"	m	class:cv::gpu::ORB_GPU
WaitForNotification	ts/ts_gtest.h	/^  void WaitForNotification() {$/;"	f	class:std::tr1::Notification
Warp	gpu/device/warp.hpp	/^    struct Warp$/;"	s	namespace:cv::gpu::device
WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct WarpReductor<16>$/;"	s	namespace:cv::gpu::device::utility_detail
WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct WarpReductor<32>$/;"	s	namespace:cv::gpu::device::utility_detail
WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct WarpReductor<64>$/;"	s	namespace:cv::gpu::device::utility_detail
WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <> struct WarpReductor<8>$/;"	s	namespace:cv::gpu::device::utility_detail
WarpReductor	gpu/device/detail/reduction_detail.hpp	/^        template <int n> struct WarpReductor$/;"	s	namespace:cv::gpu::device::utility_detail
WarpScan	gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScan() {}$/;"	f	struct:cv::gpu::device::WarpScan
WarpScan	gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScan(const WarpScan& other) { (void)other; }$/;"	f	struct:cv::gpu::device::WarpScan
WarpScan	gpu/device/scan.hpp	/^    template <ScanKind Kind, typename T, typename F> struct WarpScan$/;"	s	namespace:cv::gpu::device
WarpScanNoComp	gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScanNoComp() {}$/;"	f	struct:cv::gpu::device::WarpScanNoComp
WarpScanNoComp	gpu/device/scan.hpp	/^        __device__ __forceinline__ WarpScanNoComp(const WarpScanNoComp& other) { (void)other; }$/;"	f	struct:cv::gpu::device::WarpScanNoComp
WarpScanNoComp	gpu/device/scan.hpp	/^    template <ScanKind Kind , typename T, typename F> struct WarpScanNoComp$/;"	s	namespace:cv::gpu::device
WarperCreator	stitching/warpers.hpp	/^class WarperCreator$/;"	c	namespace:cv
WaveCorrectKind	stitching/detail/motion_estimators.hpp	/^enum WaveCorrectKind$/;"	g	namespace:cv::detail
Weight	core/opengl_interop.hpp	/^    enum Weight$/;"	g	class:cv::GlFont
WeightingDeblurer	videostab/deblurring.hpp	/^class CV_EXPORTS WeightingDeblurer : public DeblurerBase$/;"	c	namespace:cv::videostab
Width	core/wimage.hpp	/^    int Width() const {return image_->width; }$/;"	f	class:cv::WImage
WidthStep	core/wimage.hpp	/^    int WidthStep() const {return image_->widthStep; }$/;"	f	class:cv::WImage
WithOutMask	gpu/device/utility.hpp	/^        __device__ __forceinline__ WithOutMask(){}$/;"	f	struct:cv::gpu::device::WithOutMask
WithOutMask	gpu/device/utility.hpp	/^        __device__ __forceinline__ WithOutMask(const WithOutMask& mask){}$/;"	f	struct:cv::gpu::device::WithOutMask
WithOutMask	gpu/device/utility.hpp	/^    struct WithOutMask$/;"	s	namespace:cv::gpu::device
WithParamInterface	ts/ts_gtest.h	/^class WithParamInterface {$/;"	c	namespace:testing
WordStats	contrib/openfabmap.hpp	/^        WordStats() :$/;"	f	struct:cv::of2::FabMapFBO::WordStats
WordStats	contrib/openfabmap.hpp	/^        WordStats(int _q, double _info) :$/;"	f	struct:cv::of2::FabMapFBO::WordStats
WordStats	contrib/openfabmap.hpp	/^    struct WordStats {$/;"	s	class:cv::of2::FabMapFBO
Write	legacy/blobtrack.hpp	/^    virtual void Write(CvFileStorage* fs, const char* name)$/;"	f	class:CvBlobSeq
Write	ts/ts_gtest.h	/^inline int Write(int fd, const void* buf, unsigned int count) {$/;"	f	namespace:std::tr1::posix
WriteStructContext	core/operations.hpp	/^class CV_EXPORTS WriteStructContext$/;"	c	namespace:cv
Wsr	contrib/contrib.hpp	/^        vector<double> Wsr;$/;"	m	class:cv::LogPolar_Overlapping
X	contrib/contrib.hpp	/^        CvMat* X; \/\/measurement$/;"	m	class:cv::LevMarqSparse
XYZ2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB()$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB(const XYZ2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ XYZ2RGB(const XYZ2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
XYZ2RGB	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct XYZ2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
XYZ2RGB	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct XYZ2RGB$/;"	s	namespace:cv::gpu::device::color_detail
XYZ2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ __forceinline__ void XYZ2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::gpu::device::color_detail
XYZ2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ void XYZ2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
XYZ2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ __forceinline__ uint XYZ2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
X_ROW	gpu/gpu.hpp	/^        X_ROW = 0,$/;"	e	enum:cv::gpu::ORB_GPU::__anon73
X_ROW	gpu/gpu.hpp	/^        X_ROW = 0,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
X_ROW	ocl/ocl.hpp	/^                X_ROW = 0,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
Xcoef	legacy/legacy.hpp	/^    double Xcoef;$/;"	m	struct:CvStereoLineCoeff
XcoefA	legacy/legacy.hpp	/^    double XcoefA;$/;"	m	struct:CvStereoLineCoeff
XcoefAB	legacy/legacy.hpp	/^    double XcoefAB;$/;"	m	struct:CvStereoLineCoeff
XcoefB	legacy/legacy.hpp	/^    double XcoefB;$/;"	m	struct:CvStereoLineCoeff
YAPE	legacy/legacy.hpp	/^typedef LDetector YAPE;$/;"	t	namespace:cv
YCrCb2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB()$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB(const YCrCb2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YCrCb2RGB(const YCrCb2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
YCrCb2RGB	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct YCrCb2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
YCrCb2RGB	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct YCrCb2RGB$/;"	s	namespace:cv::gpu::device::color_detail
YCrCb2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void YCrCb2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YCrCb2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> __device__ __forceinline__ void YCrCb2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YCrCb2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint YCrCb2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
YUV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB() : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB()$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB(const YUV2RGB& other_) : unary_function<uint, uint>(){}$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ YUV2RGB(const YUV2RGB& other_)$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
YUV2RGB	gpu/device/detail/color_detail.hpp	/^        template <int bidx> struct YUV2RGB<uchar, 4, 4, bidx> : unary_function<uint, uint>$/;"	s	namespace:cv::gpu::device::color_detail
YUV2RGB	gpu/device/detail/color_detail.hpp	/^        template <typename T, int scn, int dcn, int bidx> struct YUV2RGB$/;"	s	namespace:cv::gpu::device::color_detail
YUV2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T, typename D> static __device__ void YUV2RGBConvert(const T& src, D* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YUV2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx, typename T> static __device__ __forceinline__ void YUV2RGBConvert(const T& src, float* dst)$/;"	f	namespace:cv::gpu::device::color_detail
YUV2RGBConvert	gpu/device/detail/color_detail.hpp	/^        template <int bidx> static __device__ uint YUV2RGBConvert(uint src)$/;"	f	namespace:cv::gpu::device::color_detail
YUV420	gpu/gpu.hpp	/^        YUV420,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
YUV422	gpu/gpu.hpp	/^        YUV422,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
YUV444	gpu/gpu.hpp	/^        YUV444,$/;"	e	enum:cv::gpu::VideoReader_GPU::ChromaFormat
Y_ROW	gpu/gpu.hpp	/^        Y_ROW,$/;"	e	enum:cv::gpu::ORB_GPU::__anon73
Y_ROW	gpu/gpu.hpp	/^        Y_ROW,$/;"	e	enum:cv::gpu::SURF_GPU::KeypointLayout
Y_ROW	ocl/ocl.hpp	/^                Y_ROW,$/;"	e	enum:cv::ocl::SURF_OCL::KeypointLayout
Ycoef	legacy/legacy.hpp	/^    double Ycoef;$/;"	m	struct:CvStereoLineCoeff
YcoefA	legacy/legacy.hpp	/^    double YcoefA;$/;"	m	struct:CvStereoLineCoeff
YcoefAB	legacy/legacy.hpp	/^    double YcoefAB;$/;"	m	struct:CvStereoLineCoeff
YcoefB	legacy/legacy.hpp	/^    double YcoefB;$/;"	m	struct:CvStereoLineCoeff
Yes	gpu/device/functional.hpp	/^        typedef char Yes;$/;"	t	struct:cv::gpu::device::IsBinaryFunction
Yes	gpu/device/functional.hpp	/^        typedef char Yes;$/;"	t	struct:cv::gpu::device::IsUnaryFunction
Yj	contrib/contrib.hpp	/^        CvMat** Yj; \/\/length of array is i = num_points$/;"	m	class:cv::LevMarqSparse
Zcoef	legacy/legacy.hpp	/^    double Zcoef;$/;"	m	struct:CvStereoLineCoeff
ZcoefA	legacy/legacy.hpp	/^    double ZcoefA;$/;"	m	struct:CvStereoLineCoeff
ZcoefAB	legacy/legacy.hpp	/^    double ZcoefAB;$/;"	m	struct:CvStereoLineCoeff
ZcoefB	legacy/legacy.hpp	/^    double ZcoefB;$/;"	m	struct:CvStereoLineCoeff
ZeroIterator	flann/dist.h	/^struct ZeroIterator$/;"	s	namespace:cvflann
_CRT_SECURE_NO_DEPRECATE	core/types_c.h	48;"	d
_CV_ALWAYS_NO_PROFILE_	core/internal.hpp	75;"	d
_CV_ALWAYS_PROFILE_	core/internal.hpp	74;"	d
_CvPixelPosition32f	legacy/compat.hpp	/^typedef struct _CvPixelPosition32f$/;"	s
_CvPixelPosition8s	legacy/compat.hpp	/^typedef struct _CvPixelPosition8s$/;"	s
_CvPixelPosition8u	legacy/compat.hpp	/^typedef struct _CvPixelPosition8u$/;"	s
_HAS_EXCEPTIONS	ts/ts_gtest.h	441;"	d
_InputArray	core/mat.hpp	/^inline _InputArray::_InputArray(const Scalar& s)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.hpp	/^template<typename _Tp, int m, int n> inline _InputArray::_InputArray(const Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const Mat_<_Tp>& m)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const _Tp* vec, int n)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const vector<_Tp>& vec)$/;"	f	class:cv::_InputArray
_InputArray	core/mat.hpp	/^template<typename _Tp> inline _InputArray::_InputArray(const vector<vector<_Tp> >& vec)$/;"	f	class:cv::_InputArray
_IplConvKernel	core/types_c.h	/^typedef struct _IplConvKernel$/;"	s
_IplConvKernelFP	core/types_c.h	/^typedef struct _IplConvKernelFP$/;"	s
_IplImage	core/types_c.h	/^typedef struct _IplImage$/;"	s
_IplROI	core/types_c.h	/^typedef struct _IplROI$/;"	s
_OPENCV_FLANN_HPP_	flann/flann.hpp	44;"	d
_OPENCV_MINIFLANN_HPP_	flann/miniflann.hpp	44;"	d
_OutputArray	core/mat.hpp	/^template<typename _Tp, int m, int n> inline _OutputArray::_OutputArray(Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp, int m, int n> inline _OutputArray::_OutputArray(const Matx<_Tp, m, n>& mtx)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(Mat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(_Tp* vec, int n)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const Mat_<_Tp>& m)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const _Tp* vec, int n)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const vector<_Tp>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(const vector<vector<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(vector<Mat_<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(vector<_Tp>& vec)$/;"	f	class:cv::_OutputArray
_OutputArray	core/mat.hpp	/^template<typename _Tp> inline _OutputArray::_OutputArray(vector<vector<_Tp> >& vec)$/;"	f	class:cv::_OutputArray
_WIN32	core/internal.hpp	58;"	d
_WIN32	core/internal.hpp	71;"	d
__BEGIN__	core/internal.hpp	85;"	d
__CV_BEGIN__	core/core_c.h	1853;"	d
__CV_END__	core/core_c.h	1854;"	d
__CV_EXIT__	core/core_c.h	1855;"	d
__CV_GPU_DEPR_AFTER__	core/cuda_devptrs.hpp	/^        } __CV_GPU_DEPR_AFTER__ ;$/;"	m	namespace:cv::gpu	typeref:struct:cv::gpu::DevMem2D_
__CV_GPU_DEPR_AFTER__	core/cuda_devptrs.hpp	128;"	d
__CV_GPU_DEPR_AFTER__	core/cuda_devptrs.hpp	132;"	d
__CV_GPU_DEPR_AFTER__	core/cuda_devptrs.hpp	135;"	d
__CV_GPU_DEPR_AFTER__	core/gpumat.hpp	/^        __CV_GPU_DEPR_BEFORE__ template <typename _Tp> operator DevMem2D_<_Tp>() const __CV_GPU_DEPR_AFTER__;$/;"	m	class:cv::gpu::GpuMat
__CV_GPU_DEPR_AFTER__	core/gpumat.hpp	/^        __CV_GPU_DEPR_BEFORE__ template <typename _Tp> operator PtrStep_<_Tp>() const __CV_GPU_DEPR_AFTER__;$/;"	m	class:cv::gpu::GpuMat
__CV_GPU_DEPR_AFTER__	core/gpumat.hpp	275;"	d
__CV_GPU_DEPR_BEFORE__	core/cuda_devptrs.hpp	127;"	d
__CV_GPU_DEPR_BEFORE__	core/cuda_devptrs.hpp	131;"	d
__CV_GPU_DEPR_BEFORE__	core/cuda_devptrs.hpp	134;"	d
__CV_GPU_DEPR_BEFORE__	core/gpumat.hpp	274;"	d
__CV_GPU_HOST_DEVICE__	core/cuda_devptrs.hpp	49;"	d
__CV_GPU_HOST_DEVICE__	core/cuda_devptrs.hpp	51;"	d
__END__	core/internal.hpp	86;"	d
__OPENCV_ALL_HPP__	opencv.hpp	44;"	d
__OPENCV_BACKGROUND_SEGM_HPP__	video/background_segm.hpp	44;"	d
__OPENCV_CALIB3D_HPP__	calib3d/calib3d.hpp	44;"	d
__OPENCV_COMPAT_HPP__	legacy/compat.hpp	51;"	d
__OPENCV_CONTRIB_HPP__	contrib/contrib.hpp	44;"	d
__OPENCV_CONTRIB_RETINA_HPP__	contrib/retina.hpp	66;"	d
__OPENCV_CORE_C_H__	core/core_c.h	45;"	d
__OPENCV_CORE_DEVPTRS_HPP__	core/cuda_devptrs.hpp	44;"	d
__OPENCV_CORE_EIGEN_HPP__	core/eigen.hpp	44;"	d
__OPENCV_CORE_HPP__	core/core.hpp	47;"	d
__OPENCV_CORE_INTERNAL_HPP__	core/internal.hpp	49;"	d
__OPENCV_CORE_MATRIX_OPERATIONS_HPP__	core/mat.hpp	44;"	d
__OPENCV_CORE_OPERATIONS_HPP__	core/operations.hpp	44;"	d
__OPENCV_CORE_TYPES_H__	core/types_c.h	44;"	d
__OPENCV_CORE_WIMAGE_HPP__	core/wimage.hpp	101;"	d
__OPENCV_CVSTREAMS_H__	legacy/streams.hpp	43;"	d
__OPENCV_FEATURES_2D_HPP__	features2d/features2d.hpp	44;"	d
__OPENCV_GPUMAT_HPP__	core/gpumat.hpp	44;"	d
__OPENCV_GPU_BORDER_INTERPOLATE_HPP__	gpu/device/border_interpolate.hpp	44;"	d
__OPENCV_GPU_COLOR_DETAIL_HPP__	gpu/device/detail/color_detail.hpp	44;"	d
__OPENCV_GPU_COLOR_HPP__	gpu/device/color.hpp	44;"	d
__OPENCV_GPU_COMMON_HPP__	gpu/device/common.hpp	44;"	d
__OPENCV_GPU_DATAMOV_UTILS_HPP__	gpu/device/datamov_utils.hpp	44;"	d
__OPENCV_GPU_DEVICE_FUNCATTRIB_HPP_	gpu/device/funcattrib.hpp	45;"	d
__OPENCV_GPU_DEVICE_WARP_HPP__	gpu/device/warp.hpp	44;"	d
__OPENCV_GPU_DYNAMIC_SMEM_HPP__	gpu/device/dynamic_smem.hpp	44;"	d
__OPENCV_GPU_FILTERS_HPP__	gpu/device/filters.hpp	44;"	d
__OPENCV_GPU_FUNCTIONAL_HPP__	gpu/device/functional.hpp	44;"	d
__OPENCV_GPU_GPU_DEVICE_STATIC_CHECK_HPP__	gpu/device/static_check.hpp	44;"	d
__OPENCV_GPU_HOST_DEVICE__	gpu/device/static_check.hpp	47;"	d
__OPENCV_GPU_HOST_DEVICE__	gpu/device/static_check.hpp	49;"	d
__OPENCV_GPU_HOST_DEVICE__	gpu/device/static_check.hpp	65;"	d
__OPENCV_GPU_HPP__	gpu/gpu.hpp	44;"	d
__OPENCV_GPU_HPP__	ocl/ocl.hpp	45;"	d
__OPENCV_GPU_LIMITS_GPU_HPP__	gpu/device/limits.hpp	44;"	d
__OPENCV_GPU_MATRIX_OPERATIONS_HPP__	ocl/matrix_operations.hpp	44;"	d
__OPENCV_GPU_REDUCTION_DETAIL_HPP__	gpu/device/detail/reduction_detail.hpp	44;"	d
__OPENCV_GPU_SATURATE_CAST_HPP__	gpu/device/saturate_cast.hpp	44;"	d
__OPENCV_GPU_SCAN_HPP__	gpu/device/scan.hpp	44;"	d
__OPENCV_GPU_STREAM_ACCESSOR_HPP__	gpu/stream_accessor.hpp	44;"	d
__OPENCV_GPU_TRANSFORM_DETAIL_HPP__	gpu/device/detail/transform_detail.hpp	44;"	d
__OPENCV_GPU_TRANSFORM_HPP__	gpu/device/transform.hpp	44;"	d
__OPENCV_GPU_TYPE_TRAITS_DETAIL_HPP__	gpu/device/detail/type_traits_detail.hpp	44;"	d
__OPENCV_GPU_TYPE_TRAITS_HPP__	gpu/device/type_traits.hpp	44;"	d
__OPENCV_GPU_UTILITY_HPP__	gpu/device/utility.hpp	44;"	d
__OPENCV_GPU_VECMATH_HPP__	gpu/device/vec_math.hpp	44;"	d
__OPENCV_GPU_VEC_DISTANCE_DETAIL_HPP__	gpu/device/detail/vec_distance_detail.hpp	44;"	d
__OPENCV_GPU_VEC_DISTANCE_HPP__	gpu/device/vec_distance.hpp	44;"	d
__OPENCV_GPU_VEC_TRAITS_HPP__	gpu/device/vec_traits.hpp	44;"	d
__OPENCV_GTESTCV_HPP__	ts/ts.hpp	2;"	d
__OPENCV_HIGHGUI_HPP__	highgui/highgui.hpp	44;"	d
__OPENCV_HIGHGUI_H__	highgui/highgui_c.h	43;"	d
__OPENCV_HYBRIDTRACKER_H_	contrib/hybridtracker.hpp	44;"	d
__OPENCV_IMGPROC_HPP__	imgproc/imgproc.hpp	48;"	d
__OPENCV_IMGPROC_IMGPROC_C_H__	imgproc/imgproc_c.h	44;"	d
__OPENCV_IMGPROC_TYPES_C_H__	imgproc/types_c.h	44;"	d
__OPENCV_LEGACY_HPP__	legacy/legacy.hpp	43;"	d
__OPENCV_ML_HPP__	ml/ml.hpp	42;"	d
__OPENCV_NONFREE_FEATURES_2D_HPP__	nonfree/features2d.hpp	44;"	d
__OPENCV_NONFREE_HPP__	nonfree/nonfree.hpp	44;"	d
__OPENCV_OBJDETECT_HPP__	objdetect/objdetect.hpp	44;"	d
__OPENCV_OPENFABMAP_H_	contrib/openfabmap.hpp	53;"	d
__OPENCV_OPENGL_INTEROP_HPP__	core/opengl_interop.hpp	44;"	d
__OPENCV_PHOTO_C_H__	photo/photo_c.h	44;"	d
__OPENCV_PHOTO_HPP__	photo/photo.hpp	44;"	d
__OPENCV_STITCHING_AUTOCALIB_HPP__	stitching/detail/autocalib.hpp	44;"	d
__OPENCV_STITCHING_BLENDERS_HPP__	stitching/detail/blenders.hpp	44;"	d
__OPENCV_STITCHING_CAMERA_HPP__	stitching/detail/camera.hpp	44;"	d
__OPENCV_STITCHING_EXPOSURE_COMPENSATE_HPP__	stitching/detail/exposure_compensate.hpp	44;"	d
__OPENCV_STITCHING_MATCHERS_HPP__	stitching/detail/matchers.hpp	44;"	d
__OPENCV_STITCHING_MOTION_ESTIMATORS_HPP__	stitching/detail/motion_estimators.hpp	44;"	d
__OPENCV_STITCHING_SEAM_FINDERS_HPP__	stitching/detail/seam_finders.hpp	44;"	d
__OPENCV_STITCHING_STITCHER_HPP__	stitching/stitcher.hpp	44;"	d
__OPENCV_STITCHING_UTIL_HPP__	stitching/detail/util.hpp	44;"	d
__OPENCV_STITCHING_UTIL_INL_HPP__	stitching/detail/util_inl.hpp	44;"	d
__OPENCV_STITCHING_WARPERS_HPP__	stitching/detail/warpers.hpp	44;"	d
__OPENCV_STITCHING_WARPERS_INL_HPP__	stitching/detail/warpers_inl.hpp	44;"	d
__OPENCV_STITCHING_WARPER_CREATORS_HPP__	stitching/warpers.hpp	44;"	d
__OPENCV_TRACKING_HPP__	video/tracking.hpp	48;"	d
__OPENCV_TS_PERF_HPP__	ts/ts_perf.hpp	2;"	d
__OPENCV_VERSION_HPP__	core/version.hpp	48;"	d
__OPENCV_VIDEOSTAB_DEBLURRING_HPP__	videostab/deblurring.hpp	44;"	d
__OPENCV_VIDEOSTAB_FAST_MARCHING_HPP__	videostab/fast_marching.hpp	44;"	d
__OPENCV_VIDEOSTAB_FAST_MARCHING_INL_HPP__	videostab/fast_marching_inl.hpp	44;"	d
__OPENCV_VIDEOSTAB_FRAME_SOURCE_HPP__	videostab/frame_source.hpp	44;"	d
__OPENCV_VIDEOSTAB_GLOBAL_MOTION_HPP__	videostab/global_motion.hpp	44;"	d
__OPENCV_VIDEOSTAB_HPP__	videostab/videostab.hpp	44;"	d
__OPENCV_VIDEOSTAB_INPAINTINT_HPP__	videostab/inpainting.hpp	44;"	d
__OPENCV_VIDEOSTAB_LOG_HPP__	videostab/log.hpp	44;"	d
__OPENCV_VIDEOSTAB_MOTION_STABILIZING_HPP__	videostab/motion_stabilizing.hpp	44;"	d
__OPENCV_VIDEOSTAB_OPTICAL_FLOW_HPP__	videostab/optical_flow.hpp	44;"	d
__OPENCV_VIDEOSTAB_STABILIZER_HPP__	videostab/stabilizer.hpp	44;"	d
__OPENCV_VIDEOSURVEILLANCE_H__	legacy/blobtrack.hpp	44;"	d
__OPENCV_VIDEO_HPP__	video/video.hpp	44;"	d
___cudaSafeCall	gpu/device/common.hpp	/^static inline void ___cudaSafeCall(cudaError_t err, const char *file, const int line, const char *func = "")$/;"	f
__xgetbv	core/internal.hpp	129;"	d
__xgetbv	core/internal.hpp	131;"	d
_dataAsRow	contrib/contrib.hpp	/^        bool _dataAsRow;$/;"	m	class:cv::LDA
_declareHelper	ts/ts_perf.hpp	/^    class CV_EXPORTS _declareHelper$/;"	c	class:perf::TestBase
_eigenvalues	contrib/contrib.hpp	/^        Mat _eigenvalues;$/;"	m	class:cv::LDA
_eigenvectors	contrib/contrib.hpp	/^        Mat _eigenvectors;$/;"	m	class:cv::LDA
_inputBuffer	contrib/retina.hpp	/^    std::valarray<float> _inputBuffer; \/\/!< buffer used to convert input cv::Mat to internal retina buffers format (valarrays)$/;"	m	class:cv::Retina
_log	flann/logger.h	/^    int _log(int level, const char* fmt, va_list arglist)$/;"	f	class:cvflann::Logger
_num_components	contrib/contrib.hpp	/^        int _num_components;$/;"	m	class:cv::LDA
_retinaFilter	contrib/retina.hpp	/^    RetinaFilter* _retinaFilter; \/\/!< the pointer to the retina module, allocated with instance construction$/;"	m	class:cv::Retina
_retinaParameters	contrib/retina.hpp	/^    RetinaParameters _retinaParameters; \/\/ structure of parameters$/;"	m	class:cv::Retina
_setDestination	flann/logger.h	/^    void _setDestination(const char* name)$/;"	f	class:cvflann::Logger
_timeadjustment	ts/ts_perf.hpp	/^    static int64 _timeadjustment;$/;"	m	class:perf::TestBase
_type	ts/ts_perf.hpp	/^    int _type;$/;"	m	class:perf::MatType
a	contrib/contrib.hpp	/^            double a;$/;"	m	struct:cv::LogPolar_Adjacent::pixel
a	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
a	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
a	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
a	core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
a	gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	m	struct:cv::gpu::device::IsBinaryFunction::No
a	gpu/device/functional.hpp	/^        struct No {Yes a[2];};$/;"	m	struct:cv::gpu::device::IsUnaryFunction::No
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearPortraitProjector
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearProjector
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniPortraitProjector
a	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniProjector
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearPortraitWarper
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearWarper
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniPortraitWarper
a	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniWarper
a0	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a1	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a2	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a3	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a4	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a5	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a6	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
a7	gpu/device/vec_traits.hpp	/^        double a0, a1, a2, a3, a4, a5, a6, a7;$/;"	m	struct:cv::gpu::device::double8
ab	gpu/gpu.hpp	/^    GpuMat lab, l, ab;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
abs	core/core.hpp	72;"	d
abs	core/mat.hpp	/^template<typename _Tp> static inline MatExpr abs(const Mat_<_Tp>& m)$/;"	f	namespace:cv
abs	core/operations.hpp	/^double abs(const Complex<_Tp>& a)$/;"	f	namespace:cv
abs	flann/dist.h	/^inline T abs(T x) { return (x<0) ? -x : x; }$/;"	f	namespace:cvflann
abs	flann/dist.h	/^inline double abs<double>(double x) { return fabs(x); }$/;"	f	namespace:cvflann
abs	flann/dist.h	/^inline float abs<float>(float x) { return fabsf(x); }$/;"	f	namespace:cvflann
abs	flann/dist.h	/^inline int abs<int>(int x) { return ::abs(x); }$/;"	f	namespace:cvflann
accum	gpu/gpu.hpp	/^    GpuMat accum;$/;"	m	struct:cv::gpu::HoughCirclesBuf
accum	gpu/gpu.hpp	/^    GpuMat accum;$/;"	m	struct:cv::gpu::HoughLinesBuf
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::ChiSquareDistance
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::HellingerDistance
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::HistIntersectionDistance
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::KL_Divergence
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L1
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L2
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::L2_Simple
accum_dist	flann/dist.h	/^    inline ResultType accum_dist(const U& a, const V& b, int) const$/;"	f	struct:cvflann::MinkowskiDistance
activ_func	ml/ml.hpp	/^    int activ_func;$/;"	m	class:CvANN_MLP
active_var_mask	ml/ml.hpp	/^    CvMat* active_var_mask;$/;"	m	class:CvRTrees
active_vars	ml/ml.hpp	/^    CvMat* active_vars;$/;"	m	class:CvBoost
active_vars_abs	ml/ml.hpp	/^    CvMat* active_vars_abs;$/;"	m	class:CvBoost
actual_num_bands_	stitching/detail/blenders.hpp	/^    int actual_num_bands_, num_bands_;$/;"	m	class:cv::detail::MultiBandBlender
add	contrib/openfabmap.hpp	/^    void add(const Mat& queryImgDescriptors) {$/;"	f	class:cv::of2::FabMap2
add	flann/lsh_table.h	/^    void add(Matrix<ElementType> dataset)$/;"	f	class:cvflann::lsh::LshTable
add	flann/lsh_table.h	/^    void add(unsigned int value, const ElementType* feature)$/;"	f	class:cvflann::lsh::LshTable
addParam	core/operations.hpp	/^template<typename _Tp, typename _Base> inline void AlgorithmInfo::addParam(Algorithm& algo, const char* parameter,$/;"	f	class:cv::AlgorithmInfo
addParam	core/operations.hpp	/^template<typename _Tp> inline void AlgorithmInfo::addParam(Algorithm& algo, const char* parameter,$/;"	f	class:cv::AlgorithmInfo
addPoint	flann/result_set.h	/^    inline void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNUniqueResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::KNNSimpleResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::RadiusResultSet
addPoint	flann/result_set.h	/^    void addPoint(DistanceType dist, int index)$/;"	f	class:cvflann::RadiusUniqueResultSet
addTraining	contrib/openfabmap.hpp	/^    void addTraining(const Mat& queryImgDescriptors) {$/;"	f	class:cv::of2::FabMap2
addValue	flann/simplex_downhill.h	/^void addValue(int pos, float val, float* vals, T* point, T* points, int n)$/;"	f	namespace:cvflann
addedDescCount	features2d/features2d.hpp	/^    int addedDescCount;$/;"	m	class:cv::FlannBasedMatcher
addref	core/mat.hpp	/^inline void Mat::addref()$/;"	f	class:cv::Mat
addref	core/mat.hpp	/^inline void SparseMat::addref()$/;"	f	class:cv::SparseMat
addref	core/operations.hpp	/^    void addref() { if( hdr.refcount ) CV_XADD(hdr.refcount, 1); }$/;"	f	class:cv::Vector
addref	core/operations.hpp	/^template<typename _Tp> inline void Ptr<_Tp>::addref()$/;"	f	class:cv::Ptr
addref	legacy/legacy.hpp	/^    void addref() const$/;"	f	class:CvMatrix
address	core/core.hpp	/^    const_pointer address(const_reference r) { return &r; }$/;"	f	class:cv::Allocator
address	core/core.hpp	/^    pointer address(reference r) { return &r; }$/;"	f	class:cv::Allocator
adj_matr	legacy/legacy.hpp	/^    int**    adj_matr;$/;"	m	struct:CvCliqueFinder
adjustROI	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::adjustROI( int dtop, int dbottom, int dleft, int dright )$/;"	f	class:cv::Mat_
adjustROI	ocl/matrix_operations.hpp	/^        inline oclMat &oclMat::adjustROI( int dtop, int dbottom, int dleft, int dright )$/;"	f	class:cv::ocl::oclMat
adjuster_	features2d/features2d.hpp	/^    const Ptr<AdjusterAdapter> adjuster_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
affine2dMotionStd	videostab/global_motion.hpp	/^    static RansacParams affine2dMotionStd() { return RansacParams(6, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
algo	flann/miniflann.hpp	/^    cvflann::flann_algorithm_t algo;$/;"	m	class:cv::flann::Index
align	core/types_c.h	/^    int  align;             \/* Alignment of image rows (4 or 8).$/;"	m	struct:_IplImage
alignPtr	core/core.hpp	/^template<typename _Tp> static inline _Tp* alignPtr(_Tp* ptr, int n=(int)sizeof(_Tp))$/;"	f	namespace:cv
alignSize	core/core.hpp	/^static inline size_t alignSize(size_t sz, int n)$/;"	f	namespace:cv
all	core/operations.hpp	/^inline Range Range::all() { return Range(INT_MIN, INT_MAX); }$/;"	f	class:cv::Range
all	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> Vec<_Tp, cn>::all(_Tp alpha)$/;"	f	class:cv::Vec
all	core/operations.hpp	/^template<typename _Tp, int m, int n> inline Matx<_Tp, m, n> Matx<_Tp, m, n>::all(_Tp alpha)$/;"	f	class:cv::Matx
all	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp> Scalar_<_Tp>::all(_Tp v0)$/;"	f	class:cv::Scalar_
all	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char all(char v) {return v;}$/;"	f	struct:cv::gpu::device::VecTraits
all	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 all(schar v) {return make_char1(v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 all(schar v) {return make_char2(v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 all(schar v) {return make_char3(v, v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 all(schar v) {return make_char4(v, v, v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 all(schar v) {return make_char8(v, v, v, v, v, v, v, v);}$/;"	f	struct:cv::gpu::device::VecTraits
all	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar all(schar v) {return v;}$/;"	f	struct:cv::gpu::device::VecTraits
allocMatFromBuf	core/gpumat.hpp	/^    inline GpuMat allocMatFromBuf(int rows, int cols, int type, GpuMat &mat)$/;"	f	namespace:cv::gpu
alloc_type	gpu/gpu.hpp	/^    int alloc_type;$/;"	m	class:cv::gpu::CudaMem
alloca	core/internal.hpp	338;"	d
alloca	core/internal.hpp	339;"	d
allocate	core/core.hpp	/^    pointer allocate(size_type count, const void* =0)$/;"	f	class:cv::Allocator
allocate	core/core.hpp	/^template<typename _Tp> static inline _Tp* allocate(size_t n)$/;"	f	namespace:cv
allocate	core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline void AutoBuffer<_Tp, fixed_size>::allocate(size_t _size)$/;"	f	class:cv::AutoBuffer
allocate	flann/allocator.h	/^    T* allocate(size_t count = 1)$/;"	f	class:cvflann::PooledAllocator
allocate	flann/allocator.h	/^T* allocate(size_t count = 1)$/;"	f	namespace:cvflann
allocateMemory	flann/allocator.h	/^    void* allocateMemory(int size)$/;"	f	class:cvflann::PooledAllocator
allzero	contrib/contrib.hpp	/^        const static Point3f allzero;$/;"	m	class:cv::Mesh3D
alpha	core/mat.hpp	/^    double alpha, beta;$/;"	m	class:cv::MatExpr
alpha	gpu/gpu.hpp	/^    float alpha;$/;"	m	class:cv::gpu::BroxOpticalFlow
alpha	ml/ml.hpp	/^    double alpha;$/;"	m	struct:CvDTreeNode
alpha	ml/ml.hpp	/^    double* alpha;$/;"	m	class:CvSVMSolver
alpha	ml/ml.hpp	/^    double* alpha;$/;"	m	struct:CvSVMDecisionFunc
alpha	objdetect/objdetect.hpp	/^    float* alpha;$/;"	m	struct:CvHaarClassifier
alpha1	gpu/gpu.hpp	/^        float alpha1; \/\/ How quickly we forget old background pixel values seen. Typically set to 0.1.$/;"	m	struct:cv::gpu::FGDStatModel::Params
alpha1	legacy/legacy.hpp	/^    float  alpha1;		\/* How quickly we forget old background pixel values seen.  Typically set to 0.1  				*\/$/;"	m	struct:CvFGDStatModelParams
alpha2	gpu/gpu.hpp	/^        float alpha2; \/\/ "Controls speed of feature learning". Depends on T. Typical value circa 0.005.$/;"	m	struct:cv::gpu::FGDStatModel::Params
alpha2	legacy/legacy.hpp	/^    float  alpha2;		\/* "Controls speed of feature learning". Depends on T. Typical value circa 0.005. 				*\/$/;"	m	struct:CvFGDStatModelParams
alpha3	gpu/gpu.hpp	/^        float alpha3; \/\/ Alternate to alpha2, used (e.g.) for quicker initial convergence. Typical value 0.1.$/;"	m	struct:cv::gpu::FGDStatModel::Params
alpha3	legacy/legacy.hpp	/^    float  alpha3;		\/* Alternate to alpha2, used (e.g.) for quicker initial convergence. Typical value 0.1.				*\/$/;"	m	struct:CvFGDStatModelParams
alphaChannel	core/types_c.h	/^    int  alphaChannel;      \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage
alpha_count	ml/ml.hpp	/^    int alpha_count;$/;"	m	class:CvSVMSolver
alpha_status	ml/ml.hpp	/^    schar* alpha_status;$/;"	m	class:CvSVMSolver
amacrinCellsTemporalCutFrequency	contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
anchor	gpu/gpu.hpp	/^    Point anchor;$/;"	m	class:cv::gpu::BaseFilter_GPU
anchor	gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseColumnFilter_GPU
anchor	gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseRowFilter_GPU
anchor	imgproc/imgproc.hpp	/^    Point anchor;$/;"	m	class:cv::BaseFilter
anchor	imgproc/imgproc.hpp	/^    Point anchor;$/;"	m	class:cv::FilterEngine
anchor	imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseColumnFilter
anchor	imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseRowFilter
anchor	ocl/ocl.hpp	/^            Point anchor;$/;"	m	class:cv::ocl::BaseFilter_GPU
anchor	ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseColumnFilter_GPU
anchor	ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseRowFilter_GPU
anchorX	core/types_c.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernel
anchorX	core/types_c.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernelFP
anchorY	core/types_c.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernel
anchorY	core/types_c.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernelFP
angle	core/types_c.h	/^    float angle;          \/* Angle between the horizontal axis           *\/$/;"	m	struct:CvBox2D
angle	features2d/features2d.hpp	/^    CV_PROP_RW float angle; \/\/!< computed orientation of the keypoint (-1 if not applicable);$/;"	m	class:cv::KeyPoint
any	flann/any.h	/^    any()$/;"	f	struct:cvflann::any
any	flann/any.h	/^    any(const T& x)$/;"	f	struct:cvflann::any
any	flann/any.h	/^    any(const any& x)$/;"	f	struct:cvflann::any
any	flann/any.h	/^    any(const char* x)$/;"	f	struct:cvflann::any
any	flann/any.h	/^struct any$/;"	s	namespace:cvflann
anyimpl	flann/any.h	/^namespace anyimpl$/;"	n	namespace:cvflann
appearance_profile	legacy/blobtrack.hpp	/^    int     appearance_profile;$/;"	m	struct:CvBlobTrackerParamMS
apply	stitching/detail/exposure_compensate.hpp	/^    void apply(int \/*index*\/, Point \/*corner*\/, Mat &\/*image*\/, const Mat &\/*mask*\/) {};$/;"	f	class:cv::detail::NoExposureCompensator
applyQuantization	legacy/legacy.hpp	/^    inline void applyQuantization(int num_quant_bits) { makePosteriors2(num_quant_bits); }$/;"	f	class:cv::RandomizedTree
area	core/operations.hpp	/^template<typename _Tp> inline _Tp Rect_<_Tp>::area() const { return width*height; }$/;"	f	class:cv::Rect_
area	core/operations.hpp	/^template<typename _Tp> inline _Tp Size_<_Tp>::area() const { return width*height; }$/;"	f	class:cv::Size_
area	imgproc/types_c.h	/^    double area;    \/* area of the connected component  *\/$/;"	m	struct:CvConnectedComp
areaThreshold	features2d/features2d.hpp	/^    double areaThreshold;$/;"	m	class:cv::MSER
areaThreshold	legacy/compat.hpp	/^    double areaThreshold;$/;"	m	struct:CvMSERParams
arg1	gpu/device/functional.hpp	/^        const typename Op::first_argument_type arg1;$/;"	m	struct:cv::gpu::device::binder1st
arg2	gpu/device/functional.hpp	/^        const typename Op::second_argument_type arg2;$/;"	m	struct:cv::gpu::device::binder2nd
argument_type	gpu/device/vec_math.hpp	/^            typedef T argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
argument_type	gpu/device/vec_math.hpp	/^            typedef double argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
argument_type	gpu/device/vec_math.hpp	/^            typedef float argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
argument_type	gpu/device/vec_math.hpp	/^            typedef int argument_type;$/;"	t	struct:cv::gpu::device::vec_math_detail::BinOpTraits
arr	core/core_c.h	/^CVAPI(CvScalar)  cvSum( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(CvSize) cvGetSize( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(int)  cvCountNonZero( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(int) cvGetElemType( const CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(void)  cvCreateData( CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(void)  cvReleaseData( CvArr* arr );$/;"	v
arr	core/core_c.h	/^CVAPI(void)  cvSetZero( CvArr* arr );$/;"	v
arr	core/operations.hpp	/^    const _Tp* arr;$/;"	m	class:cv::GreaterEqIdx
arr	core/operations.hpp	/^    const _Tp* arr;$/;"	m	class:cv::LessThanIdx
array_	ts/ts_gtest.h	/^  const Element* array_;$/;"	m	class:testing::internal::NativeArray
array_	ts/ts_gtest.h	/^  std::vector<TestPartResult> array_;$/;"	m	class:testing::TestPartResultArray
array_iterator	core/core_c.h	/^CVAPI(int) cvNextNArraySlice( CvNArrayIterator* array_iterator );$/;"	v
as	flann/matrix.h	/^    Matrix<T> as()$/;"	f	class:cvflann::UntypedMatrix
ascii	core/core_c.h	/^    const int*  ascii;      \/* font data and metrics *\/$/;"	m	struct:CvFont
aspect	stitching/detail/camera.hpp	/^    double aspect; \/\/ Aspect ratio$/;"	m	struct:cv::detail::CameraParams
aspect_	core/opengl_interop.hpp	/^    double aspect_;$/;"	m	class:cv::GlCamera
assign	flann/any.h	/^    any& assign(const T& x)$/;"	f	struct:cvflann::any
assign	flann/any.h	/^    any& assign(const any& x)$/;"	f	struct:cvflann::any
assignTo	core/gpumat.hpp	/^    inline void GpuMat::assignTo(GpuMat& m, int _type) const$/;"	f	class:cv::gpu::GpuMat
assignTo	core/mat.hpp	/^inline void Mat::assignTo( Mat& m, int _type ) const$/;"	f	class:cv::Mat
assignTo	core/mat.hpp	/^inline void SparseMat::assignTo( SparseMat& m, int _type ) const$/;"	f	class:cv::SparseMat
assignTo	ocl/matrix_operations.hpp	/^        inline void oclMat::assignTo( oclMat &m, int type ) const$/;"	f	class:cv::ocl::oclMat
at	core/mat.hpp	/^template<typename _Tp, int n> _Tp& Mat::at(const Vec<int, n>& idx)$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp, int n> inline const _Tp& Mat::at(const Vec<int, n>& idx) const$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(Point pt)$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(const int* idx)$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(int i0)$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(int i0, int i1)$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat::at(int i0, int i1, int i2)$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(Point pt) const$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(const int* idx) const$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(int i0) const$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(int i0, int i1) const$/;"	f	class:cv::Mat
at	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat::at(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
at	gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdConstant
at	gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdReflect
at	gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdReflect101
at	gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdReplicate
at	gpu/device/border_interpolate.hpp	/^        template <typename Ptr2D> __device__ __forceinline__ D at(typename Ptr2D::index_type y, typename Ptr2D::index_type x, const Ptr2D& src) const$/;"	f	struct:cv::gpu::device::BrdWrap
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowConstant
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColConstant
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColWrap
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdConstant
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdReflect
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdReflect101
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdReplicate
at	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at(int y, int x, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdWrap
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowConstant
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColConstant
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
at_high	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_high(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColWrap
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowConstant
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int x, const T* data) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColConstant
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
at_low	gpu/device/border_interpolate.hpp	/^        template <typename T> __device__ __forceinline__ D at_low(int y, const T* data, size_t step) const$/;"	f	struct:cv::gpu::device::BrdColWrap
atomicAdd	gpu/device/emulation.hpp	/^            static __device__ __forceinline__ T atomicAdd(T* address, T val)$/;"	f	struct:cv::gpu::device::Emulation::smem
atomicInc	gpu/device/emulation.hpp	/^            static __device__ __forceinline__ T atomicInc(T* address, T val)$/;"	f	struct:cv::gpu::device::Emulation::smem
atomicMin	gpu/device/emulation.hpp	/^            static __device__ __forceinline__ T atomicMin(T* address, T val)$/;"	f	struct:cv::gpu::device::Emulation::smem
attach	legacy/legacy.hpp	/^    void attach( IplImage* img, bool use_refcount=true )$/;"	f	class:CvImage
attempts	features2d/features2d.hpp	/^    int attempts;$/;"	m	class:cv::BOWKMeansTrainer
attr	core/types_c.h	/^    const char** attr;         \/* NULL-terminated array of (attribute_name,attribute_value) pairs. *\/$/;"	m	struct:CvAttrList
avergeTexThreshold	gpu/gpu.hpp	/^    float avergeTexThreshold;$/;"	m	class:cv::gpu::StereoBM_GPU
avg	ml/ml.hpp	/^    CvMat** avg;$/;"	m	class:CvNormalBayesClassifier
b	core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
b	gpu/device/border_interpolate.hpp	/^        const B b;$/;"	m	struct:cv::gpu::device::BorderReader
b	ml/ml.hpp	/^    double* b;$/;"	m	class:CvSVMSolver
b	objdetect/objdetect.hpp	/^    float* b;$/;"	m	struct:CvLatentSvmDetector
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearPortraitProjector
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::CompressedRectilinearProjector
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniPortraitProjector
b	stitching/detail/warpers.hpp	/^    float a, b;$/;"	m	struct:cv::detail::PaniniProjector
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearPortraitWarper
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::CompressedRectilinearWarper
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniPortraitWarper
b	stitching/warpers.hpp	/^    float a, b;$/;"	m	class:cv::PaniniWarper
bShadowDetection	gpu/gpu.hpp	/^    bool bShadowDetection; \/\/default 1 - do shadow detection$/;"	m	class:cv::gpu::MOG2_GPU
bShadowDetection	video/background_segm.hpp	/^    bool bShadowDetection;\/\/default 1 - do shadow detection$/;"	m	class:cv::BackgroundSubtractorMOG2
bSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
back	core/operations.hpp	/^    _Tp& back() { CV_DbgAssert(!empty()); return hdr.data[hdr.size-1]; }$/;"	f	class:cv::Vector
back	core/operations.hpp	/^    const _Tp& back() const { CV_DbgAssert(!empty()); return hdr.data[hdr.size-1]; }$/;"	f	class:cv::Vector
back	core/operations.hpp	/^template<typename _Tp> inline _Tp& Seq<_Tp>::back()$/;"	f	class:cv::Seq
back	core/operations.hpp	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::back() const$/;"	f	class:cv::Seq
backSubst	core/mat.hpp	/^SVD::backSubst( const Matx<_Tp, nm, 1>& w, const Matx<_Tp, m, nm>& u,$/;"	f	class:cv::SVD
background	gpu/gpu.hpp	/^    cv::gpu::GpuMat background;$/;"	m	class:cv::gpu::FGDStatModel
backgroundMax	legacy/legacy.hpp	/^    double backgroundMin, backgroundMax;$/;"	m	class:cv::PatchGenerator
backgroundMin	legacy/legacy.hpp	/^    double backgroundMin, backgroundMax;$/;"	m	class:cv::PatchGenerator
backgroundPrior	gpu/gpu.hpp	/^    float backgroundPrior;$/;"	m	class:cv::gpu::GMG_GPU
backgroundPrior	video/background_segm.hpp	/^    double  backgroundPrior;$/;"	m	class:cv::BackgroundSubtractorGMG
backgroundRatio	gpu/gpu.hpp	/^    float backgroundRatio;$/;"	m	class:cv::gpu::MOG2_GPU
backgroundRatio	gpu/gpu.hpp	/^    float backgroundRatio;$/;"	m	class:cv::gpu::MOG_GPU
backgroundRatio	video/background_segm.hpp	/^    double backgroundRatio;$/;"	m	class:cv::BackgroundSubtractorMOG
backgroundRatio	video/background_segm.hpp	/^    float backgroundRatio;$/;"	m	class:cv::BackgroundSubtractorMOG2
backproj	contrib/hybridtracker.hpp	/^    Mat backproj;$/;"	m	class:cv::CvMeanShiftTracker
bad_any_cast	flann/any.h	/^struct bad_any_cast$/;"	s	namespace:cvflann::anyimpl
bad_region_penalty_	stitching/detail/seam_finders.hpp	/^    float bad_region_penalty_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
base	flann/allocator.h	/^    void*   base;     \/* Pointer to base of current block of storage. *\/$/;"	m	class:cvflann::PooledAllocator
base	legacy/legacy.hpp	/^    Ptr<OneWayDescriptorBase> base;$/;"	m	class:cv::OneWayDescriptorMatcher
baseFeatureSize	legacy/legacy.hpp	/^    double baseFeatureSize;$/;"	m	class:cv::LDetector
base_	core/opengl_interop.hpp	/^    unsigned int base_;$/;"	m	class:cv::GlFont
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<ParamType>* const base_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
base_	ts/ts_gtest.h	/^    const ParamGeneratorInterface<T>* const base_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
base_any_policy	flann/any.h	/^struct base_any_policy$/;"	s	namespace:cvflann::anyimpl
base_value	ml/ml.hpp	/^    float base_value;$/;"	m	class:CvGBTrees
basicSize_	features2d/features2d.hpp	/^    static const float basicSize_;$/;"	m	class:cv::BRISK
basic_manipulator	ts/ts_gtest.h	/^      ::std::ostream& (*basic_manipulator)(::std::ostream& stream)) {$/;"	f	class:testing::AssertionResult
beg1	legacy/blobtrack.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos
beg2	legacy/blobtrack.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos
begin	contrib/contrib.hpp	/^            int begin, end;$/;"	m	struct:cv::Octree::Node
begin	core/mat.hpp	/^inline SparseMatConstIterator SparseMat::begin() const$/;"	f	class:cv::SparseMat
begin	core/mat.hpp	/^inline SparseMatIterator SparseMat::begin()$/;"	f	class:cv::SparseMat
begin	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat::begin() const$/;"	f	class:cv::Mat
begin	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat_<_Tp>::begin() const$/;"	f	class:cv::Mat_
begin	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat::begin()$/;"	f	class:cv::Mat
begin	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat_<_Tp>::begin()$/;"	f	class:cv::Mat_
begin	core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat::begin() const$/;"	f	class:cv::SparseMat
begin	core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat_<_Tp>::begin() const$/;"	f	class:cv::SparseMat_
begin	core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat::begin()$/;"	f	class:cv::SparseMat
begin	core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat_<_Tp>::begin()$/;"	f	class:cv::SparseMat_
begin	core/operations.hpp	/^    _Tp* begin() { return hdr.data; }$/;"	f	class:cv::Vector
begin	core/operations.hpp	/^    const _Tp* begin() const { return hdr.data; }$/;"	f	class:cv::Vector
begin	core/operations.hpp	/^inline FileNodeIterator FileNode::begin() const$/;"	f	class:cv::FileNode
begin	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> Seq<_Tp>::begin() const$/;"	f	class:cv::Seq
begin	ts/ts_gtest.h	/^  const_iterator begin() const { return array_; }$/;"	f	class:testing::internal::NativeArray
begin	ts/ts_gtest.h	/^  iterator begin() const { return iterator(impl_->Begin()); }$/;"	f	class:testing::internal::ParamGenerator
begin10_	ts/ts_gtest.h	/^    const typename ParamGenerator<T10>::iterator begin10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator begin1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator begin2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator begin3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator begin4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator begin5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator begin6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator begin7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
begin8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator begin8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
begin9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator begin9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
begin_	ts/ts_gtest.h	/^  const T begin_;$/;"	m	class:testing::internal::RangeGenerator
bestIndex_	flann/autotuned_index.h	/^    NNIndex<Distance>* bestIndex_;$/;"	m	class:cvflann::AutotunedIndex
bestParams_	flann/autotuned_index.h	/^    IndexParams bestParams_;$/;"	m	class:cvflann::AutotunedIndex
bestSearchParams_	flann/autotuned_index.h	/^    SearchParams bestSearchParams_;$/;"	m	class:cvflann::AutotunedIndex
best_score	legacy/legacy.hpp	/^    int best_score;$/;"	m	struct:CvCliqueFinder
best_weight	legacy/legacy.hpp	/^    float best_weight;$/;"	m	struct:CvCliqueFinder
beta	core/mat.hpp	/^    double alpha, beta;$/;"	m	class:cv::MatExpr
bg_model	legacy/legacy.hpp	/^CVAPI(void) cvReleaseBGStatModel( CvBGStatModel** bg_model );$/;"	v
bg_threshold	legacy/legacy.hpp	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams
bgmodel	video/background_segm.hpp	/^    Mat bgmodel;$/;"	m	class:cv::BackgroundSubtractorMOG
bgmodel	video/background_segm.hpp	/^    Mat bgmodel;$/;"	m	class:cv::BackgroundSubtractorMOG2
bgmodelUsedModes	video/background_segm.hpp	/^    Mat bgmodelUsedModes;\/\/keep track of number of modes per pixel$/;"	m	class:cv::BackgroundSubtractorMOG2
bgmodelUsedModes_	gpu/gpu.hpp	/^    GpuMat bgmodelUsedModes_; \/\/keep track of number of modes per pixel$/;"	m	class:cv::gpu::MOG2_GPU
bgra_	core/opengl_interop.hpp	/^    bool bgra_;$/;"	m	class:cv::GlArrays
bicubicCoeff	gpu/device/filters.hpp	/^        static __device__ __forceinline__ float bicubicCoeff(float x_)$/;"	f	struct:cv::gpu::device::CubicFilter
big_any_policy	flann/any.h	/^struct big_any_policy : typed_base_any_policy<T>$/;"	s	namespace:cvflann::anyimpl
binSize	contrib/contrib.hpp	/^        float binSize;$/;"	m	class:cv::SpinImageModel
binary_function	gpu/device/functional.hpp	/^    template<typename Argument1, typename Argument2, typename Result> struct binary_function : public std::binary_function<Argument1, Argument2, Result> {};$/;"	s	namespace:cv::gpu::device
binary_negate	gpu/device/functional.hpp	/^        __device__ __forceinline__ binary_negate() :$/;"	f	struct:cv::gpu::device::binary_negate
binary_negate	gpu/device/functional.hpp	/^        __device__ __forceinline__ binary_negate(const binary_negate& other)$/;"	f	struct:cv::gpu::device::binary_negate
binary_negate	gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ binary_negate(const Predicate& p) : pred(p) {}$/;"	f	struct:cv::gpu::device::binary_negate
binary_negate	gpu/device/functional.hpp	/^    template <typename Predicate> struct binary_negate : binary_function<typename Predicate::first_argument_type, typename Predicate::second_argument_type, bool>$/;"	s	namespace:cv::gpu::device
bind1st	gpu/device/functional.hpp	/^    template <typename Op, typename T> __host__ __device__ __forceinline__ binder1st<Op> bind1st(const Op& op, const T& x)$/;"	f	namespace:cv::gpu::device
bind2nd	gpu/device/functional.hpp	/^    template <typename Op, typename T> __host__ __device__ __forceinline__ binder2nd<Op> bind2nd(const Op& op, const T& x)$/;"	f	namespace:cv::gpu::device
bindTexture	gpu/device/common.hpp	/^        template<class T> inline void bindTexture(const textureReference* tex, const PtrStepSz<T>& img)$/;"	f	namespace:cv::gpu::device
binder1st	gpu/device/functional.hpp	/^        __device__ __forceinline__ binder1st(const binder1st& other) :$/;"	f	struct:cv::gpu::device::binder1st
binder1st	gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ binder1st(const Op& op_, const typename Op::first_argument_type& arg1_) : op(op_), arg1(arg1_) {}$/;"	f	struct:cv::gpu::device::binder1st
binder1st	gpu/device/functional.hpp	/^    template <typename Op> struct binder1st : unary_function<typename Op::second_argument_type, typename Op::result_type>$/;"	s	namespace:cv::gpu::device
binder2nd	gpu/device/functional.hpp	/^         __device__ __forceinline__ binder2nd(const binder2nd& other) :$/;"	f	struct:cv::gpu::device::binder2nd
binder2nd	gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ binder2nd(const Op& op_, const typename Op::second_argument_type& arg2_) : op(op_), arg2(arg2_) {}$/;"	f	struct:cv::gpu::device::binder2nd
binder2nd	gpu/device/functional.hpp	/^    template <typename Op> struct binder2nd : unary_function<typename Op::first_argument_type, typename Op::result_type>$/;"	s	namespace:cv::gpu::device
bins	core/types_c.h	/^    CvArr*  bins;$/;"	m	struct:CvHistogram
bisectionIts	contrib/openfabmap.hpp	/^    int bisectionIts;$/;"	m	class:cv::of2::FabMapFBO
bisectionStart	contrib/openfabmap.hpp	/^    int bisectionStart;$/;"	m	class:cv::of2::FabMapFBO
bit_and	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_and():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_and
bit_and	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_and(const bit_and& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_and
bit_and	gpu/device/functional.hpp	/^    template <typename T> struct bit_and : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
bit_not	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_not():unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::bit_not
bit_not	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_not(const bit_not& other):unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::bit_not
bit_not	gpu/device/functional.hpp	/^    template <typename T> struct bit_not : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
bit_or	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_or():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_or
bit_or	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_or(const bit_or& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_or
bit_or	gpu/device/functional.hpp	/^    template <typename T> struct bit_or : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
bit_xor	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_xor():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_xor
bit_xor	gpu/device/functional.hpp	/^        __device__ __forceinline__ bit_xor(const bit_xor& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::bit_xor
bit_xor	gpu/device/functional.hpp	/^    template <typename T> struct bit_xor : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
bits	ts/ts_gtest.h	/^  const Bits &bits() const { return u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
bits_	ts/ts_gtest.h	/^    Bits bits_;      \/\/ The bits that represent the number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
bitset_	flann/dynamic_bitset.h	/^    std::vector<size_t> bitset_;$/;"	m	class:cvflann::DynamicBitset
bl_height_	stitching/detail/exposure_compensate.hpp	/^    int bl_width_, bl_height_;$/;"	m	class:cv::detail::BlocksGainCompensator
bl_width_	stitching/detail/exposure_compensate.hpp	/^    int bl_width_, bl_height_;$/;"	m	class:cv::detail::BlocksGainCompensator
blender	stitching/stitcher.hpp	/^    Ptr<detail::Blender> blender() { return blender_; }$/;"	f	class:cv::Stitcher
blender	stitching/stitcher.hpp	/^    const Ptr<detail::Blender> blender() const { return blender_; }$/;"	f	class:cv::Stitcher
blender_	stitching/stitcher.hpp	/^    Ptr<detail::Blender> blender_;$/;"	m	class:cv::Stitcher
blobColor	features2d/features2d.hpp	/^      CV_PROP_RW uchar blobColor;$/;"	m	struct:cv::SimpleBlobDetector::Params
blockSize	features2d/features2d.hpp	/^    int blockSize;$/;"	m	class:cv::GFTTDetector
blockSize	gpu/gpu.hpp	/^    int blockSize;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
blockSize	objdetect/objdetect.hpp	/^    CV_PROP Size blockSize;$/;"	m	struct:cv::HOGDescriptor
blockStride	objdetect/objdetect.hpp	/^    CV_PROP Size blockStride;$/;"	m	struct:cv::HOGDescriptor
block_hists	gpu/gpu.hpp	/^    GpuMat block_hists, block_hists_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
block_hists	ocl/ocl.hpp	/^            oclMat block_hists;$/;"	m	struct:cv::ocl::HOGDescriptor
block_hists_buf	gpu/gpu.hpp	/^    GpuMat block_hists, block_hists_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
block_size	core/types_c.h	/^    int block_size;               \/* Block size.                              *\/$/;"	m	struct:CvMemStorage
block_size	gpu/gpu.hpp	/^    Size block_size;$/;"	m	struct:cv::gpu::ConvolveBuf
block_size	gpu/gpu.hpp	/^    Size block_size;$/;"	m	struct:cv::gpu::HOGDescriptor
block_size	ocl/ocl.hpp	/^            Size block_size;$/;"	m	struct:cv::ocl::HOGDescriptor
block_stride	gpu/gpu.hpp	/^    Size block_stride;$/;"	m	struct:cv::gpu::HOGDescriptor
block_stride	ocl/ocl.hpp	/^            Size block_stride;$/;"	m	struct:cv::ocl::HOGDescriptor
blocksize	flann/allocator.h	/^    int     blocksize;$/;"	m	class:cvflann::PooledAllocator
blur	gpu/gpu.hpp	/^static inline void blur(const GpuMat& src, GpuMat& dst, Size ksize, Point anchor = Point(-1,-1), Stream& stream = Stream::Null())$/;"	f	namespace:cv::gpu
blur	ocl/ocl.hpp	/^        static inline void blur(const oclMat &src, oclMat &dst, Size ksize, Point anchor = Point(-1, -1),$/;"	f	namespace:cv::ocl
blurFilter	gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> blurFilter;$/;"	m	class:cv::gpu::ORB_GPU
blurForDescriptor	gpu/gpu.hpp	/^    bool blurForDescriptor;$/;"	m	class:cv::gpu::ORB_GPU
blurredFrame_	gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
blurrinessRates	videostab/deblurring.hpp	/^    virtual const std::vector<float>& blurrinessRates() const { return *blurrinessRates_; }$/;"	f	class:cv::videostab::DeblurerBase
blurrinessRates_	videostab/deblurring.hpp	/^    const std::vector<float> *blurrinessRates_;$/;"	m	class:cv::videostab::DeblurerBase
blurrinessRates_	videostab/stabilizer.hpp	/^    std::vector<float> blurrinessRates_;$/;"	m	class:cv::videostab::StabilizerBase
bool_constant	ts/ts_gtest.h	/^struct bool_constant {$/;"	s	namespace:std::tr1
boost_type	ml/ml.hpp	/^    CV_PROP_RW int boost_type;$/;"	m	struct:CvBoostParams
border	legacy/legacy.hpp	/^    CvPoint2D32f border[2][4];$/;"	m	struct:CvStereoCamera
borderElemSize	imgproc/imgproc.hpp	/^    int borderElemSize;$/;"	m	class:cv::FilterEngine
borderMode	videostab/inpainting.hpp	/^    int borderMode() const { return borderMode_; }$/;"	f	class:cv::videostab::MotionInpainter
borderMode	videostab/stabilizer.hpp	/^    int borderMode() const { return borderMode_; }$/;"	f	class:cv::videostab::StabilizerBase
borderMode_	videostab/inpainting.hpp	/^    int borderMode_;$/;"	m	class:cv::videostab::MotionInpainter
borderMode_	videostab/stabilizer.hpp	/^    int borderMode_;$/;"	m	class:cv::videostab::StabilizerBase
borderTab	imgproc/imgproc.hpp	/^    vector<int> borderTab;$/;"	m	class:cv::FilterEngine
borderType	ocl/ocl.hpp	/^            int borderType;$/;"	m	class:cv::ocl::BaseFilter_GPU
bordertype	ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseColumnFilter_GPU
bordertype	ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseRowFilter_GPU
bottom	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
bottom	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
bottom	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
bottom	core/types_c.h	/^    CvMemBlock* bottom;           \/* First allocated block.                   *\/$/;"	m	struct:CvMemStorage
bottomRight	imgproc/imgproc.hpp	/^    Point2f bottomRight;$/;"	m	class:cv::Subdiv2D
bottom_	core/opengl_interop.hpp	/^    double bottom_;$/;"	m	class:cv::GlCamera
bottomline	legacy/compat.hpp	/^    float*  bottomline;$/;"	m	struct:_CvPixelPosition32f
bottomline	legacy/compat.hpp	/^    schar*  bottomline;$/;"	m	struct:_CvPixelPosition8s
bottomline	legacy/compat.hpp	/^    uchar*  bottomline;    \/* pointer to the start of the first line           *\/$/;"	m	struct:_CvPixelPosition8u
boxFilter_	gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> boxFilter_;$/;"	m	class:cv::gpu::GMG_GPU
boxMax	legacy/legacy.hpp	/^    uchar boxMax[3];$/;"	m	struct:CvBGCodeBookElem
boxMin	legacy/legacy.hpp	/^    uchar boxMin[3];$/;"	m	struct:CvBGCodeBookElem
bp_dw_scale	ml/ml.hpp	/^    CV_PROP_RW double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams
bp_moment_scale	ml/ml.hpp	/^    CV_PROP_RW double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams
br	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp> Rect_<_Tp>::br() const { return Point_<_Tp>(x+width, y+height); }$/;"	f	class:cv::Rect_
branching_	flann/hierarchical_clustering_index.h	/^    int branching_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
branching_	flann/kmeans_index.h	/^    int branching_;$/;"	m	class:cvflann::KMeansIndex
brs_	stitching/detail/seam_finders.hpp	/^    std::vector<Point> tls_, brs_;$/;"	m	class:cv::detail::DpSeamFinder
bucket_size_max_	flann/lsh_table.h	/^    size_t bucket_size_max_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_mean_	flann/lsh_table.h	/^    size_t bucket_size_mean_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_median_	flann/lsh_table.h	/^    size_t bucket_size_median_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_min_	flann/lsh_table.h	/^    size_t bucket_size_min_;$/;"	m	struct:cvflann::lsh::LshStats
bucket_size_std_dev	flann/lsh_table.h	/^    size_t bucket_size_std_dev;$/;"	m	struct:cvflann::lsh::LshStats
bucket_sizes_	flann/lsh_table.h	/^    std::vector<unsigned int> bucket_sizes_;$/;"	m	struct:cvflann::lsh::LshStats
buckets_space_	flann/lsh_table.h	/^    BucketsSpace buckets_space_;$/;"	m	class:cvflann::lsh::LshTable
buckets_speed_	flann/lsh_table.h	/^    BucketsSpeed buckets_speed_;$/;"	m	class:cvflann::lsh::LshTable
buf	gpu/gpu.hpp	/^    GpuMat buf;$/;"	m	class:cv::gpu::BroxOpticalFlow
buf	ml/ml.hpp	/^    CvMat* buf;$/;"	m	struct:CvDTreeTrainData
buf	ml/ml.hpp	/^    float* buf[2];$/;"	m	class:CvSVMSolver
buf	ts/ts.hpp	/^    float buf[4];$/;"	m	class:cvtest::ArrayTest
bufM_	gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
bufStep	imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
bufType	imgproc/imgproc.hpp	/^    int srcType, dstType, bufType;$/;"	m	class:cv::FilterEngine
buf_	core/opengl_interop.hpp	/^    GlBuffer buf_;$/;"	m	class:cv::GlTexture
buf_	gpu/gpu.hpp	/^    GpuMat buf_;$/;"	m	class:cv::gpu::GMG_GPU
buf_	gpu/gpu.hpp	/^    GpuMat buf_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
buf_	gpu/gpu.hpp	/^    GpuMat buf_;$/;"	m	class:cv::gpu::ORB_GPU
buf_	video/background_segm.hpp	/^    cv::Mat buf_;$/;"	m	class:cv::BackgroundSubtractorGMG
buf_count	ml/ml.hpp	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData
buf_idx	ml/ml.hpp	/^    int buf_idx;$/;"	m	struct:CvDTreeNode
buf_size	ml/ml.hpp	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData
buffer	calib3d/calib3d.hpp	/^    Mat buffer;$/;"	m	class:cv::StereoSGBM
buffer	gpu/gpu.hpp	/^    GpuMat buffer, extended_src_buffer;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
buildIndex	flann/autotuned_index.h	/^    virtual void buildIndex()$/;"	f	class:cvflann::AutotunedIndex
buildIndex	flann/composite_index.h	/^    void buildIndex()$/;"	f	class:cvflann::CompositeIndex
buildIndex	flann/flann_base.hpp	/^    void buildIndex()$/;"	f	class:cvflann::Index
buildIndex	flann/hierarchical_clustering_index.h	/^    void buildIndex()$/;"	f	class:cvflann::HierarchicalClusteringIndex
buildIndex	flann/kdtree_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KDTreeIndex
buildIndex	flann/kdtree_single_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KDTreeSingleIndex
buildIndex	flann/kmeans_index.h	/^    void buildIndex()$/;"	f	class:cvflann::KMeansIndex
buildIndex	flann/linear_index.h	/^    void buildIndex()$/;"	f	class:cvflann::LinearIndex
buildIndex	flann/lsh_index.h	/^    void buildIndex()$/;"	f	class:cvflann::LshIndex
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::CylindricalWarperGpu
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::PlaneWarperGpu
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::SphericalWarperGpu
buildMaps	stitching/detail/warpers.hpp	/^    Rect buildMaps(Size src_size, const Mat &K, const Mat &R, const Mat &T, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::PlaneWarperGpu
buildMaps	stitching/detail/warpers_inl.hpp	/^Rect RotationWarperBase<P>::buildMaps(Size src_size, const Mat &K, const Mat &R, Mat &xmap, Mat &ymap)$/;"	f	class:cv::detail::RotationWarperBase
buildTimeCost	flann/autotuned_index.h	/^        float buildTimeCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
build_weight_	flann/autotuned_index.h	/^    float build_weight_;$/;"	m	class:cvflann::AutotunedIndex
bundleAdjuster	stitching/stitcher.hpp	/^    Ptr<detail::BundleAdjusterBase> bundleAdjuster() { return bundle_adjuster_; }$/;"	f	class:cv::Stitcher
bundleAdjuster	stitching/stitcher.hpp	/^    const Ptr<detail::BundleAdjusterBase> bundleAdjuster() const { return bundle_adjuster_; }$/;"	f	class:cv::Stitcher
bundle_adjuster_	stitching/stitcher.hpp	/^    Ptr<detail::BundleAdjusterBase> bundle_adjuster_;$/;"	m	class:cv::Stitcher
bytesIn	ts/ts_perf.hpp	/^    size_t bytesIn;$/;"	m	struct:perf::performance_metrics
bytesOut	ts/ts_perf.hpp	/^    size_t bytesOut;$/;"	m	struct:perf::performance_metrics
bytes_	features2d/features2d.hpp	/^    int bytes_;$/;"	m	class:cv::BriefDescriptorExtractor
c	core/mat.hpp	/^    Mat a, b, c;$/;"	m	class:cv::MatExpr
c	ml/ml.hpp	/^            float c;$/;"	m	struct:CvDTreeSplit::__anon251::__anon252
c	ml/ml.hpp	/^    CvMat*  c;$/;"	m	class:CvNormalBayesClassifier
c_HlsSectorData	gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HlsSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvDivTable	gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable   [256] = {0, 1044480, 522240, 348160, 261120, 208896, 174080, 149211, 130560, 116053, 104448, 94953, 87040, 80345, 74606, 69632, 65280, 61440, 58027, 54973, 52224, 49737, 47476, 45412, 43520, 41779, 40172, 38684, 37303, 36017, 34816, 33693, 32640, 31651, 30720, 29842, 29013, 28229, 27486, 26782, 26112, 25475, 24869, 24290, 23738, 23211, 22706, 22223, 21760, 21316, 20890, 20480, 20086, 19707, 19342, 18991, 18651, 18324, 18008, 17703, 17408, 17123, 16846, 16579, 16320, 16069, 15825, 15589, 15360, 15137, 14921, 14711, 14507, 14308, 14115, 13926, 13743, 13565, 13391, 13221, 13056, 12895, 12738, 12584, 12434, 12288, 12145, 12006, 11869, 11736, 11605, 11478, 11353, 11231, 11111, 10995, 10880, 10768, 10658, 10550, 10445, 10341, 10240, 10141, 10043, 9947, 9854, 9761, 9671, 9582, 9495, 9410, 9326, 9243, 9162, 9082, 9004, 8927, 8852, 8777, 8704, 8632, 8561, 8492, 8423, 8356, 8290, 8224, 8160, 8097, 8034, 7973, 7913, 7853, 7795, 7737, 7680, 7624, 7569, 7514, 7461, 7408, 7355, 7304, 7253, 7203, 7154, 7105, 7057, 7010, 6963, 6917, 6872, 6827, 6782, 6739, 6695, 6653, 6611, 6569, 6528, 6487, 6447, 6408, 6369, 6330, 6292, 6254, 6217, 6180, 6144, 6108, 6073, 6037, 6003, 5968, 5935, 5901, 5868, 5835, 5803, 5771, 5739, 5708, 5677, 5646, 5615, 5585, 5556, 5526, 5497, 5468, 5440, 5412, 5384, 5356, 5329, 5302, 5275, 5249, 5222, 5196, 5171, 5145, 5120, 5095, 5070, 5046, 5022, 4998, 4974, 4950, 4927, 4904, 4881, 4858, 4836, 4813, 4791, 4769, 4748, 4726, 4705, 4684, 4663, 4642, 4622, 4601, 4581, 4561, 4541, 4522, 4502, 4483, 4464, 4445, 4426, 4407, 4389, 4370, 4352, 4334, 4316, 4298, 4281, 4263, 4246, 4229, 4212, 4195, 4178, 4161, 4145, 4128, 4112, 4096};$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvDivTable180	gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable180[256] = {0, 122880, 61440, 40960, 30720, 24576, 20480, 17554, 15360, 13653, 12288, 11171, 10240, 9452, 8777, 8192, 7680, 7228, 6827, 6467, 6144, 5851, 5585, 5343, 5120, 4915, 4726, 4551, 4389, 4237, 4096, 3964, 3840, 3724, 3614, 3511, 3413, 3321, 3234, 3151, 3072, 2997, 2926, 2858, 2793, 2731, 2671, 2614, 2560, 2508, 2458, 2409, 2363, 2318, 2276, 2234, 2194, 2156, 2119, 2083, 2048, 2014, 1982, 1950, 1920, 1890, 1862, 1834, 1807, 1781, 1755, 1731, 1707, 1683, 1661, 1638, 1617, 1596, 1575, 1555, 1536, 1517, 1499, 1480, 1463, 1446, 1429, 1412, 1396, 1381, 1365, 1350, 1336, 1321, 1307, 1293, 1280, 1267, 1254, 1241, 1229, 1217, 1205, 1193, 1182, 1170, 1159, 1148, 1138, 1127, 1117, 1107, 1097, 1087, 1078, 1069, 1059, 1050, 1041, 1033, 1024, 1016, 1007, 999, 991, 983, 975, 968, 960, 953, 945, 938, 931, 924, 917, 910, 904, 897, 890, 884, 878, 871, 865, 859, 853, 847, 842, 836, 830, 825, 819, 814, 808, 803, 798, 793, 788, 783, 778, 773, 768, 763, 759, 754, 749, 745, 740, 736, 731, 727, 723, 719, 714, 710, 706, 702, 698, 694, 690, 686, 683, 679, 675, 671, 668, 664, 661, 657, 654, 650, 647, 643, 640, 637, 633, 630, 627, 624, 621, 617, 614, 611, 608, 605, 602, 599, 597, 594, 591, 588, 585, 582, 580, 577, 574, 572, 569, 566, 564, 561, 559, 556, 554, 551, 549, 546, 544, 541, 539, 537, 534, 532, 530, 527, 525, 523, 521, 518, 516, 514, 512, 510, 508, 506, 504, 502, 500, 497, 495, 493, 492, 490, 488, 486, 484, 482};$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvDivTable256	gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvDivTable256[256] = {0, 174763, 87381, 58254, 43691, 34953, 29127, 24966, 21845, 19418, 17476, 15888, 14564, 13443, 12483, 11651, 10923, 10280, 9709, 9198, 8738, 8322, 7944, 7598, 7282, 6991, 6722, 6473, 6242, 6026, 5825, 5638, 5461, 5296, 5140, 4993, 4855, 4723, 4599, 4481, 4369, 4263, 4161, 4064, 3972, 3884, 3799, 3718, 3641, 3567, 3495, 3427, 3361, 3297, 3236, 3178, 3121, 3066, 3013, 2962, 2913, 2865, 2819, 2774, 2731, 2689, 2648, 2608, 2570, 2533, 2497, 2461, 2427, 2394, 2362, 2330, 2300, 2270, 2241, 2212, 2185, 2158, 2131, 2106, 2081, 2056, 2032, 2009, 1986, 1964, 1942, 1920, 1900, 1879, 1859, 1840, 1820, 1802, 1783, 1765, 1748, 1730, 1713, 1697, 1680, 1664, 1649, 1633, 1618, 1603, 1589, 1574, 1560, 1547, 1533, 1520, 1507, 1494, 1481, 1469, 1456, 1444, 1432, 1421, 1409, 1398, 1387, 1376, 1365, 1355, 1344, 1334, 1324, 1314, 1304, 1295, 1285, 1276, 1266, 1257, 1248, 1239, 1231, 1222, 1214, 1205, 1197, 1189, 1181, 1173, 1165, 1157, 1150, 1142, 1135, 1128, 1120, 1113, 1106, 1099, 1092, 1085, 1079, 1072, 1066, 1059, 1053, 1046, 1040, 1034, 1028, 1022, 1016, 1010, 1004, 999, 993, 987, 982, 976, 971, 966, 960, 955, 950, 945, 940, 935, 930, 925, 920, 915, 910, 906, 901, 896, 892, 887, 883, 878, 874, 869, 865, 861, 857, 853, 848, 844, 840, 836, 832, 828, 824, 820, 817, 813, 809, 805, 802, 798, 794, 791, 787, 784, 780, 777, 773, 770, 767, 763, 760, 757, 753, 750, 747, 744, 741, 737, 734, 731, 728, 725, 722, 719, 716, 713, 710, 708, 705, 702, 699, 696, 694, 691, 688, 685};$/;"	m	namespace:cv::gpu::device::color_detail
c_HsvSectorData	gpu/device/detail/color_detail.hpp	/^        __constant__ int c_HsvSectorData[6][3] = { {1,3,0}, {1,0,2}, {3,0,1}, {0,2,1}, {0,1,3}, {2,1,0} };$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2XYZ_D65f	gpu/device/detail/color_detail.hpp	/^        __constant__ float c_RGB2XYZ_D65f[9] = { 0.412453f, 0.357580f, 0.180423f, 0.212671f, 0.715160f, 0.072169f, 0.019334f, 0.119193f, 0.950227f };$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2XYZ_D65i	gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_RGB2XYZ_D65i[9] = { 1689, 1465, 739, 871, 2929, 296, 79, 488, 3892 };$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YCrCbCoeffs_f	gpu/device/detail/color_detail.hpp	/^        __constant__ float c_RGB2YCrCbCoeffs_f[5] = {0.299f, 0.587f, 0.114f, 0.713f, 0.564f};$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YCrCbCoeffs_i	gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_RGB2YCrCbCoeffs_i[5] = {R2Y, G2Y, B2Y, 11682, 9241};$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YUVCoeffs_f	gpu/device/detail/color_detail.hpp	/^        __constant__ float c_RGB2YUVCoeffs_f[5] = { 0.114f, 0.587f, 0.299f, 0.492f, 0.877f };$/;"	m	namespace:cv::gpu::device::color_detail
c_RGB2YUVCoeffs_i	gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_RGB2YUVCoeffs_i[5] = { B2Y, G2Y, R2Y, 8061, 14369 };$/;"	m	namespace:cv::gpu::device::color_detail
c_XYZ2sRGB_D65f	gpu/device/detail/color_detail.hpp	/^        __constant__ float c_XYZ2sRGB_D65f[9] = { 3.240479f, -1.53715f, -0.498535f, -0.969256f, 1.875991f, 0.041556f, 0.055648f, -0.204043f, 1.057311f };$/;"	m	namespace:cv::gpu::device::color_detail
c_XYZ2sRGB_D65i	gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_XYZ2sRGB_D65i[9] = { 13273, -6296, -2042, -3970, 7684, 170, 228, -836, 4331 };$/;"	m	namespace:cv::gpu::device::color_detail
c_YCrCb2RGBCoeffs_f	gpu/device/detail/color_detail.hpp	/^        __constant__ float c_YCrCb2RGBCoeffs_f[5] = {1.403f, -0.714f, -0.344f, 1.773f};$/;"	m	namespace:cv::gpu::device::color_detail
c_YCrCb2RGBCoeffs_i	gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_YCrCb2RGBCoeffs_i[5] = {22987, -11698, -5636, 29049};$/;"	m	namespace:cv::gpu::device::color_detail
c_YUV2RGBCoeffs_f	gpu/device/detail/color_detail.hpp	/^        __constant__ float c_YUV2RGBCoeffs_f[5] = { 2.032f, -0.395f, -0.581f, 1.140f };$/;"	m	namespace:cv::gpu::device::color_detail
c_YUV2RGBCoeffs_i	gpu/device/detail/color_detail.hpp	/^        __constant__ int   c_YUV2RGBCoeffs_i[5] = { 33292, -6472, -9519, 18678 };$/;"	m	namespace:cv::gpu::device::color_detail
c_str	ts/ts_gtest.h	/^  const char* c_str() const { return c_str_; }$/;"	f	class:testing::internal::String
c_str	ts/ts_gtest.h	/^  const char* c_str() const { return pathname_.c_str(); }$/;"	f	class:testing::internal::FilePath
c_str_	ts/ts_gtest.h	/^  const char* c_str_;$/;"	m	class:testing::internal::String
cache_line_size	ml/ml.hpp	/^    int cache_line_size;$/;"	m	class:CvSVMSolver
cache_size	ml/ml.hpp	/^    int cache_size;$/;"	m	class:CvSVMSolver
calc	gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calc(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, int tid)$/;"	f	struct:cv::gpu::device::vec_distance_detail::VecDiffCachedCalculator
calc	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void calc(const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid) const$/;"	f	struct:cv::gpu::device::VecDiffCachedRegister
calc	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void calc(const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid) const$/;"	f	struct:cv::gpu::device::VecDiffGlobal
calcCheck	gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calcCheck(const T1*, const T2*, int, Dist&, int)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calcCheck	gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ void calcCheck(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, int ind)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calcVecDiffCached	gpu/device/vec_distance.hpp	/^    __device__ __forceinline__ void calcVecDiffCached(const T1* vecCached, const T2* vecGlob, int len, Dist& dist, typename Dist::result_type* smem, int tid)$/;"	f	namespace:cv::gpu::device
calcVecDiffGlobal	gpu/device/vec_distance.hpp	/^    __device__ void calcVecDiffGlobal(const T1* vec1, const T2* vec2, int len, Dist& dist, typename Dist::result_type* smem, int tid)$/;"	f	namespace:cv::gpu::device
calcWithoutCheck	gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ __forceinline__ void calcWithoutCheck(const T1*, const T2*, Dist&)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calcWithoutCheck	gpu/device/detail/vec_distance_detail.hpp	/^            static __device__ void calcWithoutCheck(const T1* vecCached, const T2* vecGlob, Dist& dist)$/;"	f	struct:cv::gpu::device::vec_distance_detail::UnrollVecDiffCached
calc_func	ml/ml.hpp	/^    Calc calc_func;$/;"	m	struct:CvSVMKernel
calc_rho_func	ml/ml.hpp	/^    CalcRho calc_rho_func;$/;"	m	class:CvSVMSolver
calc_var_importance	ml/ml.hpp	/^    CV_PROP_RW bool calc_var_importance; \/\/ true <=> RF processes variable importance$/;"	m	struct:CvRTParams
call	gpu/device/detail/transform_detail.hpp	/^            static void call(PtrStepSz<T1> src1, PtrStepSz<T2> src2, PtrStepSz<D> dst, BinOp op, Mask mask, cudaStream_t stream)$/;"	f	struct:cv::gpu::device::transform_detail::TransformDispatcher
call	gpu/device/detail/transform_detail.hpp	/^            static void call(PtrStepSz<T> src, PtrStepSz<D> dst, UnOp op, Mask mask, cudaStream_t stream)$/;"	f	struct:cv::gpu::device::transform_detail::TransformDispatcher
callback	legacy/legacy.hpp	/^    CvCallback callback;$/;"	m	union:__anon6
cam_params_	stitching/detail/motion_estimators.hpp	/^    Mat cam_params_;$/;"	m	class:cv::detail::BundleAdjusterBase
camera	legacy/legacy.hpp	/^    CvCamera* camera[2]; \/* two individual camera parameters *\/$/;"	m	struct:CvStereoCamera
cameraCount	legacy/legacy.hpp	/^    int     cameraCount;$/;"	m	class:CvCalibFilter
cameraParams	legacy/legacy.hpp	/^    CvCamera cameraParams[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
cameras	stitching/stitcher.hpp	/^    std::vector<detail::CameraParams> cameras() const { return cameras_; }$/;"	f	class:cv::Stitcher
cameras_	stitching/stitcher.hpp	/^    std::vector<detail::CameraParams> cameras_;$/;"	m	class:cv::Stitcher
can_use_gpu_	stitching/detail/blenders.hpp	/^    bool can_use_gpu_;$/;"	m	class:cv::detail::MultiBandBlender
cand_weight	legacy/legacy.hpp	/^    float* cand_weight;$/;"	m	struct:CvCliqueFinder
cannyBuf	gpu/gpu.hpp	/^    CannyBuf cannyBuf;$/;"	m	struct:cv::gpu::HoughCirclesBuf
cannyBuf_	gpu/gpu.hpp	/^    CannyBuf cannyBuf_;$/;"	m	class:cv::gpu::GeneralizedHough_GPU
cap	highgui/highgui.hpp	/^    Ptr<CvCapture> cap;$/;"	m	class:cv::VideoCapture
capacity	core/operations.hpp	/^        size_t capacity;$/;"	m	struct:cv::Vector::Hdr
capacity	core/operations.hpp	/^    size_t capacity() const { return hdr.capacity; }$/;"	f	class:cv::Vector
capacity	flann/result_set.h	/^    int capacity;$/;"	m	class:cvflann::KNNResultSet
capacity	flann/result_set.h	/^    int capacity;$/;"	m	class:cvflann::KNNSimpleResultSet
capacity	flann/result_set.h	/^    size_t capacity;$/;"	m	class:cvflann::RadiusResultSet
capacity_	flann/result_set.h	/^    unsigned int capacity_;$/;"	m	class:cvflann::KNNRadiusUniqueResultSet
capacity_	flann/result_set.h	/^    unsigned int capacity_;$/;"	m	class:cvflann::KNNUniqueResultSet
capture	highgui/highgui_c.h	/^CVAPI(IplImage*) cvQueryFrame( CvCapture* capture );$/;"	v
capture	highgui/highgui_c.h	/^CVAPI(int)    cvGetCaptureDomain( CvCapture* capture);$/;"	v
capture	highgui/highgui_c.h	/^CVAPI(int) cvGrabFrame( CvCapture* capture );$/;"	v
capture	highgui/highgui_c.h	/^CVAPI(void) cvReleaseCapture( CvCapture** capture );$/;"	v
capture	ts/ts_gtest.h	/^  void capture(T* ptr) {$/;"	f	class:testing::internal::linked_ptr
captureSession	highgui/cap_ios.h	/^@property (nonatomic, retain) AVCaptureSession* captureSession;$/;"	v
captureSessionLoaded	highgui/cap_ios.h	/^@property (nonatomic, readonly) BOOL captureSessionLoaded;$/;"	v
cascade	objdetect/objdetect.hpp	/^CVAPI(void) cvReleaseHaarClassifierCascade( CvHaarClassifierCascade** cascade );$/;"	v
cascadeForTracking	contrib/detection_based_tracker.hpp	/^        cv::CascadeClassifier cascadeForTracking;$/;"	m	class:DetectionBasedTracker
cast	flann/any.h	/^    T& cast()$/;"	f	struct:cvflann::any
cast	flann/any.h	/^    const T& cast() const$/;"	f	struct:cvflann::any
cast	gpu/device/vec_math.hpp	/^            template <typename VecS> static __device__ __forceinline__ VecD cast(const VecS& v)$/;"	f	struct:cv::gpu::device::vec_math_detail::SatCastHelper
cat_count	ml/ml.hpp	/^    CvMat* cat_count;$/;"	m	struct:CvDTreeTrainData
cat_map	ml/ml.hpp	/^    CvMat* cat_map;$/;"	m	struct:CvDTreeTrainData
cat_ofs	ml/ml.hpp	/^    CvMat* cat_ofs;$/;"	m	struct:CvDTreeTrainData
cat_var_count	ml/ml.hpp	/^    int ord_var_count, cat_var_count, work_var_count;$/;"	m	struct:CvDTreeTrainData
cb	contrib/contrib.hpp	/^        BundleAdjustCallback cb;$/;"	m	class:cv::LevMarqSparse
cbBounds	legacy/legacy.hpp	/^    uchar cbBounds[3];$/;"	m	struct:CvBGCodeBookModel
cb_index_	flann/kmeans_index.h	/^    float cb_index_;$/;"	m	class:cvflann::KMeansIndex
cbmap	legacy/legacy.hpp	/^    CvBGCodeBookElem** cbmap;$/;"	m	struct:CvBGCodeBookModel
cctable	legacy/legacy.hpp	/^    CvBGPixelCCStatTable* cctable;$/;"	m	struct:CvBGPixelStat
ce	legacy/legacy.hpp	/^    int* ce;$/;"	m	struct:CvCliqueFinder
cellSize	objdetect/objdetect.hpp	/^    CV_PROP Size cellSize;$/;"	m	struct:cv::HOGDescriptor
cell_bit_size_	flann/dynamic_bitset.h	/^    static const unsigned int cell_bit_size_ = CHAR_BIT * sizeof(size_t);$/;"	m	class:cvflann::DynamicBitset
cell_size	gpu/gpu.hpp	/^    Size cell_size;$/;"	m	struct:cv::gpu::HOGDescriptor
cell_size	ocl/ocl.hpp	/^            Size cell_size;$/;"	m	struct:cv::ocl::HOGDescriptor
center	core/types_c.h	/^    CvPoint2D32f center;  \/* Center of the box.                          *\/$/;"	m	struct:CvBox2D
center_	core/opengl_interop.hpp	/^    Point3d center_;$/;"	m	class:cv::GlCamera
centersAlgFunction	flann/hierarchical_clustering_index.h	/^    typedef void (HierarchicalClusteringIndex::* centersAlgFunction)(int, int*, int, int*, int&);$/;"	t	class:cvflann::HierarchicalClusteringIndex
centersAlgFunction	flann/kmeans_index.h	/^    typedef void (KMeansIndex::* centersAlgFunction)(int, int*, int, int*, int&);$/;"	t	class:cvflann::KMeansIndex
centers_init_	flann/hierarchical_clustering_index.h	/^    flann_centers_init_t centers_init_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
centers_init_	flann/kmeans_index.h	/^    flann_centers_init_t centers_init_;$/;"	m	class:cvflann::KMeansIndex
centre	contrib/contrib.hpp	/^    double value, centre;$/;"	m	class:CvFuzzyCurve
chain	legacy/legacy.hpp	/^    CvSeq* chain;$/;"	m	struct:CvLCMEdge
channelSeq	core/types_c.h	/^    char channelSeq[4];     \/* ditto *\/$/;"	m	struct:_IplImage
channels	core/gpumat.hpp	/^    inline int GpuMat::channels() const$/;"	f	class:cv::gpu::GpuMat
channels	core/mat.hpp	/^inline int Mat::channels() const { return CV_MAT_CN(flags); }$/;"	f	class:cv::Mat
channels	core/mat.hpp	/^inline int SparseMat::channels() const$/;"	f	class:cv::SparseMat
channels	core/mat.hpp	/^template<typename _Tp> inline int Mat_<_Tp>::channels() const$/;"	f	class:cv::Mat_
channels	core/mat.hpp	/^template<typename _Tp> inline int SparseMat_<_Tp>::channels() const$/;"	f	class:cv::SparseMat_
channels	core/opengl_interop.hpp	/^    inline int channels() const { return CV_MAT_CN(type_); }$/;"	f	class:cv::GlBuffer
channels	core/opengl_interop.hpp	/^    inline int channels() const { return CV_MAT_CN(type_); }$/;"	f	class:cv::GlTexture
channels	core/operations.hpp	/^template<typename _Tp> inline int Seq<_Tp>::channels() const$/;"	f	class:cv::Seq
channels	gpu/device/utility.hpp	/^        int channels;$/;"	m	struct:cv::gpu::device::SingleMaskChannels
channels	legacy/legacy.hpp	/^    int channels() const { return image ? image->nChannels : 0; }$/;"	f	class:CvImage
channels	legacy/legacy.hpp	/^    int channels() const { return matrix ? CV_MAT_CN(matrix->type) : 0; }$/;"	f	class:CvMatrix
channels	ocl/matrix_operations.hpp	/^        inline int oclMat::channels() const$/;"	f	class:cv::ocl::oclMat
check	core/cuda_devptrs.hpp	/^        template <> struct StaticAssert<true> {static __CV_GPU_HOST_DEVICE__ void check(){}};$/;"	f	struct:cv::gpu::StaticAssert
check	gpu/device/static_check.hpp	/^            __OPENCV_GPU_HOST_DEVICE__ static void check() {};$/;"	f	struct:cv::gpu::device::Static
check	gpu/device/utility.hpp	/^        static __device__ __forceinline__ bool check(int, int)$/;"	f	struct:cv::gpu::device::WithOutMask
check	gpu/device/utility.hpp	/^        static __device__ __forceinline__ bool check(int, int, int, uint offset = 0)$/;"	f	struct:cv::gpu::device::WithOutMask
check	ml/ml.hpp	55;"	d
child	objdetect/objdetect.hpp	/^    int child;$/;"	m	struct:CvHaarStageClassifier
child1	flann/kdtree_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeIndex::Node
child1	flann/kdtree_single_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
child2	flann/kdtree_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeIndex::Node
child2	flann/kdtree_single_index.h	/^        Node* child1, * child2;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
children	contrib/contrib.hpp	/^            int children[8];$/;"	m	struct:cv::Octree::Node
children	contrib/openfabmap.hpp	/^    vector<vector<int> > children;$/;"	m	class:cv::of2::FabMap2
childs	flann/hierarchical_clustering_index.h	/^        Node** childs;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
childs	flann/kmeans_index.h	/^        KMeansNode** childs;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
chooseCenters	flann/hierarchical_clustering_index.h	/^    centersAlgFunction chooseCenters;$/;"	m	class:cvflann::HierarchicalClusteringIndex
chooseCenters	flann/kmeans_index.h	/^    centersAlgFunction chooseCenters;$/;"	m	class:cvflann::KMeansIndex
chooseCentersGonzales	flann/hierarchical_clustering_index.h	/^    void chooseCentersGonzales(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersGonzales	flann/kmeans_index.h	/^    void chooseCentersGonzales(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
chooseCentersKMeanspp	flann/hierarchical_clustering_index.h	/^    void chooseCentersKMeanspp(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersKMeanspp	flann/kmeans_index.h	/^    void chooseCentersKMeanspp(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
chooseCentersRandom	flann/hierarchical_clustering_index.h	/^    void chooseCentersRandom(int k, int* dsindices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::HierarchicalClusteringIndex
chooseCentersRandom	flann/kmeans_index.h	/^    void chooseCentersRandom(int k, int* indices, int indices_length, int* centers, int& centers_length)$/;"	f	class:cvflann::KMeansIndex
choose_policy	flann/any.h	/^struct choose_policy$/;"	s	namespace:cvflann::anyimpl
choose_policy	flann/any.h	/^struct choose_policy<T*>$/;"	s	namespace:cvflann::anyimpl
choose_policy	flann/any.h	/^struct choose_policy<any>$/;"	s	namespace:cvflann::anyimpl
chromaFormat	gpu/gpu.hpp	/^        ChromaFormat chromaFormat;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
clCxt	ocl/ocl.hpp	/^            Context *clCxt;$/;"	m	class:cv::ocl::oclMat
clCxt	ocl/ocl.hpp	/^            static auto_ptr<Context> clCxt;$/;"	m	class:cv::ocl::Context
clTree	contrib/openfabmap.hpp	/^    Mat clTree;$/;"	m	class:cv::of2::FabMap
classCounters	legacy/legacy.hpp	/^    vector<int> classCounters;$/;"	m	class:cv::FernClassifier
classID	objdetect/objdetect.hpp	/^        int classID;$/;"	m	struct:cv::LatentSvmDetector::ObjectDetection
classNames	objdetect/objdetect.hpp	/^    vector<string> classNames;$/;"	m	class:cv::LatentSvmDetector
class_count	ml/ml.hpp	/^    int class_count;$/;"	m	class:CvGBTrees
class_id	features2d/features2d.hpp	/^    CV_PROP_RW int class_id; \/\/!< object class (if the keypoints need to be clustered by an object they belong to)$/;"	m	class:cv::KeyPoint
class_id	objdetect/objdetect.hpp	/^  std::string class_id;$/;"	m	struct:cv::linemod::Match
class_idx	ml/ml.hpp	/^    int class_idx;$/;"	m	struct:CvDTreeNode
class_labels	ml/ml.hpp	/^    CvMat* class_labels;$/;"	m	class:CvGBTrees
class_labels	ml/ml.hpp	/^    CvMat* class_labels;$/;"	m	class:CvSVM
class_map	ml/ml.hpp	/^    std::map<std::string, int> class_map;$/;"	m	class:CvMLData
class_templates	objdetect/objdetect.hpp	/^  TemplatesMap class_templates;$/;"	m	class:cv::linemod::Detector
class_weights	ml/ml.hpp	/^    CvMat*      class_weights; \/\/ for CV_SVM_C_SVC$/;"	m	struct:CvSVMParams
class_weights	ml/ml.hpp	/^    CvMat* class_weights;$/;"	m	class:CvSVM
classes	legacy/legacy.hpp	/^    inline int classes() const { return classes_; }$/;"	f	class:cv::RTreeClassifier
classes	legacy/legacy.hpp	/^    int classes() { return classes_; }$/;"	f	class:cv::RandomizedTree
classes_	legacy/legacy.hpp	/^    int classes_;$/;"	m	class:cv::RTreeClassifier
classes_	legacy/legacy.hpp	/^    int classes_;$/;"	m	class:cv::RandomizedTree
classifier	legacy/legacy.hpp	/^    Ptr<FernClassifier> classifier;$/;"	m	class:cv::FernDescriptorMatcher
classifier	objdetect/objdetect.hpp	/^    CvHaarClassifier* classifier;$/;"	m	struct:CvHaarStageClassifier
classifier_	legacy/legacy.hpp	/^    RTreeClassifier classifier_;$/;"	m	class:cv::CalonderDescriptorExtractor
classifiers	objdetect/objdetect.hpp	/^        vector<DTree> classifiers;$/;"	m	class:cv::CascadeClassifier::Data
clear	core/operations.hpp	/^    void clear() { resize(0); }$/;"	f	class:cv::Vector
clear	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::clear()$/;"	f	class:cv::Seq
clear	flann/dynamic_bitset.h	/^    void clear()$/;"	f	class:cvflann::DynamicBitset
clear	flann/heap.h	/^    void clear()$/;"	f	class:cvflann::Heap
clear	flann/result_set.h	/^    inline void clear()$/;"	f	class:cvflann::RadiusUniqueResultSet
clear	flann/result_set.h	/^    void clear()$/;"	f	class:cvflann::KNNRadiusUniqueResultSet
clear	flann/result_set.h	/^    void clear()$/;"	f	class:cvflann::KNNUniqueResultSet
clear	legacy/legacy.hpp	/^    void clear() { detach(); }$/;"	f	class:CvImage
clear	legacy/legacy.hpp	/^    void clear()$/;"	f	class:CvMatrix
clipInt	ts/ts.hpp	/^inline int clipInt( int val, int min_val, int max_val )$/;"	f	namespace:cvtest
clone	core/gpumat.hpp	/^    inline GpuMat GpuMat::clone() const$/;"	f	class:cv::gpu::GpuMat
clone	core/mat.hpp	/^SparseMat_<_Tp>::clone() const$/;"	f	class:cv::SparseMat_
clone	core/mat.hpp	/^inline Mat Mat::clone() const$/;"	f	class:cv::Mat
clone	core/mat.hpp	/^inline SparseMat SparseMat::clone() const$/;"	f	class:cv::SparseMat
clone	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::clone() const$/;"	f	class:cv::Mat_
clone	core/operations.hpp	/^    Vector<_Tp> clone() const$/;"	f	class:cv::Vector
clone	core/operations.hpp	/^    static void* clone(const void* ptr)$/;"	f	struct:cv::RTTIImpl
clone	core/types_c.h	/^    CvCloneFunc clone;$/;"	m	struct:CvTypeInfo
clone	flann/any.h	/^    virtual void clone(void* const* src, void** dest) { *dest = *src; }$/;"	f	struct:cvflann::anyimpl::small_any_policy
clone	flann/any.h	/^    virtual void clone(void* const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
clone	legacy/legacy.hpp	/^    CvImage clone() { return CvImage(image ? cvCloneImage(image) : 0); }$/;"	f	class:CvImage
clone	legacy/legacy.hpp	/^    CvMatrix clone() { return CvMatrix(matrix ? cvCloneMat(matrix) : 0); }$/;"	f	class:CvMatrix
clone	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::clone() const$/;"	f	class:cv::ocl::oclMat
clone_op	features2d/features2d.hpp	/^        static Mat clone_op( Mat m ) { return m.clone(); }$/;"	f	class:cv::GenericDescriptorMatcher::KeyPointCollection
clone_op	features2d/features2d.hpp	/^    static Mat clone_op( Mat m ) { return m.clone(); }$/;"	f	class:cv::DescriptorMatcher
cls_labels	ml/ml.hpp	/^    CvMat*  cls_labels;$/;"	m	class:CvNormalBayesClassifier
clusterCount	features2d/features2d.hpp	/^    int clusterCount;$/;"	m	class:cv::BOWKMeansTrainer
clusterSize	contrib/openfabmap.hpp	/^    double clusterSize;$/;"	m	class:cv::of2::BOWMSCTrainer
clusteringDistance	legacy/legacy.hpp	/^    double clusteringDistance;$/;"	m	class:cv::LDetector
cn	gpu/device/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::gpu::device::VecTraits::__anon78
cn	gpu/device/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::gpu::device::VecTraits::__anon79
cn	gpu/device/vec_traits.hpp	/^        enum {cn=1};$/;"	e	enum:cv::gpu::device::VecTraits::__anon80
cn	gpu/device/vec_traits.hpp	/^        enum {cn=2};$/;"	e	enum:cv::gpu::device::VecTraits::__anon81
cn	gpu/device/vec_traits.hpp	/^        enum {cn=3};$/;"	e	enum:cv::gpu::device::VecTraits::__anon82
cn	gpu/device/vec_traits.hpp	/^        enum {cn=4};$/;"	e	enum:cv::gpu::device::VecTraits::__anon83
cn	gpu/device/vec_traits.hpp	/^        enum {cn=8};$/;"	e	enum:cv::gpu::device::VecTraits::__anon84
code	core/core.hpp	/^    int code; \/\/\/< error code @see CVStatus$/;"	m	class:cv::Exception
code	imgproc/types_c.h	/^    char      code;$/;"	m	struct:CvChainPtReader
code	ts/ts.hpp	/^    int code;$/;"	m	struct:cvtest::TestInfo
codec	gpu/gpu.hpp	/^        Codec codec;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
coef0	ml/ml.hpp	/^    CV_PROP_RW double      coef0;  \/\/ for poly\/sigmoid$/;"	m	struct:CvSVMParams
coeffObjectSizeToTrack	contrib/detection_based_tracker.hpp	/^            float coeffObjectSizeToTrack;$/;"	m	struct:DetectionBasedTracker::InnerParameters
coeffObjectSpeedUsingInPrediction	contrib/detection_based_tracker.hpp	/^            float coeffObjectSpeedUsingInPrediction;$/;"	m	struct:DetectionBasedTracker::InnerParameters
coeffTrackingWindowSize	contrib/detection_based_tracker.hpp	/^            float coeffTrackingWindowSize;$/;"	m	struct:DetectionBasedTracker::InnerParameters
coeffs	legacy/legacy.hpp	/^    double coeffs[2][3][3];\/* coefficients for transformation *\/$/;"	m	struct:CvStereoCamera
coi	core/types_c.h	/^    int  coi; \/* 0 - no COI (all channels are selected), 1 - 0th channel is selected ...*\/$/;"	m	struct:_IplROI
coi	legacy/legacy.hpp	/^    int coi() const { return !image || !image->roi ? 0 : image->roi->coi; }$/;"	f	class:CvImage
col	core/gpumat.hpp	/^    inline GpuMat GpuMat::col(int x) const$/;"	f	class:cv::gpu::GpuMat
col	core/mat.hpp	/^inline Mat Mat::col(int x) const { return Mat(*this, Range::all(), Range(x, x+1)); }$/;"	f	class:cv::Mat
col	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::col(int x) const$/;"	f	class:cv::Mat_
col	core/operations.hpp	/^Matx<_Tp, m, 1> Matx<_Tp, m, n>::col(int j) const$/;"	f	class:cv::Matx
col	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::col(int x) const$/;"	f	class:cv::ocl::oclMat
colRange	core/gpumat.hpp	/^    inline GpuMat GpuMat::colRange(Range r) const$/;"	f	class:cv::gpu::GpuMat
colRange	core/gpumat.hpp	/^    inline GpuMat GpuMat::colRange(int startcol, int endcol) const$/;"	f	class:cv::gpu::GpuMat
colRange	core/mat.hpp	/^inline Mat Mat::colRange(const Range& r) const$/;"	f	class:cv::Mat
colRange	core/mat.hpp	/^inline Mat Mat::colRange(int startcol, int endcol) const$/;"	f	class:cv::Mat
colRange	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::colRange(const Range &r) const$/;"	f	class:cv::ocl::oclMat
colRange	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::colRange(int startcol, int endcol) const$/;"	f	class:cv::ocl::oclMat
collectGarbage	stitching/detail/matchers.hpp	/^    virtual void collectGarbage() {}$/;"	f	class:cv::detail::FeaturesFinder
collectGarbage	stitching/detail/matchers.hpp	/^    virtual void collectGarbage() {}$/;"	f	class:cv::detail::FeaturesMatcher
color	core/core_c.h	/^  CvScalar color;       \/\/Qt:ColorFont -> cvScalar(blue_component, green_component, red\\_component[, alpha_component])$/;"	m	struct:CvFont
color	legacy/blobtrack.hpp	/^    CvScalar color;$/;"	m	struct:CvDrawShape
colorMode	contrib/retina.hpp	/^               bool colorMode, normaliseOutput;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
colorModel	core/types_c.h	/^    char colorModel[4];     \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage
color_	core/opengl_interop.hpp	/^    GlBuffer color_;$/;"	m	class:cv::GlArrays
color_detail	gpu/device/detail/color_detail.hpp	/^    namespace color_detail$/;"	n	namespace:cv::gpu::device
colors_	gpu/gpu.hpp	/^    GpuMat colors_;$/;"	m	class:cv::gpu::GMG_GPU
colors_	video/background_segm.hpp	/^    cv::Mat_<unsigned int> colors_;$/;"	m	class:cv::BackgroundSubtractorGMG
cols	core/cuda_devptrs.hpp	/^            int cols;$/;"	m	struct:cv::gpu::PtrStepSz
cols	core/gpumat.hpp	/^        int rows, cols;$/;"	m	class:cv::gpu::GpuMat
cols	core/opengl_interop.hpp	/^    inline int cols() const { return cols_; }$/;"	f	class:cv::GlBuffer
cols	core/opengl_interop.hpp	/^    inline int cols() const { return cols_; }$/;"	f	class:cv::GlTexture
cols	core/opengl_interop.hpp	/^    inline int cols() const { return vertex_.cols(); }$/;"	f	class:cv::GlArrays
cols	core/types_c.h	/^        int cols;$/;"	m	union:CvMat::__anon223
cols	core/types_c.h	/^    int cols;$/;"	m	struct:CvMat
cols	flann/matrix.h	/^    size_t cols;$/;"	m	class:cvflann::Matrix
cols	flann/matrix.h	/^    size_t cols;$/;"	m	class:cvflann::UntypedMatrix
cols	flann/saving.h	/^    size_t cols;$/;"	m	struct:cvflann::IndexHeader
cols	gpu/gpu.hpp	/^    int rows, cols;$/;"	m	class:cv::gpu::CudaMem
cols	legacy/legacy.hpp	/^    int cols() const { return matrix ? matrix->cols : 0; }$/;"	f	class:CvMatrix
cols	ocl/ocl.hpp	/^            int rows, cols;$/;"	m	class:cv::ocl::oclMat
cols_	core/opengl_interop.hpp	/^    int cols_;$/;"	m	class:cv::GlBuffer
cols_	core/opengl_interop.hpp	/^    int cols_;$/;"	m	class:cv::GlTexture
columnBorderType	imgproc/imgproc.hpp	/^    int rowBorderType, columnBorderType;$/;"	m	class:cv::FilterEngine
columnFilter	imgproc/imgproc.hpp	/^    Ptr<BaseColumnFilter> columnFilter;$/;"	m	class:cv::FilterEngine
comLen	legacy/blobtrack.hpp	/^    int comLen; \/\/common length for two tracks$/;"	m	struct:CvTracksTimePos
comparators	ts/ts_perf.hpp	/^namespace comparators$/;"	n	namespace:perf
compatible	flann/any.h	/^    bool compatible(const any& x) const$/;"	f	struct:cvflann::any
completeSymmFlag	calib3d/calib3d.hpp	/^    bool completeSymmFlag;$/;"	m	class:CvLevMarq
complexity	ml/ml.hpp	/^    int complexity;$/;"	m	struct:CvDTreeNode
component	stitching/stitcher.hpp	/^    std::vector<int> component() const { return indices_; }$/;"	f	class:cv::Stitcher
compose_resol_	stitching/stitcher.hpp	/^    double compose_resol_;$/;"	m	class:cv::Stitcher
compositingResol	stitching/stitcher.hpp	/^    double compositingResol() const { return compose_resol_; }$/;"	f	class:cv::Stitcher
compressionMethod	legacy/legacy.hpp	/^        int compressionMethod;$/;"	m	class:cv::FernDescriptorMatcher::Params
compressionMethod	legacy/legacy.hpp	/^    int compressionMethod;$/;"	m	class:cv::FernClassifier
compute	core/mat.hpp	/^    SVD::compute( const Matx<_Tp, m, n>& a, Matx<_Tp, nm, 1>& w, Matx<_Tp, m, nm>& u, Matx<_Tp, n, nm>& vt )$/;"	f	class:cv::SVD
compute	core/mat.hpp	/^SVD::compute( const Matx<_Tp, m, n>& a, Matx<_Tp, nm, 1>& w )$/;"	f	class:cv::SVD
computeBoundingBox	flann/kdtree_single_index.h	/^    void computeBoundingBox(BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
computeClustering	flann/hierarchical_clustering_index.h	/^    void computeClustering(NodePtr node, int* dsindices, int indices_length, int branching, int level)$/;"	f	class:cvflann::HierarchicalClusteringIndex
computeClustering	flann/kmeans_index.h	/^    void computeClustering(KMeansNodePtr node, int* indices, int indices_length, int branching, int level)$/;"	f	class:cvflann::KMeansIndex
computeDistanceRaport	flann/index_testing.h	/^typename Distance::ResultType computeDistanceRaport(const Matrix<typename Distance::ElementType>& inputData, typename Distance::ElementType* target,$/;"	f	namespace:cvflann
computeImpl	legacy/legacy.hpp	/^void CalonderDescriptorExtractor<T>::computeImpl( const Mat& image,$/;"	f	class:cv::CalonderDescriptorExtractor
computeInitialDistances	flann/kdtree_single_index.h	/^    DistanceType computeInitialDistances(const ElementType* vec, std::vector<DistanceType>& dists)$/;"	f	class:cvflann::KDTreeSingleIndex
computeLabels	flann/hierarchical_clustering_index.h	/^    void computeLabels(int* dsindices, int indices_length,  int* centers, int centers_length, int* labels, DistanceType& cost)$/;"	f	class:cvflann::HierarchicalClusteringIndex
computeMinMax	flann/kdtree_single_index.h	/^    void computeMinMax(int* ind, int count, int dim, ElementType& min_elem, ElementType& max_elem)$/;"	f	class:cvflann::KDTreeSingleIndex
computeNodeStatistics	flann/kmeans_index.h	/^    void computeNodeStatistics(KMeansNodePtr node, int* indices, int indices_length)$/;"	f	class:cvflann::KMeansIndex
compute_ground_truth	flann/ground_truth.h	/^void compute_ground_truth(const Matrix<typename Distance::ElementType>& dataset, const Matrix<typename Distance::ElementType>& testset, Matrix<int>& matches,$/;"	f	namespace:cvflann
condens	legacy/legacy.hpp	/^CVAPI(void)  cvConDensUpdateByTime( CvConDensation* condens);$/;"	v
condens	legacy/legacy.hpp	/^CVAPI(void)  cvReleaseConDensation( CvConDensation** condens );$/;"	v
condensed_idx	ml/ml.hpp	/^    int condensed_idx;$/;"	m	struct:CvDTreeSplit
confThresh	stitching/detail/motion_estimators.hpp	/^    double confThresh() const { return conf_thresh_; }$/;"	f	class:cv::detail::BundleAdjusterBase
conf_thresh_	stitching/detail/motion_estimators.hpp	/^    double conf_thresh_;$/;"	m	class:cv::detail::BundleAdjusterBase
conf_thresh_	stitching/stitcher.hpp	/^    double conf_thresh_;$/;"	m	class:cv::Stitcher
confidence	features2d/features2d.hpp	/^      double confidence;$/;"	m	struct:cv::SimpleBlobDetector::Center
confidence	stitching/detail/matchers.hpp	/^    double confidence;                  \/\/ Confidence two images are from the same panorama$/;"	m	struct:cv::detail::MatchesInfo
confidences	gpu/gpu.hpp	/^   vector<double> confidences;$/;"	m	struct:cv::gpu::HOGConfidence
confidences	objdetect/objdetect.hpp	/^   vector<double> confidences;$/;"	m	struct:cv::DetectionROI
conj	core/operations.hpp	/^template<> inline Vec<double, 2> Vec<double, 2>::conj() const$/;"	f	class:cv::Vec
conj	core/operations.hpp	/^template<> inline Vec<double, 4> Vec<double, 4>::conj() const$/;"	f	class:cv::Vec
conj	core/operations.hpp	/^template<> inline Vec<float, 2> Vec<float, 2>::conj() const$/;"	f	class:cv::Vec
conj	core/operations.hpp	/^template<> inline Vec<float, 4> Vec<float, 4>::conj() const$/;"	f	class:cv::Vec
conj	core/operations.hpp	/^template<typename _Tp> inline Complex<_Tp> Complex<_Tp>::conj() const$/;"	f	class:cv::Complex
conj	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp> Scalar_<_Tp>::conj() const$/;"	f	class:cv::Scalar_
conjugate	core/operations.hpp	/^template<typename _Tp> Vec<_Tp, 2> conjugate(const Vec<_Tp, 2>& v)$/;"	f	namespace:cv
conjugate	core/operations.hpp	/^template<typename _Tp> Vec<_Tp, 4> conjugate(const Vec<_Tp, 4>& v)$/;"	f	namespace:cv
constBorderRow	imgproc/imgproc.hpp	/^    vector<uchar> constBorderRow;$/;"	m	class:cv::FilterEngine
constBorderValue	imgproc/imgproc.hpp	/^    vector<uchar> constBorderValue;$/;"	m	class:cv::FilterEngine
const_iterator	core/operations.hpp	/^    typedef const _Tp* const_iterator;$/;"	t	class:cv::Vector
const_iterator	ts/ts_gtest.h	/^  typedef const Element* const_iterator;$/;"	t	class:testing::internal::NativeArray
const_pointer	core/core.hpp	/^    typedef const value_type* const_pointer;$/;"	t	class:cv::Allocator
const_reference	core/core.hpp	/^    typedef const value_type& const_reference;$/;"	t	class:cv::Allocator
const_reference	core/operations.hpp	/^    typedef const _Tp& const_reference;$/;"	t	class:cv::Vector
construct	core/core.hpp	/^    void construct(pointer p, const _Tp& v) { new(static_cast<void*>(p)) _Tp(v); }$/;"	f	class:cv::Allocator
container_	ts/ts_gtest.h	/^  const ContainerType container_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator
contains	core/operations.hpp	/^template<typename _Tp> inline bool Rect_<_Tp>::contains(const Point_<_Tp>& pt) const$/;"	f	class:cv::Rect_
context	ts/ts.hpp	/^    int context;$/;"	m	struct:cvtest::MatComparator
contour	imgproc/imgproc_c.h	/^CVAPI(int)  cvCheckContourConvexity( const CvArr* contour );$/;"	v
contour	imgproc/types_c.h	/^    CvSeq* contour; \/* optional component boundary$/;"	m	struct:CvConnectedComp
contour	legacy/legacy.hpp	/^    CvContour* contour;$/;"	m	struct:CvLCMNode
contour1mask_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> contour1mask_, contour2mask_;$/;"	m	class:cv::detail::DpSeamFinder
contour2mask_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> contour1mask_, contour2mask_;$/;"	m	class:cv::detail::DpSeamFinder
contours_	stitching/detail/seam_finders.hpp	/^    std::vector<std::vector<Point> > contours_;$/;"	m	class:cv::detail::DpSeamFinder
contrastThreshold	nonfree/features2d.hpp	/^    CV_PROP_RW double contrastThreshold;$/;"	m	class:cv::SIFT
controlMatrix	video/tracking.hpp	/^    Mat controlMatrix;      \/\/!< control matrix (B) (not used if there is no control)$/;"	m	class:cv::KalmanFilter
control_matrix	video/tracking.hpp	/^    CvMat* control_matrix;      \/* control matrix (B)$/;"	m	struct:CvKalman
copy	flann/result_set.h	/^    virtual void copy(int* indices, DistanceType* dist, int n_neighbors = -1) const$/;"	f	class:cvflann::UniqueResultSet
copy	gpu/device/warp.hpp	/^        static __device__ __forceinline__ OutIt copy(InIt beg, InIt end, OutIt out)$/;"	f	struct:cv::gpu::device::Warp
copy	ts/ts_gtest.h	/^  template <typename U> void copy(linked_ptr<U> const* ptr) {$/;"	f	class:testing::internal::linked_ptr
copyTo	core/operations.hpp	/^    void copyTo(Vector<_Tp>& vec) const$/;"	f	class:cv::Vector
copyTo	core/operations.hpp	/^    void copyTo(std::vector<_Tp>& vec) const$/;"	f	class:cv::Vector
copyTo	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::copyTo(vector<_Tp>& vec, const Range& range) const$/;"	f	class:cv::Seq
copy_from_value	flann/any.h	/^    virtual void copy_from_value(void const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
copy_from_value	flann/any.h	/^    virtual void copy_from_value(void const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::small_any_policy
corners	objdetect/objdetect.hpp	/^  CvMat *corners;$/;"	m	struct:CvDataMatrixCode
corners_	stitching/detail/seam_finders.hpp	/^        const Point *corners_;$/;"	m	class:cv::detail::DpSeamFinder::ImagePairLess
corners_	stitching/detail/seam_finders.hpp	/^    std::vector<Point> corners_;$/;"	m	class:cv::detail::PairwiseSeamFinder
cost	calib3d/calib3d.hpp	/^    CvMat* cost;$/;"	m	struct:CvStereoBMState
costFunc_	stitching/detail/seam_finders.hpp	/^    CostFunction costFunc_;$/;"	m	class:cv::detail::DpSeamFinder
costFunction	stitching/detail/seam_finders.hpp	/^    CostFunction costFunction() const { return costFunc_; }$/;"	f	class:cv::detail::DpSeamFinder
cost_type_	stitching/detail/seam_finders.hpp	/^    int cost_type_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
count	core/core_c.h	/^    int count; \/* number of arrays *\/$/;"	m	struct:CvNArrayIterator
count	core/types_c.h	/^    int    count;             \/* Number of elements in the block.           *\/$/;"	m	struct:CvSeqBlock
count	flann/heap.h	/^    int count;$/;"	m	class:cvflann::Heap
count	flann/result_set.h	/^    int count;$/;"	m	class:cvflann::KNNResultSet
count	flann/result_set.h	/^    int count;$/;"	m	class:cvflann::KNNSimpleResultSet
count	flann/result_set.h	/^    size_t count;$/;"	m	class:cvflann::RadiusResultSet
count	ml/ml.hpp	/^        int count;$/;"	m	union:CvTrainTestSplit::__anon259
count	ml/ml.hpp	/^    CvMat** count;$/;"	m	class:CvNormalBayesClassifier
count	ml/ml.hpp	/^    int dims, count;$/;"	m	struct:CvVectors
count	objdetect/objdetect.hpp	/^    int  count;$/;"	m	struct:CvHaarClassifierCascade
count	objdetect/objdetect.hpp	/^    int  count;$/;"	m	struct:CvHaarStageClassifier
count	objdetect/objdetect.hpp	/^    int count;$/;"	m	struct:CvHaarClassifier
countCorrectMatches	flann/index_testing.h	/^inline int countCorrectMatches(int* neighbors, int* groundTruth, int n)$/;"	f	namespace:cvflann
countFrames	legacy/legacy.hpp	/^    int                        countFrames;$/;"	m	struct:CvGaussBGModel
count_	gpu/gpu.hpp	/^    int count_;$/;"	m	class:cv::gpu::FAST_GPU
counter	contrib/contrib.hpp	/^        int64 counter;$/;"	m	class:cv::TickMeter
counter	ocl/ocl.hpp	/^            void *counter;$/;"	m	struct:cv::ocl::CannyBuf
counter_	flann/random.h	/^    int counter_;$/;"	m	class:cvflann::UniqueRandom
counts	ml/ml.hpp	/^    CvMat* counts;$/;"	m	struct:CvDTreeTrainData
covMatType	ml/ml.hpp	/^    CV_PROP_RW int covMatType;$/;"	m	class:cv::EM
cov_mat_type	legacy/legacy.hpp	/^    CV_PROP_RW int cov_mat_type;$/;"	m	struct:CvEMParams
cov_rotate_mats	ml/ml.hpp	/^    CvMat** cov_rotate_mats;$/;"	m	class:CvNormalBayesClassifier
covs	legacy/legacy.hpp	/^    const CvMat** covs;$/;"	m	struct:CvEMParams
covs	ml/ml.hpp	/^    CV_PROP vector<Mat> covs;$/;"	m	class:cv::EM
covsEigenValues	ml/ml.hpp	/^    vector<Mat> covsEigenValues;$/;"	m	class:cv::EM
covsHdrs	legacy/legacy.hpp	/^    std::vector<CvMat> covsHdrs;$/;"	m	class:CvEM
covsPtrs	legacy/legacy.hpp	/^    std::vector<CvMat*> covsPtrs;$/;"	m	class:CvEM
covsRotateMats	ml/ml.hpp	/^    vector<Mat> covsRotateMats;$/;"	m	class:cv::EM
create	core/gpumat.hpp	/^    inline void GpuMat::create(Size size_, int type_)$/;"	f	class:cv::gpu::GpuMat
create	core/mat.hpp	/^SparseMat_<_Tp>::create(int _dims, const int* _sizes)$/;"	f	class:cv::SparseMat_
create	core/mat.hpp	/^inline void Mat::create(Size _sz, int _type)$/;"	f	class:cv::Mat
create	core/mat.hpp	/^inline void Mat::create(int _rows, int _cols, int _type)$/;"	f	class:cv::Mat
create	core/mat.hpp	/^template<typename _Tp> inline void Mat_<_Tp>::create(Size _sz)$/;"	f	class:cv::Mat_
create	core/mat.hpp	/^template<typename _Tp> inline void Mat_<_Tp>::create(int _dims, const int* _sz)$/;"	f	class:cv::Mat_
create	core/mat.hpp	/^template<typename _Tp> inline void Mat_<_Tp>::create(int _rows, int _cols)$/;"	f	class:cv::Mat_
create	core/opengl_interop.hpp	/^inline void GlBuffer::create(Size _size, int _type) { create(_size.height, _size.width, _type, usage()); }$/;"	f	class:cv::GlBuffer
create	core/opengl_interop.hpp	/^inline void GlBuffer::create(Size _size, int _type, Usage _usage) { create(_size.height, _size.width, _type, _usage); }$/;"	f	class:cv::GlBuffer
create	core/opengl_interop.hpp	/^inline void GlBuffer::create(int _rows, int _cols, int _type) { create(_rows, _cols, _type, usage()); }$/;"	f	class:cv::GlBuffer
create	core/opengl_interop.hpp	/^inline void GlTexture::create(Size _size, int _type) { create(_size.height, _size.width, _type); }$/;"	f	class:cv::GlTexture
create	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp> Algorithm::create(const string& name)$/;"	f	class:cv::Algorithm
create	flann/all_indices.h	/^    static NNIndex<Distance>* create(const Matrix<typename Distance::ElementType>& dataset, const IndexParams& params, const Distance& distance)$/;"	f	struct:cvflann::index_creator
create	flann/object_factory.h	/^    ObjectCreator create(UniqueIdType id)$/;"	f	class:cvflann::ObjectFactory
create	legacy/legacy.hpp	/^    void create( CvSize _size, int _depth, int _channels )$/;"	f	class:CvImage
create	legacy/legacy.hpp	/^    void create( int _rows, int _cols, int _type )$/;"	f	class:CvMatrix
create	ocl/matrix_operations.hpp	/^        inline void oclMat::create(Size _size, int _type)$/;"	f	class:cv::ocl::oclMat
create	stitching/detail/util.hpp	/^    void create(int num_vertices) { edges_.assign(num_vertices, std::list<GraphEdge>()); }$/;"	f	class:cv::detail::Graph
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CompressedRectilinearPortraitWarper(scale, a, b); }$/;"	f	class:cv::CompressedRectilinearPortraitWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CompressedRectilinearWarper(scale, a, b); }$/;"	f	class:cv::CompressedRectilinearWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CylindricalWarper(scale); }$/;"	f	class:cv::CylindricalWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::CylindricalWarperGpu(scale); }$/;"	f	class:cv::CylindricalWarperGpu
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::FisheyeWarper(scale); }$/;"	f	class:cv::FisheyeWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::MercatorWarper(scale); }$/;"	f	class:cv::MercatorWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PaniniPortraitWarper(scale, a, b); }$/;"	f	class:cv::PaniniPortraitWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PaniniWarper(scale, a, b); }$/;"	f	class:cv::PaniniWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PlaneWarper(scale); }$/;"	f	class:cv::PlaneWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::PlaneWarperGpu(scale); }$/;"	f	class:cv::PlaneWarperGpu
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::SphericalWarper(scale); }$/;"	f	class:cv::SphericalWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::SphericalWarperGpu(scale); }$/;"	f	class:cv::SphericalWarperGpu
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::StereographicWarper(scale); }$/;"	f	class:cv::StereographicWarper
create	stitching/warpers.hpp	/^    Ptr<detail::RotationWarper> create(float scale) const { return new detail::TransverseMercatorWarper(scale); }$/;"	f	class:cv::TransverseMercatorWarper
createContinuous	core/gpumat.hpp	/^    inline GpuMat createContinuous(Size size, int type)$/;"	f	namespace:cv::gpu
createContinuous	core/gpumat.hpp	/^    inline GpuMat createContinuous(int rows, int cols, int type)$/;"	f	namespace:cv::gpu
createContinuous	core/gpumat.hpp	/^    inline void createContinuous(Size size, int type, GpuMat& m)$/;"	f	namespace:cv::gpu
createContinuous	core/gpumat.hpp	/^    inline void createContinuous(int rows, int cols, int type, GpuMat& m)$/;"	f	namespace:cv::gpu
create_index_by_type	flann/all_indices.h	/^NNIndex<Distance>* create_index_by_type(const Matrix<typename Distance::ElementType>& dataset, const IndexParams& params, const Distance& distance)$/;"	f	namespace:cvflann
criteria	calib3d/calib3d.hpp	/^    CvTermCriteria criteria;$/;"	m	class:CvLevMarq
criteria	contrib/contrib.hpp	/^        CvTermCriteria criteria;$/;"	m	class:cv::LevMarqSparse
cross	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::cross(const Mat_& m) const$/;"	f	class:cv::Mat_
cross	core/operations.hpp	/^template<> inline Vec<double, 3> Vec<double, 3>::cross(const Vec<double, 3>& v) const$/;"	f	class:cv::Vec
cross	core/operations.hpp	/^template<> inline Vec<float, 3> Vec<float, 3>::cross(const Vec<float, 3>& v) const$/;"	f	class:cv::Vec
cross	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> Vec<_Tp, cn>::cross(const Vec<_Tp, cn>&) const$/;"	f	class:cv::Vec
cross	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp> Point3_<_Tp>::cross(const Point3_<_Tp>& pt) const$/;"	f	class:cv::Point3_
cross	core/operations.hpp	/^template<typename _Tp> inline double Point_<_Tp>::cross(const Point_& pt) const$/;"	f	class:cv::Point_
crossCheck	features2d/features2d.hpp	/^    bool crossCheck;$/;"	m	class:cv::BFMatcher
ctable	legacy/legacy.hpp	/^    CvBGPixelCStatTable*  ctable;$/;"	m	struct:CvBGPixelStat
cudaSafeCall	gpu/device/common.hpp	62;"	d
cudaSafeCall	gpu/device/common.hpp	64;"	d
curMask	gpu/device/utility.hpp	/^        PtrStepb curMask;$/;"	m	struct:cv::gpu::device::MaskCollection
curPos_	videostab/stabilizer.hpp	/^    int curPos_;$/;"	m	class:cv::videostab::StabilizerBase
curStabilizedPos_	videostab/stabilizer.hpp	/^    int curStabilizedPos_;$/;"	m	class:cv::videostab::StabilizerBase
cur_weight	legacy/legacy.hpp	/^    float* cur_weight;$/;"	m	struct:CvCliqueFinder
curidx	core/types_c.h	/^    int curidx;$/;"	m	struct:CvSparseMatIterator
curr_center	contrib/hybridtracker.hpp	/^    Point2f curr_center;$/;"	m	class:cv::CvHybridTracker
current10_	ts/ts_gtest.h	/^    typename ParamGenerator<T10>::iterator current10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current1_	ts/ts_gtest.h	/^    typename ParamGenerator<T1>::iterator current1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current2_	ts/ts_gtest.h	/^    typename ParamGenerator<T2>::iterator current2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current3_	ts/ts_gtest.h	/^    typename ParamGenerator<T3>::iterator current3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current4_	ts/ts_gtest.h	/^    typename ParamGenerator<T4>::iterator current4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current5_	ts/ts_gtest.h	/^    typename ParamGenerator<T5>::iterator current5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current6_	ts/ts_gtest.h	/^    typename ParamGenerator<T6>::iterator current6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current7_	ts/ts_gtest.h	/^    typename ParamGenerator<T7>::iterator current7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current8_	ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current8_	ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current8_	ts/ts_gtest.h	/^    typename ParamGenerator<T8>::iterator current8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
current9_	ts/ts_gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current9_	ts/ts_gtest.h	/^    typename ParamGenerator<T9>::iterator current9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
currentIter	ts/ts_perf.hpp	/^    unsigned int currentIter;$/;"	m	class:perf::TestBase
currentTestNodeName	ts/ts_perf.hpp	/^    std::string currentTestNodeName;$/;"	m	class:perf::Regression
current_comp	legacy/legacy.hpp	/^    int* current_comp;$/;"	m	struct:CvCliqueFinder
current_test_info	ts/ts.hpp	/^    TestInfo current_test_info;$/;"	m	class:cvtest::TS
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
current_value_	ts/ts_gtest.h	/^    ParamType current_value_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
currline	legacy/compat.hpp	/^    float*  currline;$/;"	m	struct:_CvPixelPosition32f
currline	legacy/compat.hpp	/^    schar*  currline;$/;"	m	struct:_CvPixelPosition8s
currline	legacy/compat.hpp	/^    uchar*  currline;      \/* pointer to the start of the current pixel line   *\/$/;"	m	struct:_CvPixelPosition8u
curves	contrib/contrib.hpp	/^    std::vector<CvFuzzyCurve> curves;$/;"	m	class:CvFuzzyFunction
cv	calib3d/calib3d.hpp	/^namespace cv$/;"	n
cv	contrib/contrib.hpp	/^namespace cv$/;"	n
cv	contrib/detection_based_tracker.hpp	/^namespace cv$/;"	n
cv	contrib/hybridtracker.hpp	/^namespace cv$/;"	n
cv	contrib/openfabmap.hpp	/^namespace cv {$/;"	n
cv	contrib/retina.hpp	/^namespace cv$/;"	n
cv	core/core.hpp	/^namespace cv {$/;"	n
cv	core/cuda_devptrs.hpp	/^namespace cv$/;"	n
cv	core/eigen.hpp	/^namespace cv$/;"	n
cv	core/gpumat.hpp	/^namespace cv { namespace gpu$/;"	n
cv	core/internal.hpp	/^namespace cv$/;"	n
cv	core/mat.hpp	/^namespace cv$/;"	n
cv	core/opengl_interop.hpp	/^namespace cv$/;"	n
cv	core/operations.hpp	/^  namespace cv { CV_EXPORTS int _interlockedExchangeAdd(int* addr, int delta); }$/;"	n
cv	core/operations.hpp	/^namespace cv$/;"	n
cv	core/wimage.hpp	/^namespace cv {$/;"	n
cv	features2d/features2d.hpp	/^namespace cv$/;"	n
cv	flann/flann.hpp	/^namespace cv$/;"	n
cv	flann/miniflann.hpp	/^namespace cv$/;"	n
cv	gpu/device/border_interpolate.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/color.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/common.hpp	/^namespace cv { namespace gpu$/;"	n
cv	gpu/device/datamov_utils.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/detail/color_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/detail/reduction_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/detail/transform_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/detail/type_traits_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/detail/vec_distance_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/dynamic_smem.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/emulation.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/filters.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/funcattrib.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/functional.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/limits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/saturate_cast.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/scan.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/static_check.hpp	/^namespace cv { namespace gpu$/;"	n
cv	gpu/device/transform.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/type_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/utility.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/vec_distance.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/vec_math.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/vec_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/warp.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/device/warp_reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n
cv	gpu/gpu.hpp	/^namespace cv { namespace gpu {$/;"	n
cv	gpu/stream_accessor.hpp	/^namespace cv$/;"	n
cv	highgui/highgui.hpp	/^namespace cv$/;"	n
cv	imgproc/imgproc.hpp	/^namespace cv$/;"	n
cv	legacy/legacy.hpp	/^namespace cv$/;"	n
cv	ml/ml.hpp	/^namespace cv$/;"	n
cv	nonfree/features2d.hpp	/^namespace cv$/;"	n
cv	nonfree/nonfree.hpp	/^namespace cv$/;"	n
cv	objdetect/objdetect.hpp	/^namespace cv {$/;"	n
cv	objdetect/objdetect.hpp	/^namespace cv$/;"	n
cv	ocl/matrix_operations.hpp	/^namespace cv$/;"	n
cv	ocl/ocl.hpp	/^namespace cv$/;"	n
cv	photo/photo.hpp	/^namespace cv$/;"	n
cv	stitching/detail/autocalib.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/blenders.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/camera.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/exposure_compensate.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/matchers.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/motion_estimators.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/seam_finders.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/util.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/util_inl.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/warpers.hpp	/^namespace cv {$/;"	n
cv	stitching/detail/warpers_inl.hpp	/^namespace cv {$/;"	n
cv	stitching/stitcher.hpp	/^namespace cv {$/;"	n
cv	stitching/warpers.hpp	/^namespace cv {$/;"	n
cv	ts/ts_perf.hpp	/^namespace cv$/;"	n
cv	video/background_segm.hpp	/^namespace cv$/;"	n
cv	video/tracking.hpp	/^namespace cv$/;"	n
cv	video/video.hpp	/^namespace cv$/;"	n
cv	videostab/deblurring.hpp	/^namespace cv$/;"	n
cv	videostab/fast_marching.hpp	/^namespace cv$/;"	n
cv	videostab/fast_marching_inl.hpp	/^namespace cv$/;"	n
cv	videostab/frame_source.hpp	/^namespace cv$/;"	n
cv	videostab/global_motion.hpp	/^namespace cv$/;"	n
cv	videostab/inpainting.hpp	/^namespace cv$/;"	n
cv	videostab/log.hpp	/^namespace cv$/;"	n
cv	videostab/motion_stabilizing.hpp	/^namespace cv$/;"	n
cv	videostab/optical_flow.hpp	/^namespace cv$/;"	n
cv	videostab/stabilizer.hpp	/^namespace cv$/;"	n
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Mat& src,$/;"	f	namespace:cv
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, 1, _cols>& src,$/;"	f	namespace:cv
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, _rows, 1>& src,$/;"	f	namespace:cv
cv2eigen	core/eigen.hpp	/^void cv2eigen( const Matx<_Tp, _rows, _cols>& src,$/;"	f	namespace:cv
cv3dTracker2dTrackedObject	legacy/legacy.hpp	/^CV_INLINE Cv3dTracker2dTrackedObject cv3dTracker2dTrackedObject(int id, CvPoint2D32f p)$/;"	f
cv3dTrackerTrackedObject	legacy/legacy.hpp	/^CV_INLINE Cv3dTrackerTrackedObject cv3dTrackerTrackedObject(int id, CvPoint3D32f p)$/;"	f
cvAXPY	core/core_c.h	520;"	d
cvAbs	core/core_c.h	598;"	d
cvAccMask	legacy/compat.hpp	124;"	d
cvAddSearchPath	highgui/highgui_c.h	589;"	d
cvAlign	core/internal.hpp	/^CV_INLINE int cvAlign( int size, int align )$/;"	f
cvAlignPtr	core/internal.hpp	/^CV_INLINE void* cvAlignPtr( const void* ptr, int align CV_DEFAULT(32) )$/;"	f
cvAttrList	core/types_c.h	/^CV_INLINE CvAttrList cvAttrList( const char** attr CV_DEFAULT(NULL),$/;"	f
cvBlob	legacy/blobtrack.hpp	/^inline CvBlob cvBlob(float x,float y, float w, float h)$/;"	f
cvCalcBackProject	imgproc/imgproc_c.h	496;"	d
cvCalcBackProjectPatch	imgproc/imgproc_c.h	504;"	d
cvCalcHist	imgproc/imgproc_c.h	/^CV_INLINE  void  cvCalcHist( IplImage** image, CvHistogram* hist,$/;"	f
cvCalcHistMask	legacy/compat.hpp	130;"	d
cvCaptureFromAVI	highgui/highgui_c.h	586;"	d
cvCaptureFromCAM	highgui/highgui_c.h	585;"	d
cvCaptureFromFile	highgui/highgui_c.h	584;"	d
cvCeil	core/types_c.h	/^CV_INLINE  int  cvCeil( double value )$/;"	f
cvCheckArray	core/core_c.h	645;"	d
cvCloneSeq	core/core_c.h	/^CV_INLINE CvSeq* cvCloneSeq( const CvSeq* seq, CvMemStorage* storage CV_DEFAULT(NULL))$/;"	f
cvContourMoments	legacy/compat.hpp	179;"	d
cvContourPerimeter	imgproc/imgproc_c.h	/^CV_INLINE double cvContourPerimeter( const void* contour )$/;"	f
cvConvert	core/core_c.h	456;"	d
cvConvertPointsHomogenious	legacy/compat.hpp	601;"	d
cvCopyImage	legacy/compat.hpp	212;"	d
cvCreateAVIWriter	highgui/highgui_c.h	587;"	d
cvCreateBlobTrackerAuto	legacy/blobtrack.hpp	/^inline CvBlobTrackerAuto* cvCreateBlobTrackerAuto(int type, void* param)$/;"	f
cvCreateImageData	legacy/compat.hpp	106;"	d
cvCreateProb	legacy/blobtrack.hpp	/^inline CvProb* cvCreateProb(int type, int dim, CvSize size = cvSize(1,1), void* \/*param*\/ = NULL)$/;"	f
cvCreateSubdivDelaunay2D	legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2D* cvCreateSubdivDelaunay2D( CvRect rect, CvMemStorage* storage )$/;"	f
cvCvtPixToPlane	legacy/compat.hpp	140;"	d
cvCvtPlaneToPix	legacy/compat.hpp	141;"	d
cvCvtScale	core/core_c.h	454;"	d
cvCvtScaleAbs	core/core_c.h	467;"	d
cvDecRefData	core/core_c.h	/^CV_INLINE  void  cvDecRefData( CvArr* arr )$/;"	f
cvDetectedBlob	legacy/blobtrack.hpp	/^CV_INLINE CvDetectedBlob cvDetectedBlob( float x, float y, float w, float h, int ID = 0, float response = 0.0F )$/;"	f
cvDrawCircle	core/core_c.h	1330;"	d
cvDrawEllipse	core/core_c.h	1331;"	d
cvDrawLine	core/core_c.h	1329;"	d
cvDrawPolyLine	core/core_c.h	1332;"	d
cvDrawRect	core/core_c.h	1328;"	d
cvEllipseBox	core/core_c.h	/^CV_INLINE  void  cvEllipseBox( CvArr* img, CvBox2D box, CvScalar color,$/;"	f
cvFFT	core/core_c.h	891;"	d
cvFloor	core/types_c.h	/^CV_INLINE  int  cvFloor( double value )$/;"	f
cvFont	core/core_c.h	/^CV_INLINE CvFont cvFont( double scale, int thickness CV_DEFAULT(1) )$/;"	f
cvFree	core/core_c.h	70;"	d
cvFuncName	core/core_c.h	1801;"	d
cvGetAt	legacy/compat.hpp	182;"	d
cvGetCol	core/core_c.h	/^CV_INLINE  CvMat*  cvGetCol( const CvArr* arr, CvMat* submat, int col )$/;"	f
cvGetGraphVtx	core/core_c.h	1191;"	d
cvGetHistValue_1D	legacy/compat.hpp	261;"	d
cvGetHistValue_2D	legacy/compat.hpp	263;"	d
cvGetHistValue_3D	legacy/compat.hpp	265;"	d
cvGetHistValue_nD	legacy/compat.hpp	267;"	d
cvGetImageRawData	legacy/compat.hpp	109;"	d
cvGetMatSize	core/internal.hpp	/^CV_INLINE  CvSize  cvGetMatSize( const CvMat* mat )$/;"	f
cvGetNextSparseNode	core/core_c.h	/^CV_INLINE CvSparseNode* cvGetNextSparseNode( CvSparseMatIterator* mat_iterator )$/;"	f
cvGetPtrAt	legacy/compat.hpp	181;"	d
cvGetRow	core/core_c.h	/^CV_INLINE  CvMat*  cvGetRow( const CvArr* arr, CvMat* submat, int row )$/;"	f
cvGetSetElem	core/core_c.h	/^CV_INLINE CvSetElem* cvGetSetElem( const CvSet* set_header, int idx )$/;"	f
cvGetSubArr	core/core_c.h	174;"	d
cvGraphEdgeIdx	core/core_c.h	1197;"	d
cvGraphFindEdge	core/core_c.h	1178;"	d
cvGraphFindEdgeByPtr	core/core_c.h	1179;"	d
cvGraphGetEdgeCount	core/core_c.h	1200;"	d
cvGraphGetVtxCount	core/core_c.h	1199;"	d
cvGraphVtxIdx	core/core_c.h	1194;"	d
cvIncRefData	core/core_c.h	/^CV_INLINE  int  cvIncRefData( CvArr* arr )$/;"	f
cvIntegralImage	legacy/compat.hpp	116;"	d
cvInv	core/core_c.h	747;"	d
cvInvSqrt	core/types_c.h	369;"	d
cvIplDepth	core/types_c.h	/^CV_INLINE int cvIplDepth( int type )$/;"	f
cvIsInf	core/types_c.h	/^CV_INLINE int cvIsInf( double value )$/;"	f
cvIsNaN	core/types_c.h	/^CV_INLINE int cvIsNaN( double value )$/;"	f
cvKalmanUpdateByMeasurement	video/tracking.hpp	223;"	d
cvKalmanUpdateByTime	video/tracking.hpp	222;"	d
cvMahalonobis	core/core_c.h	813;"	d
cvMake2DPoints	legacy/compat.hpp	596;"	d
cvMake3DPoints	legacy/compat.hpp	597;"	d
cvMat	core/types_c.h	/^CV_INLINE CvMat cvMat( int rows, int cols, int type, void* data CV_DEFAULT(NULL))$/;"	f
cvMatMul	core/core_c.h	680;"	d
cvMatMulAdd	core/core_c.h	679;"	d
cvMatMulAddEx	core/core_c.h	690;"	d
cvMatMulAddS	core/core_c.h	697;"	d
cvMatchContours	legacy/compat.hpp	117;"	d
cvMeanMask	legacy/compat.hpp	185;"	d
cvMean_StdDevMask	legacy/compat.hpp	186;"	d
cvMinMaxLocMask	legacy/compat.hpp	190;"	d
cvMirror	core/core_c.h	720;"	d
cvMultiplyAccMask	legacy/compat.hpp	126;"	d
cvNormMask	legacy/compat.hpp	188;"	d
cvPoint	core/types_c.h	/^CV_INLINE  CvPoint  cvPoint( int x, int y )$/;"	f
cvPoint2D32f	core/types_c.h	/^CV_INLINE  CvPoint2D32f  cvPoint2D32f( double x, double y )$/;"	f
cvPoint2D64f	core/types_c.h	/^CV_INLINE  CvPoint2D64f  cvPoint2D64f( double x, double y )$/;"	f
cvPoint3D32f	core/types_c.h	/^CV_INLINE  CvPoint3D32f  cvPoint3D32f( double x, double y, double z )$/;"	f
cvPoint3D64f	core/types_c.h	/^CV_INLINE  CvPoint3D64f  cvPoint3D64f( double x, double y, double z )$/;"	f
cvPointFrom32f	core/types_c.h	/^CV_INLINE  CvPoint  cvPointFrom32f( CvPoint2D32f point )$/;"	f
cvPointTo32f	core/types_c.h	/^CV_INLINE  CvPoint2D32f  cvPointTo32f( CvPoint point )$/;"	f
cvPseudoInv	legacy/compat.hpp	177;"	d
cvQueryHistValue_1D	legacy/compat.hpp	250;"	d
cvQueryHistValue_2D	legacy/compat.hpp	252;"	d
cvQueryHistValue_3D	legacy/compat.hpp	254;"	d
cvQueryHistValue_nD	legacy/compat.hpp	256;"	d
cvROIToRect	core/types_c.h	/^CV_INLINE  CvRect  cvROIToRect( IplROI roi )$/;"	f
cvRandInt	core/types_c.h	/^CV_INLINE unsigned cvRandInt( CvRNG* rng )$/;"	f
cvRandNext	legacy/compat.hpp	161;"	d
cvRandReal	core/types_c.h	/^CV_INLINE double cvRandReal( CvRNG* rng )$/;"	f
cvReadByName	core/core_c.h	/^CV_INLINE void* cvReadByName( CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadInt	core/core_c.h	/^CV_INLINE int cvReadInt( const CvFileNode* node, int default_value CV_DEFAULT(0) )$/;"	f
cvReadIntByName	core/core_c.h	/^CV_INLINE int cvReadIntByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadReal	core/core_c.h	/^CV_INLINE double cvReadReal( const CvFileNode* node, double default_value CV_DEFAULT(0.) )$/;"	f
cvReadRealByName	core/core_c.h	/^CV_INLINE double cvReadRealByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvReadString	core/core_c.h	/^CV_INLINE const char* cvReadString( const CvFileNode* node,$/;"	f
cvReadStringByName	core/core_c.h	/^CV_INLINE const char* cvReadStringByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f
cvRealScalar	core/types_c.h	/^CV_INLINE  CvScalar  cvRealScalar( double val0 )$/;"	f
cvRect	core/types_c.h	/^CV_INLINE  CvRect  cvRect( int x, int y, int width, int height )$/;"	f
cvRectIntersection	legacy/blobtrack.hpp	/^CV_INLINE CvRect cvRectIntersection( const CvRect r1, const CvRect r2 )$/;"	f
cvRectToROI	core/types_c.h	/^CV_INLINE  IplROI  cvRectToROI( CvRect rect, int coi )$/;"	f
cvReleaseBlobTrackAnalysis	legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackAnalysis(CvBlobTrackAnalysis** pBTPP)$/;"	f
cvReleaseBlobTrackGen	legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackGen(CvBlobTrackGen** pBTGen)$/;"	f
cvReleaseBlobTrackPostProc	legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackPostProc(CvBlobTrackPostProc** pBTPP)$/;"	f
cvReleaseBlobTrackerAuto	legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackerAuto(CvBlobTrackerAuto** ppT)$/;"	f
cvReleaseBlobTrackerOne	legacy/blobtrack.hpp	/^inline void cvReleaseBlobTrackerOne(CvBlobTrackerOne **ppT )$/;"	f
cvReleaseImageData	legacy/compat.hpp	107;"	d
cvReleaseMatHeader	legacy/compat.hpp	213;"	d
cvReleaseMatND	core/core_c.h	/^CV_INLINE  void  cvReleaseMatND( CvMatND** mat )$/;"	f
cvReleaseProb	legacy/blobtrack.hpp	/^inline void cvReleaseProb(CvProb** ppProb){ppProb[0]->Release();ppProb[0]=NULL;}$/;"	f
cvRemoveMemoryManager	legacy/compat.hpp	193;"	d
cvReshapeND	core/core_c.h	383;"	d
cvRound	core/types_c.h	/^CV_INLINE  int  cvRound( double value )$/;"	f
cvRunningAvgMask	legacy/compat.hpp	127;"	d
cvSURFPoint	legacy/compat.hpp	/^CV_INLINE CvSURFPoint cvSURFPoint( CvPoint2D32f pt, int laplacian,$/;"	f
cvScalar	core/types_c.h	/^CV_INLINE  CvScalar  cvScalar( double val0, double val1 CV_DEFAULT(0),$/;"	f
cvScalarAll	core/types_c.h	/^CV_INLINE  CvScalar  cvScalarAll( double val0123 )$/;"	f
cvScale	core/core_c.h	455;"	d
cvSetAt	legacy/compat.hpp	183;"	d
cvSetHistThresh	legacy/compat.hpp	129;"	d
cvSetImageData	legacy/compat.hpp	108;"	d
cvSetNew	core/core_c.h	/^CV_INLINE  CvSetElem* cvSetNew( CvSet* set_header )$/;"	f
cvSetPostprocessFuncWin32	highgui/highgui_c.h	611;"	d
cvSetPreprocessFuncWin32	highgui/highgui_c.h	610;"	d
cvSetRemoveByPtr	core/core_c.h	/^CV_INLINE  void cvSetRemoveByPtr( CvSet* set_header, void* elem )$/;"	f
cvSize	core/types_c.h	/^CV_INLINE  CvSize  cvSize( int width, int height )$/;"	f
cvSize2D32f	core/types_c.h	/^CV_INLINE  CvSize2D32f  cvSize2D32f( double width, double height )$/;"	f
cvSlice	core/types_c.h	/^CV_INLINE  CvSlice  cvSlice( int start, int end )$/;"	f
cvSqrt	core/types_c.h	370;"	d
cvSquareAccMask	legacy/compat.hpp	125;"	d
cvStackAlloc	core/internal.hpp	365;"	d
cvStarDetectorParams	legacy/compat.hpp	/^CV_INLINE CvStarDetectorParams cvStarDetectorParams($/;"	f
cvStarKeypoint	legacy/compat.hpp	/^CV_INLINE CvStarKeypoint cvStarKeypoint(CvPoint pt, int size, float response)$/;"	f
cvSubS	core/core_c.h	/^CV_INLINE  void  cvSubS( const CvArr* src, CvScalar value, CvArr* dst,$/;"	f
cvSubdiv2DEdgeDst	legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeDst( CvSubdiv2DEdge edge )$/;"	f
cvSubdiv2DEdgeOrg	legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeOrg( CvSubdiv2DEdge edge )$/;"	f
cvSubdiv2DGetEdge	legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DGetEdge( CvSubdiv2DEdge edge, CvNextEdgeType type )$/;"	f
cvSubdiv2DNextEdge	legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DNextEdge( CvSubdiv2DEdge edge )$/;"	f
cvSubdiv2DRotateEdge	legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DRotateEdge( CvSubdiv2DEdge edge, int rotate )$/;"	f
cvSubdiv2DSymEdge	legacy/legacy.hpp	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DSymEdge( CvSubdiv2DEdge edge )$/;"	f
cvT	core/core_c.h	710;"	d
cvTermCriteria	core/types_c.h	/^CV_INLINE  CvTermCriteria  cvTermCriteria( int type, int max_iter, double epsilon )$/;"	f
cvTriangleArea	legacy/legacy.hpp	/^CV_INLINE  double  cvTriangleArea( CvPoint2D32f a, CvPoint2D32f b, CvPoint2D32f c )$/;"	f
cvUnsupportedFormat	core/internal.hpp	433;"	d
cvUpdateMHIByTime	legacy/compat.hpp	122;"	d
cvWarpPerspectiveQMatrix	legacy/compat.hpp	599;"	d
cvWriteToAVI	highgui/highgui_c.h	588;"	d
cvZero	core/core_c.h	426;"	d
cv_Tn	ml/ml.hpp	/^    int* cv_Tn;$/;"	m	struct:CvDTreeNode
cv_folds	ml/ml.hpp	/^    CV_PROP_RW int   cv_folds;$/;"	m	struct:CvDTreeParams
cv_heap	ml/ml.hpp	/^    CvSet* cv_heap;$/;"	m	struct:CvDTreeTrainData
cv_node_error	ml/ml.hpp	/^    double* cv_node_error;$/;"	m	struct:CvDTreeNode
cv_node_risk	ml/ml.hpp	/^    double* cv_node_risk;$/;"	m	struct:CvDTreeNode
cv_stricmp	legacy/blobtrack.hpp	53;"	d
cv_stricmp	legacy/blobtrack.hpp	60;"	d
cv_strnicmp	legacy/blobtrack.hpp	54;"	d
cv_strnicmp	legacy/blobtrack.hpp	61;"	d
cvarrToMatND	core/mat.hpp	/^static inline Mat cvarrToMatND(const CvArr* arr, bool copyData=false, int coiMode=0)$/;"	f	namespace:cv
cvflann	flann/all_indices.h	/^namespace cvflann$/;"	n
cvflann	flann/allocator.h	/^namespace cvflann$/;"	n
cvflann	flann/any.h	/^namespace cvflann$/;"	n
cvflann	flann/autotuned_index.h	/^namespace cvflann$/;"	n
cvflann	flann/composite_index.h	/^namespace cvflann$/;"	n
cvflann	flann/defines.h	/^namespace cvflann {$/;"	n
cvflann	flann/dist.h	/^namespace cvflann$/;"	n
cvflann	flann/dummy.h	/^namespace cvflann$/;"	n
cvflann	flann/dynamic_bitset.h	/^namespace cvflann {$/;"	n
cvflann	flann/flann.hpp	/^namespace cvflann$/;"	n
cvflann	flann/flann_base.hpp	/^namespace cvflann$/;"	n
cvflann	flann/general.h	/^namespace cvflann$/;"	n
cvflann	flann/ground_truth.h	/^namespace cvflann$/;"	n
cvflann	flann/hdf5.h	/^namespace cvflann$/;"	n
cvflann	flann/heap.h	/^namespace cvflann$/;"	n
cvflann	flann/hierarchical_clustering_index.h	/^namespace cvflann$/;"	n
cvflann	flann/index_testing.h	/^namespace cvflann$/;"	n
cvflann	flann/kdtree_index.h	/^namespace cvflann$/;"	n
cvflann	flann/kdtree_single_index.h	/^namespace cvflann$/;"	n
cvflann	flann/kmeans_index.h	/^namespace cvflann$/;"	n
cvflann	flann/linear_index.h	/^namespace cvflann$/;"	n
cvflann	flann/logger.h	/^namespace cvflann$/;"	n
cvflann	flann/lsh_index.h	/^namespace cvflann$/;"	n
cvflann	flann/lsh_table.h	/^namespace cvflann$/;"	n
cvflann	flann/matrix.h	/^namespace cvflann$/;"	n
cvflann	flann/nn_index.h	/^namespace cvflann$/;"	n
cvflann	flann/object_factory.h	/^namespace cvflann$/;"	n
cvflann	flann/params.h	/^namespace cvflann$/;"	n
cvflann	flann/random.h	/^namespace cvflann$/;"	n
cvflann	flann/result_set.h	/^namespace cvflann$/;"	n
cvflann	flann/sampling.h	/^namespace cvflann$/;"	n
cvflann	flann/saving.h	/^namespace cvflann$/;"	n
cvflann	flann/simplex_downhill.h	/^namespace cvflann$/;"	n
cvflann	flann/timer.h	/^namespace cvflann$/;"	n
cvmAdd	legacy/compat.hpp	197;"	d
cvmAlloc	legacy/compat.hpp	111;"	d
cvmAllocArray	legacy/compat.hpp	113;"	d
cvmCopy	legacy/compat.hpp	199;"	d
cvmCrossProduct	legacy/compat.hpp	205;"	d
cvmDet	legacy/compat.hpp	209;"	d
cvmDotProduct	legacy/compat.hpp	204;"	d
cvmEigenVV	legacy/compat.hpp	208;"	d
cvmFree	legacy/compat.hpp	112;"	d
cvmFreeArray	legacy/compat.hpp	114;"	d
cvmGet	core/types_c.h	/^CV_INLINE  double  cvmGet( const CvMat* mat, int row, int col )$/;"	f
cvmInvert	legacy/compat.hpp	202;"	d
cvmMahalanobis	legacy/compat.hpp	203;"	d
cvmMul	legacy/compat.hpp	200;"	d
cvmMulTransposed	legacy/compat.hpp	207;"	d
cvmScale	legacy/compat.hpp	210;"	d
cvmSet	core/types_c.h	/^CV_INLINE  void  cvmSet( CvMat* mat, int row, int col, double value )$/;"	f
cvmSetIdentity	legacy/compat.hpp	196;"	d
cvmSetZero	legacy/compat.hpp	195;"	d
cvmSub	legacy/compat.hpp	198;"	d
cvmTrace	legacy/compat.hpp	206;"	d
cvmTranspose	legacy/compat.hpp	201;"	d
cvmat_allowed	ts/ts.hpp	/^    bool cvmat_allowed;$/;"	m	class:cvtest::ArrayTest
cvt	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ uchar cvt(uint t)$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52GrayConverter
cvt	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(const uchar3& src)$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5Converter
cvt	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(uint src)$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5Converter
cvt	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ ushort cvt(uint t)$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5Converter
cvt	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ void cvt(uint src, uchar3& dst)$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGBConverter
cvt	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ void cvt(uint src, uint& dst)$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGBConverter
cvtest	ts/ts.hpp	/^namespace cvtest$/;"	n
cvvAddSearchPath	highgui/highgui_c.h	598;"	d
cvvConvertImage	highgui/highgui_c.h	601;"	d
cvvCreateTrackbar	highgui/highgui_c.h	595;"	d
cvvDestroyWindow	highgui/highgui_c.h	594;"	d
cvvInitSystem	highgui/highgui_c.h	590;"	d
cvvLoadImage	highgui/highgui_c.h	596;"	d
cvvNamedWindow	highgui/highgui_c.h	591;"	d
cvvResizeWindow	highgui/highgui_c.h	593;"	d
cvvSaveImage	highgui/highgui_c.h	597;"	d
cvvShowImage	highgui/highgui_c.h	592;"	d
cvvWaitKey	highgui/highgui_c.h	599;"	d
cvvWaitKeyEx	highgui/highgui_c.h	600;"	d
cycle	contrib/contrib.hpp	/^        CV_PROP_RW int      cycle;$/;"	m	class:cv::StereoVar
cyrillic	core/core_c.h	/^    const int*  cyrillic;$/;"	m	struct:CvFont
d	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
d1	contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
d2	contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
d2	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
d3	contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
d4	contrib/openfabmap.hpp	/^    vector<double> d1, d2, d3, d4;$/;"	m	class:cv::of2::FabMap2
dMax_	features2d/features2d.hpp	/^    float dMax_;                         \/\/ short pair maximum distance$/;"	m	class:cv::BRISK
dMin_	features2d/features2d.hpp	/^    float dMin_;                         \/\/ long pair maximum distance$/;"	m	class:cv::BRISK
d_dst_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_dst_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_dst_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_keypoints_	gpu/gpu.hpp	/^    GpuMat d_keypoints_;$/;"	m	class:cv::gpu::FAST_GPU
d_keypoints_	gpu/gpu.hpp	/^    GpuMat d_keypoints_;$/;"	m	class:cv::gpu::ORB_GPU
d_src_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_src_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_src_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_xmap_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_xmap_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_xmap_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
d_ymap_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::CylindricalWarperGpu
d_ymap_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::PlaneWarperGpu
d_ymap_	stitching/detail/warpers.hpp	/^    gpu::GpuMat d_xmap_, d_ymap_, d_src_, d_dst_;$/;"	m	class:cv::detail::SphericalWarperGpu
data	contrib/contrib.hpp	/^        void* data;$/;"	m	class:cv::LevMarqSparse
data	core/cuda_devptrs.hpp	/^            T* data;$/;"	m	struct:cv::gpu::DevPtr
data	core/gpumat.hpp	/^        uchar* data;$/;"	m	class:cv::gpu::GpuMat
data	core/operations.hpp	/^        _Tp* data;$/;"	m	struct:cv::Vector::Hdr
data	core/types_c.h	/^    schar* data;              \/* Pointer to the first element of the block. *\/$/;"	m	struct:CvSeqBlock
data	core/types_c.h	/^    } data;$/;"	m	struct:CvFileNode	typeref:union:CvFileNode::__anon226
data	core/types_c.h	/^    } data;$/;"	m	struct:CvMat	typeref:union:CvMat::__anon221
data	core/types_c.h	/^    } data;$/;"	m	struct:CvMatND	typeref:union:CvMatND::__anon224
data	flann/matrix.h	/^    T* data;$/;"	m	class:cvflann::Matrix
data	flann/matrix.h	/^    void* data;$/;"	m	class:cvflann::UntypedMatrix
data	gpu/gpu.hpp	/^    uchar* data;$/;"	m	class:cv::gpu::CudaMem
data	legacy/legacy.hpp	/^    const uchar* data() const { return image ? (const uchar*)image->imageData : 0; }$/;"	f	class:CvImage
data	legacy/legacy.hpp	/^    const uchar* data() const { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix
data	legacy/legacy.hpp	/^    uchar* data() { return image ? (uchar*)image->imageData : 0; }$/;"	f	class:CvImage
data	legacy/legacy.hpp	/^    uchar* data() { return matrix ? matrix->data.ptr : 0; }$/;"	f	class:CvMatrix
data	legacy/legacy.hpp	/^    void* data;$/;"	m	union:__anon6
data	ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvBoost
data	ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvDTree
data	ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvGBTrees
data	ml/ml.hpp	/^    CvDTreeTrainData* data;$/;"	m	class:CvRTrees
data	ml/ml.hpp	/^    float* data;$/;"	m	struct:CvSVMKernelRow
data	ml/ml.hpp	/^    } data;$/;"	m	struct:CvVectors	typeref:union:CvVectors::__anon243
data	objdetect/objdetect.hpp	/^    Data data;$/;"	m	class:cv::CascadeClassifier
data	ocl/ocl.hpp	/^            uchar *data;$/;"	m	class:cv::ocl::oclMat
dataOrder	core/types_c.h	/^    int  dataOrder;         \/* 0 - interleaved color channels, 1 - separate color channels.$/;"	m	struct:_IplImage
data_	flann/kdtree_single_index.h	/^    Matrix<ElementType> data_;$/;"	m	class:cvflann::KDTreeSingleIndex
data_	ts/ts_gtest.h	/^  AssertHelperData* const data_;$/;"	m	class:testing::internal::AssertHelper
data_path	ts/ts.hpp	/^    string data_path;$/;"	m	class:cvtest::TS
data_root	ml/ml.hpp	/^    CvDTreeNode* data_root;$/;"	m	struct:CvDTreeTrainData
data_type	flann/saving.h	/^    flann_datatype_t data_type;$/;"	m	struct:cvflann::IndexHeader
data_weight	gpu/gpu.hpp	/^    float data_weight;$/;"	m	class:cv::gpu::StereoBeliefPropagation
data_weight	gpu/gpu.hpp	/^    float data_weight;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
dataend	core/gpumat.hpp	/^        uchar* dataend;$/;"	m	class:cv::gpu::GpuMat
dataend	gpu/gpu.hpp	/^    uchar* dataend;$/;"	m	class:cv::gpu::CudaMem
dataend	ocl/ocl.hpp	/^            uchar *dataend;$/;"	m	class:cv::ocl::oclMat
datas	gpu/gpu.hpp	/^    std::vector<GpuMat> datas;$/;"	m	class:cv::gpu::StereoBeliefPropagation
dataset	flann/hierarchical_clustering_index.h	/^    const Matrix<ElementType> dataset;$/;"	m	class:cvflann::HierarchicalClusteringIndex
dataset_	flann/autotuned_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::AutotunedIndex
dataset_	flann/kdtree_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KDTreeIndex
dataset_	flann/kdtree_single_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KDTreeSingleIndex
dataset_	flann/kmeans_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::KMeansIndex
dataset_	flann/linear_index.h	/^    const Matrix<ElementType> dataset_;$/;"	m	class:cvflann::LinearIndex
dataset_	flann/lsh_index.h	/^    Matrix<ElementType> dataset_;$/;"	m	class:cvflann::LshIndex
datastart	core/gpumat.hpp	/^        uchar* datastart;$/;"	m	class:cv::gpu::GpuMat
datastart	core/operations.hpp	/^        _Tp* datastart;$/;"	m	struct:cv::Vector::Hdr
datastart	gpu/gpu.hpp	/^    uchar* datastart;$/;"	m	class:cv::gpu::CudaMem
datastart	ocl/ocl.hpp	/^            uchar *datastart;$/;"	m	class:cv::ocl::oclMat
db	core/types_c.h	/^        double* db;$/;"	m	union:CvMat::__anon221
db	core/types_c.h	/^        double* db;$/;"	m	union:CvMatND::__anon224
db	ml/ml.hpp	/^        double** db;$/;"	m	union:CvVectors::__anon243
dd	contrib/hybridtracker.hpp	/^    Ptr<Feature2D> dd;$/;"	m	class:cv::CvFeatureTracker
ddot	core/operations.hpp	/^template<typename _Tp, int m, int n> inline double Matx<_Tp, m, n>::ddot(const Matx<_Tp, m, n>& M) const$/;"	f	class:cv::Matx
ddot	core/operations.hpp	/^template<typename _Tp> inline double Point3_<_Tp>::ddot(const Point3_& pt) const$/;"	f	class:cv::Point3_
ddot	core/operations.hpp	/^template<typename _Tp> inline double Point_<_Tp>::ddot(const Point_& pt) const$/;"	f	class:cv::Point_
deallocate	core/core.hpp	/^    void deallocate(pointer p, size_type) {fastFree(p); }$/;"	f	class:cv::Allocator
deallocate	core/core.hpp	/^template<typename _Tp> static inline void deallocate(_Tp* ptr, size_t)$/;"	f	namespace:cv
deallocate	core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline void AutoBuffer<_Tp, fixed_size>::deallocate()$/;"	f	class:cv::AutoBuffer
death_test_count	ts/ts_gtest.h	/^  int death_test_count() const { return death_test_count_; }$/;"	f	class:testing::TestResult
death_test_count_	ts/ts_gtest.h	/^  int death_test_count_;$/;"	m	class:testing::TestResult
deblur	videostab/deblurring.hpp	/^    virtual void deblur(int \/*idx*\/, Mat &\/*frame*\/) {}$/;"	f	class:cv::videostab::NullDeblurer
deblurer_	videostab/stabilizer.hpp	/^    Ptr<DeblurerBase> deblurer_;$/;"	m	class:cv::videostab::StabilizerBase
deblurrer	videostab/stabilizer.hpp	/^    Ptr<DeblurerBase> deblurrer() const { return deblurer_; }$/;"	f	class:cv::videostab::StabilizerBase
decisionThreshold	gpu/gpu.hpp	/^    float decisionThreshold;$/;"	m	class:cv::gpu::GMG_GPU
decisionThreshold	video/background_segm.hpp	/^    double  decisionThreshold;$/;"	m	class:cv::BackgroundSubtractorGMG
decision_func	ml/ml.hpp	/^    CvSVMDecisionFunc* decision_func;$/;"	m	class:CvSVM
declare	ts/ts_perf.hpp	/^    _declareHelper declare;$/;"	m	class:perf::TestBase
defaultAVCaptureDevicePosition	highgui/cap_ios.h	/^@property (nonatomic, assign) AVCaptureDevicePosition defaultAVCaptureDevicePosition;$/;"	v
defaultAVCaptureSessionPreset	highgui/cap_ios.h	/^@property (nonatomic, strong) NSString *const defaultAVCaptureSessionPreset;$/;"	v
defaultAVCaptureVideoOrientation	highgui/cap_ios.h	/^@property (nonatomic, assign) AVCaptureVideoOrientation defaultAVCaptureVideoOrientation;$/;"	v
defaultFPS	highgui/cap_ios.h	/^@property (nonatomic, assign) int defaultFPS;$/;"	v
default_	ts/ts_gtest.h	/^  const T default_;  \/\/ The default value for each thread.$/;"	m	class:std::tr1::ThreadLocal
default_func_addr	core/types_c.h	/^    void* default_func_addr;$/;"	m	struct:CvPluginFuncInfo
default_model_name	ml/ml.hpp	/^    const char* default_model_name;$/;"	m	class:CvStatModel
default_result_printer	ts/ts_gtest.h	/^  TestEventListener* default_result_printer() const {$/;"	f	class:testing::TestEventListeners
default_result_printer_	ts/ts_gtest.h	/^  TestEventListener* default_result_printer_;$/;"	m	class:testing::TestEventListeners
default_xml_generator	ts/ts_gtest.h	/^  TestEventListener* default_xml_generator() const {$/;"	f	class:testing::TestEventListeners
default_xml_generator_	ts/ts_gtest.h	/^  TestEventListener* default_xml_generator_;$/;"	m	class:testing::TestEventListeners
defined_test_names_	ts/ts_gtest.h	/^  ::std::set<const char*> defined_test_names_;$/;"	m	class:testing::internal::TypedTestCasePState
degree	ml/ml.hpp	/^    CV_PROP_RW double      degree; \/\/ for poly$/;"	m	struct:CvSVMParams
delegate	highgui/cap_ios.h	/^@property (nonatomic, assign) id<CvPhotoCameraDelegate> delegate;$/;"	v
delegate	highgui/cap_ios.h	/^@property (nonatomic, assign) id<CvVideoCameraDelegate> delegate;$/;"	v
delete_obj	core/operations.hpp	/^template<typename _Tp> inline void Ptr<_Tp>::delete_obj()$/;"	f	class:cv::Ptr
delimiter	ml/ml.hpp	/^    char delimiter;$/;"	m	class:CvMLData
delta	features2d/features2d.hpp	/^    int delta;$/;"	m	class:cv::MSER
delta	gpu/gpu.hpp	/^        float delta;   \/\/ Affects color and color co-occurrence quantization, typically set to 2.$/;"	m	struct:cv::gpu::FGDStatModel::Params
delta	legacy/compat.hpp	/^    int delta;$/;"	m	struct:CvMSERParams
delta	legacy/legacy.hpp	/^    float  delta;		\/* Affects color and color co-occurrence quantization, typically set to 2.					*\/$/;"	m	struct:CvFGDStatModelParams
delta	ml/ml.hpp	/^    float delta;$/;"	m	class:CvGBTrees
deltaP	contrib/contrib.hpp	/^        CvMat* deltaP; \/\/computed increase of parameters (result of normal system solution )$/;"	m	class:cv::LevMarqSparse
deltas	imgproc/types_c.h	/^    schar     deltas[8][2];$/;"	m	struct:CvChainPtReader
denorm_min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type denorm_min()  { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
density	contrib/contrib.hpp	/^        double density;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
depart	ts/ts_gtest.h	/^  void depart() {$/;"	f	class:testing::internal::linked_ptr
depth	core/gpumat.hpp	/^    inline int GpuMat::depth() const$/;"	f	class:cv::gpu::GpuMat
depth	core/mat.hpp	/^inline int Mat::depth() const { return CV_MAT_DEPTH(flags); }$/;"	f	class:cv::Mat
depth	core/mat.hpp	/^inline int SparseMat::depth() const$/;"	f	class:cv::SparseMat
depth	core/mat.hpp	/^template<typename _Tp> inline int Mat_<_Tp>::depth() const$/;"	f	class:cv::Mat_
depth	core/mat.hpp	/^template<typename _Tp> inline int SparseMat_<_Tp>::depth() const$/;"	f	class:cv::SparseMat_
depth	core/opengl_interop.hpp	/^    inline int depth() const { return CV_MAT_DEPTH(type_); }$/;"	f	class:cv::GlBuffer
depth	core/opengl_interop.hpp	/^    inline int depth() const { return CV_MAT_DEPTH(type_); }$/;"	f	class:cv::GlTexture
depth	core/operations.hpp	/^template<typename _Tp> inline int Seq<_Tp>::depth() const$/;"	f	class:cv::Seq
depth	core/types_c.h	/^    int  depth;             \/* Pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,$/;"	m	struct:_IplImage
depth	imgproc/types_c.h	/^    float depth; \/* distance between the farthest point and the convex hull *\/$/;"	m	struct:CvConvexityDefect
depth	legacy/legacy.hpp	/^    int depth() const { return image ? image->depth : 0; }$/;"	f	class:CvImage
depth	legacy/legacy.hpp	/^    int depth() const { return matrix ? CV_MAT_DEPTH(matrix->type) : 0; }$/;"	f	class:CvMatrix
depth	legacy/legacy.hpp	/^    int depth() { return depth_; }$/;"	f	class:cv::RandomizedTree
depth	ml/ml.hpp	/^    int depth;$/;"	m	struct:CvDTreeNode
depth	ocl/matrix_operations.hpp	/^        inline int oclMat::depth() const$/;"	f	class:cv::ocl::oclMat
depthHigh	contrib/contrib.hpp	/^        unsigned int depthLow, depthHigh;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
depthLow	contrib/contrib.hpp	/^        unsigned int depthLow, depthHigh;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
depth_	legacy/legacy.hpp	/^    int depth_;$/;"	m	class:cv::RandomizedTree
depth_point	imgproc/types_c.h	/^    CvPoint* depth_point; \/* the farthest from the convex hull point within the defect *\/$/;"	m	struct:CvConvexityDefect
derivAperture	objdetect/objdetect.hpp	/^    CV_PROP int derivAperture;$/;"	m	struct:cv::HOGDescriptor
derivLambda	gpu/gpu.hpp	/^    double derivLambda;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
derivLambda	ocl/ocl.hpp	/^            double derivLambda;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
desc	legacy/legacy.hpp	/^CVAPI(struct CvFeatureTree*) cvCreateKDTree(CvMat* desc);$/;"	v
descriptionPairs	features2d/features2d.hpp	/^    DescriptionPair descriptionPairs[NB_PAIRS];$/;"	m	class:cv::FREAK
descriptorExtractor	features2d/features2d.hpp	/^    Ptr<DescriptorExtractor> descriptorExtractor;$/;"	m	class:cv::OpponentColorDescriptorExtractor
descriptorSize	gpu/gpu.hpp	/^    inline int descriptorSize() const { return kBytes; }$/;"	f	class:cv::gpu::ORB_GPU
descriptorSize	legacy/legacy.hpp	/^    virtual int descriptorSize() const { return classifier_.classes(); }$/;"	f	class:cv::CalonderDescriptorExtractor
descriptorType	legacy/legacy.hpp	/^    virtual int descriptorType() const { return DataType<T>::type; }$/;"	f	class:cv::CalonderDescriptorExtractor
descriptors	features2d/features2d.hpp	/^    vector<Mat> descriptors;$/;"	m	class:cv::BOWTrainer
descriptors	stitching/detail/matchers.hpp	/^    Mat descriptors;$/;"	m	struct:cv::detail::ImageFeatures
descriptors_	stitching/detail/matchers.hpp	/^    gpu::GpuMat descriptors_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
destroy	core/core.hpp	/^    void destroy(pointer p) { p->~_Tp(); }$/;"	f	class:cv::Allocator
det	gpu/gpu.hpp	/^    GpuMat det, trace;$/;"	m	class:cv::gpu::SURF_GPU
det	ocl/ocl.hpp	/^            oclMat det, trace;$/;"	m	class:cv::ocl::SURF_OCL
detach	legacy/legacy.hpp	/^    void detach()$/;"	f	class:CvImage
detail	gpu/gpu.hpp	/^namespace detail$/;"	n	namespace:cv::gpu
detail	stitching/detail/autocalib.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/blenders.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/camera.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/exposure_compensate.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/matchers.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/motion_estimators.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/seam_finders.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/util.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/util_inl.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/warpers.hpp	/^namespace detail {$/;"	n	namespace:cv
detail	stitching/detail/warpers_inl.hpp	/^namespace detail {$/;"	n	namespace:cv
detectResultRoi	stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::CylindricalPortraitWarper
detectResultRoi	stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::CylindricalWarper
detectResultRoi	stitching/detail/warpers.hpp	/^    void detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::PlanePortraitWarper
detectResultRoi	stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::detectResultRoi(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::RotationWarperBase
detectResultRoiByBorder	stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::detectResultRoiByBorder(Size src_size, Point &dst_tl, Point &dst_br)$/;"	f	class:cv::detail::RotationWarperBase
detector	features2d/features2d.hpp	/^    Ptr<FeatureDetector> detector;$/;"	m	class:cv::GridAdaptedFeatureDetector
detector	features2d/features2d.hpp	/^    Ptr<FeatureDetector> detector;$/;"	m	class:cv::PyramidAdaptedFeatureDetector
detector	gpu/gpu.hpp	/^    GpuMat detector;$/;"	m	struct:cv::gpu::HOGDescriptor
detector	objdetect/objdetect.hpp	/^CVAPI(void) cvReleaseLatentSvmDetector(CvLatentSvmDetector** detector);$/;"	v
detector	ocl/ocl.hpp	/^            oclMat detector;$/;"	m	struct:cv::ocl::HOGDescriptor
detector	videostab/global_motion.hpp	/^    Ptr<FeatureDetector> detector() const { return detector_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
detector_	stitching/detail/matchers.hpp	/^    Ptr<FeatureDetector> detector_;$/;"	m	class:cv::detail::SurfFeaturesFinder
detector_	videostab/global_motion.hpp	/^    Ptr<FeatureDetector> detector_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
detectors	objdetect/objdetect.hpp	/^    vector<CvLatentSvmDetector*> detectors;$/;"	m	class:cv::LatentSvmDetector
determinant	core/operations.hpp	/^double determinant(const Matx<_Tp, m, m>& a)$/;"	f	namespace:cv
device	gpu/device/border_interpolate.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/color.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/common.hpp	/^    namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/datamov_utils.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/detail/color_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/detail/reduction_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/detail/transform_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/detail/type_traits_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/detail/vec_distance_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/dynamic_smem.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/emulation.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/filters.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/funcattrib.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/functional.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/limits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/saturate_cast.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/scan.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/static_check.hpp	/^    namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/transform.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/type_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/utility.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/vec_distance.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/vec_math.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/vec_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/warp.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
device	gpu/device/warp_reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv::gpu
deviceID	core/gpumat.hpp	/^        int deviceID() const { return device_id_; }$/;"	f	class:cv::gpu::DeviceInfo
device_id_	core/gpumat.hpp	/^        int device_id_;$/;"	m	class:cv::gpu::DeviceInfo
dextractor	features2d/features2d.hpp	/^    Ptr<DescriptorExtractor> dextractor;$/;"	m	class:cv::BOWImgDescriptorExtractor
dft_size	gpu/gpu.hpp	/^    Size dft_size;$/;"	m	struct:cv::gpu::ConvolveBuf
diag	core/mat.hpp	/^inline Mat Mat::diag(const Mat& d)$/;"	f	class:cv::Mat
diag	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::diag(int d) const$/;"	f	class:cv::Mat_
diag	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::diag(const typename Matx<_Tp,m,n>::diag_type& d)$/;"	f	class:cv::Matx
diag	core/operations.hpp	/^typename Matx<_Tp, m, n>::diag_type Matx<_Tp, m, n>::diag() const$/;"	f	class:cv::Matx
difference_threshold	objdetect/objdetect.hpp	/^  int difference_threshold;$/;"	m	class:cv::linemod::DepthNormal
difference_type	core/core.hpp	/^    typedef ptrdiff_t difference_type;$/;"	t	class:cv::Allocator
difference_type	ts/ts_gtest.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:testing::internal::ParamIterator
dim	core/types_c.h	/^    dim[CV_MAX_DIM];$/;"	m	struct:CvMatND	typeref:struct:CvMatND::__anon225
dim_	flann/kdtree_single_index.h	/^    size_t dim_;$/;"	m	class:cvflann::KDTreeSingleIndex
dims	core/core_c.h	/^    int dims; \/* number of dimensions to iterate *\/$/;"	m	struct:CvNArrayIterator
dims	core/mat.hpp	/^inline int SparseMat::dims() const$/;"	f	class:cv::SparseMat
dims	core/types_c.h	/^    int dims;$/;"	m	struct:CvMatND
dims	core/types_c.h	/^    int dims;$/;"	m	struct:CvSparseMat
dims	ml/ml.hpp	/^    int dims, count;$/;"	m	struct:CvVectors
dir	legacy/compat.hpp	/^    float        dir;$/;"	m	struct:CvSURFPoint
direction	ml/ml.hpp	/^    CvMat* direction;$/;"	m	struct:CvDTreeTrainData
disc_single_jump	gpu/gpu.hpp	/^    float disc_single_jump;$/;"	m	class:cv::gpu::StereoBeliefPropagation
disc_single_jump	gpu/gpu.hpp	/^    float disc_single_jump;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
discardFloatPosteriors	legacy/legacy.hpp	/^    void discardFloatPosteriors() { freePosteriors(1); }$/;"	f	class:cv::RandomizedTree
disp	calib3d/calib3d.hpp	/^    CvMat* disp;$/;"	m	struct:CvStereoBMState
disp12MaxDiff	calib3d/calib3d.hpp	/^    CV_PROP_RW int disp12MaxDiff;$/;"	m	class:cv::StereoSGBM
disp12MaxDiff	calib3d/calib3d.hpp	/^    int disp12MaxDiff;$/;"	m	struct:CvStereoBMState
dispLeft	legacy/legacy.hpp	/^    CvMat* dispLeft;$/;"	m	struct:CvStereoGCState
dispRight	legacy/legacy.hpp	/^    CvMat* dispRight;$/;"	m	struct:CvStereoGCState
disp_matches	contrib/hybridtracker.hpp	/^    Mat disp_matches;$/;"	m	class:cv::CvFeatureTracker
dist	videostab/fast_marching.hpp	/^        float dist;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
distThresh	videostab/inpainting.hpp	/^    float distThresh() const { return distThresh_; }$/;"	f	class:cv::videostab::MotionInpainter
distThresh_	videostab/inpainting.hpp	/^    float distThresh_;$/;"	m	class:cv::videostab::MotionInpainter
distType	flann/miniflann.hpp	/^    cvflann::flann_distance_t distType;$/;"	m	class:cv::flann::Index
distType	gpu/gpu.hpp	/^    DistType distType;$/;"	m	class:cv::gpu::BruteForceMatcher_GPU_base
distType	ocl/ocl.hpp	/^            DistType distType;$/;"	m	class:cv::ocl::BruteForceMatcher_OCL_base
dist_	flann/result_set.h	/^        DistanceType dist_;$/;"	m	struct:cvflann::UniqueResultSet::DistIndex
dist_	videostab/fast_marching.hpp	/^    cv::Mat_<float> dist_; \/\/ distance map$/;"	m	class:cv::videostab::FastMarchingMethod
dist_indices_	flann/result_set.h	/^    std::set<DistIndex> dist_indices_;$/;"	m	class:cvflann::UniqueResultSet
distance	features2d/features2d.hpp	/^    CV_PROP_RW float distance;$/;"	m	struct:cv::DMatch
distance	flann/hierarchical_clustering_index.h	/^    Distance distance;$/;"	m	class:cvflann::HierarchicalClusteringIndex
distanceMap	videostab/fast_marching.hpp	/^    Mat distanceMap() const { return dist_; }$/;"	f	class:cv::videostab::FastMarchingMethod
distance_	flann/autotuned_index.h	/^    Distance distance_;$/;"	m	class:cvflann::AutotunedIndex
distance_	flann/kdtree_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KDTreeIndex
distance_	flann/kdtree_single_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KDTreeSingleIndex
distance_	flann/kmeans_index.h	/^    Distance distance_;$/;"	m	class:cvflann::KMeansIndex
distance_	flann/linear_index.h	/^    Distance distance_;$/;"	m	class:cvflann::LinearIndex
distance_	flann/lsh_index.h	/^    Distance distance_;$/;"	m	class:cvflann::LshIndex
distance_threshold	objdetect/objdetect.hpp	/^  int distance_threshold;$/;"	m	class:cv::linemod::DepthNormal
distortion	legacy/legacy.hpp	/^    float   distortion[4]; \/* distortion coefficients - two coefficients for radial distortion$/;"	m	struct:CvCamera
distortion	legacy/legacy.hpp	/^    float distortion[4];$/;"	m	struct:Cv3dTrackerCameraIntrinsics
dists	flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::KNNResultSet
dists	flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::KNNSimpleResultSet
dists	flann/result_set.h	/^    DistanceType* dists;$/;"	m	class:cvflann::RadiusResultSet
disttype	legacy/compat.hpp	/^    int       disttype; \/* distribution type *\/$/;"	m	struct:CvRandState
divUp	gpu/device/common.hpp	/^    __host__ __device__ __forceinline__ int divUp(int total, int grain)$/;"	f	namespace:cv::gpu
divfeat	flann/kdtree_index.h	/^        int divfeat;$/;"	m	struct:cvflann::KDTreeIndex::Node
divfeat	flann/kdtree_single_index.h	/^        int divfeat;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divhigh	flann/kdtree_single_index.h	/^        DistanceType divlow, divhigh;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divideTree	flann/kdtree_index.h	/^    NodePtr divideTree(int* ind, int count)$/;"	f	class:cvflann::KDTreeIndex
divideTree	flann/kdtree_single_index.h	/^    NodePtr divideTree(int left, int right, BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
divides	gpu/device/functional.hpp	/^        __device__ __forceinline__ divides():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::divides
divides	gpu/device/functional.hpp	/^        __device__ __forceinline__ divides(const divides& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::divides
divides	gpu/device/functional.hpp	/^    template <typename T> struct divides : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
divlow	flann/kdtree_single_index.h	/^        DistanceType divlow, divhigh;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
divval	flann/kdtree_index.h	/^        DistanceType divval;$/;"	m	struct:cvflann::KDTreeIndex::Node
dmatcher	features2d/features2d.hpp	/^    Ptr<DescriptorMatcher> dmatcher;$/;"	m	class:cv::BOWImgDescriptorExtractor
doCorrectionForInclusion	videostab/stabilizer.hpp	/^    bool doCorrectionForInclusion() const { return doCorrectionForInclusion_; }$/;"	f	class:cv::videostab::StabilizerBase
doCorrectionForInclusion_	videostab/stabilizer.hpp	/^    bool doCorrectionForInclusion_;$/;"	m	class:cv::videostab::StabilizerBase
doDeblurring_	videostab/stabilizer.hpp	/^    bool doDeblurring_;$/;"	m	class:cv::videostab::StabilizerBase
doInpainting_	videostab/stabilizer.hpp	/^    bool doInpainting_;$/;"	m	class:cv::videostab::StabilizerBase
do_wave_correct_	stitching/stitcher.hpp	/^    bool do_wave_correct_;$/;"	m	class:cv::Stitcher
dot	core/operations.hpp	/^dot(const Vector<_Tp>& v1, const Vector<_Tp>& v2)$/;"	f	namespace:cv
dot	core/operations.hpp	/^template<typename _Tp, int m, int n> inline _Tp Matx<_Tp, m, n>::dot(const Matx<_Tp, m, n>& M) const$/;"	f	class:cv::Matx
dot	core/operations.hpp	/^template<typename _Tp> inline _Tp Point3_<_Tp>::dot(const Point3_& pt) const$/;"	f	class:cv::Point3_
dot	core/operations.hpp	/^template<typename _Tp> inline _Tp Point_<_Tp>::dot(const Point_& pt) const$/;"	f	class:cv::Point_
double8	gpu/device/vec_traits.hpp	/^    struct double8$/;"	s	namespace:cv::gpu::device
dst	core/core_c.h	/^    CvGraphVtx* dst;       \/* current graph edge destination vertex *\/$/;"	m	struct:CvGraphScanner
dstType	imgproc/imgproc.hpp	/^    int srcType, dstType, bufType;$/;"	m	class:cv::FilterEngine
dstY	imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
dst_	stitching/detail/blenders.hpp	/^    Mat dst_, dst_mask_;$/;"	m	class:cv::detail::Blender
dst_band_weights_	stitching/detail/blenders.hpp	/^    std::vector<Mat> dst_band_weights_;$/;"	m	class:cv::detail::MultiBandBlender
dst_img_idx	stitching/detail/matchers.hpp	/^    int src_img_idx, dst_img_idx;       \/\/ Images indices (optional)$/;"	m	struct:cv::detail::MatchesInfo
dst_mask_	stitching/detail/blenders.hpp	/^    Mat dst_, dst_mask_;$/;"	m	class:cv::detail::Blender
dst_pyr_laplace_	stitching/detail/blenders.hpp	/^    std::vector<Mat> dst_pyr_laplace_;$/;"	m	class:cv::detail::MultiBandBlender
dst_roi_	stitching/detail/blenders.hpp	/^    Rect dst_roi_;$/;"	m	class:cv::detail::Blender
dst_roi_final_	stitching/detail/blenders.hpp	/^    Rect dst_roi_final_;$/;"	m	class:cv::detail::MultiBandBlender
dst_weight_map_	stitching/detail/blenders.hpp	/^    Mat dst_weight_map_;$/;"	m	class:cv::detail::FeatherBlender
dummy_	ts/ts_gtest.h	/^  static bool dummy_;$/;"	m	class:testing::internal::TypeIdHelper
dummy_	ts/ts_gtest.h	/^bool TypeIdHelper<T>::dummy_ = false;$/;"	m	class:testing::internal::TypeIdHelper
dx	core/core_c.h	/^    float       dx;       \/* horizontal interval between letters *\/$/;"	m	struct:CvFont
dx	gpu/gpu.hpp	/^    GpuMat dx, dy;$/;"	m	struct:cv::gpu::CannyBuf
dx	ocl/ocl.hpp	/^            oclMat dx, dy;$/;"	m	struct:cv::ocl::CannyBuf
dx1	imgproc/imgproc.hpp	/^    int dx1, dx2;$/;"	m	class:cv::FilterEngine
dx2	imgproc/imgproc.hpp	/^    int dx1, dx2;$/;"	m	class:cv::FilterEngine
dx_	imgproc/imgproc.hpp	/^    Mat edges_, dx_, dy_;$/;"	m	class:cv::GeneralizedHough
dx_	stitching/detail/seam_finders.hpp	/^    std::vector<Mat> dx_, dy_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
dx_buf	gpu/gpu.hpp	/^    GpuMat dx_buf, dy_buf;$/;"	m	struct:cv::gpu::CannyBuf
dx_buf	ocl/ocl.hpp	/^            oclMat dx_buf, dy_buf;$/;"	m	struct:cv::ocl::CannyBuf
dx_buf_	gpu/gpu.hpp	/^    GpuMat dx_buf_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
dx_buf_	ocl/ocl.hpp	/^            oclMat dx_buf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
dx_calcBuf_	gpu/gpu.hpp	/^    GpuMat dx_calcBuf_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
dx_calcBuf_	ocl/ocl.hpp	/^            oclMat dx_calcBuf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
dy	gpu/gpu.hpp	/^    GpuMat dx, dy;$/;"	m	struct:cv::gpu::CannyBuf
dy	ocl/ocl.hpp	/^            oclMat dx, dy;$/;"	m	struct:cv::ocl::CannyBuf
dy_	imgproc/imgproc.hpp	/^    Mat edges_, dx_, dy_;$/;"	m	class:cv::GeneralizedHough
dy_	stitching/detail/seam_finders.hpp	/^    std::vector<Mat> dx_, dy_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
dy_buf	gpu/gpu.hpp	/^    GpuMat dx_buf, dy_buf;$/;"	m	struct:cv::gpu::CannyBuf
dy_buf	ocl/ocl.hpp	/^            oclMat dx_buf, dy_buf;$/;"	m	struct:cv::ocl::CannyBuf
dy_buf_	gpu/gpu.hpp	/^    GpuMat dy_buf_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
dy_buf_	ocl/ocl.hpp	/^            oclMat dy_buf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
dy_calcBuf_	gpu/gpu.hpp	/^    GpuMat dy_calcBuf_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
dy_calcBuf_	ocl/ocl.hpp	/^            oclMat dy_calcBuf_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
ea	contrib/contrib.hpp	/^        CvMat** ea; \/\/ sum_i  AijT * e_ij , used as right part of normal equation$/;"	m	class:cv::LevMarqSparse
eb	contrib/contrib.hpp	/^        CvMat** eb; \/\/ sum_j  BijT * e_ij , used as right part of normal equation$/;"	m	class:cv::LevMarqSparse
edge	core/core_c.h	/^    CvGraphEdge* edge;     \/* current edge *\/$/;"	m	struct:CvGraphScanner
edgeBlurSize	features2d/features2d.hpp	/^    int edgeBlurSize;$/;"	m	class:cv::MSER
edgeBlurSize	legacy/compat.hpp	/^    int edgeBlurSize;$/;"	m	struct:CvMSERParams
edgeBuf	gpu/gpu.hpp	/^    GpuMat edgeBuf;$/;"	m	struct:cv::gpu::CannyBuf
edgeBuf	legacy/legacy.hpp	/^    CvMat* edgeBuf;$/;"	m	struct:CvStereoGCState
edgeBuf	ocl/ocl.hpp	/^            oclMat edgeBuf;$/;"	m	struct:cv::ocl::CannyBuf
edgeThreshold	features2d/features2d.hpp	/^    CV_PROP_RW int edgeThreshold;$/;"	m	class:cv::ORB
edgeThreshold	nonfree/features2d.hpp	/^    CV_PROP_RW double edgeThreshold;$/;"	m	class:cv::SIFT
edgeThreshold_	gpu/gpu.hpp	/^    int edgeThreshold_;$/;"	m	class:cv::gpu::ORB_GPU
edge_threshold	gpu/gpu.hpp	/^    float edge_threshold;$/;"	m	class:cv::gpu::DisparityBilateralFilter
edge_weights	legacy/legacy.hpp	/^    float* edge_weights;$/;"	m	struct:CvCliqueFinder
edges	gpu/gpu.hpp	/^    GpuMat edges;$/;"	m	struct:cv::gpu::HoughCirclesBuf
edges_	gpu/gpu.hpp	/^    GpuMat edges_;$/;"	m	class:cv::gpu::GeneralizedHough_GPU
edges_	imgproc/imgproc.hpp	/^    Mat edges_, dx_, dy_;$/;"	m	class:cv::GeneralizedHough
edges_	stitching/detail/motion_estimators.hpp	/^    std::vector<std::pair<int,int> > edges_;$/;"	m	class:cv::detail::BundleAdjusterBase
edges_	stitching/detail/seam_finders.hpp	/^    std::set<std::pair<int, int> > edges_;$/;"	m	class:cv::detail::DpSeamFinder
edges_	stitching/detail/util.hpp	/^    std::vector< std::list<GraphEdge> > edges_;$/;"	m	class:cv::detail::Graph
effect_size	ocl/ocl.hpp	/^            Size effect_size;$/;"	m	struct:cv::ocl::HOGDescriptor
egvals	legacy/legacy.hpp	/^    float egvals[2];$/;"	m	struct:CvContourOrientation
egvects	legacy/legacy.hpp	/^    float egvects[4];$/;"	m	struct:CvContourOrientation
ehmm	legacy/legacy.hpp	/^        struct CvEHMM* ehmm; \/* pointer to an embedded model or NULL, if it is a leaf *\/$/;"	m	union:CvEHMM::__anon7	typeref:struct:CvEHMM::__anon7::CvEHMM
eig_	gpu/gpu.hpp	/^    GpuMat eig_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
eigen2cv	core/eigen.hpp	/^void eigen2cv( const Eigen::Matrix<_Tp, _rows, _cols, _options, _maxRows, _maxCols>& src, Mat& dst )$/;"	f	namespace:cv
eigenvalues	contrib/contrib.hpp	/^        Mat eigenvalues() const { return _eigenvalues; }$/;"	f	class:cv::LDA
eigenvectors	contrib/contrib.hpp	/^        Mat eigenvectors() const { return _eigenvectors; };$/;"	f	class:cv::LDA
elapsed_time	ts/ts_gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestCase
elapsed_time	ts/ts_gtest.h	/^  TimeInMillis elapsed_time() const { return elapsed_time_; }$/;"	f	class:testing::TestResult
elapsed_time_	ts/ts_gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestCase
elapsed_time_	ts/ts_gtest.h	/^  TimeInMillis elapsed_time_;$/;"	m	class:testing::TestResult
elemSize	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ size_t elemSize() const { return elem_size; }$/;"	f	struct:cv::gpu::DevPtr
elemSize	core/gpumat.hpp	/^    inline size_t GpuMat::elemSize() const$/;"	f	class:cv::gpu::GpuMat
elemSize	core/mat.hpp	/^inline size_t Mat::elemSize() const { return dims > 0 ? step.p[dims-1] : 0; }$/;"	f	class:cv::Mat
elemSize	core/mat.hpp	/^inline size_t SparseMat::elemSize() const$/;"	f	class:cv::SparseMat
elemSize	core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::elemSize() const$/;"	f	class:cv::Mat_
elemSize	core/opengl_interop.hpp	/^    inline int elemSize() const { return CV_ELEM_SIZE(type_); }$/;"	f	class:cv::GlBuffer
elemSize	core/opengl_interop.hpp	/^    inline int elemSize() const { return CV_ELEM_SIZE(type_); }$/;"	f	class:cv::GlTexture
elemSize	core/operations.hpp	/^template<typename _Tp> inline size_t Seq<_Tp>::elemSize() const$/;"	f	class:cv::Seq
elemSize	ocl/matrix_operations.hpp	/^        inline size_t oclMat::elemSize() const$/;"	f	class:cv::ocl::oclMat
elemSize1	core/gpumat.hpp	/^    inline size_t GpuMat::elemSize1() const$/;"	f	class:cv::gpu::GpuMat
elemSize1	core/mat.hpp	/^inline size_t Mat::elemSize1() const { return CV_ELEM_SIZE1(flags); }$/;"	f	class:cv::Mat
elemSize1	core/mat.hpp	/^inline size_t SparseMat::elemSize1() const$/;"	f	class:cv::SparseMat
elemSize1	core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::elemSize1() const$/;"	f	class:cv::Mat_
elemSize1	core/opengl_interop.hpp	/^    inline int elemSize1() const { return CV_ELEM_SIZE1(type_); }$/;"	f	class:cv::GlBuffer
elemSize1	core/opengl_interop.hpp	/^    inline int elemSize1() const { return CV_ELEM_SIZE1(type_); }$/;"	f	class:cv::GlTexture
elemSize1	ocl/matrix_operations.hpp	/^        inline size_t oclMat::elemSize1() const$/;"	f	class:cv::ocl::oclMat
elem_size	core/cuda_devptrs.hpp	/^            enum { elem_size = sizeof(elem_type) };$/;"	e	enum:cv::gpu::DevPtr::__anon218
elem_type	core/cuda_devptrs.hpp	/^            typedef T elem_type;$/;"	t	struct:cv::gpu::DevPtr
elem_type	gpu/device/border_interpolate.hpp	/^        typedef typename B::result_type elem_type;$/;"	t	struct:cv::gpu::device::BorderReader
elem_type	gpu/device/border_interpolate.hpp	/^        typedef typename BrdConstant<D>::result_type elem_type;$/;"	t	struct:cv::gpu::device::BorderReader
elem_type	gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::AreaFilter
elem_type	gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::CubicFilter
elem_type	gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::IntegerAreaFilter
elem_type	gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::LinearFilter
elem_type	gpu/device/filters.hpp	/^        typedef typename Ptr2D::elem_type elem_type;$/;"	t	struct:cv::gpu::device::PointFilter
elem_type	gpu/device/vec_traits.hpp	/^        typedef char elem_type;$/;"	t	struct:cv::gpu::device::VecTraits
elem_type	gpu/device/vec_traits.hpp	/^        typedef schar elem_type;$/;"	t	struct:cv::gpu::device::VecTraits
element	imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseStructuringElement( IplConvKernel** element );$/;"	v
element_type	ts/ts_gtest.h	/^  typedef T element_type;$/;"	t	class:testing::internal::linked_ptr
element_wise_relative_error	ts/ts.hpp	/^    bool element_wise_relative_error;$/;"	m	class:cvtest::ArrayTest
ellipseAngle	contrib/contrib.hpp	/^        double ellipseAngle;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ellipseHeight	contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ellipseWidth	contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
emObj	legacy/legacy.hpp	/^    cv::EM emObj;$/;"	m	class:CvEM
empty	core/gpumat.hpp	/^    inline bool GpuMat::empty() const$/;"	f	class:cv::gpu::GpuMat
empty	core/mat.hpp	/^inline bool Mat::empty() const { return data == 0 || total() == 0; }$/;"	f	class:cv::Mat
empty	core/opengl_interop.hpp	/^    inline bool empty() const { return rows_ == 0 || cols_ == 0; }$/;"	f	class:cv::GlBuffer
empty	core/opengl_interop.hpp	/^    inline bool empty() const { return rows_ == 0 || cols_ == 0; }$/;"	f	class:cv::GlTexture
empty	core/opengl_interop.hpp	/^    inline bool empty() const { return vertex_.empty(); }$/;"	f	class:cv::GlArrays
empty	core/operations.hpp	/^    bool empty() const { return hdr.size == 0; }$/;"	f	class:cv::Vector
empty	core/operations.hpp	/^inline bool FileNode::empty() const { return node == 0; }$/;"	f	class:cv::FileNode
empty	core/operations.hpp	/^inline bool Range::empty() const { return start == end; }$/;"	f	class:cv::Range
empty	core/operations.hpp	/^template<typename _Tp> inline bool Ptr<_Tp>::empty() const { return obj == 0; }$/;"	f	class:cv::Ptr
empty	core/operations.hpp	/^template<typename _Tp> inline bool Seq<_Tp>::empty() const$/;"	f	class:cv::Seq
empty	flann/any.h	/^    bool empty() const$/;"	f	struct:cvflann::any
empty	flann/dynamic_bitset.h	/^    bool empty() const$/;"	f	class:cvflann::DynamicBitset
empty	flann/heap.h	/^    bool empty()$/;"	f	class:cvflann::Heap
empty	legacy/legacy.hpp	/^    virtual bool empty() const { return m_train_feature_count <= 0 ? true : false; }$/;"	f	class:cv::OneWayDescriptorBase
empty	legacy/legacy.hpp	/^bool CalonderDescriptorExtractor<T>::empty() const$/;"	f	class:cv::CalonderDescriptorExtractor
empty	ocl/matrix_operations.hpp	/^        inline bool oclMat::empty() const$/;"	f	class:cv::ocl::oclMat
empty	ts/ts_gtest.h	/^  bool empty() const { return (c_str() != NULL) && (length() == 0); }$/;"	f	class:testing::internal::String
empty	videostab/inpainting.hpp	/^    bool empty() const { return inpainters_.empty(); }$/;"	f	class:cv::videostab::InpaintingPipeline
empty_any	flann/any.h	/^struct empty_any$/;"	s	namespace:cvflann::anyimpl
end	contrib/contrib.hpp	/^            int begin, end;$/;"	m	struct:cv::Octree::Node
end	core/mat.hpp	/^inline SparseMatConstIterator SparseMat::end() const$/;"	f	class:cv::SparseMat
end	core/mat.hpp	/^inline SparseMatIterator SparseMat::end()$/;"	f	class:cv::SparseMat
end	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat::end() const$/;"	f	class:cv::Mat
end	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> Mat_<_Tp>::end() const$/;"	f	class:cv::Mat_
end	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat::end()$/;"	f	class:cv::Mat
end	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> Mat_<_Tp>::end()$/;"	f	class:cv::Mat_
end	core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat::end() const$/;"	f	class:cv::SparseMat
end	core/mat.hpp	/^template<typename _Tp> inline SparseMatConstIterator_<_Tp> SparseMat_<_Tp>::end() const$/;"	f	class:cv::SparseMat_
end	core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat::end()$/;"	f	class:cv::SparseMat
end	core/mat.hpp	/^template<typename _Tp> inline SparseMatIterator_<_Tp> SparseMat_<_Tp>::end()$/;"	f	class:cv::SparseMat_
end	core/operations.hpp	/^    _Tp* end() { return hdr.data + hdr.size; }$/;"	f	class:cv::Vector
end	core/operations.hpp	/^    const _Tp* end() const { return hdr.data + hdr.size; }$/;"	f	class:cv::Vector
end	core/operations.hpp	/^inline FileNodeIterator FileNode::end() const$/;"	f	class:cv::FileNode
end	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> Seq<_Tp>::end() const$/;"	f	class:cv::Seq
end	imgproc/types_c.h	/^    CvPoint* end; \/* point of the contour where the defect ends *\/$/;"	m	struct:CvConvexityDefect
end	ts/ts_gtest.h	/^  const_iterator end() const { return array_ + size_; }$/;"	f	class:testing::internal::NativeArray
end	ts/ts_gtest.h	/^  iterator end() const { return iterator(impl_->End()); }$/;"	f	class:testing::internal::ParamGenerator
end1	legacy/blobtrack.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos
end10_	ts/ts_gtest.h	/^    const typename ParamGenerator<T10>::iterator end10_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end1_	ts/ts_gtest.h	/^    const typename ParamGenerator<T1>::iterator end1_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end2	legacy/blobtrack.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator2::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end2_	ts/ts_gtest.h	/^    const typename ParamGenerator<T2>::iterator end2_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator3::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end3_	ts/ts_gtest.h	/^    const typename ParamGenerator<T3>::iterator end3_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator4::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end4_	ts/ts_gtest.h	/^    const typename ParamGenerator<T4>::iterator end4_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator5::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end5_	ts/ts_gtest.h	/^    const typename ParamGenerator<T5>::iterator end5_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator6::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end6_	ts/ts_gtest.h	/^    const typename ParamGenerator<T6>::iterator end6_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator7::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end7_	ts/ts_gtest.h	/^    const typename ParamGenerator<T7>::iterator end7_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator8::Iterator
end8_	ts/ts_gtest.h	/^    const typename ParamGenerator<T8>::iterator end8_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
end9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator10::Iterator
end9_	ts/ts_gtest.h	/^    const typename ParamGenerator<T9>::iterator end9_;$/;"	m	class:testing::internal::CartesianProductGenerator9::Iterator
endY	imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
end_	ts/ts_gtest.h	/^  const T end_;$/;"	m	class:testing::internal::RangeGenerator
end_index	core/types_c.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice
end_index_	ts/ts_gtest.h	/^  const int end_index_;$/;"	m	class:testing::internal::RangeGenerator
ensemble	ml/ml.hpp	/^    CvBoost* ensemble;$/;"	m	class:CvBoostTree
ensureSizeIsEnough	core/gpumat.hpp	/^    inline void ensureSizeIsEnough(Size size, int type, GpuMat& m)$/;"	f	namespace:cv::gpu
ensureSizeIsEnough	core/gpumat.hpp	/^    inline void ensureSizeIsEnough(int rows, int cols, int type, GpuMat& m)$/;"	f	namespace:cv::gpu
ensureSizeIsEnough	ocl/matrix_operations.hpp	/^        inline void ensureSizeIsEnough(Size size, int type, oclMat &m)$/;"	f	namespace:cv::ocl
ensureSizeIsEnough	ocl/matrix_operations.hpp	/^        inline void ensureSizeIsEnough(int rows, int cols, int type, oclMat &m)$/;"	f	namespace:cv::ocl
epipole	legacy/legacy.hpp	/^    CvPoint3D32f epipole[2];$/;"	m	struct:CvStereoCamera
eps	ml/ml.hpp	/^    double eps;$/;"	m	class:CvSVMSolver
eps	videostab/global_motion.hpp	/^    float eps; \/\/ max outliers ratio$/;"	m	struct:cv::videostab::RansacParams
epsilon	core/types_c.h	/^    double epsilon;$/;"	m	struct:CvTermCriteria
epsilon	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type epsilon() { return 1.192092896e-07f\/*FLT_EPSILON*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
epsilon	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type epsilon() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
epsilon	ml/ml.hpp	/^    CV_PROP_RW double epsilon;$/;"	m	class:cv::EM
equal_to	gpu/device/functional.hpp	/^        __device__ __forceinline__ equal_to():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::equal_to
equal_to	gpu/device/functional.hpp	/^        __device__ __forceinline__ equal_to(const equal_to& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::equal_to
equal_to	gpu/device/functional.hpp	/^    template <typename T> struct equal_to : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
err	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> err;$/;"	m	class:CvLevMarq
err	contrib/contrib.hpp	/^        CvMat* err; \/\/error X-hX$/;"	m	class:cv::LevMarqSparse
err	core/core.hpp	/^    string err; \/\/\/< error description$/;"	m	class:cv::Exception
err	core/types_c.h	/^    int  err;$/;"	m	struct:CvLineIterator
err1_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterRay
err1_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterReproj
err2_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterRay
err2_	stitching/detail/motion_estimators.hpp	/^    Mat err1_, err2_;$/;"	m	class:cv::detail::BundleAdjusterReproj
errNorm	calib3d/calib3d.hpp	/^    double prevErrNorm, errNorm;$/;"	m	class:CvLevMarq
errNorm	contrib/contrib.hpp	/^        double prevErrNorm, errNorm;$/;"	m	class:cv::LevMarqSparse
errorCovPost	video/tracking.hpp	/^    Mat errorCovPost;       \/\/!< posteriori error estimate covariance matrix (P(k)): P(k)=(I-K(k)*H)*P'(k)$/;"	m	class:cv::KalmanFilter
errorCovPre	video/tracking.hpp	/^    Mat errorCovPre;        \/\/!< priori error estimate covariance matrix (P'(k)): P'(k)=A*P(k-1)*At + Q)*\/$/;"	m	class:cv::KalmanFilter
error_cov_post	video/tracking.hpp	/^    CvMat* error_cov_post;      \/* posteriori error estimate covariance matrix (P(k)):$/;"	m	struct:CvKalman
error_cov_pre	video/tracking.hpp	/^    CvMat* error_cov_pre;       \/* priori error estimate covariance matrix (P'(k)):$/;"	m	struct:CvKalman
errors_	videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
escape_iters_	features2d/features2d.hpp	/^    int escape_iters_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
estimateBuildParams	flann/autotuned_index.h	/^    IndexParams estimateBuildParams()$/;"	f	class:cvflann::AutotunedIndex
estimateMotion	videostab/stabilizer.hpp	/^    virtual void estimateMotion() { \/* do nothing as motion was estimation in pre-pass *\/ }$/;"	f	class:cv::videostab::TwoPassStabilizer
estimateSearchParams	flann/autotuned_index.h	/^    float estimateSearchParams(SearchParams& searchParams)$/;"	f	class:cvflann::AutotunedIndex
etalonParamCount	legacy/legacy.hpp	/^    int     etalonParamCount;$/;"	m	class:CvCalibFilter
etalonParams	legacy/legacy.hpp	/^    double* etalonParams;$/;"	m	class:CvCalibFilter
etalonPointCount	legacy/legacy.hpp	/^    int     etalonPointCount;$/;"	m	class:CvCalibFilter
etalonPoints	legacy/legacy.hpp	/^    CvPoint2D32f* etalonPoints;$/;"	m	class:CvCalibFilter
etalonType	legacy/legacy.hpp	/^    CvCalibEtalonType  etalonType;$/;"	m	class:CvCalibFilter
evaluate_kdtree	flann/autotuned_index.h	/^    void evaluate_kdtree(CostData& cost)$/;"	f	class:cvflann::AutotunedIndex
evaluate_kmeans	flann/autotuned_index.h	/^    void evaluate_kmeans(CostData& cost)$/;"	f	class:cvflann::AutotunedIndex
exit_code_	ts/ts_gtest.h	/^  const int exit_code_;$/;"	m	class:testing::ExitedWithCode
exploreNodeBranches	flann/kmeans_index.h	/^    int exploreNodeBranches(KMeansNodePtr node, const ElementType* q, DistanceType* domain_distances, Heap<BranchSt>* heap)$/;"	f	class:cvflann::KMeansIndex
exponent_bits	ts/ts_gtest.h	/^  Bits exponent_bits() const { return kExponentBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
exposureCompensator	stitching/stitcher.hpp	/^    Ptr<detail::ExposureCompensator> exposureCompensator() { return exposure_comp_; }$/;"	f	class:cv::Stitcher
exposureCompensator	stitching/stitcher.hpp	/^    const Ptr<detail::ExposureCompensator> exposureCompensator() const { return exposure_comp_; }$/;"	f	class:cv::Stitcher
exposure_comp_	stitching/stitcher.hpp	/^    Ptr<detail::ExposureCompensator> exposure_comp_;$/;"	m	class:cv::Stitcher
extAll	features2d/features2d.hpp	/^    bool extAll; \/\/ true if all pairs need to be extracted for pairs selection$/;"	m	class:cv::FREAK
extended	gpu/gpu.hpp	/^    bool extended;$/;"	m	class:cv::gpu::SURF_GPU
extended	legacy/compat.hpp	/^    int    extended;$/;"	m	struct:CvSURFParams
extended	nonfree/features2d.hpp	/^    CV_PROP_RW bool extended;$/;"	m	class:cv::SURF
extended	ocl/ocl.hpp	/^            bool extended;$/;"	m	class:cv::ocl::SURF_OCL
extended_src_buffer	gpu/gpu.hpp	/^    GpuMat buffer, extended_src_buffer;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
extract_threshold	objdetect/objdetect.hpp	/^  int extract_threshold;$/;"	m	class:cv::linemod::DepthNormal
extractor	features2d/features2d.hpp	/^    Ptr<DescriptorExtractor> extractor;$/;"	m	class:cv::VectorDescriptorMatcher
extractor_	stitching/detail/matchers.hpp	/^    Ptr<DescriptorExtractor> extractor_;$/;"	m	class:cv::detail::SurfFeaturesFinder
eye	core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::eye(Size sz)$/;"	f	class:cv::Mat_
eye	core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::eye(int rows, int cols)$/;"	f	class:cv::Mat_
eye	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::eye()$/;"	f	class:cv::Matx
eye_	core/opengl_interop.hpp	/^    Point3d eye_;$/;"	m	class:cv::GlCamera
f	core/types_c.h	/^        double f; \/* scalar floating-point number *\/$/;"	m	union:CvFileNode::__anon226
f	core/types_c.h	/^    double f;$/;"	m	union:Cv64suf
f	core/types_c.h	/^    float f;$/;"	m	union:Cv32suf
f	objdetect/objdetect.hpp	/^    Feature f;$/;"	m	struct:cv::linemod::QuantizedPyramid::Candidate
f0	ts/ts_gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f0_	ts/ts_gtest.h	/^  T0 f0_;$/;"	m	class:std::tr1::tuple
f1	ts/ts_gtest.h	/^  explicit tuple(GTEST_BY_REF_(T0) f0, GTEST_BY_REF_(T1) f1,$/;"	m	class:std::tr1::tuple
f1_	ts/ts_gtest.h	/^  T1 f1_;$/;"	m	class:std::tr1::tuple
f2	ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f2_	ts/ts_gtest.h	/^  T2 f2_;$/;"	m	class:std::tr1::tuple
f3	ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f3_	ts/ts_gtest.h	/^  T3 f3_;$/;"	m	class:std::tr1::tuple
f4	ts/ts_gtest.h	/^      GTEST_BY_REF_(T2) f2, GTEST_BY_REF_(T3) f3, GTEST_BY_REF_(T4) f4,$/;"	m	class:std::tr1::tuple
f4_	ts/ts_gtest.h	/^  T4 f4_;$/;"	m	class:std::tr1::tuple
f5	ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f5_	ts/ts_gtest.h	/^  T5 f5_;$/;"	m	class:std::tr1::tuple
f6	ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f6_	ts/ts_gtest.h	/^  T6 f6_;$/;"	m	class:std::tr1::tuple
f7	ts/ts_gtest.h	/^      GTEST_BY_REF_(T5) f5, GTEST_BY_REF_(T6) f6, GTEST_BY_REF_(T7) f7,$/;"	m	class:std::tr1::tuple
f7_	ts/ts_gtest.h	/^  T7 f7_;$/;"	m	class:std::tr1::tuple
f8	ts/ts_gtest.h	/^      GTEST_BY_REF_(T8) f8, GTEST_BY_REF_(T9) f9) : f0_(f0), f1_(f1), f2_(f2),$/;"	m	class:std::tr1::tuple
f8_	ts/ts_gtest.h	/^  T8 f8_;$/;"	m	class:std::tr1::tuple
f9_	ts/ts_gtest.h	/^      f3_(f3), f4_(f4), f5_(f5), f6_(f6), f7_(f7), f8_(f8), f9_(f9) {}$/;"	f	class:std::tr1::tuple
f9_	ts/ts_gtest.h	/^      f9_(t.f9_) {}$/;"	f	class:std::tr1::tuple
f9_	ts/ts_gtest.h	/^  T9 f9_;$/;"	m	class:std::tr1::tuple
fCT	gpu/gpu.hpp	/^    float fCT; \/\/CT - complexity reduction prior$/;"	m	class:cv::gpu::MOG2_GPU
fCT	video/background_segm.hpp	/^    float fCT;\/\/CT - complexity reduction prior$/;"	m	class:cv::BackgroundSubtractorMOG2
fHistogram	contrib/contrib.hpp	/^        CvHistogram *fHistogram;$/;"	m	class:CvAdaptiveSkinDetector::Histogram
fHistogramMergeFactor	contrib/contrib.hpp	/^    double fHistogramMergeFactor, fHuePercentCovered;$/;"	m	class:CvAdaptiveSkinDetector
fHuePercentCovered	contrib/contrib.hpp	/^    double fHistogramMergeFactor, fHuePercentCovered;$/;"	m	class:CvAdaptiveSkinDetector
fTau	gpu/gpu.hpp	/^    float fTau;$/;"	m	class:cv::gpu::MOG2_GPU
fTau	video/background_segm.hpp	/^    float fTau;$/;"	m	class:cv::BackgroundSubtractorMOG2
fVarInit	gpu/gpu.hpp	/^    float fVarInit;$/;"	m	class:cv::gpu::MOG2_GPU
fVarInit	video/background_segm.hpp	/^    float fVarInit;$/;"	m	class:cv::BackgroundSubtractorMOG2
fVarMax	gpu/gpu.hpp	/^    float fVarMax;$/;"	m	class:cv::gpu::MOG2_GPU
fVarMax	video/background_segm.hpp	/^    float fVarMax;$/;"	m	class:cv::BackgroundSubtractorMOG2
fVarMin	gpu/gpu.hpp	/^    float fVarMin;$/;"	m	class:cv::gpu::MOG2_GPU
fVarMin	video/background_segm.hpp	/^    float fVarMin;$/;"	m	class:cv::BackgroundSubtractorMOG2
f_param1	ml/ml.hpp	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP
f_param2	ml/ml.hpp	/^    double f_param1, f_param2;$/;"	m	class:CvANN_MLP
factory_	ts/ts_gtest.h	/^  internal::TestFactoryBase* const factory_;  \/\/ The factory that creates$/;"	m	class:testing::TestInfo::internal
failed	ts/ts_gtest.h	/^  bool failed() const { return type_ != kSuccess; }$/;"	f	class:testing::TestPartResult
failure_message	ts/ts_gtest.h	/^  const char* failure_message() const { return message(); }$/;"	f	class:testing::AssertionResult
false_type	ts/ts_gtest.h	/^typedef bool_constant<false> false_type;$/;"	t	namespace:std::tr1
family	core/opengl_interop.hpp	/^    inline const std::string& family() const { return family_; }$/;"	f	class:cv::GlFont
family_	core/opengl_interop.hpp	/^    std::string family_;$/;"	m	class:cv::GlFont
fastDetector_	gpu/gpu.hpp	/^    FAST_GPU fastDetector_;$/;"	m	class:cv::gpu::ORB_GPU
fastPyramids	gpu/gpu.hpp	/^    bool fastPyramids;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
fast_abs	core/operations.hpp	/^inline double fast_abs(double v) { return std::abs(v); }$/;"	f	namespace:cv
fast_abs	core/operations.hpp	/^inline float fast_abs(float v) { return std::abs(v); }$/;"	f	namespace:cv
fast_abs	core/operations.hpp	/^inline int fast_abs(int v) { return std::abs(v); }$/;"	f	namespace:cv
fast_abs	core/operations.hpp	/^inline int fast_abs(schar v) { return std::abs((int)v); }$/;"	f	namespace:cv
fast_abs	core/operations.hpp	/^inline int fast_abs(short v) { return std::abs((int)v); }$/;"	f	namespace:cv
fast_abs	core/operations.hpp	/^inline int fast_abs(uchar v) { return v; }$/;"	f	namespace:cv
fast_abs	core/operations.hpp	/^inline int fast_abs(ushort v) { return v; }$/;"	f	namespace:cv
fatally_failed	ts/ts_gtest.h	/^  bool fatally_failed() const { return type_ == kFatalFailure; }$/;"	f	class:testing::TestPartResult
featureEvaluator	objdetect/objdetect.hpp	/^    Ptr<FeatureEvaluator> featureEvaluator;$/;"	m	class:cv::CascadeClassifier
featureIdx	objdetect/objdetect.hpp	/^            int featureIdx;$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
featureScaleLevels	features2d/features2d.hpp	/^    int featureScaleLevels;$/;"	m	class:cv::DenseFeatureDetector
featureScaleMul	features2d/features2d.hpp	/^    double featureScaleMul;$/;"	m	class:cv::DenseFeatureDetector
featureType	flann/miniflann.hpp	/^    int featureType;$/;"	m	class:cv::flann::Index
featureType	objdetect/objdetect.hpp	/^        int featureType;$/;"	m	class:cv::CascadeClassifier::Data
feature_size_	flann/lsh_index.h	/^    unsigned int feature_size_;$/;"	m	class:cvflann::LshIndex
feature_type	contrib/hybridtracker.hpp	/^    int feature_type; \/\/ Feature type to use$/;"	m	struct:cv::CvFeatureTrackerParams
features	contrib/hybridtracker.hpp	/^    vector<Point2f> features[2];$/;"	m	class:cv::CvFeatureTracker
features	legacy/legacy.hpp	/^    vector<Feature> features;$/;"	m	class:cv::FernClassifier
features	objdetect/objdetect.hpp	/^  std::vector<Feature> features;$/;"	m	struct:cv::linemod::Template
featuresFinder	stitching/stitcher.hpp	/^    Ptr<detail::FeaturesFinder> featuresFinder() { return features_finder_; }$/;"	f	class:cv::Stitcher
featuresFinder	stitching/stitcher.hpp	/^    const Ptr<detail::FeaturesFinder> featuresFinder() const { return features_finder_; }$/;"	f	class:cv::Stitcher
featuresMatcher	stitching/stitcher.hpp	/^    Ptr<detail::FeaturesMatcher> featuresMatcher() { return features_matcher_; }$/;"	f	class:cv::Stitcher
featuresMatcher	stitching/stitcher.hpp	/^    const Ptr<detail::FeaturesMatcher> featuresMatcher() const { return features_matcher_; }$/;"	f	class:cv::Stitcher
features_	stitching/detail/motion_estimators.hpp	/^    const ImageFeatures *features_;$/;"	m	class:cv::detail::BundleAdjusterBase
features_	stitching/stitcher.hpp	/^    std::vector<detail::ImageFeatures> features_;$/;"	m	class:cv::Stitcher
features_finder_	stitching/stitcher.hpp	/^    Ptr<detail::FeaturesFinder> features_finder_;$/;"	m	class:cv::Stitcher
features_matcher_	stitching/stitcher.hpp	/^    Ptr<detail::FeaturesMatcher> features_matcher_;$/;"	m	class:cv::Stitcher
feed	stitching/detail/exposure_compensate.hpp	/^    void feed(const std::vector<Point> &\/*corners*\/, const std::vector<Mat> &\/*images*\/,$/;"	f	class:cv::detail::NoExposureCompensator
fernClassifier	legacy/legacy.hpp	/^    FernClassifier fernClassifier;$/;"	m	class:cv::PlanarObjectDetector
fi	contrib/contrib.hpp	/^        CV_PROP_RW float    fi;$/;"	m	class:cv::StereoVar
file	core/core.hpp	/^    string file; \/\/\/< source file name where the error has occured$/;"	m	class:cv::Exception
file	ts/ts_gtest.h	/^    const char*        const file;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
file	ts/ts_gtest.h	/^  String file() const { return file_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
file_	ts/ts_gtest.h	/^  String file_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
file_name	ts/ts_gtest.h	/^  const char* file_name() const { return file_name_.c_str(); }$/;"	f	class:testing::TestPartResult
file_name_	ts/ts_gtest.h	/^  internal::String file_name_;$/;"	m	class:testing::TestPartResult
filename	legacy/legacy.hpp	/^        string filename;$/;"	m	class:cv::FernDescriptorMatcher::Params
fill	gpu/device/warp.hpp	/^        static __device__ __forceinline__ void fill(It beg, It end, const T& value)$/;"	f	struct:cv::gpu::device::Warp
fill_xor_mask	flann/lsh_index.h	/^    void fill_xor_mask(lsh::BucketKey key, int lowest_index, unsigned int level,$/;"	f	class:cvflann::LshIndex
filter2D	imgproc/imgproc.hpp	/^    Ptr<BaseFilter> filter2D;$/;"	m	class:cv::FilterEngine
filterByArea	features2d/features2d.hpp	/^      CV_PROP_RW bool filterByArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByCircularity	features2d/features2d.hpp	/^      CV_PROP_RW bool filterByCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByColor	features2d/features2d.hpp	/^      CV_PROP_RW bool filterByColor;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByConvexity	features2d/features2d.hpp	/^      CV_PROP_RW bool filterByConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterByInertia	features2d/features2d.hpp	/^      CV_PROP_RW bool filterByInertia;$/;"	m	struct:cv::SimpleBlobDetector::Params
filterDX	gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::gpu::CannyBuf
filterDX	ocl/ocl.hpp	/^            Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::ocl::CannyBuf
filterDY	gpu/gpu.hpp	/^    Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::gpu::CannyBuf
filterDY	ocl/ocl.hpp	/^            Ptr<FilterEngine_GPU> filterDX, filterDY;$/;"	m	struct:cv::ocl::CannyBuf
filters	objdetect/objdetect.hpp	/^    CvLSVMFilterObject** filters;$/;"	m	struct:CvLatentSvmDetector
find	core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	core/mat.hpp	/^template<typename _Tp> inline const _Tp* SparseMat::find(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat
find	stitching/detail/seam_finders.hpp	/^    void find(const std::vector<Mat>&, const std::vector<Point>&, std::vector<Mat>&) {}$/;"	f	class:cv::detail::NoSeamFinder
findExactNN	flann/kmeans_index.h	/^    void findExactNN(KMeansNodePtr node, ResultSet<DistanceType>& result, const ElementType* vec)$/;"	f	class:cvflann::KMeansIndex
findLargestObject	gpu/gpu.hpp	/^    bool findLargestObject;$/;"	m	class:cv::gpu::CascadeClassifier_GPU
findNN	flann/hierarchical_clustering_index.h	/^    void findNN(NodePtr node, ResultSet<DistanceType>& result, const ElementType* vec, int& checks, int maxChecks,$/;"	f	class:cvflann::HierarchicalClusteringIndex
findNN	flann/kmeans_index.h	/^    void findNN(KMeansNodePtr node, ResultSet<DistanceType>& result, const ElementType* vec, int& checks, int maxChecks,$/;"	f	class:cvflann::KMeansIndex
findNeighbors	flann/autotuned_index.h	/^    virtual void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::AutotunedIndex
findNeighbors	flann/composite_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::CompositeIndex
findNeighbors	flann/flann_base.hpp	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::Index
findNeighbors	flann/hierarchical_clustering_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::HierarchicalClusteringIndex
findNeighbors	flann/kdtree_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KDTreeIndex
findNeighbors	flann/kdtree_single_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KDTreeSingleIndex
findNeighbors	flann/kmeans_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& searchParams)$/;"	f	class:cvflann::KMeansIndex
findNeighbors	flann/linear_index.h	/^    void findNeighbors(ResultSet<DistanceType>& resultSet, const ElementType* vec, const SearchParams& \/*searchParams*\/)$/;"	f	class:cvflann::LinearIndex
findNeighbors	flann/lsh_index.h	/^    void findNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, const SearchParams& \/*searchParams*\/)$/;"	f	class:cvflann::LshIndex
find_nearest	flann/ground_truth.h	/^void find_nearest(const Matrix<typename Distance::ElementType>& dataset, typename Distance::ElementType* query, int* matches, int nn,$/;"	f	namespace:cvflann
fineFunction	objdetect/objdetect.hpp	/^    float fineFunction[4];$/;"	m	struct:CvLSVMFilterObject
finished_	ts/ts_gtest.h	/^  bool finished_;  \/\/ true iff we know that the thread function has finished.$/;"	m	class:std::tr1::ThreadWithParam
first	core/core_c.h	/^    static CvModuleInfo* first;$/;"	m	struct:CvModule
first	core/core_c.h	/^    static CvTypeInfo* first;$/;"	m	struct:CvType
first	objdetect/objdetect.hpp	/^            int first;$/;"	m	struct:cv::CascadeClassifier::Data::Stage
firstEdge	imgproc/imgproc.hpp	/^        int firstEdge;$/;"	m	struct:cv::Subdiv2D::Vertex
firstLevel	features2d/features2d.hpp	/^    CV_PROP_RW int firstLevel;$/;"	m	class:cv::ORB
firstLevel_	gpu/gpu.hpp	/^    int firstLevel_;$/;"	m	class:cv::gpu::ORB_GPU
fixp	legacy/legacy.hpp	/^    int* fixp; \/\/node with minimal disconnections$/;"	m	struct:CvCliqueFinder
fixture_class_id_	ts/ts_gtest.h	/^  const internal::TypeId fixture_class_id_;   \/\/ ID of the test fixture class$/;"	m	class:testing::TestInfo
fjac	contrib/contrib.hpp	/^        void (*fjac)(int i, int j, Mat& point_params, Mat& cam_params, Mat& A, Mat& B, void* data);$/;"	m	class:cv::LevMarqSparse
fl	core/types_c.h	/^        float* fl;$/;"	m	union:CvMat::__anon221
fl	core/types_c.h	/^        float* fl;$/;"	m	union:CvMatND::__anon224
fl	ml/ml.hpp	/^        float** fl;$/;"	m	union:CvVectors::__anon243
flConfidence	legacy/legacy.hpp	/^    float* flConfidence;    \/* Confidence for each Sample            *\/$/;"	m	struct:CvConDensation
flCumulative	legacy/legacy.hpp	/^    float* flCumulative;    \/* Cumulative confidence                 *\/$/;"	m	struct:CvConDensation
flNewSamples	legacy/legacy.hpp	/^    float** flNewSamples;   \/* temporary array of the Sample Vectors *\/$/;"	m	struct:CvConDensation
flSamples	legacy/legacy.hpp	/^    float** flSamples;      \/* arr of the Sample Vectors             *\/$/;"	m	struct:CvConDensation
flag_	videostab/fast_marching.hpp	/^    cv::Mat_<uchar> flag_; \/\/ flag map$/;"	m	class:cv::videostab::FastMarchingMethod
flags	contrib/contrib.hpp	/^        CV_PROP_RW int      flags;$/;"	m	class:cv::StereoVar
flags	contrib/openfabmap.hpp	/^    int flags;$/;"	m	class:cv::of2::FabMap
flags	core/gpumat.hpp	/^        int flags;$/;"	m	class:cv::gpu::GpuMat
flags	core/mat.hpp	/^    int flags;$/;"	m	class:cv::MatExpr
flags	core/types_c.h	/^    int flags;$/;"	m	struct:CvTypeInfo
flags	features2d/features2d.hpp	/^    int flags;$/;"	m	class:cv::BOWKMeansTrainer
flags	gpu/gpu.hpp	/^    int flags;$/;"	m	class:cv::gpu::CudaMem
flags	gpu/gpu.hpp	/^    int flags;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
flags	objdetect/objdetect.hpp	/^    int  flags;$/;"	m	struct:CvHaarClassifierCascade
flags	ocl/ocl.hpp	/^            int flags;$/;"	m	class:cv::ocl::oclMat
flann	flann/flann.hpp	/^namespace flann$/;"	n	namespace:cv
flann	flann/miniflann.hpp	/^namespace flann$/;"	n	namespace:cv
flannIndex	features2d/features2d.hpp	/^    Ptr<flann::Index> flannIndex;$/;"	m	class:cv::FlannBasedMatcher
flann_algorithm_t	flann/defines.h	/^enum flann_algorithm_t$/;"	g	namespace:cvflann
flann_centers_init_t	flann/defines.h	/^enum flann_centers_init_t$/;"	g	namespace:cvflann
flann_datatype_t	flann/defines.h	/^enum flann_datatype_t$/;"	g	namespace:cvflann
flann_distance_t	flann/defines.h	/^enum flann_distance_t$/;"	g	namespace:cvflann
flann_log_level_t	flann/defines.h	/^enum flann_log_level_t$/;"	g	namespace:cvflann
flowErrorThreshold	videostab/inpainting.hpp	/^    float flowErrorThreshold() const { return flowErrorThreshold_; }$/;"	f	class:cv::videostab::MotionInpainter
flowErrorThreshold_	videostab/inpainting.hpp	/^    float flowErrorThreshold_;$/;"	m	class:cv::videostab::MotionInpainter
flowErrors_	videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowMask_	videostab/inpainting.hpp	/^    Mat_<uchar> flowMask_;$/;"	m	class:cv::videostab::MotionInpainter
flowX_	videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowX_	videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
flowY_	videostab/inpainting.hpp	/^    Mat_<float> flowX_, flowY_, flowErrors_;$/;"	m	class:cv::videostab::MotionInpainter
flowY_	videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
fmm_	videostab/inpainting.hpp	/^    FastMarchingMethod fmm_;$/;"	m	class:cv::videostab::ColorAverageInpainter
fmm_	videostab/inpainting.hpp	/^    FastMarchingMethod fmm_;$/;"	m	class:cv::videostab::MotionInpainter
fmt	core/core.hpp	/^template<> class DataDepth<bool> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon207
fmt	core/core.hpp	/^template<> class DataDepth<char> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon210
fmt	core/core.hpp	/^template<> class DataDepth<double> { public: enum { value = CV_64F, fmt=(int)'d' }; };$/;"	e	enum:cv::DataDepth::__anon216
fmt	core/core.hpp	/^template<> class DataDepth<float> { public: enum { value = CV_32F, fmt=(int)'f' }; };$/;"	e	enum:cv::DataDepth::__anon215
fmt	core/core.hpp	/^template<> class DataDepth<int> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon213
fmt	core/core.hpp	/^template<> class DataDepth<schar> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon209
fmt	core/core.hpp	/^template<> class DataDepth<short> { public: enum { value = CV_16S, fmt=(int)'s' }; };$/;"	e	enum:cv::DataDepth::__anon212
fmt	core/core.hpp	/^template<> class DataDepth<uchar> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon208
fmt	core/core.hpp	/^template<> class DataDepth<unsigned> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon214
fmt	core/core.hpp	/^template<> class DataDepth<ushort> { public: enum { value = CV_16U, fmt=(int)'w' }; };$/;"	e	enum:cv::DataDepth::__anon211
fmt	core/core.hpp	/^template<typename _Tp> class DataDepth<_Tp*> { public: enum { value = CV_USRTYPE1, fmt=(int)'r' }; };$/;"	e	enum:cv::DataDepth::__anon217
fmt	core/operations.hpp	/^    const Formatter* fmt;$/;"	m	struct:cv::Formatted
fn_2d	core/internal.hpp	/^    void*   fn_2d[CV_DEPTH_MAX*4];$/;"	m	struct:CvBigFuncTable
fn_2d	core/internal.hpp	/^    void*   fn_2d[CV_DEPTH_MAX];$/;"	m	struct:CvFuncTable
focal	stitching/detail/camera.hpp	/^    double focal; \/\/ Focal length$/;"	m	struct:cv::detail::CameraParams
focal_length	legacy/legacy.hpp	/^    float focal_length[2];$/;"	m	struct:Cv3dTrackerCameraIntrinsics
font_face	core/core_c.h	/^    int         font_face;    \/\/Qt: bool italic         \/* =CV_FONT_* *\/$/;"	m	struct:CvFont
forEach	stitching/detail/util_inl.hpp	/^B Graph::forEach(B body) const$/;"	f	class:cv::detail::Graph
foreground	gpu/gpu.hpp	/^    cv::gpu::GpuMat foreground;$/;"	m	class:cv::gpu::FGDStatModel
foreground_regions	gpu/gpu.hpp	/^    std::vector< std::vector<cv::Point> > foreground_regions;$/;"	m	class:cv::gpu::FGDStatModel
forest	ml/ml.hpp	/^    CvRTrees* forest;$/;"	m	class:CvForestTree
format	core/operations.hpp	/^static inline Formatted format(const Mat& mtx, const char* fmt,$/;"	f	namespace:cv
format	core/operations.hpp	/^template<typename _Tp> static inline Formatted format(const vector<Point3_<_Tp> >& vec,$/;"	f	namespace:cv
format	core/operations.hpp	/^template<typename _Tp> static inline Formatted format(const vector<Point_<_Tp> >& vec,$/;"	f	namespace:cv
fov_	core/opengl_interop.hpp	/^    double fov_;$/;"	m	class:cv::GlCamera
fps	videostab/frame_source.hpp	/^    double fps() { return reader_.get(CV_CAP_PROP_FPS); }$/;"	f	class:cv::videostab::VideoFileSource
fraction_bits	ts/ts_gtest.h	/^  Bits fraction_bits() const { return kFractionBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
frame0_	videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
frame1_	videostab/inpainting.hpp	/^    Mat frame1_, transformedFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
frame1_	videostab/optical_flow.hpp	/^    gpu::GpuMat frame0_, frame1_, flowX_, flowY_, errors_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
frameCount	videostab/frame_source.hpp	/^    int frameCount() { return static_cast<int>(reader_.get(CV_CAP_PROP_FRAME_COUNT)); }$/;"	f	class:cv::videostab::VideoFileSource
frameCount_	videostab/stabilizer.hpp	/^    int frameCount_;$/;"	m	class:cv::videostab::TwoPassStabilizer
frameMask_	videostab/stabilizer.hpp	/^    Mat frameMask_;$/;"	m	class:cv::videostab::StabilizerBase
frameNum_	gpu/gpu.hpp	/^    int frameNum_;$/;"	m	class:cv::gpu::GMG_GPU
frameNum_	video/background_segm.hpp	/^    int frameNum_;$/;"	m	class:cv::BackgroundSubtractorGMG
frameQueue_	gpu/gpu.hpp	/^        detail::FrameQueue* frameQueue_;$/;"	m	class:cv::gpu::VideoReader_GPU::VideoSource
frameSize	video/background_segm.hpp	/^    Size frameSize;$/;"	m	class:cv::BackgroundSubtractorMOG
frameSize	video/background_segm.hpp	/^    Size frameSize;$/;"	m	class:cv::BackgroundSubtractorMOG2
frameSize_	gpu/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::GMG_GPU
frameSize_	gpu/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::MOG2_GPU
frameSize_	gpu/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::MOG_GPU
frameSize_	gpu/gpu.hpp	/^    Size frameSize_;$/;"	m	class:cv::gpu::VIBE_GPU
frameSize_	video/background_segm.hpp	/^    cv::Size frameSize_;$/;"	m	class:cv::BackgroundSubtractorGMG
frameSize_	videostab/stabilizer.hpp	/^    Size frameSize_;$/;"	m	class:cv::videostab::StabilizerBase
frameSource	videostab/stabilizer.hpp	/^    Ptr<IFrameSource> frameSource() const { return frameSource_; }$/;"	f	class:cv::videostab::StabilizerBase
frameSource_	videostab/stabilizer.hpp	/^    Ptr<IFrameSource> frameSource_;$/;"	m	class:cv::videostab::StabilizerBase
frameType	video/background_segm.hpp	/^    int frameType;$/;"	m	class:cv::BackgroundSubtractorMOG
frameType	video/background_segm.hpp	/^    int frameType;$/;"	m	class:cv::BackgroundSubtractorMOG2
frameType_	gpu/gpu.hpp	/^    int frameType_;$/;"	m	class:cv::gpu::MOG2_GPU
frameType_	gpu/gpu.hpp	/^    int frameType_;$/;"	m	class:cv::gpu::MOG_GPU
frames	videostab/deblurring.hpp	/^    virtual const std::vector<Mat>& frames() const { return *frames_; }$/;"	f	class:cv::videostab::DeblurerBase
frames	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& frames() const { return *frames_; }$/;"	f	class:cv::videostab::InpainterBase
framesAccepted	legacy/legacy.hpp	/^    int     framesAccepted;$/;"	m	class:CvCalibFilter
framesTotal	legacy/legacy.hpp	/^    int     framesTotal;$/;"	m	class:CvCalibFilter
frames_	gpu/gpu.hpp	/^    GpuMat frames_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
frames_	videostab/deblurring.hpp	/^    const std::vector<Mat> *frames_;$/;"	m	class:cv::videostab::DeblurerBase
frames_	videostab/inpainting.hpp	/^    const std::vector<Mat> *frames_;$/;"	m	class:cv::videostab::InpainterBase
frames_	videostab/stabilizer.hpp	/^    std::vector<Mat> frames_;$/;"	m	class:cv::videostab::StabilizerBase
free	flann/matrix.h	/^    FLANN_DEPRECATED void free()$/;"	f	class:cvflann::Matrix
freeList	legacy/legacy.hpp	/^    CvBGCodeBookElem* freeList;$/;"	m	struct:CvBGCodeBookModel
freePoint	imgproc/imgproc.hpp	/^    int freePoint;$/;"	m	class:cv::Subdiv2D
freeQEdge	imgproc/imgproc.hpp	/^    int freeQEdge;$/;"	m	class:cv::Subdiv2D
free_centers	flann/kmeans_index.h	/^    void free_centers(KMeansNodePtr node)$/;"	f	class:cvflann::KMeansIndex
free_coef	gpu/gpu.hpp	/^    float free_coef;$/;"	m	struct:cv::gpu::HOGDescriptor
free_coef	ocl/ocl.hpp	/^            float free_coef;$/;"	m	struct:cv::ocl::HOGDescriptor
free_space	core/types_c.h	/^    int free_space;               \/* Remaining free space in current block.   *\/$/;"	m	struct:CvMemStorage
free_space	core/types_c.h	/^    int free_space;$/;"	m	struct:CvMemStoragePos
freq	ts/ts.hpp	/^    double t, freq;$/;"	m	class:cvtest::BadArgTest
frequency	ts/ts_perf.hpp	/^    double frequency;$/;"	m	struct:perf::performance_metrics
from	stitching/detail/util.hpp	/^    int from, to;$/;"	m	struct:cv::detail::GraphEdge
front	core/operations.hpp	/^    _Tp& front() { CV_DbgAssert(!empty()); return hdr.data[0]; }$/;"	f	class:cv::Vector
front	core/operations.hpp	/^    const _Tp& front() const { CV_DbgAssert(!empty()); return hdr.data[0]; }$/;"	f	class:cv::Vector
front	core/operations.hpp	/^template<typename _Tp> inline _Tp& Seq<_Tp>::front()$/;"	f	class:cv::Seq
front	core/operations.hpp	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::front() const$/;"	f	class:cv::Seq
fs	core/core_c.h	/^CVAPI(void) cvEndWriteStruct( CvFileStorage* fs );$/;"	v
fs	core/core_c.h	/^CVAPI(void) cvReleaseFileStorage( CvFileStorage** fs );$/;"	v
fs	core/core_c.h	/^CVAPI(void) cvStartNextStream( CvFileStorage* fs );$/;"	v
fs	core/operations.hpp	/^    FileStorage* fs;$/;"	m	class:cv::VecWriterProxy
fs	core/operations.hpp	/^    FileStorage* fs;$/;"	m	class:cv::WriteStructContext
ft_params	contrib/hybridtracker.hpp	/^    CvFeatureTrackerParams ft_params;$/;"	m	struct:cv::CvHybridTrackerParams
ft_tracker_weight	contrib/hybridtracker.hpp	/^    float ft_tracker_weight;$/;"	m	struct:cv::CvHybridTrackerParams
fttracker	contrib/hybridtracker.hpp	/^    CvFeatureTracker* fttracker;$/;"	m	class:cv::CvHybridTracker
full	flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::KNNResultSet
full	flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::KNNSimpleResultSet
full	flann/result_set.h	/^    bool full() const$/;"	f	class:cvflann::RadiusResultSet
full	flann/result_set.h	/^    inline bool full() const$/;"	f	class:cvflann::RadiusUniqueResultSet
full	flann/result_set.h	/^    inline bool full() const$/;"	f	class:cvflann::UniqueResultSet
fullDP	calib3d/calib3d.hpp	/^    CV_PROP_RW bool fullDP;$/;"	m	class:cv::StereoSGBM
full_img_sizes_	stitching/stitcher.hpp	/^    std::vector<cv::Size> full_img_sizes_;$/;"	m	class:cv::Stitcher
full_pattern_	ts/ts_gtest.h	/^  const char* full_pattern_;  \/\/ For FullMatch();$/;"	m	class:std::tr1::RE
full_regex_	ts/ts_gtest.h	/^  regex_t full_regex_;     \/\/ For FullMatch().$/;"	m	class:std::tr1::RE
func	contrib/contrib.hpp	/^        void (*func)(int i, int j, Mat& point_params, Mat& cam_params, Mat& estim, void* data);$/;"	m	class:cv::LevMarqSparse
func	core/core.hpp	/^    string func; \/\/\/< function name. Available only when the compiler supports __func__ macro$/;"	m	class:cv::Exception
func_	ts/ts_gtest.h	/^  const UserThreadFunc func_;  \/\/ User-supplied thread function.$/;"	m	class:std::tr1::ThreadWithParam
func_addr	core/types_c.h	/^    void** func_addr;$/;"	m	struct:CvPluginFuncInfo
func_names	core/types_c.h	/^    const char* func_names;$/;"	m	struct:CvPluginFuncInfo
func_tab	core/types_c.h	/^    CvPluginFuncInfo* func_tab;$/;"	m	struct:CvModuleInfo
functional_detail	gpu/device/functional.hpp	/^    namespace functional_detail$/;"	n	namespace:cv::gpu::device
fundMatr	legacy/legacy.hpp	/^    float fundMatr[9]; \/* fundamental matrix *\/$/;"	m	struct:CvStereoCamera
fuzzyController	contrib/contrib.hpp	/^        CvFuzzyController fuzzyController;$/;"	m	class:CvFuzzyMeanShiftTracker::FuzzyResizer
fuzzyInput1	contrib/contrib.hpp	/^    CvFuzzyCurve *fuzzyInput1, *fuzzyInput2;$/;"	m	class:CvFuzzyRule
fuzzyInput2	contrib/contrib.hpp	/^    CvFuzzyCurve *fuzzyInput1, *fuzzyInput2;$/;"	m	class:CvFuzzyRule
fuzzyOutput	contrib/contrib.hpp	/^    CvFuzzyCurve *fuzzyOutput;$/;"	m	class:CvFuzzyRule
fuzzyResizer	contrib/contrib.hpp	/^        FuzzyResizer *fuzzyResizer;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
g10_	ts/ts_gtest.h	/^  const Generator10 g10_;$/;"	m	class:testing::internal::CartesianProductHolder10
g10_	ts/ts_gtest.h	/^  const ParamGenerator<T10> g10_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder10
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder2
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder3
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder4
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder5
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder6
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder7
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder8
g1_	ts/ts_gtest.h	/^  const Generator1 g1_;$/;"	m	class:testing::internal::CartesianProductHolder9
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g1_	ts/ts_gtest.h	/^  const ParamGenerator<T1> g1_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder10
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder2
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder3
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder4
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder5
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder6
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder7
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder8
g2_	ts/ts_gtest.h	/^  const Generator2 g2_;$/;"	m	class:testing::internal::CartesianProductHolder9
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator2
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g2_	ts/ts_gtest.h	/^  const ParamGenerator<T2> g2_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder10
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder3
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder4
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder5
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder6
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder7
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder8
g3_	ts/ts_gtest.h	/^  const Generator3 g3_;$/;"	m	class:testing::internal::CartesianProductHolder9
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator3
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g3_	ts/ts_gtest.h	/^  const ParamGenerator<T3> g3_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder10
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder4
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder5
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder6
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder7
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder8
g4_	ts/ts_gtest.h	/^  const Generator4 g4_;$/;"	m	class:testing::internal::CartesianProductHolder9
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator4
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g4_	ts/ts_gtest.h	/^  const ParamGenerator<T4> g4_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder10
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder5
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder6
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder7
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder8
g5_	ts/ts_gtest.h	/^  const Generator5 g5_;$/;"	m	class:testing::internal::CartesianProductHolder9
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator5
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g5_	ts/ts_gtest.h	/^  const ParamGenerator<T5> g5_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder10
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder6
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder7
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder8
g6_	ts/ts_gtest.h	/^  const Generator6 g6_;$/;"	m	class:testing::internal::CartesianProductHolder9
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator6
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g6_	ts/ts_gtest.h	/^  const ParamGenerator<T6> g6_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder10
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder7
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder8
g7_	ts/ts_gtest.h	/^  const Generator7 g7_;$/;"	m	class:testing::internal::CartesianProductHolder9
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator7
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g7_	ts/ts_gtest.h	/^  const ParamGenerator<T7> g7_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g8_	ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder10
g8_	ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder8
g8_	ts/ts_gtest.h	/^  const Generator8 g8_;$/;"	m	class:testing::internal::CartesianProductHolder9
g8_	ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g8_	ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator8
g8_	ts/ts_gtest.h	/^  const ParamGenerator<T8> g8_;$/;"	m	class:testing::internal::CartesianProductGenerator9
g9_	ts/ts_gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder10
g9_	ts/ts_gtest.h	/^  const Generator9 g9_;$/;"	m	class:testing::internal::CartesianProductHolder9
g9_	ts/ts_gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator10
g9_	ts/ts_gtest.h	/^  const ParamGenerator<T9> g9_;$/;"	m	class:testing::internal::CartesianProductGenerator9
gSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
g_point	legacy/legacy.hpp	/^    CvGaussBGPoint*            g_point;$/;"	m	struct:CvGaussBGModel
g_values	legacy/legacy.hpp	/^    CvGaussBGValues* g_values;$/;"	m	struct:CvGaussBGPoint
gain	video/tracking.hpp	/^    CvMat* gain;                \/* Kalman gain matrix (K(k)):$/;"	m	struct:CvKalman
gain	video/tracking.hpp	/^    Mat gain;               \/\/!< Kalman gain matrix (K(k)): K(k)=P'(k)*Ht*inv(H*P'(k)*Ht+R)$/;"	m	class:cv::KalmanFilter
gain_maps_	stitching/detail/exposure_compensate.hpp	/^    std::vector<Mat_<float> > gain_maps_;$/;"	m	class:cv::detail::BlocksGainCompensator
gains_	stitching/detail/exposure_compensate.hpp	/^    Mat_<double> gains_;$/;"	m	class:cv::detail::GainCompensator
gamma	contrib/contrib.hpp	/^        float gamma;$/;"	m	class:cv::SpinImageModel
gamma	gpu/gpu.hpp	/^    float gamma;$/;"	m	class:cv::gpu::BroxOpticalFlow
gamma	ml/ml.hpp	/^    CV_PROP_RW double      gamma;  \/\/ for poly\/rbf\/sigmoid$/;"	m	struct:CvSVMParams
gammaCorrection	objdetect/objdetect.hpp	/^    CV_PROP bool gammaCorrection;$/;"	m	struct:cv::HOGDescriptor
gamma_correction	gpu/gpu.hpp	/^    bool gamma_correction;$/;"	m	struct:cv::gpu::HOGDescriptor
gamma_correction	ocl/ocl.hpp	/^            bool gamma_correction;$/;"	m	struct:cv::ocl::HOGDescriptor
ganglionCellsSensitivity	contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
gcd	core/operations.hpp	/^template<typename _Tp> static inline _Tp gcd(_Tp a, _Tp b)$/;"	f	namespace:cv
get	core/operations.hpp	/^template<typename _Tp> inline typename ParamType<_Tp>::member_type Algorithm::get(const char* _name) const$/;"	f	class:cv::Algorithm
get	core/operations.hpp	/^template<typename _Tp> inline typename ParamType<_Tp>::member_type Algorithm::get(const string& _name) const$/;"	f	class:cv::Algorithm
get	ts/ts_gtest.h	/^  T* get() const { return ptr_; }$/;"	f	struct:std::tr1::tuple_element
get	ts/ts_gtest.h	/^  T* get() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
get	ts/ts_gtest.h	/^  const T& get() const { return *pointer(); }$/;"	f	class:std::tr1::ThreadLocal
get	ts/ts_gtest.h	/^  const T& get() const { return value_; }$/;"	f	class:std::tr1::ThreadLocal
getAlpha	gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ T getAlpha(const typename TypeVec<T, 3>::vec_type& vec)$/;"	f	namespace:cv::gpu::device::color_detail
getAlpha	gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ T getAlpha(const typename TypeVec<T, 4>::vec_type& vec)$/;"	f	namespace:cv::gpu::device::color_detail
getBucketFromKey	flann/lsh_table.h	/^    inline const Bucket* getBucketFromKey(BucketKey key) const$/;"	f	class:cvflann::lsh::LshTable
getCenterOrdering	flann/kmeans_index.h	/^    void getCenterOrdering(KMeansNodePtr node, const ElementType* q, int* sort_indices)$/;"	f	class:cvflann::KMeansIndex
getClusterCenters	flann/kmeans_index.h	/^    int getClusterCenters(Matrix<DistanceType>& centers)$/;"	f	class:cvflann::KMeansIndex
getData	legacy/legacy.hpp	/^inline uchar* getData(IplImage* image)$/;"	f	namespace:cv
getDistanceToBorder	flann/kmeans_index.h	/^    DistanceType getDistanceToBorder(DistanceType* p, DistanceType* c, DistanceType* q)$/;"	f	class:cvflann::KMeansIndex
getExactNeighbors	flann/kdtree_index.h	/^    void getExactNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, float epsError)$/;"	f	class:cvflann::KDTreeIndex
getFirstTopLevelNode	core/operations.hpp	/^inline FileNode FileStorage::getFirstTopLevelNode() const$/;"	f	class:cv::FileStorage
getFloatSignature	legacy/legacy.hpp	/^    void getFloatSignature(IplImage *patch, float *sig) const { getSignature(patch, sig); }$/;"	f	class:cv::RTreeClassifier
getIndex	flann/flann_base.hpp	/^    FLANN_DEPRECATED NNIndex<Distance>* getIndex()$/;"	f	class:cvflann::Index
getIndexParameters	flann/flann.hpp	/^        FLANN_DEPRECATED const ::cvflann::IndexParams* getIndexParameters() { return nnIndex->getIndexParameters(); }$/;"	f	class:cv::flann::GenericIndex
getIndexParameters	flann/flann.hpp	/^        FLANN_DEPRECATED const ::cvflann::IndexParams* getIndexParameters()$/;"	f	class:cv::flann::Index_
getIndexParameters	flann/flann_base.hpp	/^    FLANN_DEPRECATED  const IndexParams* getIndexParameters()$/;"	f	class:cvflann::Index
getKey	flann/lsh_table.h	/^    size_t getKey(const ElementType* \/*feature*\/) const$/;"	f	class:cvflann::lsh::LshTable
getKey	flann/lsh_table.h	/^inline size_t LshTable<unsigned char>::getKey(const unsigned char* feature) const$/;"	f	class:cvflann::lsh::LshTable
getLikelihood	legacy/legacy.hpp	/^    CV_WRAP inline double getLikelihood() const { return emObj.isTrained() ? logLikelihood : DBL_MAX; }$/;"	f	class:CvEM
getMesh	contrib/contrib.hpp	/^        Mesh3D& getMesh() { return mesh; }$/;"	f	class:cv::SpinImageModel
getMesh	contrib/contrib.hpp	/^        const Mesh3D& getMesh() const { return mesh; }$/;"	f	class:cv::SpinImageModel
getMinEigenVals	gpu/gpu.hpp	/^    bool getMinEigenVals;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
getMinEigenVals	ocl/ocl.hpp	/^            bool getMinEigenVals;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
getMinVarianceClusters	flann/kmeans_index.h	/^    int getMinVarianceClusters(KMeansNodePtr root, KMeansNodePtr* clusters, int clusters_length, DistanceType& varianceValue)$/;"	f	class:cvflann::KMeansIndex
getModalities	objdetect/objdetect.hpp	/^  const std::vector< Ptr<Modality> >& getModalities() const { return modalities; }$/;"	f	class:cv::linemod::Detector
getNeighbors	flann/kdtree_index.h	/^    void getNeighbors(ResultSet<DistanceType>& result, const ElementType* vec, int maxCheck, float epsError)$/;"	f	class:cvflann::KDTreeIndex
getNeighbors	flann/lsh_index.h	/^    void getNeighbors(const ElementType* vec, ResultSet<DistanceType>& result)$/;"	f	class:cvflann::LshIndex
getNeighbors	flann/lsh_index.h	/^    void getNeighbors(const ElementType* vec, bool \/*do_radius*\/, float radius, bool do_k, unsigned int k_nn,$/;"	f	class:cvflann::LshIndex
getNextId	contrib/detection_based_tracker.hpp	/^            static int getNextId()$/;"	f	struct:DetectionBasedTracker::TrackedObject
getNodes	contrib/contrib.hpp	/^        const vector<Node>& getNodes() const { return nodes; }$/;"	f	class:cv::Octree
getParameters	flann/autotuned_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::AutotunedIndex
getParameters	flann/composite_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::CompositeIndex
getParameters	flann/flann.hpp	/^        ::cvflann::IndexParams getParameters() { return nnIndex->getParameters(); }$/;"	f	class:cv::flann::GenericIndex
getParameters	flann/flann.hpp	/^        ::cvflann::IndexParams getParameters()$/;"	f	class:cv::flann::Index_
getParameters	flann/flann_base.hpp	/^    IndexParams getParameters() const$/;"	f	class:cvflann::Index
getParameters	flann/hierarchical_clustering_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
getParameters	flann/kdtree_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KDTreeIndex
getParameters	flann/kdtree_single_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KDTreeSingleIndex
getParameters	flann/kmeans_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::KMeansIndex
getParameters	flann/linear_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::LinearIndex
getParameters	flann/lsh_index.h	/^    IndexParams getParameters() const$/;"	f	class:cvflann::LshIndex
getPosteriorByIndex	legacy/legacy.hpp	/^inline const float* RandomizedTree::getPosteriorByIndex(int index) const$/;"	f	class:cv::RandomizedTree
getPosteriorByIndex	legacy/legacy.hpp	/^inline float* RandomizedTree::getPosteriorByIndex(int index)$/;"	f	class:cv::RandomizedTree
getPosteriorByIndex2	legacy/legacy.hpp	/^inline const uchar* RandomizedTree::getPosteriorByIndex2(int index) const$/;"	f	class:cv::RandomizedTree
getPosteriorByIndex2	legacy/legacy.hpp	/^inline uchar* RandomizedTree::getPosteriorByIndex2(int index)$/;"	f	class:cv::RandomizedTree
getScale	stitching/detail/warpers.hpp	/^    float getScale() const { return 1.f; }$/;"	f	class:cv::detail::RotationWarper
getScale	stitching/detail/warpers.hpp	/^    float getScale() const { return projector_.scale; }$/;"	f	class:cv::detail::RotationWarperBase
getSearchParameters	flann/autotuned_index.h	/^    SearchParams getSearchParameters() const$/;"	f	class:cvflann::AutotunedIndex
getSpeedup	flann/autotuned_index.h	/^    float getSpeedup() const$/;"	f	class:cvflann::AutotunedIndex
getSpinCount	contrib/contrib.hpp	/^        size_t getSpinCount() const { return spinImages.rows; }$/;"	f	class:cv::SpinImageModel
getSpinImage	contrib/contrib.hpp	/^        Mat getSpinImage(size_t index) const { return spinImages.row((int)index); }$/;"	f	class:cv::SpinImageModel
getSpinNormal	contrib/contrib.hpp	/^        const Point3f& getSpinNormal(size_t index) const { return mesh.normals[subset[index]]; }$/;"	f	class:cv::SpinImageModel
getSpinVertex	contrib/contrib.hpp	/^        const Point3f& getSpinVertex(size_t index) const { return mesh.vtx[subset[index]]; }$/;"	f	class:cv::SpinImageModel
getStats	flann/lsh_table.h	/^inline LshStats LshTable<unsigned char>::getStats() const$/;"	f	class:cvflann::lsh::LshTable
getT	objdetect/objdetect.hpp	/^  int getT(int pyramid_level) const { return T_at_level[pyramid_level]; }$/;"	f	class:cv::linemod::Detector
getType	flann/autotuned_index.h	/^    virtual flann_algorithm_t getType() const$/;"	f	class:cvflann::AutotunedIndex
getType	flann/composite_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::CompositeIndex
getType	flann/flann_base.hpp	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::Index
getType	flann/hierarchical_clustering_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
getType	flann/kdtree_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KDTreeIndex
getType	flann/kdtree_single_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KDTreeSingleIndex
getType	flann/kmeans_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::KMeansIndex
getType	flann/linear_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::LinearIndex
getType	flann/lsh_index.h	/^    flann_algorithm_t getType() const$/;"	f	class:cvflann::LshIndex
get_back_project	legacy/legacy.hpp	/^    virtual IplImage* get_back_project()$/;"	f	class:CvCamShiftTracker
get_center	legacy/legacy.hpp	/^    CvPoint2D32f get_center() const \/\/ center of the object$/;"	f	class:CvCamShiftTracker
get_current_test_info	ts/ts.hpp	/^    const TestInfo* get_current_test_info() { return &current_test_info; }$/;"	f	class:cvtest::TS
get_data_path	ts/ts.hpp	/^    const string& get_data_path() const { return data_path; }$/;"	f	class:cvtest::TS
get_err_code	ts/ts.hpp	/^    int get_err_code() { return current_test_info.code; }$/;"	f	class:cvtest::TS
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type()$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<char>() { return H5T_NATIVE_CHAR; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<double>() { return H5T_NATIVE_DOUBLE; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<float>() { return H5T_NATIVE_FLOAT; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<int>() { return H5T_NATIVE_INT; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<long>() { return H5T_NATIVE_LONG; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<short int>() { return H5T_NATIVE_SHORT; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned char>() { return H5T_NATIVE_UCHAR; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned int>() { return H5T_NATIVE_UINT; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned long>() { return H5T_NATIVE_ULONG; }$/;"	f	namespace:cvflann::__anon197
get_hdf5_type	flann/hdf5.h	/^hid_t get_hdf5_type<unsigned short int>() { return H5T_NATIVE_USHORT; }$/;"	f	namespace:cvflann::__anon197
get_hist_dims	legacy/legacy.hpp	/^    int     get_hist_dims( int* dims = 0 ) const \/\/ returns number of histogram dimensions and sets$/;"	f	class:CvCamShiftTracker
get_layer_count	ml/ml.hpp	/^    int get_layer_count() { return layer_sizes ? layer_sizes->cols : 0; }$/;"	f	class:CvANN_MLP
get_layer_sizes	ml/ml.hpp	/^    const CvMat* get_layer_sizes() { return layer_sizes; }$/;"	f	class:CvANN_MLP
get_length	legacy/legacy.hpp	/^    float   get_length() const \/\/ the larger linear size of the object$/;"	f	class:CvCamShiftTracker
get_log_likelihood	legacy/legacy.hpp	/^    inline double get_log_likelihood() const { return getLikelihood(); }$/;"	f	class:CvEM
get_max_ch_val	legacy/legacy.hpp	/^    int     get_max_ch_val( int channel ) const \/\/ get the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
get_min_ch_val	legacy/legacy.hpp	/^    int     get_min_ch_val( int channel ) const \/\/ get the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
get_minor	core/operations.hpp	/^Matx<_Tp, m1, n1> Matx<_Tp, m, n>::get_minor(int i, int j) const$/;"	f	class:cv::Matx
get_name	ts/ts.hpp	/^    const string& get_name() const { return name; }$/;"	f	class:cvtest::BaseTest
get_num_valid	ml/ml.hpp	/^    int get_num_valid(int vi) { return num_valid ? num_valid[vi] : sample_count; }$/;"	f	struct:CvDTreeNode
get_orientation	legacy/legacy.hpp	/^    float   get_orientation() const \/\/ orientation of the object in degrees$/;"	f	class:CvCamShiftTracker
get_param	flann/params.h	/^T get_param(const IndexParams& params, std::string name)$/;"	f	namespace:cvflann
get_param	flann/params.h	/^T get_param(const IndexParams& params, std::string name, const T& default_value)$/;"	f	namespace:cvflann
get_params	ml/ml.hpp	/^    virtual CvSVMParams get_params() const { return params; };$/;"	f	class:CvSVM
get_policy	flann/any.h	/^base_any_policy* get_policy()$/;"	f	namespace:cvflann::anyimpl
get_rng	ts/ts.hpp	/^    RNG& get_rng() { return rng; }$/;"	f	class:cvtest::TS
get_row_func	ml/ml.hpp	/^    GetRow get_row_func;$/;"	m	class:CvSVMSolver
get_size	flann/any.h	/^    virtual ::size_t get_size() { return sizeof(T); }$/;"	f	struct:cvflann::anyimpl::typed_base_any_policy
get_test_case_count_scale	ts/ts.hpp	/^    double get_test_case_count_scale() { return params.test_case_count_scale; }$/;"	f	class:cvtest::TS
get_threshold	legacy/legacy.hpp	/^    int     get_threshold() const \/\/ thresholding value that applied to back project$/;"	f	class:CvCamShiftTracker
get_value	flann/any.h	/^    virtual void* get_value(void** src) { return *src; }$/;"	f	struct:cvflann::anyimpl::big_any_policy
get_value	flann/any.h	/^    virtual void* get_value(void** src) { return reinterpret_cast<void*>(src); }$/;"	f	struct:cvflann::anyimpl::small_any_policy
get_var_count	ml/ml.hpp	/^    CV_WRAP int get_var_count() const { return var_idx ? var_idx->cols : var_all; }$/;"	f	class:CvSVM
get_var_count	ml/ml.hpp	/^    virtual int get_var_count() const {return data ? data->var_count : 0;}$/;"	f	class:CvForestTree
get_weights	ml/ml.hpp	/^    double* get_weights(int layer)$/;"	f	class:CvANN_MLP
get_width	legacy/legacy.hpp	/^    float   get_width() const \/\/ the smaller linear size of the object$/;"	f	class:CvCamShiftTracker
get_window	legacy/legacy.hpp	/^    CvRect get_window() const \/\/ bounding rectangle for the object$/;"	f	class:CvCamShiftTracker
get_work_var_count	ml/ml.hpp	/^    int get_work_var_count() const {return work_var_count;}$/;"	f	struct:CvDTreeTrainData
gmean	ts/ts_perf.hpp	/^    double gmean;$/;"	m	struct:perf::performance_metrics
gpu	core/core.hpp	/^namespace gpu {$/;"	n	namespace:cv
gpu	core/cuda_devptrs.hpp	/^    namespace gpu$/;"	n	namespace:cv
gpu	core/gpumat.hpp	/^namespace cv { namespace gpu$/;"	n	namespace:cv
gpu	core/opengl_interop.hpp	/^namespace gpu$/;"	n	namespace:cv
gpu	gpu/device/border_interpolate.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/color.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/common.hpp	/^namespace cv { namespace gpu$/;"	n	namespace:cv
gpu	gpu/device/datamov_utils.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/detail/color_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/detail/reduction_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/detail/transform_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/detail/type_traits_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/detail/vec_distance_detail.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/dynamic_smem.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/emulation.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/filters.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/funcattrib.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/functional.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/limits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/saturate_cast.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/scan.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/static_check.hpp	/^namespace cv { namespace gpu$/;"	n	namespace:cv
gpu	gpu/device/transform.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/type_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/utility.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/vec_distance.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/vec_math.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/vec_traits.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/warp.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/device/warp_reduce.hpp	/^namespace cv { namespace gpu { namespace device$/;"	n	namespace:cv
gpu	gpu/gpu.hpp	/^namespace cv { namespace gpu {$/;"	n	namespace:cv
gpu	gpu/stream_accessor.hpp	/^    namespace gpu$/;"	n	namespace:cv
grad	gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
grad	ocl/ocl.hpp	/^            oclMat grad, qangle;$/;"	m	struct:cv::ocl::HOGDescriptor
grad_buf	gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
gradx1_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx1_, grady1_;$/;"	m	class:cv::detail::DpSeamFinder
gradx2_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx2_, grady2_;$/;"	m	class:cv::detail::DpSeamFinder
grady1_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx1_, grady1_;$/;"	m	class:cv::detail::DpSeamFinder
grady2_	stitching/detail/seam_finders.hpp	/^    Mat_<float> gradx2_, grady2_;$/;"	m	class:cv::detail::DpSeamFinder
graph	core/core_c.h	/^    CvGraph* graph;        \/* the graph *\/$/;"	m	struct:CvGraphScanner
graph	core/core_c.h	/^CVAPI(void)  cvClearGraph( CvGraph* graph );$/;"	v
graph	legacy/legacy.hpp	/^    CvGraph* graph;$/;"	m	struct:CvCliqueFinder
grayFrame_	videostab/inpainting.hpp	/^    Mat_<uchar> grayFrame_, transformedGrayFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
grayImg	legacy/legacy.hpp	/^    CvMat*  grayImg;$/;"	m	class:CvCalibFilter
gray_image_	stitching/detail/matchers.hpp	/^    gpu::GpuMat gray_image_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
grayscaleMode	highgui/cap_ios.h	/^@property (nonatomic, assign) BOOL grayscaleMode;$/;"	v
greater	gpu/device/functional.hpp	/^        __device__ __forceinline__ greater():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater
greater	gpu/device/functional.hpp	/^        __device__ __forceinline__ greater(const greater& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater
greater	gpu/device/functional.hpp	/^    template <typename T> struct greater : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
greater_equal	gpu/device/functional.hpp	/^        __device__ __forceinline__ greater_equal():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater_equal
greater_equal	gpu/device/functional.hpp	/^        __device__ __forceinline__ greater_equal(const greater_equal& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::greater_equal
greater_equal	gpu/device/functional.hpp	/^    template <typename T> struct greater_equal : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
greek	core/core_c.h	/^    const int*  greek;$/;"	m	struct:CvFont
gridCols	features2d/features2d.hpp	/^    int gridCols;$/;"	m	class:cv::GridAdaptedFeatureDetector
gridRows	features2d/features2d.hpp	/^    int gridRows;$/;"	m	class:cv::GridAdaptedFeatureDetector
grid_size	stitching/detail/matchers.hpp	/^    Size grid_size;$/;"	m	class:cv::detail::OrbFeaturesFinder
gstddev	ts/ts_perf.hpp	/^    double gstddev;\/\/stddev for log(time)$/;"	m	struct:perf::performance_metrics
gt_matches_	flann/autotuned_index.h	/^    Matrix<int> gt_matches_;$/;"	m	class:cvflann::AutotunedIndex
gtest_flag_saver_	ts/ts_gtest.h	/^  const internal::GTestFlagSaver* const gtest_flag_saver_;$/;"	m	class:testing::Test::internal
gtest_internal	ts/ts_gtest.h	/^namespace gtest_internal {$/;"	n	namespace:std::tr1
h	legacy/blobtrack.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob
h1	legacy/legacy.hpp	/^    int h1, h2;$/;"	m	struct:lsh_hash
h2	legacy/legacy.hpp	/^    int h1, h2;$/;"	m	struct:lsh_hash
hX	contrib/contrib.hpp	/^        CvMat* hX; \/\/current measurement extimation given new parameter vector$/;"	m	class:cv::LevMarqSparse
h_range	contrib/hybridtracker.hpp	/^    vector<float> h_range;$/;"	m	struct:cv::CvMeanShiftTrackerParams
haar_feature	objdetect/objdetect.hpp	/^    CvHaarFeature* haar_feature;$/;"	m	struct:CvHaarClassifier
haight	gpu/device/filters.hpp	/^        int width, haight;$/;"	m	struct:cv::gpu::device::AreaFilter
half	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ T half() { return (T)(max()\/2 + 1); }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
half	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ float half() { return 0.5f; }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
harrisK	gpu/gpu.hpp	/^    double harrisK;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
has_new_fatal_failure	ts/ts_gtest.h	/^  bool has_new_fatal_failure() const { return has_new_fatal_failure_; }$/;"	f	class:testing::internal::HasNewFatalFailureHelper
has_new_fatal_failure_	ts/ts_gtest.h	/^  bool has_new_fatal_failure_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
has_owner_	ts/ts_gtest.h	/^  bool has_owner_;$/;"	m	class:std::tr1::MutexBase
has_type	flann/any.h	/^    bool has_type()$/;"	f	struct:cvflann::any
hash	core/mat.hpp	/^inline size_t SparseMat::hash(const int* idx) const$/;"	f	class:cv::SparseMat
hash	core/mat.hpp	/^inline size_t SparseMat::hash(int i0) const$/;"	f	class:cv::SparseMat
hash	core/mat.hpp	/^inline size_t SparseMat::hash(int i0, int i1) const$/;"	f	class:cv::SparseMat
hash	core/mat.hpp	/^inline size_t SparseMat::hash(int i0, int i1, int i2) const$/;"	f	class:cv::SparseMat
hashsize	core/types_c.h	/^    int hashsize;$/;"	m	struct:CvSparseMat
hashtable	core/types_c.h	/^    void** hashtable;$/;"	m	struct:CvSparseMat
hashval	core/types_c.h	/^    unsigned hashval;$/;"	m	struct:CvSparseNode
hashval	core/types_c.h	/^    unsigned hashval;$/;"	m	struct:CvStringHashNode
have_active_cat_vars	ml/ml.hpp	/^    bool have_active_cat_vars;$/;"	m	class:CvBoost
have_labels	ml/ml.hpp	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData
have_priors	ml/ml.hpp	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData
have_subsample	ml/ml.hpp	/^    bool have_subsample;$/;"	m	class:CvBoost
hcellsSpatialConstant	contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
hcellsTemporalConstant	contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
hdr	core/core_c.h	/^    CvMatND* hdr[CV_MAX_ARR]; \/* pointers to the headers of the$/;"	m	struct:CvNArrayIterator
hdr	core/operations.hpp	/^    Hdr hdr;$/;"	m	class:cv::Vector
hdr_refcount	core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvMat
hdr_refcount	core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvMatND
hdr_refcount	core/types_c.h	/^    int hdr_refcount;$/;"	m	struct:CvSparseMat
header_	core/wimage.hpp	/^    IplImage header_;$/;"	m	class:cv::WImageView
header_	core/wimage.hpp	/^    IplImage header_;$/;"	m	class:cv::WImageViewC
header_size	core/types_c.h	/^    int header_size;$/;"	m	struct:CvTypeInfo
heap	core/types_c.h	/^    struct CvSet* heap;$/;"	m	struct:CvSparseMat	typeref:struct:CvSparseMat::CvSet
heap	flann/heap.h	/^    std::vector<T> heap;$/;"	m	class:cvflann::Heap
height	contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
height	core/opengl_interop.hpp	/^    inline int height() const { return height_; }$/;"	f	class:cv::GlFont
height	core/types_c.h	/^        int height;$/;"	m	union:CvMat::__anon222
height	core/types_c.h	/^    float height;$/;"	m	struct:CvSize2D32f
height	core/types_c.h	/^    int  height;            \/* Image height in pixels.                          *\/$/;"	m	struct:_IplImage
height	core/types_c.h	/^    int  height;$/;"	m	struct:_IplROI
height	core/types_c.h	/^    int height;$/;"	m	struct:CvRect
height	core/types_c.h	/^    int height;$/;"	m	struct:CvSize
height	gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BorderReader
height	gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdColConstant
height	gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdColWrap
height	gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdConstant
height	gpu/device/border_interpolate.hpp	/^        const int height;$/;"	m	struct:cv::gpu::device::BrdWrap
height	gpu/gpu.hpp	/^        int height;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
height	legacy/compat.hpp	/^    int     height;                 \/* height of the image  ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u
height	legacy/compat.hpp	/^    int     height;$/;"	m	struct:_CvPixelPosition32f
height	legacy/compat.hpp	/^    int     height;$/;"	m	struct:_CvPixelPosition8s
height	legacy/legacy.hpp	/^    int height() const { return image ? image->height : 0; }$/;"	f	class:CvImage
height	objdetect/objdetect.hpp	/^  int height;$/;"	m	struct:cv::linemod::Template
height_	core/opengl_interop.hpp	/^    int height_;$/;"	m	class:cv::GlFont
hessian	legacy/compat.hpp	/^    float        hessian;$/;"	m	struct:CvSURFPoint
hessianThreshold	gpu/gpu.hpp	/^    double hessianThreshold;$/;"	m	class:cv::gpu::SURF_GPU
hessianThreshold	legacy/compat.hpp	/^    double hessianThreshold;$/;"	m	struct:CvSURFParams
hessianThreshold	nonfree/features2d.hpp	/^    CV_PROP_RW double hessianThreshold;$/;"	m	class:cv::SURF
hessianThreshold	ocl/ocl.hpp	/^            float hessianThreshold;$/;"	m	class:cv::ocl::SURF_OCL
hid_cascade	objdetect/objdetect.hpp	/^    CvHidHaarClassifierCascade* hid_cascade;$/;"	m	struct:CvHaarClassifierCascade
hierarchicalClustering	flann/flann.hpp	/^FLANN_DEPRECATED int hierarchicalClustering(const Mat& features, Mat& centers, const ::cvflann::KMeansIndexParams& params)$/;"	f	namespace:cv::flann
hierarchicalClustering	flann/flann.hpp	/^int hierarchicalClustering(const Mat& features, Mat& centers, const ::cvflann::KMeansIndexParams& params,$/;"	f	namespace:cv::flann
hierarchicalClustering	flann/flann_base.hpp	/^int hierarchicalClustering(const Matrix<typename Distance::ElementType>& points, Matrix<typename Distance::ResultType>& centers,$/;"	f	namespace:cvflann
high	flann/kdtree_single_index.h	/^        DistanceType low, high;$/;"	m	struct:cvflann::KDTreeSingleIndex::Interval
hist	contrib/hybridtracker.hpp	/^    MatND hist;$/;"	m	class:cv::CvMeanShiftTracker
hist	imgproc/imgproc_c.h	/^CVAPI(void)  cvClearHist( CvHistogram* hist );$/;"	v
hist	imgproc/imgproc_c.h	/^CVAPI(void)  cvReleaseHist( CvHistogram** hist );$/;"	v
histogramHueMotion	contrib/contrib.hpp	/^    Histogram histogramHueMotion, skinHueHistogram;$/;"	m	class:CvAdaptiveSkinDetector
histogramNormType	objdetect/objdetect.hpp	/^    CV_PROP int histogramNormType;$/;"	m	struct:cv::HOGDescriptor
history	gpu/gpu.hpp	/^    int history;$/;"	m	class:cv::gpu::MOG2_GPU
history	gpu/gpu.hpp	/^    int history;$/;"	m	class:cv::gpu::MOG_GPU
history	video/background_segm.hpp	/^    int history;$/;"	m	class:cv::BackgroundSubtractorMOG
history	video/background_segm.hpp	/^    int history;$/;"	m	class:cv::BackgroundSubtractorMOG2
hmm	legacy/legacy.hpp	/^CVAPI(void)  cvRelease2DHMM( CvEHMM** hmm );$/;"	v
horizontalCellsGain	contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
horizontalEdgeBottom	contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
horizontalEdgeTop	contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
hscale	core/core_c.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont
hsv	contrib/hybridtracker.hpp	/^    Mat hsv, hue;$/;"	m	class:cv::CvMeanShiftTracker
hu1	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu2	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu3	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu4	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu5	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu6	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hu7	imgproc/types_c.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments
hue	contrib/hybridtracker.hpp	/^    Mat hsv, hue;$/;"	m	class:cv::CvMeanShiftTracker
hypot_sqr_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ hypot_sqr_func() : binary_function<T, T, float>(){}$/;"	f	struct:cv::gpu::device::hypot_sqr_func
hypot_sqr_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ hypot_sqr_func(const hypot_sqr_func& other) : binary_function<T, T, float>(){}$/;"	f	struct:cv::gpu::device::hypot_sqr_func
hypot_sqr_func	gpu/device/functional.hpp	/^    template<typename T> struct hypot_sqr_func : binary_function<T, T, float>$/;"	s	namespace:cv::gpu::device
i	core/types_c.h	/^        int i;    \/* scalar integer number *\/$/;"	m	union:CvFileNode::__anon226
i	core/types_c.h	/^        int* i;$/;"	m	union:CvMat::__anon221
i	core/types_c.h	/^        int* i;$/;"	m	union:CvMatND::__anon224
i	core/types_c.h	/^    int i;$/;"	m	union:Cv32suf
i	core/types_c.h	/^    int64 i;$/;"	m	union:Cv64suf
i	features2d/features2d.hpp	/^        uchar i; \/\/ index of the first point$/;"	m	struct:cv::FREAK::DescriptionPair
i	features2d/features2d.hpp	/^        uchar i; \/\/ index of the first point$/;"	m	struct:cv::FREAK::OrientationPair
i	features2d/features2d.hpp	/^        unsigned int i;  \/\/ index of the first pattern point$/;"	m	struct:cv::BRISK::BriskLongPair
i	features2d/features2d.hpp	/^        unsigned int i;  \/\/ index of the first pattern point$/;"	m	struct:cv::BRISK::BriskShortPair
i	ml/ml.hpp	/^    int* i;$/;"	m	struct:CvPair16u32s
iInput	contrib/contrib.hpp	/^        CvFuzzyFunction iInput, iOutput;$/;"	m	class:CvFuzzyMeanShiftTracker::FuzzyResizer
iOutput	contrib/contrib.hpp	/^        CvFuzzyFunction iInput, iOutput;$/;"	m	class:CvFuzzyMeanShiftTracker::FuzzyResizer
icvSqDist2D32f	legacy/legacy.hpp	/^CV_INLINE double icvSqDist2D32f( CvPoint2D32f pt1, CvPoint2D32f pt2 )$/;"	f
id	contrib/detection_based_tracker.hpp	/^            int id;$/;"	m	struct:DetectionBasedTracker::TrackedObject
id	legacy/legacy.hpp	/^    int id;$/;"	m	struct:Cv3dTracker2dTrackedObject
id	legacy/legacy.hpp	/^    int id;$/;"	m	struct:Cv3dTrackerTrackedObject
identity	gpu/device/functional.hpp	/^        __device__ __forceinline__ identity():unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::identity
identity	gpu/device/functional.hpp	/^        __device__ __forceinline__ identity(const identity& other):unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::identity
identity	gpu/device/functional.hpp	/^    template <typename T> struct identity : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
idx_col	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col(int x) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
idx_col_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_high(int x) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReflect101
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowReplicate
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdRowWrap
idx_col_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_col_low(int x) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdColWrap
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_row	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row(int y) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdColWrap
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_row_high	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_high(int y) const$/;"	f	struct:cv::gpu::device::BrdWrap
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColReflect101
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColReplicate
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdColWrap
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdReflect101
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdReplicate
idx_row_low	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ int idx_row_low(int y) const$/;"	f	struct:cv::gpu::device::BrdWrap
idxoffset	core/types_c.h	/^    int idxoffset;$/;"	m	struct:CvSparseMat
image	core/core_c.h	/^CVAPI(CvRect) cvGetImageROI( const IplImage* image );$/;"	v
image	core/core_c.h	/^CVAPI(IplImage*) cvCloneImage( const IplImage* image );$/;"	v
image	core/core_c.h	/^CVAPI(int)  cvGetImageCOI( const IplImage* image );$/;"	v
image	core/core_c.h	/^CVAPI(void)  cvReleaseImage( IplImage** image );$/;"	v
image	core/core_c.h	/^CVAPI(void)  cvReleaseImageHeader( IplImage** image );$/;"	v
image	core/core_c.h	/^CVAPI(void)  cvResetImageROI( IplImage* image );$/;"	v
image	legacy/legacy.hpp	/^    IplImage* image;$/;"	m	class:CvImage
image	legacy/legacy.hpp	/^    IplImage* image;$/;"	m	struct:cv::BaseKeypoint
imageData	core/types_c.h	/^    char *imageData;        \/* Pointer to aligned image data.         *\/$/;"	m	struct:_IplImage
imageDataOrigin	core/types_c.h	/^    char *imageDataOrigin;  \/* Pointer to very origin of image data$/;"	m	struct:_IplImage
imageHeight	highgui/cap_ios.h	/^@property (nonatomic, assign) int imageHeight;$/;"	v
imageId	core/types_c.h	/^    void  *imageId;                 \/* "           " *\/$/;"	m	struct:_IplImage
imagePyr_	gpu/gpu.hpp	/^    std::vector<GpuMat> imagePyr_;$/;"	m	class:cv::gpu::ORB_GPU
imageSize	core/types_c.h	/^    int  imageSize;         \/* Image data size in bytes$/;"	m	struct:_IplImage
imageWidth	contrib/contrib.hpp	/^        int imageWidth;$/;"	m	class:cv::SpinImageModel
imageWidth	highgui/cap_ios.h	/^@property (nonatomic, assign) int imageWidth;$/;"	v
image_	core/wimage.hpp	/^    IplImage* image_;$/;"	m	class:cv::WImage
image_	stitching/detail/matchers.hpp	/^    gpu::GpuMat image_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
image_block	gpu/gpu.hpp	/^    GpuMat image_block, templ_block, result_data;$/;"	m	struct:cv::gpu::ConvolveBuf
image_scale	ocl/ocl.hpp	/^            oclMat image_scale;$/;"	m	struct:cv::ocl::HOGDescriptor
image_scales	gpu/gpu.hpp	/^    std::vector<GpuMat> image_scales;$/;"	m	struct:cv::gpu::HOGDescriptor
image_spect	gpu/gpu.hpp	/^    GpuMat image_spect, templ_spect, result_spect;$/;"	m	struct:cv::gpu::ConvolveBuf
image_sqsums	gpu/gpu.hpp	/^    std::vector<GpuMat> image_sqsums;$/;"	m	struct:cv::gpu::MatchTemplateBuf
image_sqsums	ocl/ocl.hpp	/^            std::vector<oclMat> image_sqsums;$/;"	m	struct:cv::ocl::MatchTemplateBuf
image_sums	gpu/gpu.hpp	/^    std::vector<GpuMat> image_sums;$/;"	m	struct:cv::gpu::MatchTemplateBuf
image_sums	ocl/ocl.hpp	/^            std::vector<oclMat> image_sums;$/;"	m	struct:cv::ocl::MatchTemplateBuf
imagef	gpu/gpu.hpp	/^    GpuMat imagef, templf;$/;"	m	struct:cv::gpu::MatchTemplateBuf
imagef	ocl/ocl.hpp	/^            oclMat imagef, templf;$/;"	m	struct:cv::ocl::MatchTemplateBuf
images	features2d/features2d.hpp	/^        vector<Mat> images;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
images	gpu/gpu.hpp	/^    std::vector<GpuMat> images;$/;"	m	struct:cv::gpu::MatchTemplateBuf
images	ocl/ocl.hpp	/^            std::vector<oclMat> images;$/;"	m	struct:cv::ocl::MatchTemplateBuf
images_	stitching/detail/seam_finders.hpp	/^    std::vector<Mat> images_;$/;"	m	class:cv::detail::PairwiseSeamFinder
imax	legacy/legacy.hpp	/^    int imax, imin;$/;"	m	struct:CvContourOrientation
img	legacy/legacy.hpp	/^CVAPI(void)  cvDeleteMoire( IplImage*  img );$/;"	v
imgDescriptors	contrib/openfabmap.hpp	/^    vector<Mat> imgDescriptors;$/;"	m	class:cv::of2::ChowLiuTree
imgFilteredFrame	contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgGrayFrame	contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgHSVFrame	contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgHueFrame	contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgIdx	contrib/openfabmap.hpp	/^    int imgIdx;      \/\/test index$/;"	m	struct:cv::of2::IMatch
imgIdx	features2d/features2d.hpp	/^    CV_PROP_RW int imgIdx;   \/\/ train image index$/;"	m	struct:cv::DMatch
imgLastGrayFrame	contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgMotionFrame	contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgSaturationFrame	contrib/contrib.hpp	/^    IplImage *imgHueFrame, *imgSaturationFrame, *imgLastGrayFrame, *imgMotionFrame, *imgFilteredFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgShrinked	contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
imgSize	legacy/legacy.hpp	/^    CvSize  imgSize;$/;"	m	class:CvCalibFilter
imgSize	legacy/legacy.hpp	/^    float   imgSize[2]; \/* size of the camera view, used during calibration *\/$/;"	m	struct:CvCamera
imgTemp	contrib/contrib.hpp	/^    IplImage *imgShrinked, *imgTemp, *imgGrayFrame, *imgHSVFrame;$/;"	m	class:CvAdaptiveSkinDetector
img_idx	stitching/detail/matchers.hpp	/^    int img_idx;$/;"	m	struct:cv::detail::ImageFeatures
img_size	stitching/detail/matchers.hpp	/^    Size img_size;$/;"	m	struct:cv::detail::ImageFeatures
imgs_	stitching/stitcher.hpp	/^    std::vector<cv::Mat> imgs_;$/;"	m	class:cv::Stitcher
imin	legacy/legacy.hpp	/^    int imax, imin;$/;"	m	struct:CvContourOrientation
impl	gpu/gpu.hpp	/^    CascadeClassifierImpl* impl;$/;"	m	class:cv::gpu::CascadeClassifier_GPU
impl	gpu/gpu.hpp	/^    Impl *impl;$/;"	m	class:cv::gpu::Stream
impl	legacy/blobtrack.hpp	/^    class CvObjectDetectorImpl* impl;$/;"	m	class:CvObjectDetector	typeref:class:CvObjectDetector::CvObjectDetectorImpl
impl	ocl/ocl.hpp	/^            Impl *impl;$/;"	m	class:cv::ocl::Context
impl	ocl/ocl.hpp	/^            Impl *impl;$/;"	m	class:cv::ocl::Info
impl	ts/ts_gtest.h	/^  const internal::UnitTestImpl* impl() const { return impl_; }$/;"	f	class:testing::UnitTest
impl	ts/ts_gtest.h	/^  internal::UnitTestImpl* impl() { return impl_; }$/;"	f	class:testing::UnitTest
impl_	core/opengl_interop.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::GlBuffer
impl_	core/opengl_interop.hpp	/^    Ptr<Impl> impl_;$/;"	m	class:cv::GlTexture
impl_	gpu/gpu.hpp	/^    std::auto_ptr<Impl> impl_;$/;"	m	class:cv::gpu::FGDStatModel
impl_	gpu/gpu.hpp	/^    std::auto_ptr<Impl> impl_;$/;"	m	class:cv::gpu::VideoReader_GPU
impl_	gpu/gpu.hpp	/^    std::auto_ptr<Impl> impl_;$/;"	m	class:cv::gpu::VideoWriter_GPU
impl_	stitching/detail/matchers.hpp	/^    Ptr<FeaturesMatcher> impl_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
impl_	stitching/detail/seam_finders.hpp	/^    Ptr<PairwiseSeamFinder> impl_;$/;"	m	class:cv::detail::GraphCutSeamFinder
impl_	ts/ts_gtest.h	/^  internal::UnitTestImpl* impl_;$/;"	m	class:testing::UnitTest
impl_	ts/ts_gtest.h	/^  linked_ptr<const ParamGeneratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamGenerator
impl_	ts/ts_gtest.h	/^  scoped_ptr<ParamIteratorInterface<T> > impl_;$/;"	m	class:testing::internal::ParamIterator
increment_death_test_count	ts/ts_gtest.h	/^  int increment_death_test_count() { return ++death_test_count_; }$/;"	f	class:testing::TestResult
increment_death_test_count	ts/ts_gtest.h	/^  int increment_death_test_count() {$/;"	f	class:testing::TestInfo
ind1	contrib/contrib.hpp	/^        int S, R, M, N, ind1;$/;"	m	class:cv::LogPolar_Overlapping
index	core/core_c.h	/^    int      index;        \/* the lower bound of certainly visited vertices *\/$/;"	m	struct:CvGraphScanner
index	core/operations.hpp	/^template<typename _Tp> inline size_t Seq<_Tp>::index(const _Tp& elem) const$/;"	f	class:cv::Seq
index	flann/miniflann.hpp	/^    void* index;$/;"	m	class:cv::flann::Index
index	gpu/device/scan.hpp	/^        __device__ __forceinline__ unsigned int index(const unsigned int tid)$/;"	f	struct:cv::gpu::device::WarpScan
index	gpu/device/scan.hpp	/^        __device__ __forceinline__ unsigned int index(const unsigned int tid)$/;"	f	struct:cv::gpu::device::WarpScanNoComp
index	ts/ts_gtest.h	/^  int index() const { return index_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
index1	legacy/legacy.hpp	/^    int index1;$/;"	m	struct:CvLCMEdge
index2	legacy/legacy.hpp	/^    int index2;$/;"	m	struct:CvLCMEdge
indexOf	videostab/fast_marching.hpp	/^    int& indexOf(const DXY &dxy) { return index_(dxy.y, dxy.x); }$/;"	f	class:cv::videostab::FastMarchingMethod
indexParams	features2d/features2d.hpp	/^    Ptr<flann::IndexParams> indexParams;$/;"	m	class:cv::FlannBasedMatcher
index_	flann/result_set.h	/^        unsigned int index_;$/;"	m	struct:cvflann::UniqueResultSet::DistIndex
index_	ts/ts_gtest.h	/^    int index_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
index_	ts/ts_gtest.h	/^  int index_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
index_	videostab/fast_marching.hpp	/^    cv::Mat_<int> index_; \/\/ index of point in the narrow band$/;"	m	class:cv::videostab::FastMarchingMethod
index_creator	flann/all_indices.h	/^struct index_creator$/;"	s	namespace:cvflann
index_creator	flann/all_indices.h	/^struct index_creator<False,False,Distance>$/;"	s	namespace:cvflann
index_creator	flann/all_indices.h	/^struct index_creator<False,VectorSpace,Distance>$/;"	s	namespace:cvflann
index_params_	flann/composite_index.h	/^    const IndexParams index_params_;$/;"	m	class:cvflann::CompositeIndex
index_params_	flann/flann_base.hpp	/^    IndexParams index_params_;$/;"	m	class:cvflann::Index
index_params_	flann/kdtree_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KDTreeIndex
index_params_	flann/kdtree_single_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KDTreeSingleIndex
index_params_	flann/kmeans_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::KMeansIndex
index_params_	flann/linear_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::LinearIndex
index_params_	flann/lsh_index.h	/^    IndexParams index_params_;$/;"	m	class:cvflann::LshIndex
index_type	core/cuda_devptrs.hpp	/^            typedef int index_type;$/;"	t	struct:cv::gpu::DevPtr
index_type	flann/saving.h	/^    flann_algorithm_t index_type;$/;"	m	struct:cvflann::IndexHeader
index_type	gpu/device/border_interpolate.hpp	/^        typedef typename Ptr2D::index_type index_type;$/;"	t	struct:cv::gpu::device::BorderReader
index_type	gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::AreaFilter
index_type	gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::CubicFilter
index_type	gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::IntegerAreaFilter
index_type	gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::LinearFilter
index_type	gpu/device/filters.hpp	/^        typedef float index_type;$/;"	t	struct:cv::gpu::device::PointFilter
indices	flann/hierarchical_clustering_index.h	/^        int* indices;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
indices	flann/hierarchical_clustering_index.h	/^    int** indices;$/;"	m	class:cvflann::HierarchicalClusteringIndex
indices	flann/kmeans_index.h	/^        int* indices;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
indices	flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::KNNResultSet
indices	flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::KNNSimpleResultSet
indices	flann/result_set.h	/^    int* indices;$/;"	m	class:cvflann::RadiusResultSet
indices_	flann/kmeans_index.h	/^    int* indices_;$/;"	m	class:cvflann::KMeansIndex
indices_	stitching/stitcher.hpp	/^    std::vector<int> indices_;$/;"	m	class:cv::Stitcher
inf_	videostab/fast_marching.hpp	/^    float inf_;$/;"	m	class:cv::videostab::FastMarchingMethod
infinity	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type infinity() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
info	contrib/openfabmap.hpp	/^        double info;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
info	contrib/openfabmap.hpp	/^    typedef struct info {$/;"	s	class:cv::of2::ChowLiuTree
info	contrib/openfabmap.hpp	/^    } info;$/;"	t	class:cv::of2::ChowLiuTree	typeref:struct:cv::of2::ChowLiuTree::info
info	core/core_c.h	/^    CvModuleInfo* info;$/;"	m	struct:CvModule
info	core/core_c.h	/^    CvTypeInfo* info;$/;"	m	struct:CvType
info	core/core_c.h	/^CVAPI(void) cvRegisterType( const CvTypeInfo* info );$/;"	v
info	core/types_c.h	/^    struct CvTypeInfo* info; \/* type information$/;"	m	struct:CvFileNode	typeref:struct:CvFileNode::CvTypeInfo
init	flann/random.h	/^    void init(int n)$/;"	f	class:cvflann::UniqueRandom
init	flann/result_set.h	/^    void init()$/;"	f	class:cvflann::RadiusResultSet
init	flann/result_set.h	/^    void init(int* indices_, DistanceType* dists_)$/;"	f	class:cvflann::KNNResultSet
init	flann/result_set.h	/^    void init(int* indices_, DistanceType* dists_)$/;"	f	class:cvflann::KNNSimpleResultSet
init	gpu/device/scan.hpp	/^        __device__ __forceinline__ void init(volatile T *ptr)$/;"	f	struct:cv::gpu::device::WarpScanNoComp
init	gpu/device/scan.hpp	/^        __device__ __forceinline__ void init(volatile T *ptr){}$/;"	f	struct:cv::gpu::device::WarpScan
initEmpty	core/mat.hpp	/^inline void Mat::initEmpty()$/;"	f	class:cv::Mat
initFeatureScale	features2d/features2d.hpp	/^    double initFeatureScale;$/;"	m	class:cv::DenseFeatureDetector
initImgBound	features2d/features2d.hpp	/^    int initImgBound;$/;"	m	class:cv::DenseFeatureDetector
initXyStep	features2d/features2d.hpp	/^    int initXyStep;$/;"	m	class:cv::DenseFeatureDetector
init_thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
init_thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
init_thresh_	features2d/features2d.hpp	/^    int init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::FastAdjuster
initialize	flann/lsh_table.h	/^    void initialize(size_t key_size)$/;"	f	class:cvflann::lsh::LshTable
initializeMask	objdetect/objdetect.hpp	/^        virtual void initializeMask(const cv::Mat& \/*src*\/) {};$/;"	f	class:cv::CascadeClassifier::MaskGenerator
inliers_mask	stitching/detail/matchers.hpp	/^    std::vector<uchar> inliers_mask;    \/\/ Geometrically consistent matches mask$/;"	m	struct:cv::detail::MatchesInfo
innerParameters	contrib/detection_based_tracker.hpp	/^        InnerParameters innerParameters;$/;"	m	class:DetectionBasedTracker
inner_iterations	gpu/gpu.hpp	/^    int inner_iterations;$/;"	m	class:cv::gpu::BroxOpticalFlow
inpaint	videostab/inpainting.hpp	/^    virtual void inpaint(int \/*idx*\/, Mat &\/*frame*\/, Mat &\/*mask*\/) {}$/;"	f	class:cv::videostab::NullInpainter
inpainter	videostab/stabilizer.hpp	/^    Ptr<InpainterBase> inpainter() const { return inpainter_; }$/;"	f	class:cv::videostab::StabilizerBase
inpainter_	videostab/stabilizer.hpp	/^    Ptr<InpainterBase> inpainter_;$/;"	m	class:cv::videostab::StabilizerBase
inpainters_	videostab/inpainting.hpp	/^    std::vector<Ptr<InpainterBase> > inpainters_;$/;"	m	class:cv::videostab::InpaintingPipeline
inpaintingMask_	videostab/stabilizer.hpp	/^    Mat inpaintingMask_;$/;"	m	class:cv::videostab::StabilizerBase
inputData	ts/ts_perf.hpp	/^    SizeVector inputData;$/;"	m	class:perf::TestBase
insert	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::insert(int idx, const _Tp& elem)$/;"	f	class:cv::Seq
insert	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::insert(int idx, const _Tp* elems, size_t count)$/;"	f	class:cv::Seq
insert	flann/heap.h	/^    void insert(T value)$/;"	f	class:cvflann::Heap
inside	core/operations.hpp	/^template<typename _Tp> inline bool Point_<_Tp>::inside( const Rect_<_Tp>& r ) const$/;"	f	class:cv::Point_
instance	flann/logger.h	/^    static Logger& instance()$/;"	f	class:cvflann::Logger
instance	flann/object_factory.h	/^    static ThisClass& instance()$/;"	f	class:cvflann::ObjectFactory
instantiations_	ts/ts_gtest.h	/^  InstantiationContainer instantiations_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
int64	core/types_c.h	/^   typedef __int64 int64;$/;"	t
int64	core/types_c.h	/^   typedef int64_t int64;$/;"	t
intBuffer	gpu/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
intBuffer	ocl/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
interactionRadius	legacy/legacy.hpp	/^    int interactionRadius;$/;"	m	struct:CvStereoGCState
internal	ts/ts_gtest.h	/^namespace internal {$/;"	n	namespace:testing
internal2	ts/ts_gtest.h	/^namespace internal2 {$/;"	n	namespace:testing
interp	contrib/contrib.hpp	/^        int interp;$/;"	m	class:cv::LogPolar_Interp
inv	core/operations.hpp	/^Matx<_Tp, n, m> Matx<_Tp, m, n>::inv(int method) const$/;"	f	class:cv::Matx
invCovsEigenValues	ml/ml.hpp	/^    vector<Mat> invCovsEigenValues;$/;"	m	class:cv::EM
invMask_	videostab/inpainting.hpp	/^    Mat invMask_;$/;"	m	class:cv::videostab::ColorInpainter
inv_V_star	contrib/contrib.hpp	/^        CvMat** inv_V_star; \/\/inverse of V*$/;"	m	class:cv::LevMarqSparse
inv_eigen_values	ml/ml.hpp	/^    CvMat** inv_eigen_values;$/;"	m	class:CvNormalBayesClassifier
inv_sqrt_m00	imgproc/types_c.h	/^    double  inv_sqrt_m00; \/* m00 != 0 ? 1\/sqrt(m00) : 0 *\/$/;"	m	struct:CvMoments
inv_var	legacy/legacy.hpp	/^    float* inv_var;     \/* square root of inversed variances corresp. to each mixture*\/$/;"	m	struct:CvEHMMState
inversed	ml/ml.hpp	/^    int inversed;$/;"	m	struct:CvDTreeSplit
iplHeight	legacy/legacy.hpp	/^CV_INLINE int iplHeight( const IplImage* img )$/;"	f
iplWidth	legacy/legacy.hpp	/^CV_INLINE int iplWidth( const IplImage* img )$/;"	f
iplimage_allowed	ts/ts.hpp	/^    bool iplimage_allowed;$/;"	m	class:cvtest::ArrayTest
ippiSize	core/internal.hpp	/^CV_INLINE IppiSize ippiSize(int width, int height)$/;"	f
isAligned	gpu/device/common.hpp	/^    static inline bool isAligned(size_t step, size_t size)$/;"	f	namespace:cv::gpu
isAligned	gpu/device/common.hpp	/^    template <typename T> static inline bool isAligned(const T* ptr, size_t size)$/;"	f	namespace:cv::gpu
isArith	gpu/device/type_traits.hpp	/^        enum { isArith          = isIntegral || isFloat };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon94
isCalibrated	legacy/legacy.hpp	/^    bool    isCalibrated;$/;"	m	class:CvCalibFilter
isConst	gpu/device/type_traits.hpp	/^        enum { isConst          = type_traits_detail::UnConst<T>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon86
isContinuous	core/gpumat.hpp	/^    inline bool GpuMat::isContinuous() const$/;"	f	class:cv::gpu::GpuMat
isContinuous	core/mat.hpp	/^inline bool Mat::isContinuous() const { return (flags & CONTINUOUS_FLAG) != 0; }$/;"	f	class:cv::Mat
isContinuous	ocl/matrix_operations.hpp	/^        inline bool oclMat::isContinuous() const$/;"	f	class:cv::ocl::oclMat
isDeviceArch11_	gpu/gpu.hpp	/^    bool isDeviceArch11_;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
isDeviceArch11_	gpu/gpu.hpp	/^    bool isDeviceArch11_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
isDeviceArch11_	ocl/ocl.hpp	/^            bool isDeviceArch11_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
isFloat	gpu/device/type_traits.hpp	/^        enum { isFloat          = type_traits_detail::IsFloat<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon93
isInstance	core/operations.hpp	/^    static int isInstance(const void* ptr)$/;"	f	struct:cv::RTTIImpl
isInt	core/operations.hpp	/^inline bool FileNode::isInt() const { return type() == INT; }$/;"	f	class:cv::FileNode
isIntegral	gpu/device/type_traits.hpp	/^        enum { isIntegral       = type_traits_detail::IsIntegral<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon92
isLeaf	contrib/contrib.hpp	/^            bool isLeaf;$/;"	m	struct:cv::Octree::Node
isMap	core/operations.hpp	/^inline bool FileNode::isMap() const { return type() == MAP; }$/;"	f	class:cv::FileNode
isMaskSupported	features2d/features2d.hpp	/^    virtual bool isMaskSupported() const { return true; }$/;"	f	class:cv::BFMatcher
isNamed	core/operations.hpp	/^inline bool FileNode::isNamed() const { return !node ? false : (node->tag & NAMED) != 0; }$/;"	f	class:cv::FileNode
isNone	core/operations.hpp	/^inline bool FileNode::isNone() const { return type() == NONE; }$/;"	f	class:cv::FileNode
isPointer	gpu/device/type_traits.hpp	/^        enum { isPointer        = type_traits_detail::PointerTraits<typename type_traits_detail::ReferenceTraits<UnqualifiedType>::type>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon89
isPrePassDone_	videostab/stabilizer.hpp	/^    bool isPrePassDone_;$/;"	m	class:cv::videostab::TwoPassStabilizer
isReal	core/operations.hpp	/^inline bool FileNode::isReal() const { return type() == REAL; }$/;"	f	class:cv::FileNode
isReal	core/operations.hpp	/^template<typename _Tp> inline bool Scalar_<_Tp>::isReal() const$/;"	f	class:cv::Scalar_
isReference	gpu/device/type_traits.hpp	/^        enum { isReference      = type_traits_detail::ReferenceTraits<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon88
isSeparable	imgproc/imgproc.hpp	/^    bool isSeparable() const { return (const BaseFilter*)filter2D == 0; }$/;"	f	class:cv::FilterEngine
isSeq	core/operations.hpp	/^inline bool FileNode::isSeq() const { return type() == SEQ; }$/;"	f	class:cv::FileNode
isSignedInt	gpu/device/type_traits.hpp	/^        enum { isSignedInt      = type_traits_detail::IsSignedIntergral<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon91
isString	core/operations.hpp	/^inline bool FileNode::isString() const { return type() == STR; }$/;"	f	class:cv::FileNode
isStumpBased	objdetect/objdetect.hpp	/^        bool isStumpBased;$/;"	m	class:cv::CascadeClassifier::Data
isSubmatrix	core/mat.hpp	/^inline bool Mat::isSubmatrix() const { return (flags & SUBMATRIX_FLAG) != 0; }$/;"	f	class:cv::Mat
isThreadSafe	stitching/detail/matchers.hpp	/^    bool isThreadSafe() const { return is_thread_safe_; }$/;"	f	class:cv::detail::FeaturesMatcher
isUnsignedInt	gpu/device/type_traits.hpp	/^        enum { isUnsignedInt    = type_traits_detail::IsUnsignedIntegral<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon90
isVec	gpu/device/type_traits.hpp	/^        enum { isVec            = type_traits_detail::IsVec<UnqualifiedType>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon95
isVolatile	gpu/device/type_traits.hpp	/^        enum { isVolatile       = type_traits_detail::UnVolatile<T>::value };$/;"	e	enum:cv::gpu::device::TypeTraits::__anon87
is_buf_16u	ml/ml.hpp	/^    int is_buf_16u;$/;"	m	struct:CvDTreeTrainData
is_classifier	ml/ml.hpp	/^    bool is_classifier;$/;"	m	struct:CvDTreeTrainData
is_disabled_	ts/ts_gtest.h	/^  bool is_disabled_;                \/\/ True iff this test is disabled$/;"	m	class:testing::TestInfo
is_focals_estimated_	stitching/detail/motion_estimators.hpp	/^    bool is_focals_estimated_;$/;"	m	class:cv::detail::HomographyBasedEstimator
is_full_	flann/result_set.h	/^    bool is_full_;$/;"	m	class:cvflann::UniqueResultSet
is_instance	core/types_c.h	/^    CvIsInstanceFunc is_instance;$/;"	m	struct:CvTypeInfo
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::Hamming
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::Hamming2
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::HammingLUT
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::HammingLUT2
is_kdtree_distance	flann/dist.h	/^    typedef False is_kdtree_distance;$/;"	t	struct:cvflann::MaxDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::ChiSquareDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::HellingerDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::HistIntersectionDistance
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::KL_Divergence
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L1
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L2
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::L2_Simple
is_kdtree_distance	flann/dist.h	/^    typedef True is_kdtree_distance;$/;"	t	struct:cvflann::MinkowskiDistance
is_nan	ts/ts_gtest.h	/^  bool is_nan() const {$/;"	f	class:testing::internal::FloatingPoint
is_obj_without_holes	gpu/gpu.hpp	/^        bool is_obj_without_holes; \/\/ If TRUE we ignore holes within foreground blobs. Defaults to TRUE.$/;"	m	struct:cv::gpu::FGDStatModel::Params
is_obj_without_holes	legacy/legacy.hpp	/^    int    is_obj_without_holes;\/* If TRUE we ignore holes within foreground blobs. Defaults to TRUE.						*\/$/;"	m	struct:CvFGDStatModelParams
is_pointer	ts/ts_gtest.h	/^struct is_pointer : public false_type {};$/;"	s	namespace:std::tr1
is_pointer	ts/ts_gtest.h	/^struct is_pointer<T*> : public true_type {};$/;"	s	namespace:std::tr1
is_signed	gpu/device/limits.hpp	/^        static const bool is_signed = (char)-1 == -1;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	gpu/device/limits.hpp	/^        static const bool is_signed = (signed char)-1 == -1;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	gpu/device/limits.hpp	/^        static const bool is_signed = false;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	gpu/device/limits.hpp	/^        static const bool is_signed = true;$/;"	m	struct:cv::gpu::device::numeric_limits
is_signed	gpu/device/limits.hpp	/^        static const bool is_signed;$/;"	m	struct:cv::gpu::device::numeric_limits
is_thread_safe_	stitching/detail/matchers.hpp	/^    bool is_thread_safe_;$/;"	m	class:cv::detail::FeaturesMatcher
is_trained_dyn_model	legacy/legacy.hpp	/^    uchar                 is_trained_dyn_model;$/;"	m	struct:CvBGPixelStat
is_trained_st_model	legacy/legacy.hpp	/^    uchar                 is_trained_st_model;$/;"	m	struct:CvBGPixelStat
is_valid	legacy/legacy.hpp	/^    bool is_valid() { return image != 0; }$/;"	f	class:CvImage
is_valid	legacy/legacy.hpp	/^    bool is_valid() { return matrix != 0; }$/;"	f	class:CvMatrix
is_valid_	ts/ts_gtest.h	/^  bool is_valid_;$/;"	m	class:std::tr1::RE
is_vector_space_distance	flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::Hamming
is_vector_space_distance	flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::Hamming2
is_vector_space_distance	flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::HammingLUT
is_vector_space_distance	flann/dist.h	/^    typedef False is_vector_space_distance;$/;"	t	struct:cvflann::HammingLUT2
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::ChiSquareDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::HellingerDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::HistIntersectionDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::KL_Divergence
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L1
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L2
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::L2_Simple
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::MaxDistance
is_vector_space_distance	flann/dist.h	/^    typedef True is_vector_space_distance;$/;"	t	struct:cvflann::MinkowskiDistance
it	core/operations.hpp	/^    FileNodeIterator* it;$/;"	m	class:cv::VecReaderProxy
iterationsLimitDefault	ts/ts_perf.hpp	/^    static unsigned int iterationsLimitDefault;$/;"	m	class:perf::TestBase
iterations_	flann/kmeans_index.h	/^    int iterations_;$/;"	m	class:cvflann::KMeansIndex
iterator	core/operations.hpp	/^    typedef _Tp* iterator;$/;"	t	class:cv::Vector
iterator	ts/ts_gtest.h	/^  typedef Element* iterator;$/;"	t	class:testing::internal::NativeArray
iterator	ts/ts_gtest.h	/^  typedef ParamIterator<T> iterator;$/;"	t	class:testing::internal::ParamGenerator
iterator_	ts/ts_gtest.h	/^    typename ContainerType::const_iterator iterator_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
iters	calib3d/calib3d.hpp	/^    int iters;$/;"	m	class:CvLevMarq
iters	contrib/contrib.hpp	/^        int iters;$/;"	m	class:cv::LevMarqSparse
iters	gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::DisparityBilateralFilter
iters	gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
iters	gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::StereoBeliefPropagation
iters	gpu/gpu.hpp	/^    int iters;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
iters	ocl/ocl.hpp	/^            int iters;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
ittr	contrib/hybridtracker.hpp	/^    int ittr;$/;"	m	class:cv::CvFeatureTracker
ittr	contrib/hybridtracker.hpp	/^    int ittr;$/;"	m	class:cv::CvHybridTracker
j	features2d/features2d.hpp	/^        uchar j; \/\/ index of the second point$/;"	m	struct:cv::FREAK::DescriptionPair
j	features2d/features2d.hpp	/^        uchar j; \/\/ index of the second point$/;"	m	struct:cv::FREAK::OrientationPair
j	features2d/features2d.hpp	/^        unsigned int j;  \/\/ index of other pattern point$/;"	m	struct:cv::BRISK::BriskLongPair
j	features2d/features2d.hpp	/^        unsigned int j;  \/\/ index of other pattern point$/;"	m	struct:cv::BRISK::BriskShortPair
join_new	ts/ts_gtest.h	/^  void join_new() {$/;"	f	class:testing::internal::linked_ptr_internal
k	features2d/features2d.hpp	/^    double k;$/;"	m	class:cv::GFTTDetector
k	legacy/legacy.hpp	/^    int k; \/\/stack size$/;"	m	struct:CvCliqueFinder
k	stitching/detail/warpers.hpp	/^    float k[9];$/;"	m	struct:cv::detail::ProjectorBase
kArray	flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kBitCount	ts/ts_gtest.h	/^  static const size_t kBitCount = 8*sizeof(RawType);$/;"	m	class:testing::internal::FloatingPoint
kBitsetHash	flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kBytes	features2d/features2d.hpp	/^    enum { kBytes = 32, HARRIS_SCORE=0, FAST_SCORE=1 };$/;"	e	enum:cv::ORB::__anon234
kBytes	gpu/gpu.hpp	/^    enum { kBytes = 32 };$/;"	e	enum:cv::gpu::ORB_GPU::__anon75
kChannels	core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageBufferC::__anon200
kChannels	core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageC::__anon199
kChannels	core/wimage.hpp	/^    enum { kChannels = C };$/;"	e	enum:cv::WImageViewC::__anon201
kConvertibleToInteger	ts/ts_gtest.h	/^  kConvertibleToInteger,  \/\/ a type implicitly convertible to BiggestInt$/;"	e	enum:testing::internal2::TypeKind
kCopy	ts/ts_gtest.h	/^  kCopy        \/\/ The NativeArray makes a copy of the native array and$/;"	e	enum:testing::internal::RelationToSource
kDeathTestStyleFlag	ts/ts_gtest.h	/^const char kDeathTestStyleFlag[] = "death_test_style";$/;"	m	namespace:testing::internal
kDeathTestUseFork	ts/ts_gtest.h	/^const char kDeathTestUseFork[] = "death_test_use_fork";$/;"	m	namespace:testing::internal
kExponentBitCount	ts/ts_gtest.h	/^  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;$/;"	m	class:testing::internal::FloatingPoint
kExponentBitMask	ts/ts_gtest.h	/^  static const Bits kExponentBitMask = ~(kSignBitMask | kFractionBitMask);$/;"	m	class:testing::internal::FloatingPoint
kFatalFailure	ts/ts_gtest.h	/^    kFatalFailure      \/\/ Failed and the test should be terminated.$/;"	e	enum:testing::TestPartResult::Type
kFractionBitCount	ts/ts_gtest.h	/^  static const size_t kFractionBitCount =$/;"	m	class:testing::internal::FloatingPoint
kFractionBitMask	ts/ts_gtest.h	/^  static const Bits kFractionBitMask =$/;"	m	class:testing::internal::FloatingPoint
kHash	flann/lsh_table.h	/^        kArray, kBitsetHash, kHash$/;"	e	enum:cvflann::lsh::LshTable::SpeedLevel
kInternalRunDeathTestFlag	ts/ts_gtest.h	/^const char kInternalRunDeathTestFlag[] = "internal_run_death_test";$/;"	m	namespace:testing::internal
kMaxBiggestInt	ts/ts_gtest.h	/^const BiggestInt kMaxBiggestInt =$/;"	m	namespace:std::tr1
kMaxRange	ts/ts_gtest.h	/^  static const UInt32 kMaxRange = 1u << 31;$/;"	m	class:testing::internal::Random
kMaxStackTraceDepth	ts/ts_gtest.h	/^const int kMaxStackTraceDepth = 100;$/;"	m	namespace:testing
kMaxUlps	ts/ts_gtest.h	/^  static const size_t kMaxUlps = 4;$/;"	m	class:testing::internal::FloatingPoint
kNonFatalFailure	ts/ts_gtest.h	/^    kNonFatalFailure,  \/\/ Failed but the test can continue.$/;"	e	enum:testing::TestPartResult::Type
kOtherType	ts/ts_gtest.h	/^  kOtherType              \/\/ anything else$/;"	e	enum:testing::internal2::TypeKind
kProtobuf	ts/ts_gtest.h	/^  kProtobuf,              \/\/ a protobuf type$/;"	e	enum:testing::internal2::TypeKind
kProtobufOneLinerMaxLength	ts/ts_gtest.h	/^const size_t kProtobufOneLinerMaxLength = 50;$/;"	m	namespace:testing::internal2
kReference	ts/ts_gtest.h	/^  kReference,  \/\/ The NativeArray references the native array.$/;"	e	enum:testing::internal::RelationToSource
kSignBitMask	ts/ts_gtest.h	/^  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);$/;"	m	class:testing::internal::FloatingPoint
kSuccess	ts/ts_gtest.h	/^    kSuccess,          \/\/ Succeeded.$/;"	e	enum:testing::TestPartResult::Type
k_rinv	stitching/detail/warpers.hpp	/^    float k_rinv[9];$/;"	m	struct:cv::detail::ProjectorBase
kalman	video/tracking.hpp	/^CVAPI(void)  cvReleaseKalman( CvKalman** kalman);$/;"	v
kdtree_index_	flann/composite_index.h	/^    KDTreeIndex<Distance>* kdtree_index_;$/;"	m	class:cvflann::CompositeIndex
keep_floats_	legacy/legacy.hpp	/^    bool keep_floats_;$/;"	m	class:cv::RTreeClassifier
kernel	contrib/contrib.hpp	/^            kernel() { w = 0; }$/;"	f	struct:cv::LogPolar_Overlapping::kernel
kernel	contrib/contrib.hpp	/^        struct kernel$/;"	s	class:cv::LogPolar_Overlapping
kernel	contrib/contrib.hpp	/^    SearchWindow kernel;$/;"	m	class:CvFuzzyMeanShiftTracker
kernel	ml/ml.hpp	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVM
kernel	ml/ml.hpp	/^    CvSVMKernel* kernel;$/;"	m	class:CvSVMSolver
kernel_type	ml/ml.hpp	/^    CV_PROP_RW int         kernel_type;$/;"	m	struct:CvSVMParams
key	ts/ts_gtest.h	/^  const char* key() const {$/;"	f	class:testing::TestProperty
keyPointsCount_	gpu/gpu.hpp	/^    std::vector<int> keyPointsCount_;$/;"	m	class:cv::gpu::ORB_GPU
keyPointsPyr_	gpu/gpu.hpp	/^    std::vector<GpuMat> keyPointsPyr_;$/;"	m	class:cv::gpu::ORB_GPU
key_	ts/ts_gtest.h	/^  const pthread_key_t key_;$/;"	m	class:std::tr1::ThreadLocal
key_	ts/ts_gtest.h	/^  internal::String key_;$/;"	m	class:testing::TestProperty
key_bitset_	flann/lsh_table.h	/^    DynamicBitset key_bitset_;$/;"	m	class:cvflann::lsh::LshTable
key_size_	flann/lsh_index.h	/^    unsigned int key_size_;$/;"	m	class:cvflann::LshIndex
key_size_	flann/lsh_table.h	/^    unsigned int key_size_;$/;"	m	class:cvflann::lsh::LshTable
keypoints	features2d/features2d.hpp	/^        vector<vector<KeyPoint> > keypoints;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
keypoints	stitching/detail/matchers.hpp	/^    std::vector<KeyPoint> keypoints;$/;"	m	struct:cv::detail::ImageFeatures
keypointsPrev_	videostab/global_motion.hpp	/^    std::vector<KeyPoint> keypointsPrev_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
keypointsRatio	gpu/gpu.hpp	/^    double keypointsRatio;$/;"	m	class:cv::gpu::FAST_GPU
keypointsRatio	gpu/gpu.hpp	/^    float keypointsRatio;$/;"	m	class:cv::gpu::SURF_GPU
keypointsRatio	ocl/ocl.hpp	/^            float keypointsRatio;$/;"	m	class:cv::ocl::SURF_OCL
keypoints_	stitching/detail/matchers.hpp	/^    gpu::GpuMat keypoints_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
kmeans_index_	flann/composite_index.h	/^    KMeansIndex<Distance>* kmeans_index_;$/;"	m	class:cvflann::CompositeIndex
knnSearch	flann/flann.hpp	/^void GenericIndex<Distance>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
knnSearch	flann/flann.hpp	/^void GenericIndex<Distance>::knnSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
knnSearch	flann/flann.hpp	/^void Index_<T>::knnSearch(const Mat& queries, Mat& indices, Mat& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
knnSearch	flann/flann.hpp	/^void Index_<T>::knnSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, int knn, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
knnSearch	flann/flann_base.hpp	/^    void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::Index
knnSearch	flann/kdtree_single_index.h	/^    void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::KDTreeSingleIndex
knnSearch	flann/lsh_index.h	/^    virtual void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::LshIndex
knnSearch	flann/nn_index.h	/^    virtual void knnSearch(const Matrix<ElementType>& queries, Matrix<int>& indices, Matrix<DistanceType>& dists, int knn, const SearchParams& params)$/;"	f	class:cvflann::NNIndex
kpLoc_	gpu/gpu.hpp	/^    GpuMat kpLoc_;$/;"	m	class:cv::gpu::FAST_GPU
ksize	gpu/gpu.hpp	/^    Size ksize;$/;"	m	class:cv::gpu::BaseFilter_GPU
ksize	gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseColumnFilter_GPU
ksize	gpu/gpu.hpp	/^    int ksize, anchor;$/;"	m	class:cv::gpu::BaseRowFilter_GPU
ksize	imgproc/imgproc.hpp	/^    Size ksize;$/;"	m	class:cv::BaseFilter
ksize	imgproc/imgproc.hpp	/^    Size ksize;$/;"	m	class:cv::FilterEngine
ksize	imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseColumnFilter
ksize	imgproc/imgproc.hpp	/^    int ksize, anchor;$/;"	m	class:cv::BaseRowFilter
ksize	ocl/ocl.hpp	/^            Size ksize;$/;"	m	class:cv::ocl::BaseFilter_GPU
ksize	ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseColumnFilter_GPU
ksize	ocl/ocl.hpp	/^            int ksize, anchor, bordertype;$/;"	m	class:cv::ocl::BaseRowFilter_GPU
l	gpu/gpu.hpp	/^    GpuMat lab, l, ab;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
l	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
l	objdetect/objdetect.hpp	/^    int l;$/;"	m	struct:CvLSVMFilterPosition
l2	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
lab	gpu/gpu.hpp	/^    GpuMat lab, l, ab;$/;"	m	class:cv::gpu::FastNonLocalMeansDenoising
label	objdetect/objdetect.hpp	/^  int label; \/\/\/< Quantization$/;"	m	struct:cv::linemod::Feature
labels	contrib/hybridtracker.hpp	/^    CvMat* labels;$/;"	m	class:cv::CvHybridTracker
labels	gpu/gpu.hpp	/^    GpuMat labels, labels_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
labels	ocl/ocl.hpp	/^            oclMat labels;$/;"	m	struct:cv::ocl::HOGDescriptor
labels_	stitching/detail/seam_finders.hpp	/^    Mat_<int> labels_;$/;"	m	class:cv::detail::DpSeamFinder
labels_buf	gpu/gpu.hpp	/^    GpuMat labels, labels_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
labels_host	gpu/gpu.hpp	/^    Mat labels_host;$/;"	m	struct:cv::gpu::HOGDescriptor
labels_host	ocl/ocl.hpp	/^            Mat labels_host;$/;"	m	struct:cv::ocl::HOGDescriptor
lambda	contrib/contrib.hpp	/^        CV_PROP_RW float    lambda;$/;"	m	class:cv::StereoVar
lambda	contrib/contrib.hpp	/^        double lambda;$/;"	m	class:cv::LevMarqSparse
lambda	contrib/contrib.hpp	/^        float lambda;$/;"	m	class:cv::SpinImageModel
lambda	legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
lambda1	legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
lambda1	legacy/legacy.hpp	/^    float lambda1;$/;"	m	class:cv::CvAffinePose
lambda2	legacy/legacy.hpp	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState
lambda2	legacy/legacy.hpp	/^    float lambda2;$/;"	m	class:cv::CvAffinePose
lambdaLg10	calib3d/calib3d.hpp	/^    int lambdaLg10;$/;"	m	class:CvLevMarq
lambdaMax	legacy/legacy.hpp	/^    double lambdaMin, lambdaMax;$/;"	m	class:cv::PatchGenerator
lambdaMin	legacy/legacy.hpp	/^    double lambdaMin, lambdaMax;$/;"	m	class:cv::PatchGenerator
laneId	gpu/device/warp.hpp	/^        static __device__ __forceinline__ unsigned int laneId()$/;"	f	struct:cv::gpu::device::Warp
laplacian	legacy/compat.hpp	/^    int          laplacian;$/;"	m	struct:CvSURFPoint
largeSize	contrib/contrib.hpp	/^        int largeSize;$/;"	m	class:cv::SelfSimDescriptor
last	core/core_c.h	/^    static CvModuleInfo* last;$/;"	m	struct:CvModule
last	core/core_c.h	/^    static CvTypeInfo* last;$/;"	m	struct:CvType
lastPositions	contrib/detection_based_tracker.hpp	/^            PositionsVector lastPositions;$/;"	m	struct:DetectionBasedTracker::TrackedObject
lastTime	ts/ts_perf.hpp	/^    int64 lastTime;$/;"	m	class:perf::TestBase
last_col	gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdReflect
last_col	gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdReflect101
last_col	gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdReplicate
last_col	gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdRowReflect
last_col	gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdRowReflect101
last_col	gpu/device/border_interpolate.hpp	/^        const int last_col;$/;"	m	struct:cv::gpu::device::BrdRowReplicate
last_death_test_message_	ts/ts_gtest.h	/^  static String last_death_test_message_;$/;"	m	class:testing::internal::DeathTest
last_row	gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdColReflect
last_row	gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdColReflect101
last_row	gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdColReplicate
last_row	gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdReflect
last_row	gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdReflect101
last_row	gpu/device/border_interpolate.hpp	/^        const int last_row;$/;"	m	struct:cv::gpu::device::BrdReplicate
latestCounts	legacy/legacy.hpp	/^    int     latestCounts[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
latestPoints	legacy/legacy.hpp	/^    CvPoint2D32f* latestPoints[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
layer0_	gpu/gpu.hpp	/^    GpuMat layer0_;$/;"	m	class:cv::gpu::ImagePyramid
layer_sizes	ml/ml.hpp	/^    CvMat* layer_sizes;$/;"	m	class:CvANN_MLP
ldetector	legacy/legacy.hpp	/^    LDetector ldetector;$/;"	m	class:cv::PlanarObjectDetector
ldh	contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ldw	contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ldx	contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
ldy	contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
leBuf	gpu/gpu.hpp	/^    GpuMat minSSD, leBuf, riBuf;$/;"	m	class:cv::gpu::StereoBM_GPU
leaf_counts_	legacy/legacy.hpp	/^    vector<int> leaf_counts_;$/;"	m	class:cv::RandomizedTree
leaf_max_size_	flann/kdtree_single_index.h	/^    int leaf_max_size_;$/;"	m	class:cvflann::KDTreeSingleIndex
leaf_size_	flann/hierarchical_clustering_index.h	/^    int leaf_size_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
learnMax	legacy/legacy.hpp	/^    uchar learnMax[3];$/;"	m	struct:CvBGCodeBookElem
learnMin	legacy/legacy.hpp	/^    uchar learnMin[3];$/;"	m	struct:CvBGCodeBookElem
learningRate	gpu/gpu.hpp	/^    float learningRate;$/;"	m	class:cv::gpu::GMG_GPU
learningRate	video/background_segm.hpp	/^    double  learningRate;$/;"	m	class:cv::BackgroundSubtractorGMG
leaves	objdetect/objdetect.hpp	/^        vector<float> leaves;$/;"	m	class:cv::CascadeClassifier::Data
leavesPerStruct	legacy/legacy.hpp	/^    int leavesPerStruct;$/;"	m	class:cv::FernClassifier
left	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
left	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
left	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
left	flann/kdtree_single_index.h	/^        int left, right;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
left	legacy/legacy.hpp	/^    CvMat* left;$/;"	m	struct:CvStereoGCState
left	ml/ml.hpp	/^    CvDTreeNode* left;$/;"	m	struct:CvDTreeNode
left	objdetect/objdetect.hpp	/^            int left;$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
left	objdetect/objdetect.hpp	/^    int* left;$/;"	m	struct:CvHaarClassifier
left_	core/opengl_interop.hpp	/^    double left_;$/;"	m	class:cv::GlCamera
len	core/types_c.h	/^    int len;$/;"	m	struct:CvString
len1	legacy/blobtrack.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos
len2	legacy/blobtrack.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos
length	flann/heap.h	/^    int length;$/;"	m	class:cvflann::Heap
length	ts/ts_gtest.h	/^  size_t length() const { return length_; }$/;"	f	class:testing::internal::String
length_	ts/ts_gtest.h	/^  size_t length_;$/;"	m	class:testing::internal::String
less	gpu/device/functional.hpp	/^        __device__ __forceinline__ less():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less
less	gpu/device/functional.hpp	/^        __device__ __forceinline__ less(const less& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less
less	gpu/device/functional.hpp	/^    template <typename T> struct less : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
less_equal	gpu/device/functional.hpp	/^        __device__ __forceinline__ less_equal():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less_equal
less_equal	gpu/device/functional.hpp	/^        __device__ __forceinline__ less_equal(const less_equal& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::less_equal
less_equal	gpu/device/functional.hpp	/^    template <typename T> struct less_equal : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
level	core/core_c.h	/^    int level;$/;"	m	struct:CvTreeNodeIterator
level	flann/hierarchical_clustering_index.h	/^        int level;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
level	flann/kmeans_index.h	/^        int level;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
level	legacy/legacy.hpp	/^    int level; \/* 0 - lowest(i.e its states are real states), ..... *\/$/;"	m	struct:CvEHMM
levels	contrib/contrib.hpp	/^        CV_PROP_RW int      levels;$/;"	m	class:cv::StereoVar
levels	gpu/gpu.hpp	/^    int levels;$/;"	m	class:cv::gpu::StereoBeliefPropagation
levels	gpu/gpu.hpp	/^    int levels;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
likelihood	contrib/openfabmap.hpp	/^    double likelihood;  \/\/raw loglikelihood$/;"	m	struct:cv::of2::IMatch
line	core/core.hpp	/^    int line; \/\/\/< line number in the source file where the error has occured$/;"	m	class:cv::Exception
line	ts/ts_gtest.h	/^    int                const line;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
line	ts/ts_gtest.h	/^  int line() const { return line_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
lineCoeffs	legacy/legacy.hpp	/^    CvStereoLineCoeff* lineCoeffs;$/;"	m	struct:CvStereoCamera
lineThresholdBinarized	features2d/features2d.hpp	/^    int lineThresholdBinarized;$/;"	m	class:cv::StarDetector
lineThresholdBinarized	legacy/compat.hpp	/^    int lineThresholdBinarized;$/;"	m	struct:CvStarDetectorParams
lineThresholdProjected	features2d/features2d.hpp	/^    int lineThresholdProjected;$/;"	m	class:cv::StarDetector
lineThresholdProjected	legacy/compat.hpp	/^    int lineThresholdProjected;$/;"	m	struct:CvStarDetectorParams
line_	ts/ts_gtest.h	/^  int line_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
line_number	ts/ts_gtest.h	/^  int line_number() const { return line_number_; }$/;"	f	class:testing::TestPartResult
line_number_	ts/ts_gtest.h	/^  int line_number_;$/;"	m	class:testing::TestPartResult
line_type	core/core_c.h	/^    int         line_type;    \/\/Qt: PointSize$/;"	m	struct:CvFont
linearSimilarityMotionStd	videostab/global_motion.hpp	/^    static RansacParams linearSimilarityMotionStd() { return RansacParams(4, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
linemod	objdetect/objdetect.hpp	/^namespace linemod {$/;"	n	namespace:cv
link_	ts/ts_gtest.h	/^  linked_ptr_internal link_;$/;"	m	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^  explicit linked_ptr(T* ptr = NULL) { capture(ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^  linked_ptr(linked_ptr const& ptr) {  \/\/ NOLINT$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^  template <typename U> linked_ptr(linked_ptr<U> const& ptr) { copy(&ptr); }$/;"	f	class:testing::internal::linked_ptr
linked_ptr	ts/ts_gtest.h	/^class linked_ptr {$/;"	c	namespace:testing::internal
linked_ptr_internal	ts/ts_gtest.h	/^class linked_ptr_internal {$/;"	c	namespace:testing::internal
list	gpu/gpu.hpp	/^    GpuMat list;$/;"	m	struct:cv::gpu::HoughCirclesBuf
list	gpu/gpu.hpp	/^    GpuMat list;$/;"	m	struct:cv::gpu::HoughLinesBuf
loadIndex	flann/autotuned_index.h	/^    virtual void loadIndex(FILE* stream)$/;"	f	class:cvflann::AutotunedIndex
loadIndex	flann/composite_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::CompositeIndex
loadIndex	flann/flann_base.hpp	/^    virtual void loadIndex(FILE* stream)$/;"	f	class:cvflann::Index
loadIndex	flann/hierarchical_clustering_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::HierarchicalClusteringIndex
loadIndex	flann/kdtree_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeIndex
loadIndex	flann/kdtree_single_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeSingleIndex
loadIndex	flann/kmeans_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::KMeansIndex
loadIndex	flann/linear_index.h	/^    void loadIndex(FILE*)$/;"	f	class:cvflann::LinearIndex
loadIndex	flann/lsh_index.h	/^    void loadIndex(FILE* stream)$/;"	f	class:cvflann::LshIndex
load_from_file	flann/hdf5.h	/^void load_from_file(cvflann::Matrix<T>& dataset, const std::string& filename, const std::string& name)$/;"	f	namespace:cvflann
load_from_file	flann/hdf5.h	/^void load_from_file(cvflann::Matrix<T>& dataset, const std::string& filename, const std::string& name)$/;"	f	namespace:cvflann::mpi
load_header	flann/saving.h	/^inline IndexHeader load_header(FILE* stream)$/;"	f	namespace:cvflann
load_saved_index	flann/flann_base.hpp	/^NNIndex<Distance>* load_saved_index(const Matrix<typename Distance::ElementType>& dataset, const std::string& filename, Distance distance)$/;"	f	namespace:cvflann
load_tree	flann/hierarchical_clustering_index.h	/^    void load_tree(FILE* stream, NodePtr& node, int num)$/;"	f	class:cvflann::HierarchicalClusteringIndex
load_tree	flann/kdtree_index.h	/^    void load_tree(FILE* stream, NodePtr& tree)$/;"	f	class:cvflann::KDTreeIndex
load_tree	flann/kdtree_single_index.h	/^    void load_tree(FILE* stream, NodePtr& tree)$/;"	f	class:cvflann::KDTreeSingleIndex
load_tree	flann/kmeans_index.h	/^    void load_tree(FILE* stream, KMeansNodePtr& node)$/;"	f	class:cvflann::KMeansIndex
load_value	flann/saving.h	/^void load_value(FILE* stream, T& value, size_t count = 1)$/;"	f	namespace:cvflann
load_value	flann/saving.h	/^void load_value(FILE* stream, cvflann::Matrix<T>& value)$/;"	f	namespace:cvflann
load_value	flann/saving.h	/^void load_value(FILE* stream, std::vector<T>& value)$/;"	f	namespace:cvflann
loaded_	flann/flann_base.hpp	/^    bool loaded_;$/;"	m	class:cvflann::Index
loaded_from	core/types_c.h	/^    int loaded_from;$/;"	m	struct:CvPluginFuncInfo
loc	flann/allocator.h	/^    void*   loc;      \/* Current location in block to next allocate memory. *\/$/;"	m	class:cvflann::PooledAllocator
loc0	ts/ts.hpp	/^    vector<int> loc0;$/;"	m	struct:cvtest::MatComparator
localAdaptintegration_k	contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
localAdaptintegration_tau	contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
locateROI	ocl/matrix_operations.hpp	/^        inline void oclMat::locateROI( Size &wholeSize, Point &ofs ) const$/;"	f	class:cv::ocl::oclMat
location	features2d/features2d.hpp	/^      Point2d location;$/;"	m	struct:cv::SimpleBlobDetector::Center
locations	gpu/gpu.hpp	/^   vector<Point> locations;$/;"	m	struct:cv::gpu::HOGConfidence
locations	objdetect/objdetect.hpp	/^   vector<cv::Point> locations;$/;"	m	struct:cv::DetectionROI
log	flann/logger.h	/^    static int log(int level, const char* fmt, ...)$/;"	f	class:cvflann::Logger
log	videostab/stabilizer.hpp	/^    Ptr<ILog> log() const { return log_; }$/;"	f	class:cv::videostab::StabilizerBase
logLevel	flann/logger.h	/^    int logLevel;$/;"	m	class:cvflann::Logger
logLikelihood	legacy/legacy.hpp	/^    double logLikelihood;$/;"	m	class:CvEM
logWeightDivDet	ml/ml.hpp	/^    Mat logWeightDivDet;$/;"	m	class:cv::EM
log_	videostab/stabilizer.hpp	/^    Ptr<ILog> log_;$/;"	m	class:cv::videostab::StabilizerBase
log_var_val	legacy/legacy.hpp	/^    float* log_var_val; \/* sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n *\/$/;"	m	struct:CvEHMMState
log_verbosity	flann/flann_base.hpp	/^inline void log_verbosity(int level)$/;"	f	namespace:cvflann
logical_and	gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_and():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_and
logical_and	gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_and(const logical_and& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_and
logical_and	gpu/device/functional.hpp	/^    template <typename T> struct logical_and : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
logical_not	gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_not():unary_function<T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_not
logical_not	gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_not(const logical_not& other):unary_function<T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_not
logical_not	gpu/device/functional.hpp	/^    template <typename T> struct logical_not : unary_function<T, bool>$/;"	s	namespace:cv::gpu::device
logical_or	gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_or():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_or
logical_or	gpu/device/functional.hpp	/^        __device__ __forceinline__ logical_or(const logical_or& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::logical_or
logical_or	gpu/device/functional.hpp	/^    template <typename T> struct logical_or : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
longPairs_	features2d/features2d.hpp	/^    BriskLongPair* longPairs_;             \/\/ d>_dMin$/;"	m	class:cv::BRISK
loss_function_type	ml/ml.hpp	/^    CV_PROP_RW int loss_function_type;$/;"	m	struct:CvGBTreesParams
low	flann/kdtree_single_index.h	/^        DistanceType low, high;$/;"	m	struct:cvflann::KDTreeSingleIndex::Interval
low_pass_gain	contrib/hybridtracker.hpp	/^    float low_pass_gain;    \/\/ low pass gain$/;"	m	struct:cv::CvMotionModel
low_pass_gain	contrib/hybridtracker.hpp	/^    float low_pass_gain;$/;"	m	struct:cv::CvHybridTrackerParams
lru_list	ml/ml.hpp	/^    CvSVMKernelRow lru_list;$/;"	m	class:CvSVMSolver
lsh	flann/lsh_table.h	/^namespace lsh$/;"	n	namespace:cvflann
lsh_hash	legacy/legacy.hpp	/^struct lsh_hash {$/;"	s
m	legacy/legacy.hpp	/^    float m[3][3];$/;"	m	struct:CvMatrix3
m	ts/ts.hpp	/^    const Mat* m;$/;"	m	struct:cvtest::MatInfo
m00	contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m00	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m00	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m01	contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m01	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m01	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m02	contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m02	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m02	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m03	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m03	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m10	contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m10	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m10	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m11	contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m11	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m11	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m12	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m12	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m20	contrib/contrib.hpp	/^        long m00, m01, m10, m11, m02, m20;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
m20	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m20	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m21	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m21	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
m30	imgproc/imgproc.hpp	/^    CV_PROP_RW double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03;$/;"	m	class:cv::Moments
m30	imgproc/types_c.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments
mBias	contrib/openfabmap.hpp	/^    double mBias;$/;"	m	class:cv::of2::FabMap
m_Wnd	legacy/blobtrack.hpp	/^    int         m_Wnd;$/;"	m	class:CvVSModule
m_affine_poses	legacy/legacy.hpp	/^    CvAffinePose* m_affine_poses; \/\/ an array of poses$/;"	m	class:cv::OneWayDescriptor
m_back_project	legacy/legacy.hpp	/^    IplImage*  m_back_project;$/;"	m	class:CvCamShiftTracker
m_box	legacy/legacy.hpp	/^    CvBox2D    m_box;$/;"	m	class:CvCamShiftTracker
m_center	legacy/legacy.hpp	/^    CvPoint m_center; \/\/ the coordinates of the feature (the center of the input image ROI)$/;"	m	class:cv::OneWayDescriptor
m_color_planes	legacy/legacy.hpp	/^    IplImage*  m_color_planes[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_comp	legacy/legacy.hpp	/^    CvConnectedComp m_comp;$/;"	m	class:CvCamShiftTracker
m_descriptors	legacy/legacy.hpp	/^    OneWayDescriptor* m_descriptors; \/\/ array of train feature descriptors$/;"	m	class:cv::OneWayDescriptorBase
m_feature_name	legacy/legacy.hpp	/^    string m_feature_name; \/\/ the name of the feature associated with the descriptor$/;"	m	class:cv::OneWayDescriptor
m_hist	legacy/legacy.hpp	/^    CvHistogram* m_hist;$/;"	m	class:CvCamShiftTracker
m_hist_ranges	legacy/legacy.hpp	/^    float*     m_hist_ranges[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_hist_ranges_data	legacy/legacy.hpp	/^    float      m_hist_ranges_data[CV_MAX_DIM][2];$/;"	m	class:CvCamShiftTracker
m_image	legacy/blobtrack.hpp	/^    IplImage* m_image;$/;"	m	class:CvImageDrawer
m_input_patch	legacy/legacy.hpp	/^    IplImage* m_input_patch;$/;"	m	class:cv::OneWayDescriptor
m_mask	legacy/legacy.hpp	/^    IplImage*  m_mask;$/;"	m	class:CvCamShiftTracker
m_max_ch_val	legacy/legacy.hpp	/^    int        m_max_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_min_ch_val	legacy/legacy.hpp	/^    int        m_min_ch_val[CV_MAX_DIM];$/;"	m	class:CvCamShiftTracker
m_object_feature_count	legacy/legacy.hpp	/^    int m_object_feature_count; \/\/ the number of the positive features$/;"	m	class:cv::OneWayDescriptorObject
m_pElemFormat	legacy/blobtrack.hpp	/^    char            m_pElemFormat[1024];$/;"	m	class:CvBlobSeq
m_pMem	legacy/blobtrack.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobSeq
m_pMem	legacy/blobtrack.hpp	/^    CvMemStorage*   m_pMem;$/;"	m	class:CvBlobTrackSeq
m_pModuleName	legacy/blobtrack.hpp	/^    char*       m_pModuleName;$/;"	m	class:CvVSModule
m_pModuleTypeName	legacy/blobtrack.hpp	/^    char*       m_pModuleTypeName;$/;"	m	class:CvVSModule
m_pNickName	legacy/blobtrack.hpp	/^    char*       m_pNickName;$/;"	m	class:CvVSModule
m_pParamList	legacy/blobtrack.hpp	/^    CvDefParam*   m_pParamList;$/;"	m	class:CvVSModule
m_pSeq	legacy/blobtrack.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobSeq
m_pSeq	legacy/blobtrack.hpp	/^    CvSeq*          m_pSeq;$/;"	m	class:CvBlobTrackSeq
m_part_id	legacy/legacy.hpp	/^    int* m_part_id; \/\/ contains part id for each of object descriptors$/;"	m	class:cv::OneWayDescriptorObject
m_patch_size	legacy/legacy.hpp	/^    CvSize m_patch_size; \/\/ patch size$/;"	m	class:cv::OneWayDescriptorBase
m_patch_size	legacy/legacy.hpp	/^    CvSize m_patch_size; \/\/ size of each image$/;"	m	class:cv::OneWayDescriptor
m_pca_avg	legacy/legacy.hpp	/^    CvMat* m_pca_avg; \/\/ PCA average Vector for small patches$/;"	m	class:cv::OneWayDescriptorBase
m_pca_coeffs	legacy/legacy.hpp	/^    CvMat** m_pca_coeffs; \/\/ an array of length m_pose_count containing pca decomposition of the patch in different poses$/;"	m	class:cv::OneWayDescriptor
m_pca_descriptors	legacy/legacy.hpp	/^    OneWayDescriptor* m_pca_descriptors; \/\/ an array of PCA descriptors$/;"	m	class:cv::OneWayDescriptorBase
m_pca_descriptors_matrix	legacy/legacy.hpp	/^    CvMat* m_pca_descriptors_matrix;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_descriptors_tree	legacy/legacy.hpp	/^    cv::flann::Index* m_pca_descriptors_tree;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_dim_high	legacy/legacy.hpp	/^    int m_pca_dim_high; \/\/ the number of descriptor pca components to use for generating affine poses$/;"	m	class:cv::OneWayDescriptor
m_pca_dim_high	legacy/legacy.hpp	/^    int m_pca_dim_high;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_dim_low	legacy/legacy.hpp	/^    int m_pca_dim_low; \/\/ the number of pca components to use for comparison$/;"	m	class:cv::OneWayDescriptor
m_pca_dim_low	legacy/legacy.hpp	/^    int m_pca_dim_low;$/;"	m	class:cv::OneWayDescriptorBase
m_pca_eigenvectors	legacy/legacy.hpp	/^    CvMat* m_pca_eigenvectors; \/\/ PCA eigenvectors for small patches$/;"	m	class:cv::OneWayDescriptorBase
m_pca_hr_avg	legacy/legacy.hpp	/^    CvMat* m_pca_hr_avg; \/\/ PCA average Vector for large patches$/;"	m	class:cv::OneWayDescriptorBase
m_pca_hr_eigenvectors	legacy/legacy.hpp	/^    CvMat* m_pca_hr_eigenvectors; \/\/ PCA eigenvectors for large patches$/;"	m	class:cv::OneWayDescriptorBase
m_pose_count	legacy/legacy.hpp	/^    int m_pose_count; \/\/ the number of poses for each descriptor$/;"	m	class:cv::OneWayDescriptorBase
m_pose_count	legacy/legacy.hpp	/^    int m_pose_count; \/\/ the number of poses$/;"	m	class:cv::OneWayDescriptor
m_poses	legacy/legacy.hpp	/^    CvAffinePose* m_poses; \/\/ array of poses$/;"	m	class:cv::OneWayDescriptorBase
m_pyr_levels	legacy/legacy.hpp	/^    int m_pyr_levels;$/;"	m	class:cv::OneWayDescriptorBase
m_samples	legacy/legacy.hpp	/^    IplImage** m_samples; \/\/ an array of length m_pose_count containing the patch in different poses$/;"	m	class:cv::OneWayDescriptor
m_shape	legacy/blobtrack.hpp	/^    CvDrawShape m_shape[16];$/;"	m	class:CvImageDrawer
m_temp	legacy/legacy.hpp	/^    IplImage*  m_temp;$/;"	m	class:CvCamShiftTracker
m_threshold	legacy/legacy.hpp	/^    int        m_threshold;$/;"	m	class:CvCamShiftTracker
m_train_feature_count	legacy/legacy.hpp	/^    int m_train_feature_count; \/\/ the number of the training features$/;"	m	class:cv::OneWayDescriptorBase
m_train_features	legacy/legacy.hpp	/^    vector<KeyPoint> m_train_features; \/\/ train features$/;"	m	class:cv::OneWayDescriptorObject
m_train_patch	legacy/legacy.hpp	/^    IplImage* m_train_patch;$/;"	m	class:cv::OneWayDescriptor
m_transforms	legacy/legacy.hpp	/^    CvMat** m_transforms; \/\/ an array of affine transforms corresponding to poses$/;"	m	class:cv::OneWayDescriptor
m_transforms	legacy/legacy.hpp	/^    CvMat** m_transforms; \/\/ array of affine transformations corresponding to poses$/;"	m	class:cv::OneWayDescriptorBase
majorVersion	core/gpumat.hpp	/^        int majorVersion() const { return majorVersion_; }$/;"	f	class:cv::gpu::DeviceInfo
majorVersion_	core/gpumat.hpp	/^        int majorVersion_;$/;"	m	class:cv::gpu::DeviceInfo
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char make(char x) {return x;}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char make(const char* x) {return *x;}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 make(const schar* v) {return make_char1(v[0]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char1 make(schar x) {return make_char1(x);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 make(const schar* v) {return make_char2(v[0], v[1]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char2 make(schar x, schar y) {return make_char2(x, y);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 make(const schar* v) {return make_char3(v[0], v[1], v[2]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char3 make(schar x, schar y, schar z) {return make_char3(x, y, z);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 make(const schar* v) {return make_char4(v[0], v[1], v[2], v[3]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char4 make(schar x, schar y, schar z, schar w) {return make_char4(x, y, z, w);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 make(const schar* v) {return make_char8(v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ char8 make(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7) {return make_char8(a0, a1, a2, a3, a4, a5, a6, a7);}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar make(const schar* x) {return *x;}$/;"	f	struct:cv::gpu::device::VecTraits
make	gpu/device/vec_traits.hpp	/^        static __device__ __host__ __forceinline__ schar make(schar x) {return x;}$/;"	f	struct:cv::gpu::device::VecTraits
make_char8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ char8 make_char8(schar a0, schar a1, schar a2, schar a3, schar a4, schar a5, schar a6, schar a7)$/;"	f	namespace:cv::gpu::device
make_double8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ double8 make_double8(double a0, double a1, double a2, double a3, double a4, double a5, double a6, double a7)$/;"	f	namespace:cv::gpu::device
make_float8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ float8 make_float8(float a0, float a1, float a2, float a3, float a4, float a5, float a6, float a7)$/;"	f	namespace:cv::gpu::device
make_int8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ int8 make_int8(int a0, int a1, int a2, int a3, int a4, int a5, int a6, int a7)$/;"	f	namespace:cv::gpu::device
make_linked_ptr	ts/ts_gtest.h	/^linked_ptr<T> make_linked_ptr(T* ptr) {$/;"	f	namespace:testing::internal
make_short8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ short8 make_short8(short a0, short a1, short a2, short a3, short a4, short a5, short a6, short a7)$/;"	f	namespace:cv::gpu::device
make_tuple	ts/ts_gtest.h	/^inline GTEST_10_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_1_TUPLE_(T) make_tuple(const T0& f0) {$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_2_TUPLE_(T) make_tuple(const T0& f0, const T1& f1) {$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_3_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2) {$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_4_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_5_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_6_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_7_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_8_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline GTEST_9_TUPLE_(T) make_tuple(const T0& f0, const T1& f1, const T2& f2,$/;"	f	namespace:std::tr1
make_tuple	ts/ts_gtest.h	/^inline tuple<> make_tuple() { return tuple<>(); }$/;"	f	namespace:std::tr1
make_uchar8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ uchar8 make_uchar8(uchar a0, uchar a1, uchar a2, uchar a3, uchar a4, uchar a5, uchar a6, uchar a7)$/;"	f	namespace:cv::gpu::device
make_uint8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ uint8 make_uint8(uint a0, uint a1, uint a2, uint a3, uint a4, uint a5, uint a6, uint a7)$/;"	f	namespace:cv::gpu::device
make_ushort8	gpu/device/vec_traits.hpp	/^    static __host__ __device__ __forceinline__ ushort8 make_ushort8(ushort a0, ushort a1, ushort a2, ushort a3, ushort a4, ushort a5, ushort a6, ushort a7)$/;"	f	namespace:cv::gpu::device
map	core/types_c.h	/^        CvFileNodeHash* map; \/* map (collection of named file nodes) *\/$/;"	m	union:CvFileNode::__anon226
mapBackward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearPortraitProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CompressedRectilinearPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CompressedRectilinearProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void CylindricalPortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::CylindricalPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void CylindricalProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::CylindricalProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void FisheyeProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::FisheyeProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void MercatorProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::MercatorProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PaniniPortraitProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PaniniPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PaniniProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PaniniProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PlanePortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::PlanePortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void PlaneProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::PlaneProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void SphericalPortraitProjector::mapBackward(float u0, float v0, float &x, float &y)$/;"	f	class:cv::detail::SphericalPortraitProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void SphericalProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::SphericalProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void StereographicProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::StereographicProjector
mapBackward	stitching/detail/warpers_inl.hpp	/^void TransverseMercatorProjector::mapBackward(float u, float v, float &x, float &y)$/;"	f	class:cv::detail::TransverseMercatorProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearPortraitProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CompressedRectilinearPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CompressedRectilinearProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CompressedRectilinearProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CylindricalPortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::CylindricalPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void CylindricalProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::CylindricalProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void FisheyeProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::FisheyeProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void MercatorProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::MercatorProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PaniniPortraitProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PaniniPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PaniniProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PaniniProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PlanePortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::PlanePortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void PlaneProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::PlaneProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void SphericalPortraitProjector::mapForward(float x, float y, float &u0, float &v0)$/;"	f	class:cv::detail::SphericalPortraitProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void SphericalProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::SphericalProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void StereographicProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::StereographicProjector
mapForward	stitching/detail/warpers_inl.hpp	/^void TransverseMercatorProjector::mapForward(float x, float y, float &u, float &v)$/;"	f	class:cv::detail::TransverseMercatorProjector
mask	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> mask;$/;"	m	class:CvLevMarq
mask	contrib/hybridtracker.hpp	/^    Mat mask, maskroi;$/;"	m	class:cv::CvMeanShiftTracker
mask	core/core_c.h	/^    int      mask;         \/* event mask *\/$/;"	m	struct:CvGraphScanner
mask	gpu/device/utility.hpp	/^        PtrStepb mask;$/;"	m	struct:cv::gpu::device::SingleMask
mask	gpu/device/utility.hpp	/^        PtrStepb mask;$/;"	m	struct:cv::gpu::device::SingleMaskChannels
mask1	gpu/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
mask1	ocl/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
mask1_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> mask1_, mask2_;$/;"	m	class:cv::detail::DpSeamFinder
mask1_	videostab/inpainting.hpp	/^    Mat_<uchar> mask1_, transformedMask1_;$/;"	m	class:cv::videostab::MotionInpainter
mask2_	stitching/detail/seam_finders.hpp	/^    Mat_<uchar> mask1_, mask2_;$/;"	m	class:cv::detail::DpSeamFinder
maskCollection	gpu/device/utility.hpp	/^        const PtrStepb* maskCollection;$/;"	m	struct:cv::gpu::device::MaskCollection
maskGenerator	objdetect/objdetect.hpp	/^    Ptr<MaskGenerator> maskGenerator;$/;"	m	class:cv::CascadeClassifier
maskPyr_	gpu/gpu.hpp	/^    std::vector<GpuMat> maskPyr_;$/;"	m	class:cv::gpu::ORB_GPU
maskROI	core/types_c.h	/^    struct _IplImage *maskROI;      \/* Must be NULL. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplImage
maskSum	gpu/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
maskSum	ocl/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
mask_	flann/lsh_table.h	/^    std::vector<size_t> mask_;$/;"	m	class:cvflann::lsh::LshTable
maskroi	contrib/hybridtracker.hpp	/^    Mat mask, maskroi;$/;"	m	class:cv::CvMeanShiftTracker
masks_	stitching/detail/seam_finders.hpp	/^    std::vector<Mat> masks_;$/;"	m	class:cv::detail::PairwiseSeamFinder
mat	core/core_c.h	/^CVAPI(CvMat*) cvCloneMat( const CvMat* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(CvMatND*) cvCloneMatND( const CvMatND* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(CvScalar) cvTrace( const CvArr* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(CvSparseMat*) cvCloneSparseMat( const CvSparseMat* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(double) cvDet( const CvArr* mat );$/;"	v
mat	core/core_c.h	/^CVAPI(void)  cvReleaseMat( CvMat** mat );$/;"	v
mat	core/core_c.h	/^CVAPI(void)  cvReleaseSparseMat( CvSparseMat** mat );$/;"	v
mat	core/types_c.h	/^    CvMatND mat;                    \/* Embedded matrix header for array histograms. *\/$/;"	m	struct:CvHistogram
mat	core/types_c.h	/^    CvSparseMat* mat;$/;"	m	struct:CvSparseMatIterator
mat	legacy/legacy.hpp	/^    float mat[4][4];              \/* maps camera coordinates to world coordinates *\/$/;"	m	struct:Cv3dTrackerCameraInfo
match	contrib/openfabmap.hpp	/^    double match;      \/\/normalised probability$/;"	m	struct:cv::of2::IMatch
match_sum	legacy/legacy.hpp	/^    int         match_sum;$/;"	m	struct:CvGaussBGValues
matcher	contrib/hybridtracker.hpp	/^    Ptr<DescriptorMatcher> matcher;$/;"	m	class:cv::CvFeatureTracker
matcher	features2d/features2d.hpp	/^    Ptr<DescriptorMatcher> matcher;$/;"	m	class:cv::VectorDescriptorMatcher
matches	contrib/hybridtracker.hpp	/^    vector<DMatch> matches;$/;"	m	class:cv::CvFeatureTracker
matches	stitching/detail/matchers.hpp	/^    std::vector<DMatch> matches;$/;"	m	struct:cv::detail::MatchesInfo
matches_filter_	ts/ts_gtest.h	/^  bool matches_filter_;             \/\/ True if this test matches the$/;"	m	class:testing::TestInfo
matchingMask	stitching/stitcher.hpp	/^    const cv::Mat& matchingMask() const { return matching_mask_; }$/;"	f	class:cv::Stitcher
matching_mask_	stitching/stitcher.hpp	/^    cv::Mat matching_mask_;$/;"	m	class:cv::Stitcher
matrix	legacy/legacy.hpp	/^    CvMat* matrix;$/;"	m	class:CvMatrix
matrix	legacy/legacy.hpp	/^    float   matrix[9]; \/* intinsic camera parameters:  [ fx 0 cx; 0 fy cy; 0 0 1 ] *\/$/;"	m	struct:CvCamera
max	core/core.hpp	74;"	d
max	core/internal.hpp	173;"	d
max	core/mat.hpp	/^template<typename _Tp> static inline MatExpr max(const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
max	core/mat.hpp	/^template<typename _Tp> static inline MatExpr max(const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
max	core/mat.hpp	/^template<typename _Tp> static inline MatExpr max(double s, const Mat_<_Tp>& a)$/;"	f	namespace:cv
max	core/mat.hpp	/^template<typename _Tp> static inline void max(const Mat_<_Tp>& a, const Mat_<_Tp>& b, Mat_<_Tp>& c)$/;"	f	namespace:cv
max	core/mat.hpp	/^template<typename _Tp> static inline void max(const Mat_<_Tp>& a, double s, Mat_<_Tp>& c)$/;"	f	namespace:cv
max	core/mat.hpp	/^template<typename _Tp> static inline void max(double s, const Mat_<_Tp>& a, Mat_<_Tp>& c)$/;"	f	namespace:cv
max	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ T max() { return numeric_limits<T>::max(); }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
max	gpu/device/detail/color_detail.hpp	/^            static __device__ __forceinline__ float max() { return 1.f; }$/;"	f	struct:cv::gpu::device::color_detail::ColorChannel
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return 1.7976931348623158e+308\/*DBL_MAX*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return 3.402823466e+38f\/*FLT_MAX*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return CHAR_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return INT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return LONG_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return SCHAR_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return SHRT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return UCHAR_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return UINT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return ULONG_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return USHRT_MAX; };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return true;  };$/;"	f	struct:cv::gpu::device::numeric_limits
max	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type max() { return type(); };$/;"	f	struct:cv::gpu::device::numeric_limits
max	legacy/legacy.hpp	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation
maxArea	features2d/features2d.hpp	/^      CV_PROP_RW float minArea, maxArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxArea	features2d/features2d.hpp	/^    int maxArea;$/;"	m	class:cv::MSER
maxArea	legacy/compat.hpp	/^    int maxArea;$/;"	m	struct:CvMSERParams
maxCircularity	features2d/features2d.hpp	/^      CV_PROP_RW float minCircularity, maxCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxConvexity	features2d/features2d.hpp	/^      CV_PROP_RW float minConvexity, maxConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxCorners	gpu/gpu.hpp	/^    int maxCorners;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
maxDisp	contrib/contrib.hpp	/^        CV_PROP_RW int      maxDisp;$/;"	m	class:cv::StereoVar
maxEvolution	features2d/features2d.hpp	/^    int maxEvolution;$/;"	m	class:cv::MSER
maxEvolution	legacy/compat.hpp	/^    int maxEvolution;$/;"	m	struct:CvMSERParams
maxFeatures	gpu/gpu.hpp	/^    int maxFeatures;$/;"	m	class:cv::gpu::GMG_GPU
maxFeatures	video/background_segm.hpp	/^    int     maxFeatures;$/;"	m	class:cv::BackgroundSubtractorGMG
maxHeight	contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
maxInertiaRatio	features2d/features2d.hpp	/^      CV_PROP_RW float minInertiaRatio, maxInertiaRatio;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxIters	legacy/legacy.hpp	/^    int maxIters;$/;"	m	struct:CvStereoGCState
maxIters	ml/ml.hpp	/^    CV_PROP_RW int maxIters;$/;"	m	class:cv::EM
maxLevel	features2d/features2d.hpp	/^    int maxLevel;$/;"	m	class:cv::PyramidAdaptedFeatureDetector
maxLevel	gpu/gpu.hpp	/^    int maxLevel;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
maxLevel	ocl/ocl.hpp	/^            int maxLevel;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
maxLevel	videostab/optical_flow.hpp	/^    int maxLevel() const { return maxLevel_; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
maxLevel_	videostab/optical_flow.hpp	/^    int maxLevel_;$/;"	m	class:cv::videostab::PyrLkOptFlowEstimatorBase
maxLevels	contrib/contrib.hpp	/^            int maxLevels;$/;"	m	struct:cv::Octree::Node
maxObjectSize	contrib/detection_based_tracker.hpp	/^            int maxObjectSize;$/;"	m	struct:DetectionBasedTracker::Parameters
maxPoints	legacy/legacy.hpp	/^    int     maxPoints;$/;"	m	class:CvCalibFilter
maxPosBuffer	gpu/gpu.hpp	/^    GpuMat maxPosBuffer;$/;"	m	class:cv::gpu::SURF_GPU
maxPosBuffer	ocl/ocl.hpp	/^            oclMat maxPosBuffer;$/;"	m	class:cv::ocl::SURF_OCL
maxRmse	videostab/global_motion.hpp	/^    float maxRmse() const { return maxRmse_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
maxRmse_	videostab/global_motion.hpp	/^    float maxRmse_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
maxScale	legacy/legacy.hpp	/^        float minScale, maxScale, stepScale;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
maxSize	features2d/features2d.hpp	/^    int maxSize;$/;"	m	class:cv::StarDetector
maxSize	legacy/compat.hpp	/^    int maxSize;$/;"	m	struct:CvStarDetectorParams
maxThreshold	features2d/features2d.hpp	/^      CV_PROP_RW float maxThreshold;$/;"	m	struct:cv::SimpleBlobDetector::Params
maxTotalKeypoints	features2d/features2d.hpp	/^    int maxTotalKeypoints;$/;"	m	class:cv::GridAdaptedFeatureDetector
maxTrackLifetime	contrib/detection_based_tracker.hpp	/^            int maxTrackLifetime;$/;"	m	struct:DetectionBasedTracker::Parameters
maxVal	gpu/device/functional.hpp	/^        const T maxVal;$/;"	m	struct:cv::gpu::device::thresh_binary_func
maxVal	gpu/device/functional.hpp	/^        const T maxVal;$/;"	m	struct:cv::gpu::device::thresh_binary_inv_func
maxVal_	gpu/gpu.hpp	/^    float maxVal_, minVal_;$/;"	m	class:cv::gpu::GMG_GPU
maxVal_	video/background_segm.hpp	/^    double maxVal_;$/;"	m	class:cv::BackgroundSubtractorGMG
maxVariation	features2d/features2d.hpp	/^    double maxVariation;$/;"	m	class:cv::MSER
maxVariation	legacy/compat.hpp	/^    float maxVariation;$/;"	m	struct:CvMSERParams
maxWidth	contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
maxWidth	imgproc/imgproc.hpp	/^    int maxWidth;$/;"	m	class:cv::FilterEngine
max_buf_sz	ml/ml.hpp	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP
max_c_count	ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
max_categories	ml/ml.hpp	/^    CV_PROP_RW int   max_categories;$/;"	m	struct:CvDTreeParams
max_count	ml/ml.hpp	/^    int max_count, max_buf_sz;$/;"	m	class:CvANN_MLP
max_data_term	gpu/gpu.hpp	/^    float max_data_term;$/;"	m	class:cv::gpu::StereoBeliefPropagation
max_data_term	gpu/gpu.hpp	/^    float max_data_term;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
max_depth	ml/ml.hpp	/^    CV_PROP_RW int   max_depth;$/;"	m	struct:CvDTreeParams
max_disc_term	gpu/gpu.hpp	/^    float max_disc_term;$/;"	m	class:cv::gpu::StereoBeliefPropagation
max_disc_term	gpu/gpu.hpp	/^    float max_disc_term;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
max_disc_threshold	gpu/gpu.hpp	/^    float max_disc_threshold;$/;"	m	class:cv::gpu::DisparityBilateralFilter
max_features_	features2d/features2d.hpp	/^    int min_features_, max_features_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
max_iter	core/types_c.h	/^    int    max_iter;$/;"	m	struct:CvTermCriteria
max_iter	ml/ml.hpp	/^    int max_iter;$/;"	m	class:CvSVMSolver
max_k	ml/ml.hpp	/^    int max_k, var_count;$/;"	m	class:CvKNearest
max_level	core/core_c.h	/^    int max_level;$/;"	m	struct:CvTreeNodeIterator
max_log_array_size	ts/ts.hpp	/^    int max_log_array_size;$/;"	m	class:cvtest::ArrayTest
max_size	core/core.hpp	/^    size_type max_size() const$/;"	f	class:cv::Allocator
max_thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
max_thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
max_thresh_	features2d/features2d.hpp	/^    int init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::FastAdjuster
max_val	ml/ml.hpp	/^    CV_PROP_RW double max_val;$/;"	m	struct:CvParamGrid
max_val	ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
max_val1	ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
maxdiff	ts/ts.hpp	/^    double maxdiff;$/;"	m	struct:cvtest::MatComparator
maximum	gpu/device/functional.hpp	/^        __device__ __forceinline__ maximum():binary_function<T, T, T>(){}$/;"	f	struct:cv::gpu::device::maximum
maximum	gpu/device/functional.hpp	/^        __device__ __forceinline__ maximum(const maximum& other):binary_function<T, T, T>(){}$/;"	f	struct:cv::gpu::device::maximum
maximum	gpu/device/functional.hpp	/^    template <typename T> struct maximum : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
maxlr	ml/ml.hpp	/^    double maxlr;$/;"	m	struct:CvDTreeNode
mean	legacy/legacy.hpp	/^    double      mean[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues
mean	ts/ts_perf.hpp	/^    double mean;$/;"	m	struct:perf::performance_metrics
meanSplit	flann/kdtree_index.h	/^    void meanSplit(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval)$/;"	f	class:cvflann::KDTreeIndex
mean_	flann/kdtree_index.h	/^    DistanceType* mean_;$/;"	m	class:cvflann::KDTreeIndex
mean_	gpu/gpu.hpp	/^    GpuMat mean_;$/;"	m	class:cv::gpu::MOG2_GPU
mean_	gpu/gpu.hpp	/^    GpuMat mean_;$/;"	m	class:cv::gpu::MOG_GPU
mean_radius	flann/kmeans_index.h	/^        DistanceType mean_radius;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
means	legacy/legacy.hpp	/^    const CvMat* means;$/;"	m	struct:CvEMParams
means	ml/ml.hpp	/^    CV_PROP Mat means;$/;"	m	class:cv::EM
meansHdr	legacy/legacy.hpp	/^    CvMat meansHdr;$/;"	m	class:CvEM
meanshift_profile	legacy/blobtrack.hpp	/^    int     meanshift_profile;$/;"	m	struct:CvBlobTrackerParamMS
measurementMatrix	video/tracking.hpp	/^    Mat measurementMatrix;  \/\/!< measurement matrix (H)$/;"	m	class:cv::KalmanFilter
measurementNoiseCov	video/tracking.hpp	/^    Mat measurementNoiseCov;\/\/!< measurement noise covariance matrix (R)$/;"	m	class:cv::KalmanFilter
measurement_matrix	video/tracking.hpp	/^    CvMat* measurement_matrix;  \/* measurement matrix (H) *\/$/;"	m	struct:CvKalman
measurement_noise_cov	video/tracking.hpp	/^    CvMat* measurement_noise_cov; \/* measurement noise covariance matrix (R) *\/$/;"	m	struct:CvKalman
median	ts/ts_perf.hpp	/^    double median;$/;"	m	struct:perf::performance_metrics
memoryCost	flann/autotuned_index.h	/^        float memoryCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
memoryCounter	flann/hierarchical_clustering_index.h	/^    int memoryCounter;$/;"	m	class:cvflann::HierarchicalClusteringIndex
memoryCounter_	flann/kmeans_index.h	/^    int memoryCounter_;$/;"	m	class:cvflann::KMeansIndex
memory_weight_	flann/autotuned_index.h	/^    float memory_weight_;$/;"	m	class:cvflann::AutotunedIndex
merge	gpu/device/scan.hpp	/^        typedef WarpScan<INCLUSIVE, T, F>  merge;$/;"	t	struct:cv::gpu::device::WarpScan
merge	gpu/device/scan.hpp	/^        typedef WarpScanNoComp<INCLUSIVE, T, F> merge;$/;"	t	struct:cv::gpu::device::WarpScanNoComp
mergedDescriptors	features2d/features2d.hpp	/^        Mat mergedDescriptors;$/;"	m	class:cv::DescriptorMatcher::DescriptorCollection
mergedDescriptors	features2d/features2d.hpp	/^    DescriptorCollection mergedDescriptors;$/;"	m	class:cv::FlannBasedMatcher
mergedImgDescriptors	contrib/openfabmap.hpp	/^    Mat mergedImgDescriptors;$/;"	m	class:cv::of2::ChowLiuTree
mesh	contrib/contrib.hpp	/^        Mesh3D mesh;$/;"	m	class:cv::SpinImageModel
message	ts/ts_gtest.h	/^    String             const message;$/;"	m	struct:testing::internal::AssertHelper::AssertHelperData
message	ts/ts_gtest.h	/^  const char* message() const { return message_.c_str(); }$/;"	f	class:testing::TestPartResult
message	ts/ts_gtest.h	/^  const char* message() const {$/;"	f	class:testing::AssertionResult
message_	ts/ts_gtest.h	/^  internal::String message_;  \/\/ The test failure message.$/;"	m	class:testing::TestPartResult
message_	ts/ts_gtest.h	/^  internal::scoped_ptr< ::std::string> message_;$/;"	m	class:testing::AssertionResult
messages_buffers	gpu/gpu.hpp	/^    GpuMat messages_buffers;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
method_	videostab/inpainting.hpp	/^    int method_;$/;"	m	class:cv::videostab::ColorInpainter
metrics	ts/ts_perf.hpp	/^    performance_metrics metrics;$/;"	m	class:perf::TestBase
middleSplit	flann/kdtree_single_index.h	/^    void middleSplit(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval, const BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
middleSplit_	flann/kdtree_single_index.h	/^    void middleSplit_(int* ind, int count, int& index, int& cutfeat, DistanceType& cutval, const BoundingBox& bbox)$/;"	f	class:cvflann::KDTreeSingleIndex
min	core/core.hpp	73;"	d
min	core/internal.hpp	172;"	d
min	core/mat.hpp	/^template<typename _Tp> static inline MatExpr min(const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
min	core/mat.hpp	/^template<typename _Tp> static inline MatExpr min(const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
min	core/mat.hpp	/^template<typename _Tp> static inline MatExpr min(double s, const Mat_<_Tp>& a)$/;"	f	namespace:cv
min	core/mat.hpp	/^template<typename _Tp> static inline void min(const Mat_<_Tp>& a, const Mat_<_Tp>& b, Mat_<_Tp>& c)$/;"	f	namespace:cv
min	core/mat.hpp	/^template<typename _Tp> static inline void min(const Mat_<_Tp>& a, double s, Mat_<_Tp>& c)$/;"	f	namespace:cv
min	core/mat.hpp	/^template<typename _Tp> static inline void min(double s, const Mat_<_Tp>& a, Mat_<_Tp>& c)$/;"	f	namespace:cv
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min()  { return type(); };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return 0; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return 1.175494351e-38f\/*FLT_MIN*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return 2.2250738585072014e-308\/*DBL_MIN*\/; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return CHAR_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return INT_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return LONG_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return SCHAR_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return SHRT_MIN; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type min() { return false; };$/;"	f	struct:cv::gpu::device::numeric_limits
min	legacy/legacy.hpp	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation
min	ts/ts_perf.hpp	/^    double min;$/;"	m	struct:perf::performance_metrics
minArea	features2d/features2d.hpp	/^      CV_PROP_RW float minArea, maxArea;$/;"	m	struct:cv::SimpleBlobDetector::Params
minArea	features2d/features2d.hpp	/^    int minArea;$/;"	m	class:cv::MSER
minArea	gpu/gpu.hpp	/^        float minArea; \/\/ Discard foreground blobs whose bounding box is smaller than this threshold.$/;"	m	struct:cv::gpu::FGDStatModel::Params
minArea	legacy/compat.hpp	/^    int minArea;$/;"	m	struct:CvMSERParams
minArea	legacy/legacy.hpp	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams
minArea	legacy/legacy.hpp	/^    float  minArea;		\/* Discard foreground blobs whose bounding box is smaller than this threshold.					*\/$/;"	m	struct:CvFGDStatModelParams
minCircularity	features2d/features2d.hpp	/^      CV_PROP_RW float minCircularity, maxCircularity;$/;"	m	struct:cv::SimpleBlobDetector::Params
minConvexity	features2d/features2d.hpp	/^      CV_PROP_RW float minConvexity, maxConvexity;$/;"	m	struct:cv::SimpleBlobDetector::Params
minDetectionPeriod	contrib/detection_based_tracker.hpp	/^            int minDetectionPeriod; \/\/the minimal time between run of the big object detector (on the whole frame) in ms (1000 mean 1 sec), default=0$/;"	m	struct:DetectionBasedTracker::Parameters
minDisp	contrib/contrib.hpp	/^        CV_PROP_RW int      minDisp;$/;"	m	class:cv::StereoVar
minDisparity	calib3d/calib3d.hpp	/^    CV_PROP_RW int minDisparity;$/;"	m	class:cv::StereoSGBM
minDisparity	calib3d/calib3d.hpp	/^    int minDisparity;  \/\/ minimum disparity (can be negative)$/;"	m	struct:CvStereoBMState
minDisparity	legacy/legacy.hpp	/^    int minDisparity;$/;"	m	struct:CvStereoGCState
minDistBetweenBlobs	features2d/features2d.hpp	/^      CV_PROP_RW float minDistBetweenBlobs;$/;"	m	struct:cv::SimpleBlobDetector::Params
minDist_	stitching/detail/seam_finders.hpp	/^        int minDist_;$/;"	m	class:cv::detail::DpSeamFinder::ClosePoints
minDistance	features2d/features2d.hpp	/^    double minDistance;$/;"	m	class:cv::GFTTDetector
minDistance	gpu/gpu.hpp	/^    double minDistance;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
minDiversity	features2d/features2d.hpp	/^    double minDiversity;$/;"	m	class:cv::MSER
minDiversity	legacy/compat.hpp	/^    float minDiversity;$/;"	m	struct:CvMSERParams
minEigThreshold	gpu/gpu.hpp	/^    float minEigThreshold;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
minEigThreshold	ocl/ocl.hpp	/^            float minEigThreshold;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
minInertiaRatio	features2d/features2d.hpp	/^      CV_PROP_RW float minInertiaRatio, maxInertiaRatio;$/;"	m	struct:cv::SimpleBlobDetector::Params
minInlierRatio	videostab/global_motion.hpp	/^    float minInlierRatio() const { return minInlierRatio_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
minInlierRatio_	videostab/global_motion.hpp	/^    float minInlierRatio_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
minMargin	features2d/features2d.hpp	/^    double minMargin;$/;"	m	class:cv::MSER
minMargin	legacy/compat.hpp	/^    double minMargin;$/;"	m	struct:CvMSERParams
minMaxbuf_	gpu/gpu.hpp	/^    GpuMat minMaxbuf_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
minNeighbors	contrib/contrib.hpp	/^        int minNeighbors;$/;"	m	class:cv::SpinImageModel
minNeighbors	contrib/detection_based_tracker.hpp	/^            int minNeighbors;$/;"	m	struct:DetectionBasedTracker::Parameters
minObjectSize	contrib/detection_based_tracker.hpp	/^            int minObjectSize;$/;"	m	struct:DetectionBasedTracker::Parameters
minPoints	contrib/contrib.hpp	/^        int minPoints;$/;"	m	class:cv::Octree
minRepeatability	features2d/features2d.hpp	/^      CV_PROP_RW size_t minRepeatability;$/;"	m	struct:cv::SimpleBlobDetector::Params
minSSD	gpu/gpu.hpp	/^    GpuMat minSSD, leBuf, riBuf;$/;"	m	class:cv::gpu::StereoBM_GPU
minScale	legacy/legacy.hpp	/^        float minScale, maxScale, stepScale;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
minThreshold	features2d/features2d.hpp	/^      CV_PROP_RW float minThreshold;$/;"	m	struct:cv::SimpleBlobDetector::Params
minVal_	gpu/gpu.hpp	/^    float maxVal_, minVal_;$/;"	m	class:cv::gpu::GMG_GPU
minVal_	video/background_segm.hpp	/^    double minVal_;$/;"	m	class:cv::BackgroundSubtractorGMG
min_disp_th	gpu/gpu.hpp	/^    int min_disp_th;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
min_features_	features2d/features2d.hpp	/^    int min_features_, max_features_;$/;"	m	class:cv::DynamicAdaptedFeatureDetector
min_log_array_size	ts/ts.hpp	/^    int min_log_array_size;$/;"	m	class:cvtest::ArrayTest
min_sample_count	ml/ml.hpp	/^    CV_PROP_RW int   min_sample_count;$/;"	m	struct:CvDTreeParams
min_thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
min_thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
min_thresh_	features2d/features2d.hpp	/^    int init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::FastAdjuster
min_val	ml/ml.hpp	/^    CV_PROP_RW double min_val;$/;"	m	struct:CvParamGrid
min_val	ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
min_val1	ml/ml.hpp	/^    double min_val, max_val, min_val1, max_val1;$/;"	m	class:CvANN_MLP
mindist	flann/result_set.h	/^    DistanceType mindist;     \/* Minimum distance to query for all nodes below. *\/$/;"	m	struct:cvflann::BranchStruct
minimum	gpu/device/functional.hpp	/^        __device__ __forceinline__ minimum():binary_function<T, T, T>(){}$/;"	f	struct:cv::gpu::device::minimum
minimum	gpu/device/functional.hpp	/^        __device__ __forceinline__ minimum(const minimum& other):binary_function<T, T, T>(){}$/;"	f	struct:cv::gpu::device::minimum
minimum	gpu/device/functional.hpp	/^    template <typename T> struct minimum : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
minorVersion	core/gpumat.hpp	/^        int minorVersion() const { return minorVersion_; }$/;"	f	class:cv::gpu::DeviceInfo
minorVersion_	core/gpumat.hpp	/^        int minorVersion_;$/;"	m	class:cv::gpu::DeviceInfo
minus	gpu/device/functional.hpp	/^        __device__ __forceinline__ minus():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::minus
minus	gpu/device/functional.hpp	/^        __device__ __forceinline__ minus(const minus& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::minus
minus	gpu/device/functional.hpp	/^    template <typename T> struct minus : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
minus_delta	core/types_c.h	/^    int  minus_delta;$/;"	m	struct:CvLineIterator
minus_step	core/types_c.h	/^    int  minus_step;$/;"	m	struct:CvLineIterator
miss_ch	ml/ml.hpp	/^    char miss_ch;$/;"	m	class:CvMLData
missing	ml/ml.hpp	/^    CvMat* missing;$/;"	m	class:CvGBTrees
missing	ml/ml.hpp	/^    CvMat* missing;$/;"	m	class:CvMLData
missing_mask	ml/ml.hpp	/^    const CvMat* missing_mask;$/;"	m	struct:CvERTreeTrainData
mix	legacy/legacy.hpp	/^    int* mix;  \/* number of mixture to which observation belong *\/$/;"	m	struct:CvImgObsInfo
mix	ml/ml.hpp	/^    bool mix;$/;"	m	class:CvMLData
mix	ml/ml.hpp	/^    bool mix;$/;"	m	struct:CvTrainTestSplit
modMax	legacy/legacy.hpp	/^    uchar modMax[3];$/;"	m	struct:CvBGCodeBookModel
modMin	legacy/legacy.hpp	/^    uchar modMin[3];$/;"	m	struct:CvBGCodeBookModel
modalities	objdetect/objdetect.hpp	/^  std::vector< Ptr<Modality> > modalities;$/;"	m	class:cv::linemod::Detector
model	legacy/legacy.hpp	/^CVAPI(void) cvReleaseBGCodeBookModel( CvBGCodeBookModel** model );$/;"	v
modelPoints	legacy/legacy.hpp	/^    vector<KeyPoint> modelPoints;$/;"	m	class:cv::PlanarObjectDetector
modelROI	legacy/legacy.hpp	/^    Rect modelROI;$/;"	m	class:cv::PlanarObjectDetector
module_info	core/core_c.h	/^CVAPI(int)  cvRegisterModule( const CvModuleInfo* module_info );$/;"	v
modulus	gpu/device/functional.hpp	/^        __device__ __forceinline__ modulus():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::modulus
modulus	gpu/device/functional.hpp	/^        __device__ __forceinline__ modulus(const modulus& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::modulus
modulus	gpu/device/functional.hpp	/^    template <typename T> struct modulus : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
mog	legacy/legacy.hpp	/^    void*                      mog;$/;"	m	struct:CvGaussBGModel
morphologyDefaultBorderValue	imgproc/imgproc.hpp	/^static inline Scalar morphologyDefaultBorderValue() { return Scalar::all(DBL_MAX); }$/;"	f	namespace:cv
motionEstimator	videostab/stabilizer.hpp	/^    Ptr<IGlobalMotionEstimator> motionEstimator() const { return motionEstimator_; }$/;"	f	class:cv::videostab::StabilizerBase
motionEstimator_	videostab/stabilizer.hpp	/^    Ptr<IGlobalMotionEstimator> motionEstimator_;$/;"	m	class:cv::videostab::StabilizerBase
motionFilter	videostab/stabilizer.hpp	/^    Ptr<MotionFilterBase> motionFilter() const { return motionFilter_; }$/;"	f	class:cv::videostab::OnePassStabilizer
motionFilter_	videostab/stabilizer.hpp	/^    Ptr<MotionFilterBase> motionFilter_;$/;"	m	class:cv::videostab::OnePassStabilizer
motionModel	videostab/global_motion.hpp	/^    MotionModel motionModel() const { return motionModel_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
motionModel_	videostab/global_motion.hpp	/^    MotionModel motionModel_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
motionStabilizer	videostab/stabilizer.hpp	/^    Ptr<IMotionStabilizer> motionStabilizer() const { return motionStabilizer_; }$/;"	f	class:cv::videostab::TwoPassStabilizer
motionStabilizer_	videostab/stabilizer.hpp	/^    Ptr<IMotionStabilizer> motionStabilizer_;$/;"	m	class:cv::videostab::TwoPassStabilizer
motion_model	contrib/hybridtracker.hpp	/^    int motion_model;$/;"	m	struct:cv::CvHybridTrackerParams
motions	videostab/deblurring.hpp	/^    virtual const std::vector<Mat>& motions() const { return *motions_; }$/;"	f	class:cv::videostab::DeblurerBase
motions	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& motions() const { return *motions_; }$/;"	f	class:cv::videostab::InpainterBase
motions_	videostab/deblurring.hpp	/^    const std::vector<Mat> *motions_;$/;"	m	class:cv::videostab::DeblurerBase
motions_	videostab/inpainting.hpp	/^    const std::vector<Mat> *motions_;$/;"	m	class:cv::videostab::InpainterBase
motions_	videostab/stabilizer.hpp	/^    std::vector<Mat> motions_; \/\/ motions_[i] is the motion from i-th to i+1-th frame$/;"	m	class:cv::videostab::StabilizerBase
move	flann/any.h	/^    virtual void move(void* const* src, void** dest) { *dest = *src; }$/;"	f	struct:cvflann::anyimpl::small_any_policy
move	flann/any.h	/^    virtual void move(void* const* src, void** dest)$/;"	f	struct:cvflann::anyimpl::big_any_policy
mpi	flann/hdf5.h	/^namespace mpi$/;"	n	namespace:cvflann
ms_params	contrib/hybridtracker.hpp	/^    CvMeanShiftTrackerParams ms_params;$/;"	m	struct:cv::CvHybridTrackerParams
ms_tracker_weight	contrib/hybridtracker.hpp	/^    float ms_tracker_weight;$/;"	m	struct:cv::CvHybridTrackerParams
msg	core/core.hpp	/^    string msg; \/\/\/< the formatted error message$/;"	m	class:cv::Exception
msg	objdetect/objdetect.hpp	/^  char msg[4];$/;"	m	struct:CvDataMatrixCode
msg_type	gpu/gpu.hpp	/^    int msg_type;$/;"	m	class:cv::gpu::StereoBeliefPropagation
msg_type	gpu/gpu.hpp	/^    int msg_type;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
mstracker	contrib/hybridtracker.hpp	/^    CvMeanShiftTracker* mstracker;$/;"	m	class:cv::CvHybridTracker
mtx	core/operations.hpp	/^    Mat mtx;$/;"	m	struct:cv::Formatted
mu	legacy/legacy.hpp	/^    float* mu;          \/*mean vectors corresponding to each mixture*\/$/;"	m	struct:CvEHMMState
mu02	imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu02	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu03	imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu03	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu11	imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu11	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu12	imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu12	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu20	imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu20	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu21	imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu21	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mu30	imgproc/imgproc.hpp	/^    CV_PROP_RW double  mu20, mu11, mu02, mu30, mu21, mu12, mu03;$/;"	m	class:cv::Moments
mu30	imgproc/types_c.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments
mul	core/operations.hpp	/^Matx<_Tp, m, n> Matx<_Tp, m, n>::mul(const Matx<_Tp, m, n>& a) const$/;"	f	class:cv::Matx
mul	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> Vec<_Tp, cn>::mul(const Vec<_Tp, cn>& v) const$/;"	f	class:cv::Vec
mul	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp> Scalar_<_Tp>::mul(const Scalar_<_Tp>& t, double scale ) const$/;"	f	class:cv::Scalar_
multiProcessorCount	core/gpumat.hpp	/^        int multiProcessorCount() const { return multi_processor_count_; }$/;"	f	class:cv::gpu::DeviceInfo
multi_probe_level_	flann/lsh_index.h	/^    unsigned int multi_probe_level_;$/;"	m	class:cvflann::LshIndex
multi_processor_count_	core/gpumat.hpp	/^        int multi_processor_count_;$/;"	m	class:cv::gpu::DeviceInfo
multiplies	gpu/device/functional.hpp	/^        __device__ __forceinline__ multiplies():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::multiplies
multiplies	gpu/device/functional.hpp	/^        __device__ __forceinline__ multiplies(const multiplies& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::multiplies
multiplies	gpu/device/functional.hpp	/^    template <typename T> struct multiplies : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
mustEstTrimRatio_	videostab/stabilizer.hpp	/^    bool mustEstTrimRatio_;$/;"	m	class:cv::videostab::TwoPassStabilizer
mustEstimateTrimaRatio	videostab/stabilizer.hpp	/^    bool mustEstimateTrimaRatio() const { return mustEstTrimRatio_; }$/;"	f	class:cv::videostab::TwoPassStabilizer
mutex_	ts/ts_gtest.h	/^  MutexBase* const mutex_;$/;"	m	class:std::tr1::GTestMutexLock
mutex_	ts/ts_gtest.h	/^  mutable internal::Mutex mutex_;$/;"	m	class:testing::UnitTest
mutex_	ts/ts_gtest.h	/^  pthread_mutex_t mutex_;  \/\/ The underlying pthread mutex.$/;"	m	class:std::tr1::MutexBase
mutex_	ts/ts_gtest.h	/^  pthread_mutex_t mutex_;$/;"	m	class:std::tr1::Notification
mySum	gpu/device/vec_distance.hpp	/^        float mySum;$/;"	m	struct:cv::gpu::device::L1Dist
mySum	gpu/device/vec_distance.hpp	/^        float mySum;$/;"	m	struct:cv::gpu::device::L2Dist
mySum	gpu/device/vec_distance.hpp	/^        int mySum;$/;"	m	struct:cv::gpu::device::HammingDist
mySum	gpu/device/vec_distance.hpp	/^        int mySum;$/;"	m	struct:cv::gpu::device::L1Dist
nChannels	core/types_c.h	/^    int  nChannels;         \/* Most of OpenCV functions support 1,2,3 or 4 channels *\/$/;"	m	struct:_IplImage
nCols	core/types_c.h	/^    int  nCols;$/;"	m	struct:_IplConvKernel
nCols	core/types_c.h	/^    int  nCols;$/;"	m	struct:_IplConvKernelFP
nFeatures_	gpu/gpu.hpp	/^    int nFeatures_;$/;"	m	class:cv::gpu::ORB_GPU
nFrameCount	contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nIt	contrib/contrib.hpp	/^        CV_PROP_RW int      nIt;$/;"	m	class:cv::StereoVar
nIters	ts/ts_perf.hpp	/^    unsigned int nIters;$/;"	m	class:perf::TestBase
nLayers_	gpu/gpu.hpp	/^    int nLayers_;$/;"	m	class:cv::gpu::ImagePyramid
nLevels_	gpu/gpu.hpp	/^    int nLevels_;$/;"	m	class:cv::gpu::ORB_GPU
nMorphingMethod	contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nOctaveLayers	gpu/gpu.hpp	/^    int nOctaveLayers;$/;"	m	class:cv::gpu::SURF_GPU
nOctaveLayers	legacy/compat.hpp	/^    int    nOctaveLayers;$/;"	m	struct:CvSURFParams
nOctaveLayers	nonfree/features2d.hpp	/^    CV_PROP_RW int nOctaveLayers;$/;"	m	class:cv::SIFT
nOctaveLayers	nonfree/features2d.hpp	/^    CV_PROP_RW int nOctaveLayers;$/;"	m	class:cv::SURF
nOctaveLayers	ocl/ocl.hpp	/^            int nOctaveLayers;$/;"	m	class:cv::ocl::SURF_OCL
nOctaves	features2d/features2d.hpp	/^    int nOctaves; \/\/number of octaves$/;"	m	class:cv::FREAK
nOctaves	gpu/gpu.hpp	/^    int nOctaves;$/;"	m	class:cv::gpu::SURF_GPU
nOctaves	legacy/compat.hpp	/^    int    nOctaves;$/;"	m	struct:CvSURFParams
nOctaves	legacy/legacy.hpp	/^    int nOctaves;$/;"	m	class:cv::LDetector
nOctaves	nonfree/features2d.hpp	/^    CV_PROP_RW int nOctaves;$/;"	m	class:cv::SURF
nOctaves	ocl/ocl.hpp	/^            int nOctaves;$/;"	m	class:cv::ocl::SURF_OCL
nOctaves0	features2d/features2d.hpp	/^    int nOctaves0;$/;"	m	class:cv::FREAK
nRows	core/types_c.h	/^    int  nRows;$/;"	m	struct:_IplConvKernel
nRows	core/types_c.h	/^    int  nRows;$/;"	m	struct:_IplConvKernelFP
nSamplingDivider	contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nShadowDetection	gpu/gpu.hpp	/^    unsigned char nShadowDetection; \/\/do shadow detection - insert this value as the detection result - 127 default value$/;"	m	class:cv::gpu::MOG2_GPU
nShadowDetection	video/background_segm.hpp	/^    unsigned char nShadowDetection;\/\/do shadow detection - insert this value as the detection result - 127 default value$/;"	m	class:cv::BackgroundSubtractorMOG2
nShiftR	core/types_c.h	/^    int  nShiftR;$/;"	m	struct:_IplConvKernel
nSize	core/types_c.h	/^    int  nSize;             \/* sizeof(IplImage) *\/$/;"	m	struct:_IplImage
nSkinHueLowerBound	contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nSkinHueUpperBound	contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nStartCounter	contrib/contrib.hpp	/^    int nStartCounter, nFrameCount, nSkinHueLowerBound, nSkinHueUpperBound, nMorphingMethod, nSamplingDivider;$/;"	m	class:CvAdaptiveSkinDetector
nViews	legacy/legacy.hpp	/^    int nViews;$/;"	m	class:cv::LDetector
n_buckets_	flann/lsh_table.h	/^    size_t n_buckets_;$/;"	m	struct:cvflann::lsh::LshStats
n_features_per_level_	gpu/gpu.hpp	/^    std::vector<size_t> n_features_per_level_;$/;"	m	class:cv::gpu::ORB_GPU
n_gauss	legacy/legacy.hpp	/^    int     n_gauss;$/;"	m	struct:CvGaussBGStatModelParams
n_rot_	features2d/features2d.hpp	/^    static const unsigned int n_rot_;    \/\/ discretization of the rotation look-up$/;"	m	class:cv::BRISK
nactive_vars	ml/ml.hpp	/^    CV_PROP_RW int nactive_vars;$/;"	m	struct:CvRTParams
name	core/gpumat.hpp	/^        std::string name() const { return name_; }$/;"	f	class:cv::gpu::DeviceInfo
name	core/types_c.h	/^    const char* name;$/;"	m	struct:CvModuleInfo
name	ts/ts.hpp	/^    string name;$/;"	m	class:cvtest::BaseTest
name	ts/ts_gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestCase
name	ts/ts_gtest.h	/^  const char* name() const { return name_.c_str(); }$/;"	f	class:testing::TestInfo
nameFont	core/core_c.h	/^  const char* nameFont;   \/\/Qt:nameFont$/;"	m	struct:CvFont
name_	core/gpumat.hpp	/^        std::string name_;$/;"	m	class:cv::gpu::DeviceInfo
name_	ts/ts_gtest.h	/^  const std::string name_;               \/\/ Test name$/;"	m	class:testing::TestInfo
name_	ts/ts_gtest.h	/^  internal::String name_;$/;"	m	class:testing::TestCase
narrowBand_	videostab/fast_marching.hpp	/^    std::vector<DXY> narrowBand_; \/\/ narrow band heap$/;"	m	class:cv::videostab::FastMarchingMethod
nbSamples	gpu/gpu.hpp	/^    int nbSamples;         \/\/ number of samples per pixel$/;"	m	class:cv::gpu::VIBE_GPU
nbins	gpu/gpu.hpp	/^    int nbins;$/;"	m	struct:cv::gpu::HOGDescriptor
nbins	objdetect/objdetect.hpp	/^    CV_PROP int nbins;$/;"	m	struct:cv::HOGDescriptor
nbins	ocl/ocl.hpp	/^            int nbins;$/;"	m	struct:cv::ocl::HOGDescriptor
ncategories	objdetect/objdetect.hpp	/^        int ncategories;$/;"	m	class:cv::CascadeClassifier::Data
nclasses	legacy/legacy.hpp	/^        int nclasses;$/;"	m	class:cv::FernDescriptorMatcher::Params
nclasses	legacy/legacy.hpp	/^    int nclasses;$/;"	m	class:cv::FernClassifier
nclasses	ml/ml.hpp	/^    int nclasses;$/;"	m	class:CvRTrees
nclusters	legacy/legacy.hpp	/^    CV_PROP_RW int nclusters;$/;"	m	struct:CvEMParams
nclusters	ml/ml.hpp	/^    CV_PROP_RW int nclusters;$/;"	m	class:cv::EM
ncomps_	stitching/detail/seam_finders.hpp	/^    int ncomps_;$/;"	m	class:cv::detail::DpSeamFinder
ndisp	gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::DisparityBilateralFilter
ndisp	gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::StereoBM_GPU
ndisp	gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::StereoBeliefPropagation
ndisp	gpu/gpu.hpp	/^    int ndisp;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
ne	legacy/legacy.hpp	/^    int* ne;$/;"	m	struct:CvCliqueFinder
needSwapCameras	legacy/legacy.hpp	/^    int needSwapCameras;\/* flag set to 1 if need to swap cameras for good reconstruction *\/$/;"	m	struct:CvStereoCamera
negate	gpu/device/functional.hpp	/^        __device__ __forceinline__ negate():unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::negate
negate	gpu/device/functional.hpp	/^        __device__ __forceinline__ negate(const negate& other):unary_function<T,T>(){}$/;"	f	struct:cv::gpu::device::negate
negate	gpu/device/functional.hpp	/^    template <typename T> struct negate : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
neighbors	objdetect/objdetect.hpp	/^    int neighbors;$/;"	m	struct:CvAvgComp
next	core/operations.hpp	/^inline unsigned RNG::next()$/;"	f	class:cv::RNG
next	core/types_c.h	/^    struct CvAttrList* next;   \/* Pointer to next chunk of the attributes list.                    *\/$/;"	m	struct:CvAttrList	typeref:struct:CvAttrList::CvAttrList
next	core/types_c.h	/^    struct CvMemBlock*  next;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock
next	core/types_c.h	/^    struct CvModuleInfo* next;$/;"	m	struct:CvModuleInfo	typeref:struct:CvModuleInfo::CvModuleInfo
next	core/types_c.h	/^    struct CvSeqBlock*  next; \/* Next sequence block.                       *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock
next	core/types_c.h	/^    struct CvSparseNode* next;$/;"	m	struct:CvSparseNode	typeref:struct:CvSparseNode::CvSparseNode
next	core/types_c.h	/^    struct CvStringHashNode* next;$/;"	m	struct:CvStringHashNode	typeref:struct:CvStringHashNode::CvStringHashNode
next	core/types_c.h	/^    struct CvTypeInfo* next;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo
next	flann/random.h	/^    int next()$/;"	f	class:cvflann::UniqueRandom
next	gpu/device/utility.hpp	/^        __device__ __forceinline__ void next() const$/;"	f	struct:cv::gpu::device::WithOutMask
next	gpu/device/utility.hpp	/^        __device__ __forceinline__ void next()$/;"	f	struct:cv::gpu::device::MaskCollection
next	imgproc/imgproc.hpp	/^        int next[4];$/;"	m	struct:cv::Subdiv2D::QuadEdge
next	legacy/blobtrack.hpp	/^    struct CvDefParam*    next;$/;"	m	struct:CvDefParam	typeref:struct:CvDefParam::CvDefParam
next	legacy/legacy.hpp	/^    struct CvBGCodeBookElem* next;$/;"	m	struct:CvBGCodeBookElem	typeref:struct:CvBGCodeBookElem::CvBGCodeBookElem
next	legacy/legacy.hpp	/^    struct CvVoronoiSite2D *next[2];$/;"	m	struct:CvVoronoiSite2D	typeref:struct:CvVoronoiSite2D::CvVoronoiSite2D
next	ml/ml.hpp	/^    CvDTreeSplit* next;$/;"	m	struct:CvDTreeSplit
next	ml/ml.hpp	/^    CvSVMKernelRow* next;$/;"	m	struct:CvSVMKernelRow
next	ml/ml.hpp	/^    CvVectors* next;$/;"	m	struct:CvVectors
next	objdetect/objdetect.hpp	/^    int next;$/;"	m	struct:CvHaarStageClassifier
nextFrame	videostab/frame_source.hpp	/^    virtual Mat nextFrame() { return Mat(); }$/;"	f	class:cv::videostab::NullFrameSource
nextFrame	videostab/stabilizer.hpp	/^    virtual Mat nextFrame() { return nextStabilizedFrame(); }$/;"	f	class:cv::videostab::OnePassStabilizer
nextPyr_	gpu/gpu.hpp	/^    vector<GpuMat> nextPyr_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
nextPyr_	ocl/ocl.hpp	/^            vector<oclMat> nextPyr_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
next_	ts/ts_gtest.h	/^  mutable linked_ptr_internal const* next_;$/;"	m	class:testing::internal::linked_ptr_internal
nfeatures	features2d/features2d.hpp	/^    CV_PROP_RW int nfeatures;$/;"	m	class:cv::ORB
nfeatures	features2d/features2d.hpp	/^    int nfeatures;$/;"	m	class:cv::GFTTDetector
nfeatures	nonfree/features2d.hpp	/^    CV_PROP_RW int nfeatures;$/;"	m	class:cv::SIFT
nfeatures_	gpu/gpu.hpp	/^    GpuMat nfeatures_;$/;"	m	class:cv::gpu::GMG_GPU
nfeatures_	video/background_segm.hpp	/^    cv::Mat_<int> nfeatures_;$/;"	m	class:cv::BackgroundSubtractorGMG
nframes	video/background_segm.hpp	/^    int nframes;$/;"	m	class:cv::BackgroundSubtractorMOG
nframes	video/background_segm.hpp	/^    int nframes;$/;"	m	class:cv::BackgroundSubtractorMOG2
nframes_	gpu/gpu.hpp	/^    int nframes_;$/;"	m	class:cv::gpu::MOG2_GPU
nframes_	gpu/gpu.hpp	/^    int nframes_;$/;"	m	class:cv::gpu::MOG_GPU
nlevels	features2d/features2d.hpp	/^    CV_PROP_RW int nlevels;$/;"	m	class:cv::ORB
nlevels	gpu/gpu.hpp	/^    int nlevels;$/;"	m	struct:cv::gpu::HOGDescriptor
nlevels	objdetect/objdetect.hpp	/^    CV_PROP int nlevels;$/;"	m	struct:cv::HOGDescriptor
nlevels	ocl/ocl.hpp	/^            int nlevels;$/;"	m	struct:cv::ocl::HOGDescriptor
nmixtures	video/background_segm.hpp	/^    int nmixtures;$/;"	m	class:cv::BackgroundSubtractorMOG
nmixtures	video/background_segm.hpp	/^    int nmixtures;$/;"	m	class:cv::BackgroundSubtractorMOG2
nmixtures_	gpu/gpu.hpp	/^    int nmixtures_;$/;"	m	class:cv::gpu::MOG2_GPU
nmixtures_	gpu/gpu.hpp	/^    int nmixtures_;$/;"	m	class:cv::gpu::MOG_GPU
nnIndex	flann/flann.hpp	/^        ::cvflann::Index<Distance>* nnIndex;$/;"	m	class:cv::flann::GenericIndex
nnIndex_	flann/flann_base.hpp	/^    NNIndex<Distance>* nnIndex_;$/;"	m	class:cvflann::Index
nnIndex_L1	flann/flann.hpp	/^        ::cvflann::Index< L1<ElementType> >* nnIndex_L1;$/;"	m	class:cv::flann::Index_
nnIndex_L2	flann/flann.hpp	/^        ::cvflann::Index< L2<ElementType> >* nnIndex_L2;$/;"	m	class:cv::flann::Index_
noLongPairs_	features2d/features2d.hpp	/^    unsigned int noLongPairs_;             \/\/ number of longParis$/;"	m	class:cv::BRISK
noOfSigBits	legacy/blobtrack.hpp	/^    int     noOfSigBits;$/;"	m	struct:CvBlobTrackerParamMS
noShortPairs_	features2d/features2d.hpp	/^    unsigned int noShortPairs_;         \/\/ number of shortParis$/;"	m	class:cv::BRISK
nod	legacy/legacy.hpp	/^    int* nod;$/;"	m	struct:CvCliqueFinder
node	core/core_c.h	/^    const void* node;$/;"	m	struct:CvTreeNodeIterator
node	core/core_c.h	/^CVAPI(const char*) cvGetFileNodeName( const CvFileNode* node );$/;"	v
node	core/mat.hpp	/^inline SparseMat::Node* SparseMat::node(size_t nidx)$/;"	f	class:cv::SparseMat
node	core/mat.hpp	/^inline SparseMat::Node* SparseMatIterator::node() const$/;"	f	class:cv::SparseMatIterator
node	core/mat.hpp	/^inline const SparseMat::Node* SparseMat::node(size_t nidx) const$/;"	f	class:cv::SparseMat
node	core/mat.hpp	/^inline const SparseMat::Node* SparseMatConstIterator::node() const$/;"	f	class:cv::SparseMatConstIterator
node	core/types_c.h	/^    CvSparseNode* node;$/;"	m	struct:CvSparseMatIterator
node	flann/result_set.h	/^    T node;           \/* Tree node at which search resumes *\/$/;"	m	struct:cvflann::BranchStruct
nodeCount	objdetect/objdetect.hpp	/^            int nodeCount;$/;"	m	struct:cv::CascadeClassifier::Data::DTree
node_heap	ml/ml.hpp	/^    CvSet* node_heap;$/;"	m	struct:CvDTreeTrainData
node_risk	ml/ml.hpp	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode
nodes	contrib/contrib.hpp	/^        vector<Node> nodes;$/;"	m	class:cv::Octree
nodes	objdetect/objdetect.hpp	/^        vector<DTreeNode> nodes;$/;"	m	class:cv::CascadeClassifier::Data
nodes_	legacy/legacy.hpp	/^    vector<RTreeNode> nodes_;$/;"	m	class:cv::RandomizedTree
noiseRange	legacy/legacy.hpp	/^    double noiseRange;$/;"	m	class:cv::PatchGenerator
noiseSigma	gpu/gpu.hpp	/^    float noiseSigma;$/;"	m	class:cv::gpu::MOG_GPU
noiseSigma	video/background_segm.hpp	/^    double noiseSigma;$/;"	m	class:cv::BackgroundSubtractorMOG
nonfatally_failed	ts/ts_gtest.h	/^  bool nonfatally_failed() const { return type_ == kNonFatalFailure; }$/;"	f	class:testing::TestPartResult
nonmaxSuppression	features2d/features2d.hpp	/^    bool nonmaxSuppression;$/;"	m	class:cv::FastFeatureDetector
nonmaxSupression	gpu/gpu.hpp	/^    bool nonmaxSupression;$/;"	m	class:cv::gpu::FAST_GPU
nonmax_	features2d/features2d.hpp	/^    bool nonmax_;$/;"	m	class:cv::FastAdjuster
norm	core/operations.hpp	/^double norm(const Matx<_Tp, m, n>& M)$/;"	f	namespace:cv
norm	core/operations.hpp	/^double norm(const Matx<_Tp, m, n>& M, int normType)$/;"	f	namespace:cv
norm	core/operations.hpp	/^template<typename _Tp> static inline double norm(const Point3_<_Tp>& pt)$/;"	f	namespace:cv
norm	core/operations.hpp	/^template<typename _Tp> static inline double norm(const Point_<_Tp>& pt)$/;"	f	namespace:cv
normInf	core/operations.hpp	/^_AccTp normInf(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normInf	core/operations.hpp	/^_AccTp normInf(const _Tp* a, int n)$/;"	f	namespace:cv
normL1	core/operations.hpp	/^_AccTp normL1(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normL1	core/operations.hpp	/^_AccTp normL1(const _Tp* a, int n)$/;"	f	namespace:cv
normL1	core/operations.hpp	/^template<> inline float normL1(const float* a, const float* b, int n)$/;"	f	namespace:cv
normL1	core/operations.hpp	/^template<> inline int normL1(const uchar* a, const uchar* b, int n)$/;"	f	namespace:cv
normL2	stitching/detail/util_inl.hpp	/^float normL2(const Point3f& a)$/;"	f	namespace:cv::detail
normL2	stitching/detail/util_inl.hpp	/^float normL2(const Point3f& a, const Point3f& b)$/;"	f	namespace:cv::detail
normL2Sqr	core/operations.hpp	/^_AccTp normL2Sqr(const _Tp* a, const _Tp* b, int n)$/;"	f	namespace:cv
normL2Sqr	core/operations.hpp	/^_AccTp normL2Sqr(const _Tp* a, int n)$/;"	f	namespace:cv
normL2Sqr	core/operations.hpp	/^template<> inline float normL2Sqr(const float* a, const float* b, int n)$/;"	f	namespace:cv
normL2sq	stitching/detail/util_inl.hpp	/^double normL2sq(const Mat &r)$/;"	f	namespace:cv::detail
normType	features2d/features2d.hpp	/^    enum { normType = NORM_HAMMING + (cellsize>1) };$/;"	e	enum:cv::HammingMultilevel::__anon241
normType	features2d/features2d.hpp	/^    enum { normType = NORM_HAMMING };$/;"	e	enum:cv::Hamming::__anon240
normType	features2d/features2d.hpp	/^    enum { normType = NORM_L1 };$/;"	e	enum:cv::L1::__anon239
normType	features2d/features2d.hpp	/^    enum { normType = NORM_L2 };$/;"	e	enum:cv::L2::__anon238
normType	features2d/features2d.hpp	/^    enum { normType = NORM_L2SQR };$/;"	e	enum:cv::SL2::__anon237
normType	features2d/features2d.hpp	/^    int normType;$/;"	m	class:cv::BFMatcher
normType	ocl/ocl.hpp	/^            enum { normType = NORM_HAMMING };$/;"	e	enum:cv::ocl::Hamming::__anon266
normType	ocl/ocl.hpp	/^            enum { normType = NORM_L1 };$/;"	e	enum:cv::ocl::L1::__anon264
normType	ocl/ocl.hpp	/^            enum { normType = NORM_L2 };$/;"	e	enum:cv::ocl::L2::__anon265
normalRadius	contrib/contrib.hpp	/^        float normalRadius;$/;"	m	class:cv::SpinImageModel
normal_	core/opengl_interop.hpp	/^    GlBuffer normal_;$/;"	m	class:cv::GlArrays
normaliseOutput	contrib/retina.hpp	/^               bool colorMode, normaliseOutput;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
normaliseOutput	contrib/retina.hpp	/^               bool normaliseOutput;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
normalize	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn> normalize(const Vec<_Tp, cn>& v)$/;"	f	namespace:cv
normals	contrib/contrib.hpp	/^        vector<Point3f> normals;$/;"	m	class:cv::Mesh3D
not1	gpu/device/functional.hpp	/^    template <typename Predicate> __host__ __device__ __forceinline__ unary_negate<Predicate> not1(const Predicate& pred)$/;"	f	namespace:cv::gpu::device
not2	gpu/device/functional.hpp	/^    template <typename BinaryPredicate> __host__ __device__ __forceinline__ binary_negate<BinaryPredicate> not2(const BinaryPredicate& pred)$/;"	f	namespace:cv::gpu::device
not_equal_to	gpu/device/functional.hpp	/^        __device__ __forceinline__ not_equal_to():binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::not_equal_to
not_equal_to	gpu/device/functional.hpp	/^        __device__ __forceinline__ not_equal_to(const not_equal_to& other):binary_function<T,T,bool>(){}$/;"	f	struct:cv::gpu::device::not_equal_to
not_equal_to	gpu/device/functional.hpp	/^    template <typename T> struct not_equal_to : binary_function<T, T, bool>$/;"	s	namespace:cv::gpu::device
notified_	ts/ts_gtest.h	/^  bool notified_;$/;"	m	class:std::tr1::Notification
nr_plane	gpu/gpu.hpp	/^    int nr_plane;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
nsamples	ml/ml.hpp	/^    int nsamples;$/;"	m	class:CvRTrees
nstructs	legacy/legacy.hpp	/^        int nstructs;$/;"	m	class:cv::FernDescriptorMatcher::Params
nstructs	legacy/legacy.hpp	/^    int nstructs;$/;"	m	class:cv::FernClassifier
ntrees	ml/ml.hpp	/^    int ntrees;$/;"	m	class:CvRTrees
ntrees	objdetect/objdetect.hpp	/^            int ntrees;$/;"	m	struct:cv::CascadeClassifier::Data::Stage
nu	ml/ml.hpp	/^    CV_PROP_RW double      nu; \/\/ for CV_SVM_NU_SVC, CV_SVM_ONE_CLASS, and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams
nu02	imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu03	imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu11	imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu12	imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu20	imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu21	imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
nu30	imgproc/imgproc.hpp	/^    CV_PROP_RW double  nu20, nu11, nu02, nu30, nu21, nu12, nu03;$/;"	m	class:cv::Moments
numBands	stitching/detail/blenders.hpp	/^    int numBands() const { return actual_num_bands_; }$/;"	f	class:cv::detail::MultiBandBlender
numClasses	objdetect/objdetect.hpp	/^  int numClasses() const { return static_cast<int>(class_templates.size()); }$/;"	f	class:cv::linemod::Detector
numDetectedFrames	contrib/detection_based_tracker.hpp	/^            int numDetectedFrames;$/;"	m	struct:DetectionBasedTracker::TrackedObject
numFeatures	objdetect/objdetect.hpp	/^    int numFeatures;$/;"	m	struct:CvLSVMFilterObject
numFramesNotDetected	contrib/detection_based_tracker.hpp	/^            int numFramesNotDetected;$/;"	m	struct:DetectionBasedTracker::TrackedObject
numInitializationFrames	gpu/gpu.hpp	/^    int numInitializationFrames;$/;"	m	class:cv::gpu::GMG_GPU
numInitializationFrames	video/background_segm.hpp	/^    int     numInitializationFrames;$/;"	m	class:cv::BackgroundSubtractorGMG
numIters	contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
numIters	gpu/gpu.hpp	/^    int numIters;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
numLastPositionsToTrack	contrib/detection_based_tracker.hpp	/^            int numLastPositionsToTrack;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numLevels	gpu/gpu.hpp	/^    int numLevels;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
numSamples	contrib/openfabmap.hpp	/^    int numSamples;$/;"	m	class:cv::of2::FabMap
numShifts	contrib/contrib.hpp	/^        int ldx, ldy, ldw, ldh, numShifts, numIters;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
numStepsToShowWithoutDetecting	contrib/detection_based_tracker.hpp	/^            int numStepsToShowWithoutDetecting;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numStepsToTrackWithoutDetectingIfObjectHasNotBeenShown	contrib/detection_based_tracker.hpp	/^            int numStepsToTrackWithoutDetectingIfObjectHasNotBeenShown;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numStepsToWaitBeforeFirstShow	contrib/detection_based_tracker.hpp	/^            int numStepsToWaitBeforeFirstShow;$/;"	m	struct:DetectionBasedTracker::InnerParameters
numTrackedSteps	contrib/detection_based_tracker.hpp	/^        int numTrackedSteps;$/;"	m	class:DetectionBasedTracker
numVertices	stitching/detail/util.hpp	/^    int numVertices() const { return static_cast<int>(edges_.size()); }$/;"	f	class:cv::detail::Graph
num_bands_	stitching/detail/blenders.hpp	/^    int actual_num_bands_, num_bands_;$/;"	m	class:cv::detail::MultiBandBlender
num_cam_param	contrib/contrib.hpp	/^        int num_cam_param;$/;"	m	class:cv::LevMarqSparse
num_cams	contrib/contrib.hpp	/^        int num_cams;$/;"	m	class:cv::LevMarqSparse
num_components	objdetect/objdetect.hpp	/^    int num_components;$/;"	m	struct:CvLatentSvmDetector
num_err_param	contrib/contrib.hpp	/^        int num_err_param;$/;"	m	class:cv::LevMarqSparse
num_errs_per_measurement_	stitching/detail/motion_estimators.hpp	/^    int num_errs_per_measurement_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_features	objdetect/objdetect.hpp	/^  size_t num_features;$/;"	m	class:cv::linemod::ColorGradient
num_features	objdetect/objdetect.hpp	/^  size_t num_features;$/;"	m	class:cv::linemod::DepthNormal
num_filters	objdetect/objdetect.hpp	/^    int num_filters;$/;"	m	struct:CvLatentSvmDetector
num_images_	stitching/detail/motion_estimators.hpp	/^    int num_images_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_inliers	stitching/detail/matchers.hpp	/^    int num_inliers;                    \/\/ Number of geometrically consistent matches$/;"	m	struct:cv::detail::MatchesInfo
num_layers_	stitching/detail/matchers.hpp	/^    int num_octaves_, num_layers_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_layers_descr_	stitching/detail/matchers.hpp	/^    int num_octaves_descr_, num_layers_descr_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_leaves_	legacy/legacy.hpp	/^    int num_leaves_;$/;"	m	class:cv::RandomizedTree
num_matches_thresh1_	stitching/detail/matchers.hpp	/^    int num_matches_thresh1_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
num_matches_thresh2_	stitching/detail/matchers.hpp	/^    int num_matches_thresh2_;$/;"	m	class:cv::detail::BestOf2NearestMatcher
num_mix	legacy/legacy.hpp	/^    int num_mix;        \/*number of mixtures in this state*\/$/;"	m	struct:CvEHMMState
num_octaves_	stitching/detail/matchers.hpp	/^    int num_octaves_, num_layers_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_octaves_descr_	stitching/detail/matchers.hpp	/^    int num_octaves_descr_, num_layers_descr_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
num_params_per_cam_	stitching/detail/motion_estimators.hpp	/^    int num_params_per_cam_;$/;"	m	class:cv::detail::BundleAdjusterBase
num_part_filters	objdetect/objdetect.hpp	/^    int* num_part_filters;$/;"	m	struct:CvLatentSvmDetector
num_point_param	contrib/contrib.hpp	/^        int num_point_param;$/;"	m	class:cv::LevMarqSparse
num_points	contrib/contrib.hpp	/^        int num_points;$/;"	m	class:cv::LevMarqSparse
num_quant_bits_	legacy/legacy.hpp	/^    int num_quant_bits_;$/;"	m	class:cv::RTreeClassifier
num_states	legacy/legacy.hpp	/^    int num_states; \/* number of HMM states *\/$/;"	m	struct:CvEHMM
num_valid	ml/ml.hpp	/^    int* num_valid;$/;"	m	struct:CvDTreeNode
numberOfAngles	contrib/contrib.hpp	/^        int numberOfAngles;$/;"	m	class:cv::SelfSimDescriptor
numberOfDisparities	calib3d/calib3d.hpp	/^    CV_PROP_RW int numberOfDisparities;$/;"	m	class:cv::StereoSGBM
numberOfDisparities	calib3d/calib3d.hpp	/^    int numberOfDisparities; \/\/ maximum disparity - minimum disparity (> 0)$/;"	m	struct:CvStereoBMState
numberOfDisparities	legacy/legacy.hpp	/^    int numberOfDisparities;$/;"	m	struct:CvStereoGCState
numberOfDistanceBuckets	contrib/contrib.hpp	/^        int numberOfDistanceBuckets;$/;"	m	class:cv::SelfSimDescriptor
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<bool>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<char>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<double>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<float>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<int>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<long>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<short>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<signed char>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned char>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned int>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned long>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<> struct numeric_limits<unsigned short>$/;"	s	namespace:cv::gpu::device
numeric_limits	gpu/device/limits.hpp	/^    template<class T> struct numeric_limits$/;"	s	namespace:cv::gpu::device
nv_heap	ml/ml.hpp	/^    CvSet* nv_heap;$/;"	m	struct:CvDTreeTrainData
nviews	legacy/legacy.hpp	/^        int nviews;$/;"	m	class:cv::FernDescriptorMatcher::Params
nzcount	core/mat.hpp	/^inline size_t SparseMat::nzcount() const$/;"	f	class:cv::SparseMat
obj	ml/ml.hpp	/^    double obj;$/;"	m	struct:CvSVMSolutionInfo
object	flann/any.h	/^    void* object;$/;"	m	struct:cvflann::any
object_registry	flann/object_factory.h	/^    ObjectRegistry object_registry;$/;"	m	class:cvflann::ObjectFactory
obs	legacy/legacy.hpp	/^    float* obs;\/\/consequtive observations$/;"	m	struct:CvImgObsInfo
obsProb	legacy/legacy.hpp	/^    float** obsProb; \/* if level == 0 - array of brob matrices corresponding to hmm$/;"	m	struct:CvEHMM
obs_info	legacy/legacy.hpp	/^CVAPI(void)  cvReleaseObsInfo( CvImgObsInfo** obs_info );$/;"	v
obs_size	legacy/legacy.hpp	/^    int obs_size;$/;"	m	struct:CvImgObsInfo
obs_x	legacy/legacy.hpp	/^    int obs_x;$/;"	m	struct:CvImgObsInfo
obs_y	legacy/legacy.hpp	/^    int obs_y;$/;"	m	struct:CvImgObsInfo
occlusionCost	legacy/legacy.hpp	/^    int occlusionCost;$/;"	m	struct:CvStereoGCState
ocl	ocl/matrix_operations.hpp	/^    namespace ocl$/;"	n	namespace:cv
ocl	ocl/ocl.hpp	/^    namespace ocl$/;"	n	namespace:cv
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat() : flags(0), rows(0), cols(0), step(0), data(0), refcount(0), datastart(0), dataend(0), offset(0), wholerows(0), wholecols(0) {}$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(Size _size, int _type) : flags(0), rows(0), cols(0), step(0), data(0), refcount(0), datastart(0), dataend(0), offset(0), wholerows(0), wholecols(0)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(Size _size, int _type, const Scalar &_s)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(Size _size, int _type, void *_data, size_t _step)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const Mat &m)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const oclMat &m)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const oclMat &m, const Range &rowRange, const Range &colRange)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(const oclMat &m, const Rect &roi)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(int _rows, int _cols, int _type) : flags(0), rows(0), cols(0), step(0), data(0), refcount(0), datastart(0), dataend(0), offset(0), wholerows(0), wholecols(0)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(int _rows, int _cols, int _type, const Scalar &_s)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::oclMat(int _rows, int _cols, int _type, void *_data, size_t _step)$/;"	f	class:cv::ocl::oclMat
oclMat	ocl/ocl.hpp	/^        class CV_EXPORTS oclMat$/;"	c	namespace:cv::ocl
oclchannels	ocl/matrix_operations.hpp	/^        inline int oclMat::oclchannels() const$/;"	f	class:cv::ocl::oclMat
ocltype	ocl/matrix_operations.hpp	/^        inline int oclMat::ocltype() const$/;"	f	class:cv::ocl::oclMat
octave	features2d/features2d.hpp	/^    CV_PROP_RW int octave; \/\/!< octave (pyramid layer) from which the keypoint has been extracted$/;"	m	class:cv::KeyPoint
octaves	features2d/features2d.hpp	/^    CV_PROP_RW int octaves;$/;"	m	class:cv::BRISK
octree	contrib/contrib.hpp	/^        Octree octree;$/;"	m	class:cv::Mesh3D
of2	contrib/openfabmap.hpp	/^namespace of2 {$/;"	n	namespace:cv
offset	ml/ml.hpp	/^    int offset;$/;"	m	struct:CvDTreeNode
offset	ocl/ocl.hpp	/^            int offset;$/;"	m	class:cv::ocl::oclMat
offset1	legacy/legacy.hpp	/^    short offset1, offset2;$/;"	m	struct:cv::RTreeNode
offset2	legacy/legacy.hpp	/^    short offset1, offset2;$/;"	m	struct:cv::RTreeNode
oldCascade	objdetect/objdetect.hpp	/^    Ptr<CvHaarClassifierCascade> oldCascade;$/;"	m	class:cv::CascadeClassifier
old_state	ts/ts.hpp	/^    const uint64 old_state;$/;"	m	struct:cvtest::DefaultRngAuto
ones	core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::ones(Size sz)$/;"	f	class:cv::Mat_
ones	core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::ones(int rows, int cols)$/;"	f	class:cv::Mat_
ones	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::ones()$/;"	f	class:cv::Matx
oob_error	ml/ml.hpp	/^    double oob_error;$/;"	m	class:CvRTrees
op	core/mat.hpp	/^    const MatOp* op;$/;"	m	class:cv::MatExpr
op	gpu/device/functional.hpp	/^        const Op op;$/;"	m	struct:cv::gpu::device::binder1st
op	gpu/device/functional.hpp	/^        const Op op;$/;"	m	struct:cv::gpu::device::binder2nd
operator !	core/operations.hpp	/^static inline bool operator !(const Range& r)$/;"	f	namespace:cv
operator !=	core/mat.hpp	/^inline bool Mat::MSize::operator != (const MSize& sz) const$/;"	f	class:cv::Mat::MSize
operator !=	core/mat.hpp	/^operator != (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator !=	core/mat.hpp	/^operator != (const MatConstIterator_<_Tp>& a, const MatConstIterator_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/mat.hpp	/^operator != (const MatIterator_<_Tp>& a, const MatIterator_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/mat.hpp	/^static inline bool operator != (const SparseMatConstIterator& it1, const SparseMatConstIterator& it2)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^bool operator != (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^bool operator != (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^static inline bool operator != (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^static inline bool operator != (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^template<typename _Tp> inline bool operator != (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^template<typename _Tp> static inline bool operator != ( const Scalar_<_Tp>& a, const Scalar_<_Tp>& b )$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator !=	core/operations.hpp	/^template<typename _Tp> static inline bool operator != (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator !=	ts/ts_gtest.h	/^  bool operator!=(T* p) const { return value_ != p; }$/;"	f	class:testing::internal::linked_ptr
operator !=	ts/ts_gtest.h	/^  bool operator!=(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator !=	ts/ts_gtest.h	/^  bool operator!=(const char* a_c_str) const { return !(*this == a_c_str); }$/;"	f	class:testing::internal::String
operator !=	ts/ts_gtest.h	/^  bool operator!=(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator !=	ts/ts_gtest.h	/^bool operator!=(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator &	core/operations.hpp	/^static inline Range operator & (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator &	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator & (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator &=	core/mat.hpp	/^operator &= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator &=	core/mat.hpp	/^operator &= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator &=	core/mat.hpp	/^static inline Mat& operator &= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator &=	core/mat.hpp	/^static inline Mat& operator &= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator &=	core/operations.hpp	/^static inline Range& operator &= (Range& r1, const Range& r2)$/;"	f	namespace:cv
operator &=	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator &= ( Rect_<_Tp>& a, const Rect_<_Tp>& b )$/;"	f	namespace:cv
operator ()	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__       T& operator ()(int y, int x)       { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrStep
operator ()	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ T& operator ()(int y, int x) { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrElemStep_
operator ()	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T& operator ()(int y, int x) const { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrElemStep_
operator ()	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T& operator ()(int y, int x) const { return ptr(y)[x]; }$/;"	f	struct:cv::gpu::PtrStep
operator ()	core/gpumat.hpp	/^    inline GpuMat GpuMat::operator()(Range _rowRange, Range _colRange) const$/;"	f	class:cv::gpu::GpuMat
operator ()	core/gpumat.hpp	/^    inline GpuMat GpuMat::operator()(Rect roi) const$/;"	f	class:cv::gpu::GpuMat
operator ()	core/mat.hpp	/^SparseMat_<_Tp>::operator()(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.hpp	/^SparseMat_<_Tp>::operator()(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.hpp	/^SparseMat_<_Tp>::operator()(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.hpp	/^SparseMat_<_Tp>::operator()(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat_
operator ()	core/mat.hpp	/^inline Mat Mat::operator()( Range _rowRange, Range _colRange ) const$/;"	f	class:cv::Mat
operator ()	core/mat.hpp	/^inline Mat Mat::operator()( const Rect& roi ) const$/;"	f	class:cv::Mat
operator ()	core/mat.hpp	/^inline Mat Mat::operator()(const Range* ranges) const$/;"	f	class:cv::Mat
operator ()	core/mat.hpp	/^inline Size Mat::MSize::operator()() const$/;"	f	class:cv::Mat::MSize
operator ()	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::operator()( const Range& _rowRange, const Range& _colRange ) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::operator()( const Range* ranges ) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::operator()( const Rect& roi ) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(Point pt)$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(const int* idx)$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(int i0)$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(int i0, int i1)$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline _Tp& Mat_<_Tp>::operator ()(int i0, int i1, int i2)$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(Point pt) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(const int* idx) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(int i0) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(int i0, int i1) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> inline const _Tp& Mat_<_Tp>::operator ()(int i0, int i1, int i2) const$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> template<int n> inline _Tp& Mat_<_Tp>::operator ()(const Vec<int, n>& idx)$/;"	f	class:cv::Mat_
operator ()	core/mat.hpp	/^template<typename _Tp> template<int n> inline const _Tp& Mat_<_Tp>::operator ()(const Vec<int, n>& idx) const$/;"	f	class:cv::Mat_
operator ()	core/operations.hpp	/^    Vector operator() (const Range& r) const { return Vector(*this, r); }$/;"	f	class:cv::Vector
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 2, 2>& a, Matx<_Tp, 2, 2>& b, int) const$/;"	f	struct:cv::Matx_FastInvOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 2, 2>& a, const Matx<_Tp, 2, 1>& b,$/;"	f	struct:cv::Matx_FastSolveOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 3, 3>& a, Matx<_Tp, 3, 3>& b, int) const$/;"	f	struct:cv::Matx_FastInvOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, 3, 3>& a, const Matx<_Tp, 3, 1>& b,$/;"	f	struct:cv::Matx_FastSolveOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, m, m>& a, Matx<_Tp, m, m>& b, int method) const$/;"	f	struct:cv::Matx_FastInvOp
operator ()	core/operations.hpp	/^    bool operator()(const Matx<_Tp, m, m>& a, const Matx<_Tp, m, n>& b,$/;"	f	struct:cv::Matx_FastSolveOp
operator ()	core/operations.hpp	/^    bool operator()(const _Tp& a, const _Tp& b) const { return a < b; }$/;"	f	class:cv::LessThan
operator ()	core/operations.hpp	/^    bool operator()(const _Tp& a, const _Tp& b) const { return a >= b; }$/;"	f	class:cv::GreaterEq
operator ()	core/operations.hpp	/^    bool operator()(int a, int b) const { return arr[a] < arr[b]; }$/;"	f	class:cv::LessThanIdx
operator ()	core/operations.hpp	/^    bool operator()(int a, int b) const { return arr[a] >= arr[b]; }$/;"	f	class:cv::GreaterEqIdx
operator ()	core/operations.hpp	/^    double operator ()(const Matx<_Tp, 1, 1>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	core/operations.hpp	/^    double operator ()(const Matx<_Tp, 2, 2>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	core/operations.hpp	/^    double operator ()(const Matx<_Tp, 3, 3>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	core/operations.hpp	/^    double operator ()(const Matx<_Tp, m, m>& a) const$/;"	f	struct:cv::Matx_DetOp
operator ()	core/operations.hpp	/^    void operator()(const vector<_Tp>& vec) const$/;"	f	class:cv::VecWriterProxy
operator ()	core/operations.hpp	/^    void operator()(vector<_Tp>& vec, size_t count) const$/;"	f	class:cv::VecReaderProxy
operator ()	core/operations.hpp	/^_Tp& Matx<_Tp, m, n>::operator ()(int i)$/;"	f	class:cv::Matx
operator ()	core/operations.hpp	/^_Tp& Matx<_Tp, m, n>::operator ()(int i, int j)$/;"	f	class:cv::Matx
operator ()	core/operations.hpp	/^const _Tp& Matx<_Tp, m, n>::operator ()(int i) const$/;"	f	class:cv::Matx
operator ()	core/operations.hpp	/^const _Tp& Matx<_Tp, m, n>::operator ()(int i, int j) const$/;"	f	class:cv::Matx
operator ()	core/operations.hpp	/^inline unsigned RNG::operator ()() {return next();}$/;"	f	class:cv::RNG
operator ()	core/operations.hpp	/^inline unsigned RNG::operator ()(unsigned N) {return (unsigned)uniform(0,N);}$/;"	f	class:cv::RNG
operator ()	core/operations.hpp	/^template<typename _Tp, int cn> inline _Tp& Vec<_Tp, cn>::operator ()(int i)$/;"	f	class:cv::Vec
operator ()	core/operations.hpp	/^template<typename _Tp, int cn> inline const _Tp& Vec<_Tp, cn>::operator ()(int i) const$/;"	f	class:cv::Vec
operator ()	core/wimage.hpp	/^    inline T* operator() (int c, int r)  {$/;"	f	class:cv::WImage
operator ()	core/wimage.hpp	/^    inline const T* operator() (int c, int r) const  {$/;"	f	class:cv::WImage
operator ()	features2d/features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::L1
operator ()	features2d/features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::L2
operator ()	features2d/features2d.hpp	/^    ResultType operator()( const T* a, const T* b, int size ) const$/;"	f	struct:cv::SL2
operator ()	features2d/features2d.hpp	/^    ResultType operator()( const unsigned char* a, const unsigned char* b, int size ) const$/;"	f	struct:cv::Hamming
operator ()	features2d/features2d.hpp	/^    ResultType operator()( const unsigned char* a, const unsigned char* b, int size ) const$/;"	f	struct:cv::HammingMultilevel
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::Hamming
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::Hamming2
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::HellingerDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType \/*worst_dist*\/ = -1) const$/;"	f	struct:cvflann::L2_Simple
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::ChiSquareDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::HistIntersectionDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::KL_Divergence
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::L1
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::L2
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::MaxDistance
operator ()	flann/dist.h	/^    ResultType operator()(Iterator1 a, Iterator2 b, size_t size, ResultType worst_dist = -1) const$/;"	f	struct:cvflann::MinkowskiDistance
operator ()	flann/dist.h	/^    ResultType operator()(const unsigned char* a, const unsigned char* b, int size) const$/;"	f	struct:cvflann::HammingLUT
operator ()	flann/dist.h	/^    ResultType operator()(const unsigned char* a, const unsigned char* b, size_t size) const$/;"	f	struct:cvflann::HammingLUT2
operator ()	flann/heap.h	/^        bool operator()(const T& t_1, const T& t_2) const$/;"	f	struct:cvflann::Heap::CompareT
operator ()	flann/lsh_index.h	/^        bool operator()(const ScoreIndexPair& left, const ScoreIndexPair& right) const$/;"	f	struct:cvflann::LshIndex::SortScoreIndexPairOnSecond
operator ()	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ D operator ()(index_type y, index_type x) const$/;"	f	struct:cv::gpu::device::BorderReader
operator ()	gpu/device/border_interpolate.hpp	/^        __device__ __forceinline__ elem_type operator ()(index_type y, index_type x) const$/;"	f	struct:cv::gpu::device::BorderReader
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ T operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2YUV
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator ()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(T src) const$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2Gray
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52Gray
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uchar3 operator()(ushort src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2YCrCb
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::YCrCb2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator ()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::YUV2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::HLS2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::HSV2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HLS
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2HSV
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2XYZ
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::XYZ2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ uint operator()(ushort src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB5x52RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(const uchar3& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::Gray2RGB5x5
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ __forceinline__ ushort operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB5x5
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ typename TypeVec<T, dcn>::vec_type operator()(const typename TypeVec<T, scn>::vec_type& src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
operator ()	gpu/device/detail/color_detail.hpp	/^            __device__ uint operator()(uint src) const$/;"	f	struct:cv::gpu::device::color_detail::RGB2RGB
operator ()	gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::AreaFilter
operator ()	gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::IntegerAreaFilter
operator ()	gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::LinearFilter
operator ()	gpu/device/filters.hpp	/^        __device__ __forceinline__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::PointFilter
operator ()	gpu/device/filters.hpp	/^        __device__ elem_type operator ()(float y, float x) const$/;"	f	struct:cv::gpu::device::CubicFilter
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ D operator ()(typename TypeTraits<T>::ParameterType v) const$/;"	f	struct:cv::gpu::device::saturate_cast_func
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a) const$/;"	f	struct:cv::gpu::device::negate
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::bit_and
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::bit_or
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::bit_xor
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::divides
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::minus
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::modulus
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::multiplies
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::plus
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType src1, typename TypeTraits<T>::ParameterType src2) const$/;"	f	struct:cv::gpu::device::hypot_sqr_func
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator ()(typename TypeTraits<T>::ParameterType v) const$/;"	f	struct:cv::gpu::device::bit_not
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType lhs, typename TypeTraits<T>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::maximum
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType lhs, typename TypeTraits<T>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::minimum
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_binary_func
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ T operator()(typename TypeTraits<T>::ParameterType src) const$/;"	f	struct:cv::gpu::device::thresh_trunc_func
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a) const$/;"	f	struct:cv::gpu::device::logical_not
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::equal_to
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::greater
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::greater_equal
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::less
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::less_equal
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::logical_and
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::logical_or
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator ()(typename TypeTraits<T>::ParameterType a,$/;"	f	struct:cv::gpu::device::not_equal_to
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ bool operator()(typename TypeTraits<typename Predicate::first_argument_type>::ParameterType x,$/;"	f	struct:cv::gpu::device::binary_negate
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ typename Op::result_type operator ()(typename TypeTraits<typename Op::second_argument_type>::ParameterType a) const$/;"	f	struct:cv::gpu::device::binder1st
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T1>::ParameterType operator()(typename TypeTraits<T1>::ParameterType lhs, typename TypeTraits<T2>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::project1st
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T2>::ParameterType operator()(typename TypeTraits<T1>::ParameterType lhs, typename TypeTraits<T2>::ParameterType rhs) const$/;"	f	struct:cv::gpu::device::project2nd
operator ()	gpu/device/functional.hpp	/^        __device__ __forceinline__ typename TypeTraits<T>::ParameterType operator()(typename TypeTraits<T>::ParameterType x) const$/;"	f	struct:cv::gpu::device::identity
operator ()	gpu/device/functional.hpp	/^        __forceinline__ __device__ typename Op::result_type operator ()(typename TypeTraits<typename Op::first_argument_type>::ParameterType a) const$/;"	f	struct:cv::gpu::device::binder2nd
operator ()	gpu/device/functional.hpp	/^      __device__ __forceinline__ bool operator()(typename TypeTraits<typename Predicate::argument_type>::ParameterType x) const$/;"	f	struct:cv::gpu::device::unary_negate
operator ()	gpu/device/scan.hpp	/^        __device__ __forceinline__ T operator()( volatile T *ptr , const unsigned int idx)$/;"	f	struct:cv::gpu::device::WarpScan
operator ()	gpu/device/scan.hpp	/^        __device__ __forceinline__ T operator()( volatile T *ptr , const unsigned int idx)$/;"	f	struct:cv::gpu::device::WarpScanNoComp
operator ()	gpu/device/scan.hpp	/^        __device__ __forceinline__ T operator()(volatile T *ptr)$/;"	f	struct:cv::gpu::device::BlockScan
operator ()	gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::gpu::device::MaskCollection
operator ()	gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::gpu::device::SingleMask
operator ()	gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int y, int x) const$/;"	f	struct:cv::gpu::device::SingleMaskChannels
operator ()	gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int, int) const$/;"	f	struct:cv::gpu::device::WithOutMask
operator ()	gpu/device/utility.hpp	/^        __device__ __forceinline__ bool operator()(int, int, int) const$/;"	f	struct:cv::gpu::device::WithOutMask
operator ()	legacy/legacy.hpp	/^        template<typename _Tp> bool operator ()(const Mat_<_Tp>& patch) const$/;"	f	struct:cv::FernClassifier::Feature
operator ()	legacy/legacy.hpp	/^    inline bool operator() (uchar* patch_data) const$/;"	f	struct:cv::RTreeNode
operator ()	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::operator()( Range rowRange, Range colRange ) const$/;"	f	class:cv::ocl::oclMat
operator ()	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::operator()( const Rect &roi ) const$/;"	f	class:cv::ocl::oclMat
operator ()	ocl/ocl.hpp	/^            ResultType operator()( const T *a, const T *b, int size ) const$/;"	f	struct:cv::ocl::L1
operator ()	ocl/ocl.hpp	/^            ResultType operator()( const T *a, const T *b, int size ) const$/;"	f	struct:cv::ocl::L2
operator ()	ocl/ocl.hpp	/^            ResultType operator()( const unsigned char *a, const unsigned char *b, int size ) const$/;"	f	struct:cv::ocl::Hamming
operator ()	stitching/detail/matchers.hpp	/^    void operator ()(const ImageFeatures &features1, const ImageFeatures &features2,$/;"	f	class:cv::detail::FeaturesMatcher
operator ()	stitching/detail/motion_estimators.hpp	/^    void operator ()(const std::vector<ImageFeatures> &features, const std::vector<MatchesInfo> &pairwise_matches,$/;"	f	class:cv::detail::Estimator
operator ()	stitching/detail/seam_finders.hpp	/^        bool operator() (const Point &p1, const Point &p2) const$/;"	f	class:cv::detail::DpSeamFinder::ClosePoints
operator ()	stitching/detail/seam_finders.hpp	/^        bool operator() (const std::pair<size_t, size_t> &l, const std::pair<size_t, size_t> &r) const$/;"	f	class:cv::detail::DpSeamFinder::ImagePairLess
operator ()	ts/ts_perf.hpp	/^    bool operator()(const cv::KeyPoint& kp1, const cv::KeyPoint& kp2) const$/;"	f	struct:perf::comparators::KeypointGreater
operator ()	ts/ts_perf.hpp	/^  bool operator()(const cv::Rect_<T>& r1, const cv::Rect_<T>& r2) const$/;"	f	struct:perf::comparators::RectLess_
operator *	core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator *() const$/;"	f	class:cv::SparseMatConstIterator_
operator *	core/mat.hpp	/^SparseMatIterator_<_Tp>::operator *() const$/;"	f	class:cv::SparseMatIterator_
operator *	core/mat.hpp	/^inline uchar* MatConstIterator::operator *() const { return ptr; }$/;"	f	class:cv::MatConstIterator
operator *	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> MatCommaInitializer_<_Tp>::operator *() const$/;"	f	class:cv::MatCommaInitializer_
operator *	core/mat.hpp	/^template<typename _Tp> inline _Tp MatConstIterator_<_Tp>::operator *() const { return *(_Tp*)(this->ptr); }$/;"	f	class:cv::MatConstIterator_
operator *	core/mat.hpp	/^template<typename _Tp> inline _Tp& MatIterator_<_Tp>::operator *() const { return *(_Tp*)(this->ptr); }$/;"	f	class:cv::MatIterator_
operator *	core/operations.hpp	/^Complex<_Tp> operator * (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Complex<_Tp> operator * (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Complex<_Tp> operator * (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, 4, 1> operator * (const Matx<_Tp, 4, 4>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, m, n> MatxCommaInitializer<_Tp, m, n>::operator *() const$/;"	f	class:cv::MatxCommaInitializer
operator *	core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, l>& a, const Matx<_Tp, l, n>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, double alpha)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, float alpha)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, m, n> operator * (const Matx<_Tp, m, n>& a, int alpha)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, m, n> operator * (double alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, m, n> operator * (float alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Matx<_Tp, m, n> operator * (int alpha, const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Point3_<_Tp> operator * (const Matx<_Tp, 3, 3>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Point3_<_Tp> operator * (const Matx<_Tp, 3, 3>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Point_<_Tp> operator * (const Matx<_Tp, 2, 2>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Scalar operator * (const Matx<_Tp, 4, 4>& a, const Scalar& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Scalar operator * (const Matx<double, 4, 4>& a, const Scalar& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^Vec<_Tp, cn> VecCommaInitializer<_Tp, cn>::operator *() const$/;"	f	class:cv::VecCommaInitializer
operator *	core/operations.hpp	/^Vec<_Tp, m> operator * (const Matx<_Tp, m, n>& a, const Vec<_Tp, n>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^inline CvFileNode* FileNode::operator *() { return (CvFileNode*)node; }$/;"	f	class:cv::FileNode
operator *	core/operations.hpp	/^inline FileNode FileNodeIterator::operator *() const$/;"	f	class:cv::FileNodeIterator
operator *	core/operations.hpp	/^inline const CvFileNode* FileNode::operator* () const { return node; }$/;"	f	class:cv::FileNode
operator *	core/operations.hpp	/^inline uchar* LineIterator::operator *() { return ptr; }$/;"	f	class:cv::LineIterator
operator *	core/operations.hpp	/^operator * (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^operator * (const Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^operator * (const Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^operator * (const Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^operator * (double alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^operator * (float alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^operator * (int alpha, const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> inline Vec<_Tp, 4> operator * (const Vec<_Tp, 4>& v1, const Vec<_Tp, 4>& v2)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> inline _Tp& SeqIterator<_Tp>::operator *()$/;"	f	class:cv::SeqIterator
operator *	core/operations.hpp	/^template<typename _Tp> inline const _Tp& SeqIterator<_Tp>::operator *() const$/;"	f	class:cv::SeqIterator
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (const Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (const Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (const Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (double a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (float a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator * (int a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (const Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (const Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (const Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (double a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (float a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator * (int a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator * (_Tp alpha, const Scalar_<_Tp>& a)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator * (const Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator *	core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp> operator * (const Size_<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *	flann/dist.h	/^    T operator*()$/;"	f	struct:cvflann::ZeroIterator
operator *	ts/ts_gtest.h	/^  T& operator*() const { return *value_; }$/;"	f	class:testing::internal::linked_ptr
operator *	ts/ts_gtest.h	/^  const T& operator*() const { return *impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator *=	core/mat.hpp	/^Mat_<_Tp>& operator *= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	core/mat.hpp	/^Mat_<_Tp>& operator *= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator *=	core/mat.hpp	/^Mat_<_Tp>& operator *= (const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
operator *=	core/mat.hpp	/^static inline Mat& operator *= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator *=	core/mat.hpp	/^static inline Mat& operator *= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator *=	core/mat.hpp	/^static inline Mat& operator *= (const Mat& a, double s)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^Complex<_Tp>& operator *= (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, double alpha)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, float alpha)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^Matx<_Tp, m, n>& operator *= (Matx<_Tp, m, n>& a, int alpha)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^Vec<_Tp, cn>& operator *= (Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^operator *= (Point3_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^operator *= (Point3_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^operator *= (Point3_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^operator *= (Point_<_Tp>& a, double b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^operator *= (Point_<_Tp>& a, float b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^operator *= (Point_<_Tp>& a, int b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^operator *= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^template<typename _Tp> inline Vec<_Tp, 4>& operator *= (Vec<_Tp, 4>& v1, const Vec<_Tp, 4>& v2)$/;"	f	namespace:cv
operator *=	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp>& operator *= ( Scalar_<_Tp>& a, _Tp v )$/;"	f	namespace:cv
operator +	core/mat.hpp	/^operator + (const MatConstIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	core/mat.hpp	/^operator + (const MatIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	core/mat.hpp	/^operator + (ptrdiff_t ofs, const MatConstIterator_<_Tp>& a)$/;"	f	namespace:cv
operator +	core/mat.hpp	/^operator + (ptrdiff_t ofs, const MatIterator_<_Tp>& a)$/;"	f	namespace:cv
operator +	core/mat.hpp	/^static inline MatConstIterator operator + (const MatConstIterator& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator +	core/mat.hpp	/^static inline MatConstIterator operator + (ptrdiff_t ofs, const MatConstIterator& a)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^Complex<_Tp> operator + (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^Complex<_Tp> operator + (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^Complex<_Tp> operator + (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^Matx<_Tp, m, n> operator + (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^operator + (const Vec<_Tp, cn>& a, const Vec<_Tp, cn>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^static inline Range operator + (const Range& r1, int delta)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^static inline Range operator + (int delta, const Range& r1)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator + (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator + (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator + (const Rect_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator + (const Rect_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator + (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator +	core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp> operator + (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ++	core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator ++()$/;"	f	class:cv::SparseMatConstIterator_
operator ++	core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::SparseMatConstIterator_
operator ++	core/mat.hpp	/^SparseMatIterator_<_Tp>::operator ++()$/;"	f	class:cv::SparseMatIterator_
operator ++	core/mat.hpp	/^SparseMatIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::SparseMatIterator_
operator ++	core/mat.hpp	/^inline MatConstIterator MatConstIterator::operator ++(int)$/;"	f	class:cv::MatConstIterator
operator ++	core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator ++()$/;"	f	class:cv::MatConstIterator
operator ++	core/mat.hpp	/^inline SparseMatConstIterator SparseMatConstIterator::operator ++(int)$/;"	f	class:cv::SparseMatConstIterator
operator ++	core/mat.hpp	/^inline SparseMatIterator SparseMatIterator::operator ++(int)$/;"	f	class:cv::SparseMatIterator
operator ++	core/mat.hpp	/^inline SparseMatIterator& SparseMatIterator::operator ++()$/;"	f	class:cv::SparseMatIterator
operator ++	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> MatConstIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::MatConstIterator_
operator ++	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator ++()$/;"	f	class:cv::MatConstIterator_
operator ++	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> MatIterator_<_Tp>::operator ++(int)$/;"	f	class:cv::MatIterator_
operator ++	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator ++()$/;"	f	class:cv::MatIterator_
operator ++	core/operations.hpp	/^inline LineIterator LineIterator::operator ++(int)$/;"	f	class:cv::LineIterator
operator ++	core/operations.hpp	/^inline LineIterator& LineIterator::operator ++()$/;"	f	class:cv::LineIterator
operator ++	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> SeqIterator<_Tp>::operator ++(int) const$/;"	f	class:cv::SeqIterator
operator ++	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator ++()$/;"	f	class:cv::SeqIterator
operator ++	flann/dist.h	/^    ZeroIterator<T> operator ++(int)$/;"	f	struct:cvflann::ZeroIterator
operator ++	flann/dist.h	/^    const ZeroIterator<T>& operator ++()$/;"	f	struct:cvflann::ZeroIterator
operator ++	ts/ts_gtest.h	/^  ParamIterator operator++(int \/*unused*\/) {$/;"	f	class:testing::internal::ParamIterator
operator ++	ts/ts_gtest.h	/^  ParamIterator& operator++() {$/;"	f	class:testing::internal::ParamIterator
operator +=	core/mat.hpp	/^Mat_<_Tp>& operator += (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	core/mat.hpp	/^Mat_<_Tp>& operator += (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/mat.hpp	/^Mat_<_Tp>& operator += (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator +=	core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator
operator +=	core/mat.hpp	/^static inline Mat& operator += (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator +=	core/mat.hpp	/^static inline Mat& operator += (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator +=	core/mat.hpp	/^static inline Mat& operator += (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator +=	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator_
operator +=	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator += (ptrdiff_t ofs)$/;"	f	class:cv::MatIterator_
operator +=	core/operations.hpp	/^Complex<_Tp>& operator += (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^Complex<_Tp>& operator += (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^Matx<_Tp1, m, n>& operator += (Matx<_Tp1, m, n>& a, const Matx<_Tp2, m, n>& b)$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^operator += (Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^operator += (Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^operator += (Vec<_Tp1, cn>& a, const Vec<_Tp2, cn>& b)$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator +=(int delta)$/;"	f	class:cv::SeqIterator
operator +=	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator += ( Rect_<_Tp>& a, const Point_<_Tp>& b )$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator += ( Rect_<_Tp>& a, const Size_<_Tp>& b )$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp>& operator += (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator +=	core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp>& operator += (Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator +=	flann/dist.h	/^    ZeroIterator<T>& operator+=(int)$/;"	f	struct:cvflann::ZeroIterator
operator ,	core/mat.hpp	/^MatCommaInitializer_<_Tp>::operator , (T2 v)$/;"	f	class:cv::MatCommaInitializer_
operator ,	core/operations.hpp	/^MatxCommaInitializer<_Tp, m, n>& MatxCommaInitializer<_Tp, m, n>::operator , (_T2 value)$/;"	f	class:cv::MatxCommaInitializer
operator ,	core/operations.hpp	/^VecCommaInitializer<_Tp, cn>& VecCommaInitializer<_Tp, cn>::operator , (_T2 value)$/;"	f	class:cv::VecCommaInitializer
operator -	core/mat.hpp	/^operator - (const MatConstIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	core/mat.hpp	/^operator - (const MatIterator_<_Tp>& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	core/mat.hpp	/^static inline MatConstIterator operator - (const MatConstIterator& a, ptrdiff_t ofs)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^Complex<_Tp> operator - (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^Complex<_Tp> operator - (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^Matx<_Tp, m, n> operator - (const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^Matx<_Tp, m, n> operator - (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^operator - (const Vec<_Tp, cn>& a)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^operator - (const Vec<_Tp, cn>& a, const Vec<_Tp, cn>& b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^static inline Range operator - (const Range& r1, int delta)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^static inline ptrdiff_t operator - (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> inline ptrdiff_t operator - (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator - (const Point3_<_Tp>& a)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Point3_<_Tp> operator - (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator - (const Point_<_Tp>& a)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Point_<_Tp> operator - (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator - (const Rect_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator - (const Scalar_<_Tp>& a)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp> operator - (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator -	core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp> operator - (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator --	core/mat.hpp	/^inline MatConstIterator MatConstIterator::operator --(int)$/;"	f	class:cv::MatConstIterator
operator --	core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator --()$/;"	f	class:cv::MatConstIterator
operator --	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp> MatConstIterator_<_Tp>::operator --(int)$/;"	f	class:cv::MatConstIterator_
operator --	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator --()$/;"	f	class:cv::MatConstIterator_
operator --	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp> MatIterator_<_Tp>::operator --(int)$/;"	f	class:cv::MatIterator_
operator --	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator --()$/;"	f	class:cv::MatIterator_
operator --	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp> SeqIterator<_Tp>::operator --(int) const$/;"	f	class:cv::SeqIterator
operator --	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator --()$/;"	f	class:cv::SeqIterator
operator -=	core/mat.hpp	/^Mat_<_Tp>& operator -= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	core/mat.hpp	/^Mat_<_Tp>& operator -= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/mat.hpp	/^Mat_<_Tp>& operator -= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator -=	core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator
operator -=	core/mat.hpp	/^static inline Mat& operator -= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator -=	core/mat.hpp	/^static inline Mat& operator -= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator -=	core/mat.hpp	/^static inline Mat& operator -= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator -=	core/mat.hpp	/^template<typename _Tp> inline MatConstIterator_<_Tp>& MatConstIterator_<_Tp>::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatConstIterator_
operator -=	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator -= (ptrdiff_t ofs)$/;"	f	class:cv::MatIterator_
operator -=	core/operations.hpp	/^Complex<_Tp>& operator -= (Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^Complex<_Tp>& operator -= (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^Matx<_Tp1, m, n>& operator -= (Matx<_Tp1, m, n>& a, const Matx<_Tp2, m, n>& b)$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^operator -= (Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^operator -= (Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^operator -= (Vec<_Tp1, cn>& a, const Vec<_Tp2, cn>& b)$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^template<typename _Tp> inline SeqIterator<_Tp>& SeqIterator<_Tp>::operator -=(int delta)$/;"	f	class:cv::SeqIterator
operator -=	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator -= ( Rect_<_Tp>& a, const Point_<_Tp>& b )$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator -= ( Rect_<_Tp>& a, const Size_<_Tp>& b )$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^template<typename _Tp> static inline Scalar_<_Tp>& operator -= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator -=	core/operations.hpp	/^template<typename _Tp> static inline Size_<_Tp>& operator -= (Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ->	core/operations.hpp	/^inline FileNode FileNodeIterator::operator ->() const$/;"	f	class:cv::FileNodeIterator
operator ->	core/operations.hpp	/^template<typename _Tp> inline _Tp* Ptr<_Tp>::operator -> () { return obj; }$/;"	f	class:cv::Ptr
operator ->	core/operations.hpp	/^template<typename _Tp> inline const _Tp* Ptr<_Tp>::operator -> () const { return obj; }$/;"	f	class:cv::Ptr
operator ->	ts/ts_gtest.h	/^  T* operator->() const { return value_; }$/;"	f	class:testing::internal::linked_ptr
operator ->	ts/ts_gtest.h	/^  const T* operator->() const { return impl_->Current(); }$/;"	f	class:testing::internal::ParamIterator
operator /	core/operations.hpp	/^Complex<_Tp> operator \/ (_Tp b, const Complex<_Tp>& a)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^Complex<_Tp> operator \/ (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^Complex<_Tp> operator \/ (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^Scalar_<_Tp> operator \/ (_Tp a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^Scalar_<_Tp> operator \/ (const Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^Scalar_<_Tp> operator \/ (const Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^Scalar_<double> operator \/ (const Scalar_<double>& a, double alpha)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^Scalar_<float> operator \/ (const Scalar_<float>& a, float alpha)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^operator \/ (const Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^operator \/ (const Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator /	core/operations.hpp	/^operator \/ (const Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator /=	core/mat.hpp	/^Mat_<_Tp>& operator \/= (const Mat_<_Tp>& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	core/mat.hpp	/^Mat_<_Tp>& operator \/= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator /=	core/mat.hpp	/^Mat_<_Tp>& operator \/= (const Mat_<_Tp>& a, double s)$/;"	f	namespace:cv
operator /=	core/mat.hpp	/^static inline Mat& operator \/= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator /=	core/mat.hpp	/^static inline Mat& operator \/= (const Mat& a, const MatExpr& b)$/;"	f	namespace:cv
operator /=	core/mat.hpp	/^static inline Mat& operator \/= (const Mat& a, double s)$/;"	f	namespace:cv
operator /=	core/operations.hpp	/^Complex<_Tp> operator \/= (const Complex<_Tp>& a, _Tp b)$/;"	f	namespace:cv
operator /=	core/operations.hpp	/^Complex<_Tp>& operator \/= (Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator /=	core/operations.hpp	/^Scalar_<_Tp>& operator \/= (Scalar_<_Tp>& a, _Tp alpha)$/;"	f	namespace:cv
operator /=	core/operations.hpp	/^Scalar_<_Tp>& operator \/= (Scalar_<_Tp>& a, const Scalar_<_Tp>& b)$/;"	f	namespace:cv
operator /=	core/operations.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, double alpha)$/;"	f	namespace:cv
operator /=	core/operations.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, float alpha)$/;"	f	namespace:cv
operator /=	core/operations.hpp	/^Vec<_Tp, cn>& operator \/= (Vec<_Tp, cn>& a, int alpha)$/;"	f	namespace:cv
operator <	contrib/openfabmap.hpp	/^        bool operator<(const WordStats& w) const {$/;"	f	struct:cv::of2::FabMapFBO::WordStats
operator <	contrib/openfabmap.hpp	/^    bool operator<(const IMatch& m) const {$/;"	f	struct:cv::of2::IMatch
operator <	core/mat.hpp	/^operator < (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator <	core/operations.hpp	/^static inline bool operator < (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator <	features2d/features2d.hpp	/^    bool operator<( const DMatch &m ) const$/;"	f	struct:cv::DMatch
operator <	flann/result_set.h	/^        bool operator<(const DistIndex dist_index) const$/;"	f	struct:cvflann::UniqueResultSet::DistIndex
operator <	flann/result_set.h	/^    bool operator<(const BranchStruct<T, DistanceType>& rhs) const$/;"	f	struct:cvflann::BranchStruct
operator <	objdetect/objdetect.hpp	/^    bool operator<(const Candidate& rhs) const$/;"	f	struct:cv::linemod::QuantizedPyramid::Candidate
operator <	objdetect/objdetect.hpp	/^  bool operator<(const Match& rhs) const$/;"	f	struct:cv::linemod::Match
operator <	stitching/detail/util.hpp	/^    bool operator <(const GraphEdge& other) const { return weight < other.weight; }$/;"	f	struct:cv::detail::GraphEdge
operator <	ts/ts_gtest.h	/^  bool operator<(const String& rhs) const { return Compare(rhs) < 0; }$/;"	f	class:testing::internal::String
operator <	videostab/fast_marching.hpp	/^        bool operator <(const DXY &dxy) const { return dist < dxy.dist; }$/;"	f	struct:cv::videostab::FastMarchingMethod::DXY
operator <<	core/mat.hpp	/^operator << (const Mat_<_Tp>& m, T2 val)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^MatxCommaInitializer<_Tp, m, n> operator << (const Matx<_Tp, m, n>& mtx, _T2 val)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^VecCommaInitializer<_Tp, cn> operator << (const Vec<_Tp, cn>& vec, _T2 val)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^static inline FileStorage& operator << (FileStorage& fs, const char* str)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^static inline std::ostream& operator << (std::ostream& out, const Formatted& fmtd)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^static inline std::ostream& operator << (std::ostream& out, const Mat& mtx)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp, int m, int n> inline std::ostream& operator<<(std::ostream& out, const Matx<_Tp, m, n>& matx)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp, int n> inline std::ostream& operator<<(std::ostream& out, const Vec<_Tp, n>& vec)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Point3_<_Tp>& p)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Point_<_Tp>& p)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Rect_<_Tp>& rect)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp> inline std::ostream& operator<<(std::ostream& out, const Size_<_Tp>& size)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp> static inline FileStorage& operator << (FileStorage& fs, const _Tp& value)$/;"	f	namespace:cv
operator <<	core/operations.hpp	/^template<typename _Tp> static inline std::ostream& operator << (std::ostream& out,$/;"	f	namespace:cv
operator <<	flann/any.h	/^inline std::ostream& operator <<(std::ostream& out, const any& any_val)$/;"	f	namespace:cvflann
operator <<	flann/any.h	/^inline std::ostream& operator <<(std::ostream& out, const empty_any&)$/;"	f	namespace:cvflann::anyimpl
operator <<	flann/lsh_table.h	/^inline std::ostream& operator <<(std::ostream& out, const LshStats& stats)$/;"	f	namespace:cvflann::lsh
operator <<	ts/ts_gtest.h	/^  Message& operator <<(BasicNarrowIoManip val) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  Message& operator <<(bool b) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  Message& operator <<(const wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  Message& operator <<(wchar_t* wide_c_str) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  inline Message& operator <<(T* const& pointer) {  \/\/ NOLINT$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  inline Message& operator <<(const T& val) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  inline Message& operator <<(const T& value) {$/;"	f	class:testing::Message
operator <<	ts/ts_gtest.h	/^  template <typename T> AssertionResult& operator<<(const T& value) {$/;"	f	class:testing::AssertionResult
operator <<	ts/ts_gtest.h	/^::std::basic_ostream<Char, CharTraits>& operator<<($/;"	f	namespace:testing::internal2
operator <<	ts/ts_gtest.h	/^inline ::std::ostream& operator<<(::std::ostream& os, const String& str) {$/;"	f	namespace:testing::internal
operator <<	ts/ts_gtest.h	/^inline std::ostream& operator <<(std::ostream& os, const Message& sb) {$/;"	f	namespace:testing
operator <=	core/mat.hpp	/^operator <= (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator =	core/gpumat.hpp	/^    inline GpuMat& GpuMat::operator = (Scalar s)$/;"	f	class:cv::gpu::GpuMat
operator =	core/mat.hpp	/^    MatConstIterator_<_Tp>::operator = (const MatConstIterator_& it )$/;"	f	class:cv::MatConstIterator_
operator =	core/mat.hpp	/^SparseMatConstIterator_<_Tp>::operator = (const SparseMatConstIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatConstIterator_
operator =	core/mat.hpp	/^SparseMatIterator_<_Tp>::operator = (const SparseMatIterator_<_Tp>& it)$/;"	f	class:cv::SparseMatIterator_
operator =	core/mat.hpp	/^SparseMat_<_Tp>::operator = (const Mat& m)$/;"	f	class:cv::SparseMat_
operator =	core/mat.hpp	/^SparseMat_<_Tp>::operator = (const SparseMat& m)$/;"	f	class:cv::SparseMat_
operator =	core/mat.hpp	/^SparseMat_<_Tp>::operator = (const SparseMat_<_Tp>& m)$/;"	f	class:cv::SparseMat_
operator =	core/mat.hpp	/^inline Mat& Mat::operator = (const Mat& m)$/;"	f	class:cv::Mat
operator =	core/mat.hpp	/^inline Mat& Mat::operator = (const MatExpr& e)$/;"	f	class:cv::Mat
operator =	core/mat.hpp	/^inline Mat::MStep& Mat::MStep::operator = (size_t s)$/;"	f	class:cv::Mat::MStep
operator =	core/mat.hpp	/^inline MatConstIterator& MatConstIterator::operator = (const MatConstIterator& it )$/;"	f	class:cv::MatConstIterator
operator =	core/mat.hpp	/^inline SparseMat& SparseMat::operator = (const Mat& m)$/;"	f	class:cv::SparseMat
operator =	core/mat.hpp	/^inline SparseMat& SparseMat::operator = (const SparseMat& m)$/;"	f	class:cv::SparseMat
operator =	core/mat.hpp	/^inline SparseMatConstIterator& SparseMatConstIterator::operator = (const SparseMatConstIterator& it)$/;"	f	class:cv::SparseMatConstIterator
operator =	core/mat.hpp	/^inline SparseMatIterator& SparseMatIterator::operator = (const SparseMatIterator& it)$/;"	f	class:cv::SparseMatIterator
operator =	core/mat.hpp	/^template<typename _Tp> Mat_<_Tp>& Mat_<_Tp>::operator = (const MatExpr& e)$/;"	f	class:cv::Mat_
operator =	core/mat.hpp	/^template<typename _Tp> inline MatIterator_<_Tp>& MatIterator_<_Tp>::operator = (const MatIterator_<_Tp>& it )$/;"	f	class:cv::MatIterator_
operator =	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::operator = (const Mat& m)$/;"	f	class:cv::Mat_
operator =	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::operator = (const Mat_& m)$/;"	f	class:cv::Mat_
operator =	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>& Mat_<_Tp>::operator = (const _Tp& s)$/;"	f	class:cv::Mat_
operator =	core/operations.hpp	/^    Vector<_Tp>& operator = (const Vector& d)$/;"	f	class:cv::Vector
operator =	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>& Point3_<_Tp>::operator = (const Point3_& pt)$/;"	f	class:cv::Point3_
operator =	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>& Point_<_Tp>::operator = (const Point_& pt)$/;"	f	class:cv::Point_
operator =	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>& Ptr<_Tp>::operator = (const Ptr<_Tp>& _ptr)$/;"	f	class:cv::Ptr
operator =	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>& Rect_<_Tp>::operator = ( const Rect_<_Tp>& r )$/;"	f	class:cv::Rect_
operator =	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>& Size_<_Tp>::operator = (const Size_<_Tp>& sz)$/;"	f	class:cv::Size_
operator =	core/wimage.hpp	/^    WImageView& operator=(const WImage<T>& img) {$/;"	f	class:cv::WImageView
operator =	core/wimage.hpp	/^    WImageViewC& operator=(const WImageC<T, C>& img) {$/;"	f	class:cv::WImageViewC
operator =	core/wimage.hpp	/^    WImageViewC& operator=(const WImageViewC<T, C>& img) {$/;"	f	class:cv::WImageViewC
operator =	flann/any.h	/^    any& operator=(const T& x)$/;"	f	struct:cvflann::any
operator =	flann/any.h	/^    any& operator=(const char* x)$/;"	f	struct:cvflann::any
operator =	legacy/legacy.hpp	/^    CvImage& operator = (const CvImage& img)$/;"	f	class:CvImage
operator =	legacy/legacy.hpp	/^    CvMatrix& operator = (const CvMatrix& _m)$/;"	f	class:CvMatrix
operator =	ocl/matrix_operations.hpp	/^        inline oclMat &oclMat::operator = (const Mat &m)$/;"	f	class:cv::ocl::oclMat
operator =	ocl/matrix_operations.hpp	/^        inline oclMat &oclMat::operator = (const oclMat &m)$/;"	f	class:cv::ocl::oclMat
operator =	ts/ts_gtest.h	/^  FilePath& operator=(const FilePath& rhs) {$/;"	f	class:testing::internal::FilePath
operator =	ts/ts_gtest.h	/^  ParamGenerator& operator=(const ParamGenerator& other) {$/;"	f	class:testing::internal::ParamGenerator
operator =	ts/ts_gtest.h	/^  ParamIterator& operator=(const ParamIterator& other) {$/;"	f	class:testing::internal::ParamIterator
operator =	ts/ts_gtest.h	/^  const String& operator=(const String& rhs) {$/;"	f	class:testing::internal::String
operator =	ts/ts_gtest.h	/^  const String& operator=(const char* a_c_str) {$/;"	f	class:testing::internal::String
operator =	ts/ts_gtest.h	/^  linked_ptr& operator=(linked_ptr const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	ts/ts_gtest.h	/^  template <typename U> linked_ptr& operator=(linked_ptr<U> const& ptr) {$/;"	f	class:testing::internal::linked_ptr
operator =	ts/ts_gtest.h	/^  tuple& operator=(const tuple& \/* t *\/) { return *this; }$/;"	f	class:std::tr1::tuple
operator =	ts/ts_gtest.h	/^  tuple& operator=(const tuple& t) { return CopyFrom(t); }$/;"	f	class:std::tr1::tuple
operator ==	core/mat.hpp	/^inline bool Mat::MSize::operator == (const MSize& sz) const$/;"	f	class:cv::Mat::MSize
operator ==	core/mat.hpp	/^operator == (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator ==	core/mat.hpp	/^operator == (const MatConstIterator_<_Tp>& a, const MatConstIterator_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/mat.hpp	/^operator == (const MatIterator_<_Tp>& a, const MatIterator_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/mat.hpp	/^static inline bool operator == (const SparseMatConstIterator& it1, const SparseMatConstIterator& it2)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^bool operator == (const Complex<_Tp>& a, const Complex<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^bool operator == (const Matx<_Tp, m, n>& a, const Matx<_Tp, m, n>& b)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^static inline bool operator == (const FileNodeIterator& it1, const FileNodeIterator& it2)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^static inline bool operator == (const Range& r1, const Range& r2)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^template<typename _Tp> inline bool operator == (const SeqIterator<_Tp>& a,$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^template<typename _Tp> static inline bool operator == ( const Scalar_<_Tp>& a, const Scalar_<_Tp>& b )$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Point3_<_Tp>& a, const Point3_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Point_<_Tp>& a, const Point_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator ==	core/operations.hpp	/^template<typename _Tp> static inline bool operator == (const Size_<_Tp>& a, const Size_<_Tp>& b)$/;"	f	namespace:cv
operator ==	objdetect/objdetect.hpp	/^  bool operator==(const Match& rhs) const$/;"	f	struct:cv::linemod::Match
operator ==	ts/ts_gtest.h	/^  bool operator==(T* p) const { return value_ == p; }$/;"	f	class:testing::internal::linked_ptr
operator ==	ts/ts_gtest.h	/^  bool operator==(const NativeArray& rhs) const {$/;"	f	class:testing::internal::NativeArray
operator ==	ts/ts_gtest.h	/^  bool operator==(const ParamIterator& other) const {$/;"	f	class:testing::internal::ParamIterator
operator ==	ts/ts_gtest.h	/^  bool operator==(const char* a_c_str) const { return Compare(a_c_str) == 0; }$/;"	f	class:testing::internal::String
operator ==	ts/ts_gtest.h	/^  bool operator==(linked_ptr<U> const& ptr) const {$/;"	f	class:testing::internal::linked_ptr
operator ==	ts/ts_gtest.h	/^bool operator==(T* ptr, const linked_ptr<T>& x) {$/;"	f	namespace:testing::internal
operator >	core/mat.hpp	/^operator > (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator >	stitching/detail/util.hpp	/^    bool operator >(const GraphEdge& other) const { return weight > other.weight; }$/;"	f	struct:cv::detail::GraphEdge
operator >=	core/mat.hpp	/^operator >= (const MatConstIterator& a, const MatConstIterator& b)$/;"	f	namespace:cv
operator >>	core/operations.hpp	/^FileNodeIterator& operator >> (FileNodeIterator& it, vector<_Tp>& vec)$/;"	f	namespace:cv
operator >>	core/operations.hpp	/^template<typename _Tp> static inline FileNodeIterator& operator >> (FileNodeIterator& it, _Tp& value)$/;"	f	namespace:cv
operator >>	core/operations.hpp	/^template<typename _Tp> static inline void operator >> (const FileNode& n, _Tp& value)$/;"	f	namespace:cv
operator >>	core/operations.hpp	/^template<typename _Tp> static inline void operator >> (const FileNode& n, vector<_Tp>& vec)$/;"	f	namespace:cv
operator Complex<T2>	core/operations.hpp	/^template<typename _Tp> template<typename T2> inline Complex<_Tp>::operator Complex<T2>() const$/;"	f	class:cv::Complex
operator CvBox2D	core/operations.hpp	/^inline RotatedRect::operator CvBox2D() const$/;"	f	class:cv::RotatedRect
operator CvMat	core/mat.hpp	/^inline Mat::operator CvMat() const$/;"	f	class:cv::Mat
operator CvMat	core/operations.hpp	/^    operator CvMat() const$/;"	f	class:cv::Vector
operator CvMat*	legacy/legacy.hpp	/^    operator CvMat* () { return matrix; }$/;"	f	class:CvMatrix
operator CvPoint	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::operator CvPoint() const$/;"	f	class:cv::Point_
operator CvPoint2D32f	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::operator CvPoint2D32f() const$/;"	f	class:cv::Point_
operator CvPoint3D32f	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::operator CvPoint3D32f() const$/;"	f	class:cv::Point3_
operator CvRect	core/operations.hpp	/^template<typename _Tp> inline Rect_<_Tp>::operator CvRect() const$/;"	f	class:cv::Rect_
operator CvScalar	core/operations.hpp	/^template<typename _Tp, int cn> inline Vec<_Tp, cn>::operator CvScalar() const$/;"	f	class:cv::Vec
operator CvScalar	core/operations.hpp	/^template<typename _Tp> inline Scalar_<_Tp>::operator CvScalar() const$/;"	f	class:cv::Scalar_
operator CvSize	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::operator CvSize() const$/;"	f	class:cv::Size_
operator CvSize2D32f	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp>::operator CvSize2D32f() const$/;"	f	class:cv::Size_
operator CvSlice	core/operations.hpp	/^inline Range::operator CvSlice() const$/;"	f	class:cv::Range
operator CvSparseMat*	core/mat.hpp	/^SparseMat_<_Tp>::operator CvSparseMat*() const$/;"	f	class:cv::SparseMat_
operator CvTermCriteria	core/operations.hpp	/^inline TermCriteria::operator CvTermCriteria() const$/;"	f	class:cv::TermCriteria
operator DevMem2D_<T>	core/gpumat.hpp	/^    template <class T> inline GpuMat::operator DevMem2D_<T>() const$/;"	f	class:cv::gpu::GpuMat
operator IplImage*	legacy/legacy.hpp	/^    operator IplImage* () { return image; }$/;"	f	class:CvImage
operator Mat	core/mat.hpp	/^    operator Mat() const$/;"	f	class:cv::MatExpr
operator Mat	ocl/matrix_operations.hpp	/^        inline oclMat::operator Mat() const$/;"	f	class:cv::ocl::oclMat
operator Mat_<T2>	core/mat.hpp	/^template<typename _Tp> template<typename T2> inline Mat_<_Tp>::operator Mat_<T2>() const$/;"	f	class:cv::Mat_
operator Mat_<_Tp>	core/mat.hpp	/^    template<typename _Tp> operator Mat_<_Tp>() const$/;"	f	class:cv::MatExpr
operator Mat_<_Tp>	core/mat.hpp	/^template<typename _Tp> inline MatCommaInitializer_<_Tp>::operator Mat_<_Tp>() const$/;"	f	class:cv::MatCommaInitializer_
operator Matx<T2, m, n>	core/operations.hpp	/^inline Matx<_Tp, m, n>::operator Matx<T2, m, n>() const$/;"	f	class:cv::Matx
operator Matx<_Tp, m, n>	core/mat.hpp	/^template<typename _Tp, int m, int n> inline Mat::operator Matx<_Tp, m, n>() const$/;"	f	class:cv::Mat
operator Matx<typename DataType<_Tp>::channel_type, m, n>	core/mat.hpp	/^template<typename _Tp> template<int m, int n> inline Mat_<_Tp>::operator Matx<typename DataType<_Tp>::channel_type, m, n>() const$/;"	f	class:cv::Mat_
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder10
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8, T9> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8,$/;"	f	class:testing::internal::CartesianProductHolder9
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7, T8> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7,$/;"	f	class:testing::internal::CartesianProductHolder8
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6, T7> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6,$/;"	f	class:testing::internal::CartesianProductHolder7
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5, T6> >() const {$/;"	f	class:testing::internal::CartesianProductHolder6
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4, T5> >() const {$/;"	f	class:testing::internal::CartesianProductHolder5
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3, T4> >() const {$/;"	f	class:testing::internal::CartesianProductHolder4
operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2, T3> >() const {$/;"	f	class:testing::internal::CartesianProductHolder3
operator ParamGenerator< ::std::tr1::tuple<T1, T2> >	ts/ts_gtest.h	/^  operator ParamGenerator< ::std::tr1::tuple<T1, T2> >() const {$/;"	f	class:testing::internal::CartesianProductHolder2
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const { return ValuesIn(&v1_, &v1_ + 1); }$/;"	f	class:testing::internal::ValueArray1
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray10
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray11
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray12
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray13
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray14
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray15
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray16
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray17
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray18
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray19
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray2
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray20
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray21
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray22
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray23
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray24
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray25
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray26
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray27
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray28
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray29
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray3
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray30
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray31
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray32
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray33
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray34
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray35
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray36
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray37
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray38
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray39
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray4
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray40
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray41
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray42
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray43
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray44
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray45
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray46
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray47
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray48
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray49
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray5
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray50
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray6
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray7
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray8
operator ParamGenerator<T>	ts/ts_gtest.h	/^  operator ParamGenerator<T>() const {$/;"	f	class:testing::internal::ValueArray9
operator Point3_<_Tp2>	core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Point3_<_Tp>::operator Point3_<_Tp2>() const$/;"	f	class:cv::Point3_
operator Point_<_Tp2>	core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Point_<_Tp>::operator Point_<_Tp2>() const$/;"	f	class:cv::Point_
operator PtrStep<T>	core/gpumat.hpp	/^    template <class T> inline GpuMat::operator PtrStep<T>() const$/;"	f	class:cv::gpu::GpuMat
operator PtrStepSz<T>	core/gpumat.hpp	/^    template <class T> inline GpuMat::operator PtrStepSz<T>() const$/;"	f	class:cv::gpu::GpuMat
operator PtrStep_<T>	core/gpumat.hpp	/^    template <class T> inline GpuMat::operator PtrStep_<T>() const$/;"	f	class:cv::gpu::GpuMat
operator Rect_<_Tp2>	core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Rect_<_Tp>::operator Rect_<_Tp2>() const$/;"	f	class:cv::Rect_
operator Scalar_<T2>	core/operations.hpp	/^template<typename _Tp> template<typename T2> inline Scalar_<_Tp>::operator Scalar_<T2>() const$/;"	f	class:cv::Scalar_
operator Size_<_Tp2>	core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Size_<_Tp>::operator Size_<_Tp2>() const$/;"	f	class:cv::Size_
operator T*	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ operator       T*()       { return data; }$/;"	f	struct:cv::gpu::DevPtr
operator T*	gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator T*()$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator Vec<T2, cn>	core/operations.hpp	/^inline Vec<_Tp, cn>::operator Vec<T2, cn>() const$/;"	f	class:cv::Vec
operator Vec<_Tp, 2>	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp>::operator Vec<_Tp, 2>() const$/;"	f	class:cv::Point_
operator Vec<_Tp, 3>	core/operations.hpp	/^template<typename _Tp> inline Point3_<_Tp>::operator Vec<_Tp, 3>() const$/;"	f	class:cv::Point3_
operator Vec<_Tp, n>	core/mat.hpp	/^template<typename _Tp, int n> inline Mat::operator Vec<_Tp, n>() const$/;"	f	class:cv::Mat
operator Vec<typename DataType<_Tp>::channel_type, n>	core/mat.hpp	/^template<typename _Tp> template<int n> inline Mat_<_Tp>::operator Vec<typename DataType<_Tp>::channel_type, n>() const$/;"	f	class:cv::Mat_
operator []	core/mat.hpp	/^inline const int& Mat::MSize::operator[](int i) const { return p[i]; }$/;"	f	class:cv::Mat::MSize
operator []	core/mat.hpp	/^inline const size_t& Mat::MStep::operator[](int i) const { return p[i]; }$/;"	f	class:cv::Mat::MStep
operator []	core/mat.hpp	/^inline int& Mat::MSize::operator[](int i) { return p[i]; }$/;"	f	class:cv::Mat::MSize
operator []	core/mat.hpp	/^inline size_t& Mat::MStep::operator[](int i) { return p[i]; }$/;"	f	class:cv::Mat::MStep
operator []	core/mat.hpp	/^inline uchar* MatConstIterator::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatConstIterator
operator []	core/mat.hpp	/^template<typename _Tp> inline _Tp MatConstIterator_<_Tp>::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatConstIterator_
operator []	core/mat.hpp	/^template<typename _Tp> inline _Tp& MatIterator_<_Tp>::operator [](ptrdiff_t i) const$/;"	f	class:cv::MatIterator_
operator []	core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat_<_Tp>::operator [](int y)$/;"	f	class:cv::Mat_
operator []	core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat_<_Tp>::operator [](int y) const$/;"	f	class:cv::Mat_
operator []	core/operations.hpp	/^    _Tp& operator [] (size_t i) { CV_DbgAssert( i < size() ); return hdr.data[i]; }$/;"	f	class:cv::Vector
operator []	core/operations.hpp	/^    const _Tp& operator [] (size_t i) const { CV_DbgAssert( i < size() ); return hdr.data[i]; }$/;"	f	class:cv::Vector
operator []	core/operations.hpp	/^template<typename _Tp, int cn> inline _Tp& Vec<_Tp, cn>::operator [](int i)$/;"	f	class:cv::Vec
operator []	core/operations.hpp	/^template<typename _Tp, int cn> inline const _Tp& Vec<_Tp, cn>::operator [](int i) const$/;"	f	class:cv::Vec
operator []	core/operations.hpp	/^template<typename _Tp> inline _Tp& Seq<_Tp>::operator [](int idx)$/;"	f	class:cv::Seq
operator []	core/operations.hpp	/^template<typename _Tp> inline const _Tp& Seq<_Tp>::operator [](int idx) const$/;"	f	class:cv::Seq
operator []	flann/dist.h	/^    T operator[](int)$/;"	f	struct:cvflann::ZeroIterator
operator []	flann/matrix.h	/^    T* operator[](size_t index) const$/;"	f	class:cvflann::Matrix
operator ^=	core/mat.hpp	/^operator ^= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator ^=	core/mat.hpp	/^operator ^= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator ^=	core/mat.hpp	/^static inline Mat& operator ^= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator ^=	core/mat.hpp	/^static inline Mat& operator ^= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator _Tp*	core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::operator _Tp* ()$/;"	f	class:cv::AutoBuffer
operator _Tp*	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::operator _Tp* () { return obj; }$/;"	f	class:cv::Ptr
operator bool	ts/ts_gtest.h	/^  operator bool() const { return success_; }  \/\/ NOLINT$/;"	f	class:testing::AssertionResult
operator bool	ts/ts_gtest.h	/^  operator bool() const { return true; }$/;"	f	struct:testing::internal::ConstCharPtr
operator const CvMat*	legacy/legacy.hpp	/^    operator const CvMat* () const { return matrix; }$/;"	f	class:CvMatrix
operator const IplImage*	legacy/legacy.hpp	/^    operator const IplImage* () const { return image; }$/;"	f	class:CvImage
operator const T*	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ operator const T*() const { return data; }$/;"	f	struct:cv::gpu::DevPtr
operator const T*	gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator const T*() const$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator const _Tp*	core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::operator const _Tp* () const$/;"	f	class:cv::AutoBuffer
operator const _Tp*	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::operator const _Tp*() const { return obj; }$/;"	f	class:cv::Ptr
operator const double*	gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator const double*() const$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator const int*	core/mat.hpp	/^inline Mat::MSize::operator const int*() const { return p; }$/;"	f	class:cv::Mat::MSize
operator double	core/operations.hpp	/^inline FileNode::operator double() const$/;"	f	class:cv::FileNode
operator double	core/operations.hpp	/^inline RNG::operator double()$/;"	f	class:cv::RNG
operator double*	gpu/device/dynamic_smem.hpp	/^        __device__ __forceinline__ operator double*()$/;"	f	struct:cv::gpu::device::DynamicSharedMem
operator float	core/operations.hpp	/^inline FileNode::operator float() const$/;"	f	class:cv::FileNode
operator float	core/operations.hpp	/^inline RNG::operator float() { return next()*2.3283064365386962890625e-10f; }$/;"	f	class:cv::RNG
operator float	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator float() const$/;"	f	struct:cv::gpu::device::L1Dist
operator float	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator float() const$/;"	f	struct:cv::gpu::device::L2Dist
operator int	core/operations.hpp	/^inline FileNode::operator int() const$/;"	f	class:cv::FileNode
operator int	core/operations.hpp	/^inline RNG::operator int() { return (int)next(); }$/;"	f	class:cv::RNG
operator int	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator int() const$/;"	f	struct:cv::gpu::device::HammingDist
operator int	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ operator int() const$/;"	f	struct:cv::gpu::device::L1Dist
operator int	ts/ts_perf.hpp	/^    operator int() const {return _type;}$/;"	f	class:perf::MatType
operator schar	core/operations.hpp	/^inline RNG::operator schar() { return (schar)next(); }$/;"	f	class:cv::RNG
operator short	core/operations.hpp	/^inline RNG::operator short() { return (short)next(); }$/;"	f	class:cv::RNG
operator size_t	core/mat.hpp	/^inline Mat::MStep::operator size_t() const$/;"	f	class:cv::Mat::MStep
operator string	core/operations.hpp	/^inline FileNode::operator string() const$/;"	f	class:cv::FileNode
operator uchar	core/operations.hpp	/^inline RNG::operator uchar() { return (uchar)next(); }$/;"	f	class:cv::RNG
operator unsigned	core/operations.hpp	/^inline RNG::operator unsigned() { return next(); }$/;"	f	class:cv::RNG
operator ushort	core/operations.hpp	/^inline RNG::operator ushort() { return (ushort)next(); }$/;"	f	class:cv::RNG
operator vector<_Tp>	core/mat.hpp	/^template<typename _Tp> inline Mat::operator vector<_Tp>() const$/;"	f	class:cv::Mat
operator vector<_Tp>	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp>::operator vector<_Tp>() const$/;"	f	class:cv::Mat_
operator vector<_Tp>	core/operations.hpp	/^template<typename _Tp> inline Seq<_Tp>::operator vector<_Tp>() const$/;"	f	class:cv::Seq
operator |	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp> operator | (const Rect_<_Tp>& a, const Rect_<_Tp>& b)$/;"	f	namespace:cv
operator |=	core/mat.hpp	/^operator |= (const Mat_<_Tp>& a, const Mat_<_Tp>& b)$/;"	f	namespace:cv
operator |=	core/mat.hpp	/^operator |= (const Mat_<_Tp>& a, const Scalar& s)$/;"	f	namespace:cv
operator |=	core/mat.hpp	/^static inline Mat& operator |= (const Mat& a, const Mat& b)$/;"	f	namespace:cv
operator |=	core/mat.hpp	/^static inline Mat& operator |= (const Mat& a, const Scalar& s)$/;"	f	namespace:cv
operator |=	core/operations.hpp	/^template<typename _Tp> static inline Rect_<_Tp>& operator |= ( Rect_<_Tp>& a, const Rect_<_Tp>& b )$/;"	f	namespace:cv
optFlowEstimator	videostab/global_motion.hpp	/^    Ptr<ISparseOptFlowEstimator> optFlowEstimator() const { return optFlowEstimator_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
optFlowEstimator	videostab/inpainting.hpp	/^    Ptr<IDenseOptFlowEstimator> optFlowEstimator() const { return optFlowEstimator_; }$/;"	f	class:cv::videostab::MotionInpainter
optFlowEstimator_	videostab/global_motion.hpp	/^    Ptr<ISparseOptFlowEstimator> optFlowEstimator_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
optFlowEstimator_	videostab/inpainting.hpp	/^    Ptr<IDenseOptFlowEstimator> optFlowEstimator_;$/;"	m	class:cv::videostab::MotionInpainter
optFlowEstimator_	videostab/optical_flow.hpp	/^    gpu::PyrLKOpticalFlow optFlowEstimator_;$/;"	m	class:cv::videostab::DensePyrLkOptFlowEstimatorGpu
optimize	flann/lsh_table.h	/^    void optimize()$/;"	f	class:cvflann::lsh::LshTable
optimizeKDTree	flann/autotuned_index.h	/^    void optimizeKDTree(std::vector<CostData>& costs)$/;"	f	class:cvflann::AutotunedIndex
optimizeKMeans	flann/autotuned_index.h	/^    void optimizeKMeans(std::vector<CostData>& costs)$/;"	f	class:cvflann::AutotunedIndex
optimizeSimplexDownhill	flann/simplex_downhill.h	/^float optimizeSimplexDownhill(T* points, int n, F func, float* vals = NULL )$/;"	f	namespace:cvflann
optional_mask	ts/ts.hpp	/^    bool optional_mask;$/;"	m	class:cvtest::ArrayTest
orb	stitching/detail/matchers.hpp	/^    Ptr<ORB> orb;$/;"	m	class:cv::detail::OrbFeaturesFinder
ord	ml/ml.hpp	/^        ord;$/;"	m	union:CvDTreeSplit::__anon251	typeref:struct:CvDTreeSplit::__anon251::__anon252
ord_var_count	ml/ml.hpp	/^    int ord_var_count, cat_var_count, work_var_count;$/;"	m	struct:CvDTreeTrainData
order	flann/dist.h	/^    int order;$/;"	m	struct:cvflann::MinkowskiDistance
orientationNormalized	features2d/features2d.hpp	/^    bool orientationNormalized; \/\/true if the orientation is normalized, false otherwise$/;"	m	class:cv::FREAK
orientationPairs	features2d/features2d.hpp	/^    OrientationPair orientationPairs[NB_ORIENPAIRS];$/;"	m	class:cv::FREAK
origWinSize	objdetect/objdetect.hpp	/^        Size origWinSize;$/;"	m	class:cv::CascadeClassifier::Data
orig_response	ml/ml.hpp	/^    CvMat* orig_response;$/;"	m	class:CvBoost
orig_response	ml/ml.hpp	/^    CvMat* orig_response;$/;"	m	class:CvGBTrees
orig_window_size	objdetect/objdetect.hpp	/^    CvSize orig_window_size;$/;"	m	struct:CvHaarClassifierCascade
origin	core/types_c.h	/^    CvPoint  origin;$/;"	m	struct:CvChain
origin	core/types_c.h	/^    int  origin;            \/* 0 - top-left origin,$/;"	m	struct:_IplImage
origin	legacy/legacy.hpp	/^    int origin() const { return image ? image->origin : 0; }$/;"	f	class:CvImage
original	objdetect/objdetect.hpp	/^  CvMat *original;$/;"	m	struct:CvDataMatrixCode
original_num_classes	legacy/legacy.hpp	/^    inline int original_num_classes() const { return original_num_classes_; }$/;"	f	class:cv::RTreeClassifier
original_num_classes_	legacy/legacy.hpp	/^    int original_num_classes_;$/;"	m	class:cv::RTreeClassifier
original_reporter_	ts/ts_gtest.h	/^  TestPartResultReporterInterface* original_reporter_;$/;"	m	class:testing::internal::HasNewFatalFailureHelper
other	core/core.hpp	/^    template<typename U> class rebind { typedef Allocator<U> other; };$/;"	t	class:cv::Allocator::rebind
out	contrib/contrib.hpp	/^        std::ostream* out;$/;"	m	class:cv::SpinImageModel
out	gpu/gpu.hpp	/^    GpuMat out;$/;"	m	class:cv::gpu::StereoBeliefPropagation
out	gpu/gpu.hpp	/^    GpuMat out;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
outer_iterations	gpu/gpu.hpp	/^    int outer_iterations;$/;"	m	class:cv::gpu::BroxOpticalFlow
outliers	ts/ts_perf.hpp	/^    unsigned int outliers;$/;"	m	struct:perf::performance_metrics
outputData	ts/ts_perf.hpp	/^    SizeVector outputData;$/;"	m	class:perf::TestBase
output_buf	ts/ts.hpp	/^    std::string output_buf[MAX_IDX];$/;"	m	class:cvtest::TS
owner_	ts/ts_gtest.h	/^  pthread_t owner_;  \/\/ The thread holding the mutex.$/;"	m	class:std::tr1::MutexBase
p	legacy/legacy.hpp	/^    CvPoint2D32f p; \/\/ pgruebele: So we do not loose precision, this needs to be float$/;"	m	struct:Cv3dTracker2dTrackedObject
p	legacy/legacy.hpp	/^    CvPoint3D32f p;             \/\/ location of the tracked object$/;"	m	struct:Cv3dTrackerTrackedObject
p	ml/ml.hpp	/^    CV_PROP_RW double      p; \/\/ for CV_SVM_EPS_SVR$/;"	m	struct:CvSVMParams
p1	legacy/legacy.hpp	/^    CvPoint p1;            \/* the first point of the binary tree root segment *\/$/;"	m	struct:CvContourTree
p2	legacy/legacy.hpp	/^    CvPoint p2;            \/* the last point of the binary tree root segment *\/$/;"	m	struct:CvContourTree
pBD	legacy/blobtrack.hpp	/^    CvBlobDetector*         pBD;           \/* Selected blob detector module. 					    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBT	legacy/blobtrack.hpp	/^    CvBlobTracker*          pBT;           \/* Selected blob tracking module.					    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBTA	legacy/blobtrack.hpp	/^    CvBlobTrackAnalysis*    pBTA;          \/* Selected blob trajectory analysis module.                             *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBTGen	legacy/blobtrack.hpp	/^    CvBlobTrackGen*         pBTGen;        \/* Selected blob trajectory generator.				    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBTPP	legacy/blobtrack.hpp	/^    CvBlobTrackPostProc*    pBTPP;         \/* Selected blob trajectory postprocessing module.			    *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pBlobSeq	legacy/blobtrack.hpp	/^    CvBlobSeq*  pBlobSeq;$/;"	m	struct:CvBlobTrack
pComment	legacy/blobtrack.hpp	/^    char*               pComment;$/;"	m	struct:CvDefParam
pDouble	legacy/blobtrack.hpp	/^    double*             pDouble;$/;"	m	struct:CvDefParam
pFG	legacy/blobtrack.hpp	/^    CvFGDetector*           pFG;           \/* FGDetector module. If this field is NULL the Process FG mask is used. *\/$/;"	m	struct:CvBlobTrackerAutoParam1
pFloat	legacy/blobtrack.hpp	/^    float*              pFloat;$/;"	m	struct:CvDefParam
pInt	legacy/blobtrack.hpp	/^    int*                pInt;$/;"	m	struct:CvDefParam
pName	legacy/blobtrack.hpp	/^    char*               pName;$/;"	m	struct:CvDefParam
pStr	legacy/blobtrack.hpp	/^    char**              pStr;$/;"	m	struct:CvDefParam
pairwise_matches_	stitching/detail/motion_estimators.hpp	/^    const MatchesInfo *pairwise_matches_;$/;"	m	class:cv::detail::BundleAdjusterBase
pairwise_matches_	stitching/stitcher.hpp	/^    std::vector<detail::MatchesInfo> pairwise_matches_;$/;"	m	class:cv::Stitcher
panoConfidenceThresh	stitching/stitcher.hpp	/^    double panoConfidenceThresh() const { return conf_thresh_; }$/;"	f	class:cv::Stitcher
parallel_do	core/internal.hpp	/^    void parallel_do( Iterator first, Iterator last, const Body& body )$/;"	f	namespace:cv
parallel_for	core/internal.hpp	/^    void parallel_for( const BlockedRange& range, const Body& body )$/;"	f	namespace:cv
parallel_reduce	core/internal.hpp	/^    void parallel_reduce( const BlockedRange& range, Body& body )$/;"	f	namespace:cv
param	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> param;$/;"	m	class:CvLevMarq
param	legacy/compat.hpp	/^    CvScalar  param[2]; \/* parameters of RNG *\/$/;"	m	struct:CvRandState
param_	ts/ts_gtest.h	/^  const T param_;  \/\/ User-supplied parameter to the thread function.$/;"	m	class:std::tr1::ThreadWithParam
parameter_	ts/ts_gtest.h	/^  const ParamType parameter_;$/;"	m	class:testing::internal::ParameterizedTestFactory
parameter_	ts/ts_gtest.h	/^  static const ParamType* parameter_;$/;"	m	class:testing::WithParamInterface
parameter_	ts/ts_gtest.h	/^const T* WithParamInterface<T>::parameter_ = NULL;$/;"	m	class:testing::WithParamInterface
parameters	contrib/detection_based_tracker.hpp	/^        Parameters parameters;$/;"	m	class:DetectionBasedTracker
params	contrib/hybridtracker.hpp	/^    CvFeatureTrackerParams params;$/;"	m	class:cv::CvFeatureTracker
params	contrib/hybridtracker.hpp	/^    CvHybridTrackerParams params;$/;"	m	class:cv::CvHybridTracker
params	contrib/hybridtracker.hpp	/^    CvMeanShiftTrackerParams params;$/;"	m	class:cv::CvMeanShiftTracker
params	core/operations.hpp	/^    vector<int> params;$/;"	m	struct:cv::Formatted
params	features2d/features2d.hpp	/^  Params params;$/;"	m	class:cv::SimpleBlobDetector
params	flann/autotuned_index.h	/^        IndexParams params;$/;"	m	struct:cvflann::AutotunedIndex::CostData
params	flann/hierarchical_clustering_index.h	/^    IndexParams params;$/;"	m	class:cvflann::HierarchicalClusteringIndex
params	flann/miniflann.hpp	/^    void* params;$/;"	m	struct:cv::flann::IndexParams
params	legacy/legacy.hpp	/^    CvFGDStatModelParams   params;$/;"	m	struct:CvFGDStatModel
params	legacy/legacy.hpp	/^    CvGaussBGStatModelParams   params;$/;"	m	struct:CvGaussBGModel
params	legacy/legacy.hpp	/^    Params params;$/;"	m	class:cv::FernDescriptorMatcher
params	legacy/legacy.hpp	/^    Params params;$/;"	m	class:cv::OneWayDescriptorMatcher
params	ml/ml.hpp	/^    CvANN_MLP_TrainParams params;$/;"	m	class:CvANN_MLP
params	ml/ml.hpp	/^    CvBoostParams params;$/;"	m	class:CvBoost
params	ml/ml.hpp	/^    CvDTreeParams params;$/;"	m	struct:CvDTreeTrainData
params	ml/ml.hpp	/^    CvGBTreesParams params;$/;"	m	class:CvGBTrees
params	ml/ml.hpp	/^    CvSVMParams params;$/;"	m	class:CvSVM
params	ml/ml.hpp	/^    const CvSVMParams* params;$/;"	m	class:CvSVMSolver
params	ml/ml.hpp	/^    const CvSVMParams* params;$/;"	m	struct:CvSVMKernel
params	ts/ts.hpp	/^    TSParams params;$/;"	m	class:cvtest::TS
parasolCells_beta	contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
parasolCells_k	contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
parasolCells_tau	contrib/retina.hpp	/^               float parasolCells_beta, parasolCells_tau, parasolCells_k, amacrinCellsTemporalCutFrequency, V0CompressionParameter, localAdaptintegration_tau, localAdaptintegration_k;$/;"	m	struct:cv::Retina::RetinaParameters::IplMagnoParameters
parent	core/core_c.h	/^CVAPI(CvMemStorage*)  cvCreateChildMemStorage( CvMemStorage* parent );$/;"	v
parent	core/types_c.h	/^    struct  CvMemStorage* parent; \/* We get new blocks from parent as needed. *\/$/;"	m	struct:CvMemStorage	typeref:struct:CvMemStorage::CvMemStorage
parent	ml/ml.hpp	/^    CvDTreeNode* parent;$/;"	m	struct:CvDTreeNode
parent	objdetect/objdetect.hpp	/^    int parent;$/;"	m	struct:CvHaarStageClassifier
parent	stitching/detail/util.hpp	/^    std::vector<int> parent;$/;"	m	class:cv::detail::DisjointSets
parentView	highgui/cap_ios.h	/^@property (nonatomic, retain) UIView* parentView;$/;"	v
part_scores	gpu/gpu.hpp	/^   vector<double> part_scores[4];$/;"	m	struct:cv::gpu::HOGConfidence
partial_regex_	ts/ts_gtest.h	/^  regex_t partial_regex_;  \/\/ For PartialMatch().$/;"	m	class:std::tr1::RE
partition	core/operations.hpp	/^partition( const vector<_Tp>& _vec, vector<int>& labels,$/;"	f	namespace:cv
passed	ts/ts_gtest.h	/^  bool passed() const { return type_ == kSuccess; }$/;"	f	class:testing::TestPartResult
patchGenerator	legacy/legacy.hpp	/^        PatchGenerator patchGenerator;$/;"	m	class:cv::FernDescriptorMatcher::Params
patchSize	features2d/features2d.hpp	/^    CV_PROP_RW int patchSize;$/;"	m	class:cv::ORB
patchSize	legacy/legacy.hpp	/^        Size patchSize;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
patchSize	legacy/legacy.hpp	/^        int patchSize;$/;"	m	class:cv::FernDescriptorMatcher::Params
patchSize	legacy/legacy.hpp	/^    Size patchSize;$/;"	m	class:cv::FernClassifier
patchSize_	gpu/gpu.hpp	/^    int patchSize_;$/;"	m	class:cv::gpu::ORB_GPU
path_	videostab/frame_source.hpp	/^    std::string path_;$/;"	m	class:cv::videostab::VideoFileSource
pathname_	ts/ts_gtest.h	/^  String pathname_;$/;"	m	class:testing::internal::FilePath
pattern	ts/ts_gtest.h	/^  const char* pattern() const { return pattern_; }$/;"	f	class:std::tr1::RE
patternLookup	features2d/features2d.hpp	/^    vector<PatternPoint> patternLookup; \/\/ look-up table for the pattern points (position+sigma of all points at all scales and orientation)$/;"	m	class:cv::FREAK
patternPoints_	features2d/features2d.hpp	/^    BriskPatternPoint* patternPoints_;     \/\/[i][rotation][scale]$/;"	m	class:cv::BRISK
patternScale	features2d/features2d.hpp	/^    double patternScale; \/\/scaling of the pattern$/;"	m	class:cv::FREAK
patternScale0	features2d/features2d.hpp	/^    double patternScale0;$/;"	m	class:cv::FREAK
patternSizes	features2d/features2d.hpp	/^    int patternSizes[NB_SCALES]; \/\/ size of the pattern at a specific scale (used to check if a point is within image boundaries)$/;"	m	class:cv::FREAK
pattern_	gpu/gpu.hpp	/^    GpuMat pattern_;$/;"	m	class:cv::gpu::ORB_GPU
pattern_	ts/ts_gtest.h	/^  const char* pattern_;$/;"	m	class:std::tr1::RE
pcaFilename	legacy/legacy.hpp	/^        string pcaFilename;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
penalization	contrib/contrib.hpp	/^        CV_PROP_RW int      penalization;$/;"	m	class:cv::StereoVar
perf	ts/ts_perf.hpp	/^namespace perf$/;"	n
perform_morphing	gpu/gpu.hpp	/^        int perform_morphing;     \/\/ Number of erode-dilate-erode foreground-blob cleanup iterations.$/;"	m	struct:cv::gpu::FGDStatModel::Params
perform_morphing	legacy/legacy.hpp	/^    int    perform_morphing;	\/* Number of erode-dilate-erode foreground-blob cleanup iterations.						*\/$/;"	m	struct:CvFGDStatModelParams
performance_metrics	ts/ts_perf.hpp	/^typedef struct CV_EXPORTS performance_metrics$/;"	s	namespace:perf
performance_metrics	ts/ts_perf.hpp	/^} performance_metrics;$/;"	t	namespace:perf	typeref:struct:perf::performance_metrics
perspectiveProjection_	core/opengl_interop.hpp	/^    bool perspectiveProjection_;$/;"	m	class:cv::GlCamera
phi	legacy/legacy.hpp	/^    float phi;$/;"	m	class:cv::CvAffinePose
phiMax	legacy/legacy.hpp	/^    double phiMin, phiMax;$/;"	m	class:cv::PatchGenerator
phiMin	legacy/legacy.hpp	/^    double phiMin, phiMax;$/;"	m	class:cv::PatchGenerator
photoreceptorsLocalAdaptationSensitivity	contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
photoreceptorsSpatialConstant	contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
photoreceptorsTemporalConstant	contrib/retina.hpp	/^               float photoreceptorsLocalAdaptationSensitivity, photoreceptorsTemporalConstant, photoreceptorsSpatialConstant, horizontalCellsGain, hcellsTemporalConstant, hcellsSpatialConstant, ganglionCellsSensitivity;$/;"	m	struct:cv::Retina::RetinaParameters::OPLandIplParvoParameters
pitch_	core/opengl_interop.hpp	/^    double pitch_;$/;"	m	class:cv::GlCamera
pivot	flann/hierarchical_clustering_index.h	/^        int pivot;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
pivot	flann/kmeans_index.h	/^        DistanceType* pivot;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
pix_size	legacy/legacy.hpp	/^    int pix_size() const { return image ? ((image->depth & 255)>>3)*image->nChannels : 0; }$/;"	f	class:CvImage
pix_size	legacy/legacy.hpp	/^    int pix_size() const { return matrix ? CV_ELEM_SIZE(matrix->type) : 0; }$/;"	f	class:CvMatrix
pixel	contrib/contrib.hpp	/^            pixel() { u = v = 0; a = 0.; }$/;"	f	struct:cv::LogPolar_Adjacent::pixel
pixel	contrib/contrib.hpp	/^        struct pixel$/;"	s	class:cv::LogPolar_Adjacent
pixel_stat	legacy/legacy.hpp	/^    CvBGPixelStat*         pixel_stat;$/;"	m	struct:CvFGDStatModel
planeSplit	flann/kdtree_index.h	/^    void planeSplit(int* ind, int count, int cutfeat, DistanceType cutval, int& lim1, int& lim2)$/;"	f	class:cvflann::KDTreeIndex
planeSplit	flann/kdtree_single_index.h	/^    void planeSplit(int* ind, int count, int cutfeat, DistanceType cutval, int& lim1, int& lim2)$/;"	f	class:cvflann::KDTreeSingleIndex
plus	gpu/device/functional.hpp	/^        __device__ __forceinline__ plus():binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::plus
plus	gpu/device/functional.hpp	/^        __device__ __forceinline__ plus(const plus& other):binary_function<T,T,T>(){}$/;"	f	struct:cv::gpu::device::plus
plus	gpu/device/functional.hpp	/^    template <typename T> struct plus : binary_function<T, T, T>$/;"	s	namespace:cv::gpu::device
plus_delta	core/types_c.h	/^    int  plus_delta;$/;"	m	struct:CvLineIterator
plus_step	core/types_c.h	/^    int  plus_step;$/;"	m	struct:CvLineIterator
pointCount	features2d/features2d.hpp	/^        int pointCount;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
pointer	core/core.hpp	/^    typedef value_type* pointer;$/;"	t	class:cv::Allocator
pointer	ts/ts_gtest.h	/^    T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal::ValueHolder
pointer	ts/ts_gtest.h	/^  T* pointer() { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	ts/ts_gtest.h	/^  T* pointer() { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
pointer	ts/ts_gtest.h	/^  const T* pointer() const { return &value_; }$/;"	f	class:std::tr1::ThreadLocal
pointer	ts/ts_gtest.h	/^  const T* pointer() const { return GetOrCreateValue(); }$/;"	f	class:std::tr1::ThreadLocal
points	contrib/contrib.hpp	/^        vector<Point3f> points;$/;"	m	class:cv::Octree
points	contrib/contrib.hpp	/^    std::vector<CvFuzzyPoint> points;$/;"	m	class:CvFuzzyCurve
points	imgproc/imgproc_c.h	/^CVAPI(CvBox2D) cvFitEllipse2( const CvArr* points );$/;"	v
points	legacy/legacy.hpp	/^    CvPoint2D32f* points[MAX_CAMERAS];$/;"	m	class:CvCalibFilter
pointsGood_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrevGood_, pointsGood_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
pointsPrevGood_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrevGood_, pointsGood_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
pointsPrev_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrev_, points_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
points_	features2d/features2d.hpp	/^    unsigned int points_;                 \/\/ total number of collocation points$/;"	m	class:cv::BRISK
points_	videostab/global_motion.hpp	/^    std::vector<Point2f> pointsPrev_, points_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
policy	flann/any.h	/^    anyimpl::base_any_policy* policy;$/;"	m	struct:cvflann::any
polyN	gpu/gpu.hpp	/^    int polyN;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
polySigma	gpu/gpu.hpp	/^    double polySigma;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
poly_n	contrib/contrib.hpp	/^        CV_PROP_RW int      poly_n;$/;"	m	class:cv::StereoVar
poly_sigma	contrib/contrib.hpp	/^        CV_PROP_RW double   poly_sigma;$/;"	m	class:cv::StereoVar
pool	flann/hierarchical_clustering_index.h	/^    PooledAllocator pool;$/;"	m	class:cvflann::HierarchicalClusteringIndex
pool_	flann/kdtree_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KDTreeIndex
pool_	flann/kdtree_single_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KDTreeSingleIndex
pool_	flann/kmeans_index.h	/^    PooledAllocator pool_;$/;"	m	class:cvflann::KMeansIndex
popMin	flann/heap.h	/^    bool popMin(T& value)$/;"	f	class:cvflann::Heap
pop_back	core/operations.hpp	/^    Vector<_Tp>& pop_back()$/;"	f	class:cv::Vector
pop_back	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_back()$/;"	f	class:cv::Seq
pop_back	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_back(_Tp* elem, size_t count)$/;"	f	class:cv::Seq
pop_front	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_front()$/;"	f	class:cv::Seq
pop_front	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::pop_front(_Tp* elem, size_t count)$/;"	f	class:cv::Seq
popcnt32	flann/dist.h	/^    unsigned int popcnt32(uint32_t n) const$/;"	f	struct:cvflann::Hamming2
popcnt64	flann/dist.h	/^    unsigned int popcnt64(uint64_t n) const$/;"	f	struct:cvflann::Hamming2
portion	ml/ml.hpp	/^        float portion;$/;"	m	union:CvTrainTestSplit::__anon259
pos	core/mat.hpp	/^template<typename _Tp> inline Point MatConstIterator_<_Tp>::pos() const$/;"	f	class:cv::MatConstIterator_
pos	core/operations.hpp	/^inline Point LineIterator::pos() const$/;"	f	class:cv::LineIterator
pos_	core/opengl_interop.hpp	/^    Point3d pos_;$/;"	m	class:cv::GlCamera
poseCount	legacy/legacy.hpp	/^        int poseCount;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
posit_object	calib3d/calib3d.hpp	/^CVAPI(void)  cvReleasePOSITObject( CvPOSITObject**  posit_object );$/;"	v
posix	ts/ts_gtest.h	/^namespace posix {$/;"	n	namespace:std::tr1
posteriors	legacy/legacy.hpp	/^    vector<float> posteriors;$/;"	m	class:cv::FernClassifier
posteriors2_	legacy/legacy.hpp	/^    uchar **posteriors2_;     \/\/ 16-bytes aligned posteriors$/;"	m	class:cv::RandomizedTree
posteriors_	legacy/legacy.hpp	/^    float **posteriors_;        \/\/ 16-bytes aligned posteriors$/;"	m	class:cv::RandomizedTree
posteriors_	legacy/legacy.hpp	/^    mutable uchar **posteriors_;$/;"	m	class:cv::RTreeClassifier
ppFaceTracker	legacy/legacy.hpp	/^CVAPI(void) cvReleaseFaceTracker(CvFaceTracker** ppFaceTracker);$/;"	v
ppx	stitching/detail/camera.hpp	/^    double ppx; \/\/ Principal point X$/;"	m	struct:cv::detail::CameraParams
ppy	stitching/detail/camera.hpp	/^    double ppy; \/\/ Principal point Y$/;"	m	struct:cv::detail::CameraParams
preFilterCap	calib3d/calib3d.hpp	/^    CV_PROP_RW int preFilterCap;$/;"	m	class:cv::StereoSGBM
preFilterCap	calib3d/calib3d.hpp	/^    int preFilterCap; \/\/ the output of pre-filtering is clipped by [-preFilterCap,preFilterCap]$/;"	m	struct:CvStereoBMState
preFilterSize	calib3d/calib3d.hpp	/^    int preFilterSize; \/\/ averaging window size: ~5x5..21x21$/;"	m	struct:CvStereoBMState
preFilterType	calib3d/calib3d.hpp	/^    int preFilterType; \/\/ =CV_STEREO_BM_NORMALIZED_RESPONSE now$/;"	m	struct:CvStereoBMState
preFilteredImg0	calib3d/calib3d.hpp	/^    CvMat* preFilteredImg0;$/;"	m	struct:CvStereoBMState
preFilteredImg1	calib3d/calib3d.hpp	/^    CvMat* preFilteredImg1;$/;"	m	struct:CvStereoBMState
preProcessedFrame_	videostab/stabilizer.hpp	/^    Mat preProcessedFrame_;$/;"	m	class:cv::videostab::StabilizerBase
precision	contrib/openfabmap.hpp	/^    int precision;$/;"	m	class:cv::of2::FabMapLUT
pred	gpu/device/functional.hpp	/^        const Predicate pred;$/;"	m	struct:cv::gpu::device::binary_negate
pred	gpu/device/functional.hpp	/^      const Predicate pred;$/;"	m	struct:cv::gpu::device::unary_negate
preset	gpu/gpu.hpp	/^    int preset;$/;"	m	class:cv::gpu::StereoBM_GPU
prev	core/types_c.h	/^    struct CvMemBlock*  prev;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock
prev	core/types_c.h	/^    struct CvSeqBlock*  prev; \/* Previous sequence block.                   *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock
prev	core/types_c.h	/^    struct CvTypeInfo* prev;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo
prev	ml/ml.hpp	/^    CvSVMKernelRow* prev;$/;"	m	struct:CvSVMKernelRow
prevErrNorm	calib3d/calib3d.hpp	/^    double prevErrNorm, errNorm;$/;"	m	class:CvLevMarq
prevErrNorm	contrib/contrib.hpp	/^        double prevErrNorm, errNorm;$/;"	m	class:cv::LevMarqSparse
prevP	contrib/contrib.hpp	/^        CvMat* prevP; \/\/current already accepted parameter.$/;"	m	class:cv::LevMarqSparse
prevParam	calib3d/calib3d.hpp	/^    cv::Ptr<CvMat> prevParam;$/;"	m	class:CvLevMarq
prevPyr_	gpu/gpu.hpp	/^    vector<GpuMat> prevPyr_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
prevPyr_	ocl/ocl.hpp	/^            vector<oclMat> prevPyr_;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
prevTrainCount	legacy/legacy.hpp	/^    int prevTrainCount;$/;"	m	class:cv::FernDescriptorMatcher
prevTrainCount	legacy/legacy.hpp	/^    int prevTrainCount;$/;"	m	class:cv::OneWayDescriptorMatcher
prev_center	contrib/hybridtracker.hpp	/^    Point2d prev_center;$/;"	m	class:cv::CvFeatureTracker
prev_center	contrib/hybridtracker.hpp	/^    Point2f prev_center;$/;"	m	class:cv::CvHybridTracker
prev_center	contrib/hybridtracker.hpp	/^    Point2f prev_center;$/;"	m	class:cv::CvMeanShiftTracker
prev_frame	legacy/legacy.hpp	/^    IplImage*              prev_frame;$/;"	m	struct:CvFGDStatModel
prev_image	contrib/hybridtracker.hpp	/^    Mat prev_image;$/;"	m	class:cv::CvFeatureTracker
prev_image_bw	contrib/hybridtracker.hpp	/^    Mat prev_image_bw;$/;"	m	class:cv::CvFeatureTracker
prev_proj	contrib/hybridtracker.hpp	/^    Mat prev_proj;$/;"	m	class:cv::CvHybridTracker
prev_trackbox	contrib/hybridtracker.hpp	/^    RotatedRect prev_trackbox;$/;"	m	class:cv::CvMeanShiftTracker
prev_trackwindow	contrib/hybridtracker.hpp	/^    Rect prev_trackwindow;$/;"	m	class:cv::CvFeatureTracker
prev_trackwindow	contrib/hybridtracker.hpp	/^    Rect prev_trackwindow;$/;"	m	class:cv::CvMeanShiftTracker
prev_window	contrib/hybridtracker.hpp	/^    Rect prev_window;$/;"	m	class:cv::CvHybridTracker
principal_point	legacy/legacy.hpp	/^    CvPoint2D32f principal_point; \/* copied from intrinsics so this structure *\/$/;"	m	struct:Cv3dTrackerCameraInfo
principal_point	legacy/legacy.hpp	/^    CvPoint2D32f principal_point;$/;"	m	struct:Cv3dTrackerCameraIntrinsics
print	flann/any.h	/^    virtual void print(std::ostream& out, void* const* src) { out << *reinterpret_cast<T const*>(*src); }$/;"	f	struct:cvflann::anyimpl::big_any_policy
print	flann/any.h	/^    virtual void print(std::ostream& out, void* const* src) { out << *reinterpret_cast<T const*>(src); }$/;"	f	struct:cvflann::anyimpl::small_any_policy
print	flann/any.h	/^template<> inline void big_any_policy<flann_algorithm_t>::print(std::ostream& out, void* const* src)$/;"	f	class:cvflann::anyimpl::big_any_policy
print	flann/any.h	/^template<> inline void big_any_policy<flann_centers_init_t>::print(std::ostream& out, void* const* src)$/;"	f	class:cvflann::anyimpl::big_any_policy
print	videostab/log.hpp	/^    virtual void print(const char * \/*format*\/, ...) {}$/;"	f	class:cv::videostab::NullLog
printFuncAttrib	gpu/device/funcattrib.hpp	/^    void printFuncAttrib(Func& func)$/;"	f	namespace:cv::gpu::device
print_params	flann/params.h	/^inline void print_params(const IndexParams& params)$/;"	f	namespace:cvflann
priorMatches	contrib/openfabmap.hpp	/^    vector<IMatch> priorMatches;$/;"	m	class:cv::of2::FabMap
priors	ml/ml.hpp	/^    CvMat* priors;$/;"	m	struct:CvDTreeTrainData
priors	ml/ml.hpp	/^    const float* priors;$/;"	m	struct:CvDTreeParams
priors_mult	ml/ml.hpp	/^    CvMat* priors_mult;$/;"	m	struct:CvDTreeTrainData
prob	videostab/global_motion.hpp	/^    float prob; \/\/ probability of success$/;"	m	struct:cv::videostab::RansacParams
probs	legacy/legacy.hpp	/^    const CvMat* probs;$/;"	m	struct:CvEMParams
probs	legacy/legacy.hpp	/^    cv::Mat probs;$/;"	m	class:CvEM
probsHdr	legacy/legacy.hpp	/^    CvMat probsHdr;$/;"	m	class:CvEM
process	core/mat.hpp	/^process( const Mat_<T1>& m1, Mat_<T2>& m2, Op op )$/;"	f	namespace:cv
process	core/mat.hpp	/^process( const Mat_<T1>& m1, const Mat_<T2>& m2, Mat_<T3>& m3, Op op )$/;"	f	namespace:cv
process	objdetect/objdetect.hpp	/^  Ptr<QuantizedPyramid> process(const Mat& src,$/;"	f	class:cv::linemod::Modality
processNoiseCov	video/tracking.hpp	/^    Mat processNoiseCov;    \/\/!< process noise covariance matrix (Q)$/;"	m	class:cv::KalmanFilter
process_noise_cov	video/tracking.hpp	/^    CvMat* process_noise_cov;   \/* process noise covariance matrix (Q) *\/$/;"	m	struct:CvKalman
productsum	ml/ml.hpp	/^    CvMat** productsum;$/;"	m	class:CvNormalBayesClassifier
progress	ts/ts.hpp	/^    int progress;$/;"	m	class:cvtest::BadArgTest
project1st	gpu/device/functional.hpp	/^        __device__ __forceinline__ project1st():binary_function<T1,T2,T1>(){}$/;"	f	struct:cv::gpu::device::project1st
project1st	gpu/device/functional.hpp	/^        __device__ __forceinline__ project1st(const project1st& other):binary_function<T1,T2,T1>(){}$/;"	f	struct:cv::gpu::device::project1st
project1st	gpu/device/functional.hpp	/^    template <typename T1, typename T2> struct project1st : binary_function<T1, T2, T1>$/;"	s	namespace:cv::gpu::device
project2nd	gpu/device/functional.hpp	/^        __device__ __forceinline__ project2nd():binary_function<T1,T2,T2>(){}$/;"	f	struct:cv::gpu::device::project2nd
project2nd	gpu/device/functional.hpp	/^        __device__ __forceinline__ project2nd(const project2nd& other):binary_function<T1,T2,T2>(){}$/;"	f	struct:cv::gpu::device::project2nd
project2nd	gpu/device/functional.hpp	/^    template <typename T1, typename T2> struct project2nd : binary_function<T1, T2, T2>$/;"	s	namespace:cv::gpu::device
projectionMatrix_	core/opengl_interop.hpp	/^    Mat projectionMatrix_;$/;"	m	class:cv::GlCamera
projector_	stitching/detail/warpers.hpp	/^    P projector_;$/;"	m	class:cv::detail::RotationWarperBase
proto2	ts/ts_gtest.h	/^namespace proto2 { class Message; }$/;"	n
pruned_tree_idx	ml/ml.hpp	/^    int pruned_tree_idx;$/;"	m	class:CvDTree
pt	features2d/features2d.hpp	/^    CV_PROP_RW Point2f pt; \/\/!< coordinates of the keypoints$/;"	m	class:cv::KeyPoint
pt	imgproc/imgproc.hpp	/^        Point2f pt;$/;"	m	struct:cv::Subdiv2D::Vertex
pt	imgproc/imgproc.hpp	/^        int pt[4];$/;"	m	struct:cv::Subdiv2D::QuadEdge
pt	imgproc/types_c.h	/^    CvPoint   pt;$/;"	m	struct:CvChainPtReader
pt	legacy/compat.hpp	/^    CvPoint pt;$/;"	m	struct:CvStarKeypoint
pt	legacy/compat.hpp	/^    CvPoint2D32f pt;$/;"	m	struct:CvSURFPoint
ptemp_	legacy/legacy.hpp	/^    mutable unsigned short *ptemp_;$/;"	m	class:cv::RTreeClassifier
ptr	core/core_c.h	/^    uchar* ptr[CV_MAX_ARR]; \/* pointers to the array slices *\/$/;"	m	struct:CvNArrayIterator
ptr	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__       T* ptr(int y = 0)       { return (      T*)( (      char*)DevPtr<T>::data + y * step); }$/;"	f	struct:cv::gpu::PtrStep
ptr	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ T* ptr(int y = 0) { return PtrStep<T>::data + y * PtrStep<T>::step; }$/;"	f	struct:cv::gpu::PtrElemStep_
ptr	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T* ptr(int y = 0) const { return (const T*)( (const char*)DevPtr<T>::data + y * step); }$/;"	f	struct:cv::gpu::PtrStep
ptr	core/cuda_devptrs.hpp	/^            __CV_GPU_HOST_DEVICE__ const T* ptr(int y = 0) const { return PtrStep<T>::data + y * PtrStep<T>::step; }$/;"	f	struct:cv::gpu::PtrElemStep_
ptr	core/gpumat.hpp	/^    inline const uchar* GpuMat::ptr(int y) const$/;"	f	class:cv::gpu::GpuMat
ptr	core/gpumat.hpp	/^    inline uchar* GpuMat::ptr(int y)$/;"	f	class:cv::gpu::GpuMat
ptr	core/gpumat.hpp	/^    template<typename _Tp> inline _Tp* GpuMat::ptr(int y)$/;"	f	class:cv::gpu::GpuMat
ptr	core/gpumat.hpp	/^    template<typename _Tp> inline const _Tp* GpuMat::ptr(int y) const$/;"	f	class:cv::gpu::GpuMat
ptr	core/mat.hpp	/^inline const uchar* Mat::ptr(const int* idx) const$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^inline const uchar* Mat::ptr(int i0, int i1) const$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^inline const uchar* Mat::ptr(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^inline const uchar* Mat::ptr(int y) const$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^inline uchar* Mat::ptr(const int* idx)$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^inline uchar* Mat::ptr(int i0, int i1)$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^inline uchar* Mat::ptr(int i0, int i1, int i2)$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^inline uchar* Mat::ptr(int y)$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat::ptr(int i0, int i1)$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat::ptr(int i0, int i1, int i2)$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^template<typename _Tp> inline _Tp* Mat::ptr(int y)$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat::ptr(int i0, int i1) const$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat::ptr(int i0, int i1, int i2) const$/;"	f	class:cv::Mat
ptr	core/mat.hpp	/^template<typename _Tp> inline const _Tp* Mat::ptr(int y) const$/;"	f	class:cv::Mat
ptr	core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline Ptr<_Tp2> Ptr<_Tp>::ptr()$/;"	f	class:cv::Ptr
ptr	core/operations.hpp	/^template<typename _Tp> template<typename _Tp2> inline const Ptr<_Tp2> Ptr<_Tp>::ptr() const$/;"	f	class:cv::Ptr
ptr	core/types_c.h	/^        uchar* ptr;$/;"	m	union:CvMat::__anon221
ptr	core/types_c.h	/^        uchar* ptr;$/;"	m	union:CvMatND::__anon224
ptr	core/types_c.h	/^    CvPoint2D32f* ptr;$/;"	m	struct:CvGraphVtx2D
ptr	core/types_c.h	/^    char* ptr;$/;"	m	struct:CvString
ptr	core/types_c.h	/^    uchar* ptr;$/;"	m	struct:CvLineIterator
ptr	gpu/device/border_interpolate.hpp	/^        const Ptr2D ptr;$/;"	m	struct:cv::gpu::device::BorderReader
ptr	ml/ml.hpp	/^        uchar** ptr;$/;"	m	union:CvVectors::__anon243
ptr	ocl/matrix_operations.hpp	/^        inline const uchar *oclMat::ptr(int y) const$/;"	f	class:cv::ocl::oclMat
ptr	ocl/matrix_operations.hpp	/^        inline uchar *oclMat::ptr(int y)$/;"	f	class:cv::ocl::oclMat
ptr	ocl/matrix_operations.hpp	/^        template<typename _Tp> inline _Tp *oclMat::ptr(int y)$/;"	f	class:cv::ocl::oclMat
ptr	ocl/matrix_operations.hpp	/^        template<typename _Tp> inline const _Tp *oclMat::ptr(int y) const$/;"	f	class:cv::ocl::oclMat
ptrLeft	legacy/legacy.hpp	/^    CvMat* ptrLeft;$/;"	m	struct:CvStereoGCState
ptrRight	legacy/legacy.hpp	/^    CvMat* ptrRight;$/;"	m	struct:CvStereoGCState
ptr_	ts/ts_gtest.h	/^  T* ptr_;$/;"	m	struct:std::tr1::tuple_element
pushBack	videostab/inpainting.hpp	/^    void pushBack(Ptr<InpainterBase> inpainter) { inpainters_.push_back(inpainter); }$/;"	f	class:cv::videostab::InpaintingPipeline
push_back	core/mat.hpp	/^template<typename _Tp> inline void Mat::push_back(const Mat_<_Tp>& m)$/;"	f	class:cv::Mat
push_back	core/mat.hpp	/^template<typename _Tp> inline void Mat::push_back(const _Tp& elem)$/;"	f	class:cv::Mat
push_back	core/operations.hpp	/^    Vector<_Tp>& push_back(const _Tp& elem)$/;"	f	class:cv::Vector
push_back	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_back(const _Tp& elem)$/;"	f	class:cv::Seq
push_back	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_back(const _Tp* elem, size_t count)$/;"	f	class:cv::Seq
push_front	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_front(const _Tp& elem)$/;"	f	class:cv::Seq
push_front	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::push_front(const _Tp* elem, size_t count)$/;"	f	class:cv::Seq
pyrLevel_	gpu/gpu.hpp	/^    GpuMat pyrLevel_[2], M_, bufM_, R_[2], blurredFrame_[2];$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyrScale	contrib/contrib.hpp	/^        CV_PROP_RW double   pyrScale;$/;"	m	class:cv::StereoVar
pyrScale	gpu/gpu.hpp	/^    double pyrScale;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyramid0_	gpu/gpu.hpp	/^    std::vector<GpuMat> pyramid0_, pyramid1_;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyramid1_	gpu/gpu.hpp	/^    std::vector<GpuMat> pyramid0_, pyramid1_;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
pyramidLevels	objdetect/objdetect.hpp	/^  int pyramidLevels() const { return pyramid_levels; }$/;"	f	class:cv::linemod::Detector
pyramid_	gpu/gpu.hpp	/^    std::vector<GpuMat> pyramid_;$/;"	m	class:cv::gpu::ImagePyramid
pyramid_level	objdetect/objdetect.hpp	/^  int pyramid_level;$/;"	m	struct:cv::linemod::Template
pyramid_levels	objdetect/objdetect.hpp	/^  int pyramid_levels;$/;"	m	class:cv::linemod::Detector
q	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
q	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
q	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
q	contrib/openfabmap.hpp	/^        int q;$/;"	m	struct:cv::of2::FabMapFBO::WordStats
qangle	gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
qangle	ocl/ocl.hpp	/^            oclMat grad, qangle;$/;"	m	struct:cv::ocl::HOGDescriptor
qangle_buf	gpu/gpu.hpp	/^    GpuMat grad, qangle, grad_buf, qangle_buf;$/;"	m	struct:cv::gpu::HOGDescriptor
qedges	imgproc/imgproc.hpp	/^    vector<QuadEdge> qedges;$/;"	m	class:cv::Subdiv2D
quad	legacy/legacy.hpp	/^    CvPoint2D32f quad[2][4]; \/* coordinates of destination quadrangle after$/;"	m	struct:CvStereoCamera
quality	ml/ml.hpp	/^    float quality;$/;"	m	struct:CvDTreeSplit
qualityLevel	features2d/features2d.hpp	/^    double qualityLevel;$/;"	m	class:cv::GFTTDetector
qualityLevel	gpu/gpu.hpp	/^    double qualityLevel;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
quantizationLevels	gpu/gpu.hpp	/^    int quantizationLevels;$/;"	m	class:cv::gpu::GMG_GPU
quantizationLevels	video/background_segm.hpp	/^    int     quantizationLevels;$/;"	m	class:cv::BackgroundSubtractorGMG
query	legacy/legacy.hpp	/^    float query( int* bin ) const$/;"	f	class:CvCamShiftTracker
queryIdx	contrib/openfabmap.hpp	/^    int queryIdx;    \/\/query index$/;"	m	struct:cv::of2::IMatch
queryIdx	features2d/features2d.hpp	/^    CV_PROP_RW int queryIdx; \/\/ query descriptor index$/;"	m	struct:cv::DMatch
quiet_NaN	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type quiet_NaN() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
r	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
r	ml/ml.hpp	/^    double r;   \/\/ for Solver_NU$/;"	m	struct:CvSVMSolutionInfo
r	objdetect/objdetect.hpp	/^        CvRect r;$/;"	m	struct:CvHaarFeature::__anon227
r2	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
rSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
r_kinv	stitching/detail/warpers.hpp	/^    float r_kinv[9];$/;"	m	struct:cv::detail::ProjectorBase
radius	features2d/features2d.hpp	/^      double radius;$/;"	m	struct:cv::SimpleBlobDetector::Center
radius	flann/kmeans_index.h	/^        DistanceType radius;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
radius	flann/result_set.h	/^    DistanceType radius;$/;"	m	class:cvflann::RadiusResultSet
radius	gpu/gpu.hpp	/^    int radius;            \/\/ R$/;"	m	class:cv::gpu::VIBE_GPU
radius	gpu/gpu.hpp	/^    int radius;$/;"	m	class:cv::gpu::DisparityBilateralFilter
radius	legacy/legacy.hpp	/^    int radius;$/;"	m	class:cv::LDetector
radius	videostab/deblurring.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::DeblurerBase
radius	videostab/inpainting.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::InpainterBase
radius	videostab/motion_stabilizing.hpp	/^    virtual int radius() const { return radius_; }$/;"	f	class:cv::videostab::MotionFilterBase
radius	videostab/stabilizer.hpp	/^    int radius() const { return radius_; }$/;"	f	class:cv::videostab::StabilizerBase
radiusSearch	flann/flann.hpp	/^int GenericIndex<Distance>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
radiusSearch	flann/flann.hpp	/^int GenericIndex<Distance>::radiusSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::GenericIndex
radiusSearch	flann/flann.hpp	/^int Index_<T>::radiusSearch(const Mat& query, Mat& indices, Mat& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
radiusSearch	flann/flann.hpp	/^int Index_<T>::radiusSearch(const vector<ElementType>& query, vector<int>& indices, vector<DistanceType>& dists, DistanceType radius, const ::cvflann::SearchParams& searchParams)$/;"	f	class:cv::flann::Index_
radiusSearch	flann/flann_base.hpp	/^    int radiusSearch(const Matrix<ElementType>& query, Matrix<int>& indices, Matrix<DistanceType>& dists, float radius, const SearchParams& params)$/;"	f	class:cvflann::Index
radiusSearch	flann/nn_index.h	/^    virtual int radiusSearch(const Matrix<ElementType>& query, Matrix<int>& indices, Matrix<DistanceType>& dists, float radius, const SearchParams& params)$/;"	f	class:cvflann::NNIndex
radius_	flann/result_set.h	/^    DistanceType radius_;$/;"	m	class:cvflann::KNNRadiusUniqueResultSet
radius_	videostab/deblurring.hpp	/^    int radius_;$/;"	m	class:cv::videostab::DeblurerBase
radius_	videostab/inpainting.hpp	/^    double radius_;$/;"	m	class:cv::videostab::ColorInpainter
radius_	videostab/inpainting.hpp	/^    int radius_;$/;"	m	class:cv::videostab::InpainterBase
radius_	videostab/motion_stabilizing.hpp	/^    int radius_;$/;"	m	class:cv::videostab::MotionFilterBase
radius_	videostab/stabilizer.hpp	/^    int radius_;$/;"	m	class:cv::videostab::StabilizerBase
randInt	ts/ts.hpp	/^inline unsigned randInt( RNG& rng )$/;"	f	namespace:cvtest
randReal	ts/ts.hpp	/^inline  double randReal( RNG& rng )$/;"	f	namespace:cvtest
randStates_	gpu/gpu.hpp	/^    GpuMat randStates_;$/;"	m	class:cv::gpu::VIBE_GPU
rand_double	flann/random.h	/^inline double rand_double(double high = 1.0, double low = 0)$/;"	f	namespace:cvflann
rand_int	flann/random.h	/^inline int rand_int(int high = RAND_MAX, int low = 0)$/;"	f	namespace:cvflann
randn	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::randn(_Tp a, _Tp b)$/;"	f	class:cv::Matx
randomBlur	legacy/legacy.hpp	/^    bool randomBlur;$/;"	m	class:cv::PatchGenerator
random_sample	flann/sampling.h	/^Matrix<T> random_sample(Matrix<T>& srcMatrix, long size, bool remove = false)$/;"	f	namespace:cvflann
random_sample	flann/sampling.h	/^Matrix<T> random_sample(const Matrix<T>& srcMatrix, size_t size)$/;"	f	namespace:cvflann
randu	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::randu(_Tp a, _Tp b)$/;"	f	class:cv::Matx
rank_	stitching/detail/util.hpp	/^    std::vector<int> rank_;$/;"	m	class:cv::detail::DisjointSets
ransacParams	videostab/global_motion.hpp	/^    RansacParams ransacParams() const { return ransacParams_; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
ransacParams_	videostab/global_motion.hpp	/^    RansacParams ransacParams_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
read	core/operations.hpp	/^    static void* read(CvFileStorage* fs, CvFileNode* n)$/;"	f	struct:cv::RTTIImpl
read	core/operations.hpp	/^read( FileNodeIterator& it, vector<_Tp>& vec, size_t maxCount=(size_t)INT_MAX )$/;"	f	namespace:cv
read	core/operations.hpp	/^read( const FileNode& node, vector<_Tp>& vec, const vector<_Tp>& default_value=vector<_Tp>() )$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, bool& value, bool default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, double& value, double default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, float& value, float default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, int& value, int default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, schar& value, schar default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, short& value, short default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, string& value, const string& default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, uchar& value, uchar default_value)$/;"	f	namespace:cv
read	core/operations.hpp	/^static inline void read(const FileNode& node, ushort& value, ushort default_value)$/;"	f	namespace:cv
read	core/types_c.h	/^    CvReadFunc read;$/;"	m	struct:CvTypeInfo
read	legacy/legacy.hpp	/^void CalonderDescriptorExtractor<T>::read( const FileNode& )$/;"	f	class:cv::CalonderDescriptorExtractor
readRaw	core/operations.hpp	/^inline void FileNode::readRaw( const string& fmt, uchar* vec, size_t len ) const$/;"	f	class:cv::FileNode
read_type	gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<T, shift>::vec_type read_type;$/;"	t	struct:cv::gpu::device::transform_detail::UnaryReadWriteTraits
read_type1	gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<T1, shift>::vec_type read_type1;$/;"	t	struct:cv::gpu::device::transform_detail::BinaryReadWriteTraits
read_type2	gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<T2, shift>::vec_type read_type2;$/;"	t	struct:cv::gpu::device::transform_detail::BinaryReadWriteTraits
reader	core/core_c.h	/^CVAPI(int)  cvGetSeqReaderPos( CvSeqReader* reader );$/;"	v
reader	imgproc/imgproc_c.h	/^CVAPI(CvPoint) cvReadChainPoint( CvChainPtReader* reader );$/;"	v
reader_	videostab/frame_source.hpp	/^    VideoCapture reader_;$/;"	m	class:cv::videostab::VideoFileSource
real_window_size	objdetect/objdetect.hpp	/^    CvSize real_window_size;$/;"	m	struct:CvHaarClassifierCascade
realmaxdiff	ts/ts.hpp	/^    double realmaxdiff;$/;"	m	struct:cvtest::MatComparator
rebind	core/core.hpp	/^    template<typename U> class rebind { typedef Allocator<U> other; };$/;"	c	class:cv::Allocator
recentEdge	imgproc/imgproc.hpp	/^    int recentEdge;$/;"	m	class:cv::Subdiv2D
recordAssetWriter	highgui/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriter* recordAssetWriter;$/;"	v
recordAssetWriterInput	highgui/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriterInput* recordAssetWriterInput;$/;"	v
recordPixelBufferAdaptor	highgui/cap_ios.h	/^@property (nonatomic, retain) AVAssetWriterInputPixelBufferAdaptor* recordPixelBufferAdaptor;$/;"	v
recordVideo	highgui/cap_ios.h	/^@property (nonatomic, assign) BOOL recordVideo;$/;"	v
rect	imgproc/types_c.h	/^    CvRect rect;    \/* ROI of the component  *\/$/;"	m	struct:CvConnectedComp
rect	objdetect/objdetect.hpp	/^        Rect rect;$/;"	m	struct:cv::LatentSvmDetector::ObjectDetection
rect	objdetect/objdetect.hpp	/^    CvRect rect;$/;"	m	struct:CvAvgComp
rect	objdetect/objdetect.hpp	/^    CvRect rect;$/;"	m	struct:CvObjectDetection
rect	objdetect/objdetect.hpp	/^    } rect[CV_HAAR_FEATURE_MAX];$/;"	m	struct:CvHaarFeature	typeref:struct:CvHaarFeature::__anon227
rectMap	legacy/legacy.hpp	/^    CvMat*  rectMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter
reduce	gpu/device/detail/reduction_detail.hpp	/^            static __device__ void reduce(T& myData, V& myVal, volatile T* sdata, V* sval, int tid, const Pred& pred)$/;"	f	struct:cv::gpu::device::utility_detail::PredValWarpReductor
reduce	gpu/device/detail/reduction_detail.hpp	/^            static __device__ void reduce(T& myData, V1& myVal1, V2& myVal2, volatile T* sdata, V1* sval1, V2* sval2, int tid, const Pred& pred)$/;"	f	struct:cv::gpu::device::utility_detail::PredVal2ReductionDispatcher
reduce	gpu/device/detail/reduction_detail.hpp	/^            static __device__ void reduce(T& myData, V1& myVal1, V2& myVal2, volatile T* sdata, V1* sval1, V2* sval2, int tid, const Pred& pred)$/;"	f	struct:cv::gpu::device::utility_detail::PredVal2WarpReductor
reduce	gpu/device/detail/reduction_detail.hpp	/^            template <int n, typename T, typename Op> static __device__ void reduce(volatile T* data, T& partial_reduction, int tid, const Op& op)$/;"	f	struct:cv::gpu::device::utility_detail::ReductionDispatcher
reduce	gpu/device/detail/reduction_detail.hpp	/^            template <int n, typename T, typename V, typename Pred> static __device__ void reduce(T& myData, V& myVal, volatile T* sdata, V* sval, int tid, const Pred& pred)$/;"	f	struct:cv::gpu::device::utility_detail::PredValReductionDispatcher
reduce	gpu/device/detail/reduction_detail.hpp	/^            template <typename T, typename Op> static __device__ __forceinline__ void reduce(volatile T* data, T& partial_reduction, int tid, const Op& op)$/;"	f	struct:cv::gpu::device::utility_detail::WarpReductor
reduce	gpu/device/detail/reduction_detail.hpp	/^            template <typename T, typename Op> static __device__ void reduce(volatile T* data, T& partial_reduction, int tid, const Op& op)$/;"	f	struct:cv::gpu::device::utility_detail::WarpReductor
reduce	gpu/device/utility.hpp	/^    template <int n, typename T, typename Op> __device__ __forceinline__ void reduce(volatile T* data, T& partial_reduction, int tid, const Op& op)$/;"	f	namespace:cv::gpu::device
reduceAll	gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(float* smem, int tid)$/;"	f	struct:cv::gpu::device::L1Dist
reduceAll	gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(float* smem, int tid)$/;"	f	struct:cv::gpu::device::L2Dist
reduceAll	gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(int* smem, int tid)$/;"	f	struct:cv::gpu::device::HammingDist
reduceAll	gpu/device/vec_distance.hpp	/^        template <int THREAD_DIM> __device__ __forceinline__ void reduceAll(int* smem, int tid)$/;"	f	struct:cv::gpu::device::L1Dist
reduceIter	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(float val1, float val2)$/;"	f	struct:cv::gpu::device::L1Dist
reduceIter	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(float val1, float val2)$/;"	f	struct:cv::gpu::device::L2Dist
reduceIter	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(int val1, int val2)$/;"	f	struct:cv::gpu::device::HammingDist
reduceIter	gpu/device/vec_distance.hpp	/^        __device__ __forceinline__ void reduceIter(int val1, int val2)$/;"	f	struct:cv::gpu::device::L1Dist
reducePredVal	gpu/device/utility.hpp	/^    __device__ __forceinline__ void reducePredVal(volatile T* sdata, T& myData, V* sval, V& myVal, int tid, const Pred& pred)$/;"	f	namespace:cv::gpu::device
reducePredVal2	gpu/device/utility.hpp	/^    __device__ __forceinline__ void reducePredVal2(volatile T* sdata, T& myData, V1* sval1, V1& myVal1, V2* sval2, V2& myVal2, int tid, const Pred& pred)$/;"	f	namespace:cv::gpu::device
ref	core/mat.hpp	/^SparseMat_<_Tp>::ref(const int* idx, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	core/mat.hpp	/^SparseMat_<_Tp>::ref(int i0, int i1, int i2, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	core/mat.hpp	/^SparseMat_<_Tp>::ref(int i0, int i1, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	core/mat.hpp	/^SparseMat_<_Tp>::ref(int i0, size_t* hashval)$/;"	f	class:cv::SparseMat_
ref	core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(const int* idx, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(int i0, int i1, int i2, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(int i0, int i1, size_t* hashval)$/;"	f	class:cv::SparseMat
ref	core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::ref(int i0, size_t* hashval)$/;"	f	class:cv::SparseMat
refcount	core/gpumat.hpp	/^        int* refcount;$/;"	m	class:cv::gpu::GpuMat
refcount	core/operations.hpp	/^        int* refcount;$/;"	m	struct:cv::Vector::Hdr
refcount	core/types_c.h	/^    int* refcount;$/;"	m	struct:CvMat
refcount	core/types_c.h	/^    int* refcount;$/;"	m	struct:CvMatND
refcount	core/types_c.h	/^    int* refcount;$/;"	m	struct:CvSparseMat
refcount	gpu/gpu.hpp	/^    int* refcount;$/;"	m	class:cv::gpu::CudaMem
refcount	legacy/legacy.hpp	/^    int* refcount;$/;"	m	class:CvImage
refcount	ocl/ocl.hpp	/^            int *refcount;$/;"	m	class:cv::ocl::oclMat
reference	core/core.hpp	/^    typedef value_type& reference;$/;"	t	class:cv::Allocator
reference	core/operations.hpp	/^    typedef _Tp& reference;$/;"	t	class:cv::Vector
reference	ts/ts_gtest.h	/^  typedef const T& reference;$/;"	t	class:testing::internal::ParamIterator
refinementMask	stitching/detail/motion_estimators.hpp	/^    const Mat refinementMask() const { return refinement_mask_.clone(); }$/;"	f	class:cv::detail::BundleAdjusterBase
refinement_mask_	stitching/detail/motion_estimators.hpp	/^    Mat refinement_mask_;$/;"	m	class:cv::detail::BundleAdjusterBase
regRNG	ts/ts_perf.hpp	/^    cv::RNG regRNG;\/\/own random numbers generator to make collection and verification work identical$/;"	m	class:perf::Regression
registered_	ts/ts_gtest.h	/^  bool registered_;$/;"	m	class:testing::internal::TypedTestCasePState
registr_resol_	stitching/stitcher.hpp	/^    double registr_resol_;$/;"	m	class:cv::Stitcher
registrationResol	stitching/stitcher.hpp	/^    double registrationResol() const { return registr_resol_; }$/;"	f	class:cv::Stitcher
regression	ml/ml.hpp	/^    bool regression;$/;"	m	class:CvKNearest
regression_accuracy	ml/ml.hpp	/^    CV_PROP_RW float regression_accuracy;$/;"	m	struct:CvDTreeParams
rejectionThreshold	contrib/openfabmap.hpp	/^    double rejectionThreshold;$/;"	m	class:cv::of2::FabMapFBO
relation_to_source_	ts/ts_gtest.h	/^  RelationToSource relation_to_source_;$/;"	m	class:testing::internal::NativeArray
release	core/mat.hpp	/^inline void Mat::release()$/;"	f	class:cv::Mat
release	core/mat.hpp	/^inline void SparseMat::release()$/;"	f	class:cv::SparseMat
release	core/operations.hpp	/^    static void release(void** dbptr)$/;"	f	struct:cv::RTTIImpl
release	core/operations.hpp	/^    void release()$/;"	f	class:cv::Vector
release	core/operations.hpp	/^template<typename _Tp> inline void Ptr<_Tp>::release()$/;"	f	class:cv::Ptr
release	core/types_c.h	/^    CvReleaseFunc release;$/;"	m	struct:CvTypeInfo
release	gpu/gpu.hpp	/^    inline void release()$/;"	f	class:cv::gpu::ImagePyramid
release	legacy/legacy.hpp	/^    void release() { detach(); }$/;"	f	class:CvImage
release	legacy/legacy.hpp	/^    void release()$/;"	f	class:CvMatrix
release	ts/ts_gtest.h	/^  T* release() {$/;"	f	struct:std::tr1::tuple_element
releaseMemory	gpu/gpu.hpp	/^    void releaseMemory()$/;"	f	class:cv::gpu::FarnebackOpticalFlow
releaseMemory	gpu/gpu.hpp	/^    void releaseMemory()$/;"	f	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
releaseMemory	gpu/gpu.hpp	/^    void releaseMemory()$/;"	f	class:cv::gpu::PyrLKOpticalFlow
releaseMemory	ocl/ocl.hpp	/^            void releaseMemory()$/;"	f	class:cv::ocl::PyrLKOpticalFlow
remaining	flann/allocator.h	/^    int     remaining;  \/* Number of bytes left in current block of storage. *\/$/;"	m	class:cvflann::PooledAllocator
remove	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::remove(const Range& r)$/;"	f	class:cv::Seq
remove	core/operations.hpp	/^template<typename _Tp> inline void Seq<_Tp>::remove(int idx)$/;"	f	class:cv::Seq
reorder_	flann/kdtree_single_index.h	/^    bool reorder_;$/;"	m	class:cvflann::KDTreeSingleIndex
repeater_	ts/ts_gtest.h	/^  internal::TestEventRepeater* repeater_;$/;"	m	class:testing::TestEventListeners
reqMatches	gpu/gpu.hpp	/^    int reqMatches;        \/\/ #_min$/;"	m	class:cv::gpu::VIBE_GPU
reserve	core/operations.hpp	/^    void reserve(size_t newCapacity)$/;"	f	class:cv::Vector
reset	flann/any.h	/^    void reset()$/;"	f	struct:cvflann::any
reset	flann/dynamic_bitset.h	/^    void reset()$/;"	f	class:cvflann::DynamicBitset
reset	flann/dynamic_bitset.h	/^    void reset(size_t index)$/;"	f	class:cvflann::DynamicBitset
reset	flann/timer.h	/^    void reset()$/;"	f	class:cvflann::StartStopTimer
reset	ts/ts_gtest.h	/^  void reset(T* p = NULL) {$/;"	f	struct:std::tr1::tuple_element
reset	ts/ts_gtest.h	/^  void reset(T* ptr = NULL) {$/;"	f	class:testing::internal::linked_ptr
reset	videostab/frame_source.hpp	/^    virtual void reset() {}$/;"	f	class:cv::videostab::NullFrameSource
reset	videostab/stabilizer.hpp	/^    virtual void reset() { resetImpl(); }$/;"	f	class:cv::videostab::OnePassStabilizer
reset	videostab/stabilizer.hpp	/^    virtual void reset() { resetImpl(); }$/;"	f	class:cv::videostab::TwoPassStabilizer
resetColorArray	core/opengl_interop.hpp	/^    inline void resetColorArray() { color_.release(); }$/;"	f	class:cv::GlArrays
resetNormalArray	core/opengl_interop.hpp	/^    inline void resetNormalArray() { normal_.release(); }$/;"	f	class:cv::GlArrays
resetTexCoordArray	core/opengl_interop.hpp	/^    inline void resetTexCoordArray() { texCoord_.release(); }$/;"	f	class:cv::GlArrays
resetVertexArray	core/opengl_interop.hpp	/^    inline void resetVertexArray() { vertex_.release(); }$/;"	f	class:cv::GlArrays
reset_block	flann/dynamic_bitset.h	/^    void reset_block(size_t index)$/;"	f	class:cvflann::DynamicBitset
reset_roi	legacy/legacy.hpp	/^    void reset_roi() { cvResetImageROI(image); }$/;"	f	class:CvImage
reshape	core/operations.hpp	/^Matx<_Tp, m1, n1> Matx<_Tp, m, n>::reshape() const$/;"	f	class:cv::Matx
resize	core/operations.hpp	/^    void resize(size_t newSize)$/;"	f	class:cv::Vector
resize	flann/dynamic_bitset.h	/^    void resize(size_t sz)$/;"	f	class:cvflann::DynamicBitset
resolution	contrib/contrib.hpp	/^        float resolution;$/;"	m	class:cv::Mesh3D
response	features2d/features2d.hpp	/^    CV_PROP_RW float response; \/\/!< the response by which the most strong keypoints have been selected. Can be used for the further sorting or subsampling$/;"	m	class:cv::KeyPoint
response	legacy/blobtrack.hpp	/^    float response;$/;"	m	struct:CvDetectedBlob
response	legacy/compat.hpp	/^    float response;$/;"	m	struct:CvStarKeypoint
responseThreshold	features2d/features2d.hpp	/^    int responseThreshold;$/;"	m	class:cv::StarDetector
responseThreshold	legacy/compat.hpp	/^    int responseThreshold;$/;"	m	struct:CvStarDetectorParams
response_idx	ml/ml.hpp	/^    int response_idx;$/;"	m	class:CvMLData
response_out	ml/ml.hpp	/^    CvMat* response_out; \/\/ header$/;"	m	class:CvMLData
responses	ml/ml.hpp	/^    const CvMat* responses;$/;"	m	struct:CvDTreeTrainData
responses_copy	ml/ml.hpp	/^    CvMat* responses_copy; \/\/ used in Boosting$/;"	m	struct:CvDTreeTrainData
result	ts/ts_gtest.h	/^  const TestResult* result() const { return &result_; }$/;"	f	class:testing::TestInfo
result_	ts/ts_gtest.h	/^  TestResult result_;$/;"	m	class:testing::TestInfo
result_data	gpu/gpu.hpp	/^    GpuMat image_block, templ_block, result_data;$/;"	m	struct:cv::gpu::ConvolveBuf
result_size	gpu/gpu.hpp	/^    Size result_size;$/;"	m	struct:cv::gpu::ConvolveBuf
result_spect	gpu/gpu.hpp	/^    GpuMat image_spect, templ_spect, result_spect;$/;"	m	struct:cv::gpu::ConvolveBuf
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColConstant
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColReflect
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColReflect101
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColReplicate
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdColWrap
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdConstant
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdReflect
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdReflect101
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdReplicate
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowConstant
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowReflect
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowReflect101
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowReplicate
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdRowWrap
result_type	gpu/device/border_interpolate.hpp	/^        typedef D result_type;$/;"	t	struct:cv::gpu::device::BrdWrap
result_type	gpu/device/vec_distance.hpp	/^        typedef float result_type;$/;"	t	struct:cv::gpu::device::L1Dist
result_type	gpu/device/vec_distance.hpp	/^        typedef float result_type;$/;"	t	struct:cv::gpu::device::L2Dist
result_type	gpu/device/vec_distance.hpp	/^        typedef int result_type;$/;"	t	struct:cv::gpu::device::HammingDist
result_type	gpu/device/vec_distance.hpp	/^        typedef int result_type;$/;"	t	struct:cv::gpu::device::L1Dist
rho	ml/ml.hpp	/^    double rho;$/;"	m	struct:CvSVMDecisionFunc
rho	ml/ml.hpp	/^    double rho;$/;"	m	struct:CvSVMSolutionInfo
riBuf	gpu/gpu.hpp	/^    GpuMat minSSD, leBuf, riBuf;$/;"	m	class:cv::gpu::StereoBM_GPU
right	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
right	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
right	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
right	flann/kdtree_single_index.h	/^        int left, right;$/;"	m	struct:cvflann::KDTreeSingleIndex::Node
right	legacy/legacy.hpp	/^    CvMat* right;$/;"	m	struct:CvStereoGCState
right	ml/ml.hpp	/^    CvDTreeNode* right;$/;"	m	struct:CvDTreeNode
right	objdetect/objdetect.hpp	/^            int right;$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
right	objdetect/objdetect.hpp	/^    int* right;$/;"	m	struct:CvHaarClassifier
right_	core/opengl_interop.hpp	/^    double right_;$/;"	m	class:cv::GlCamera
ringBuf	imgproc/imgproc.hpp	/^    vector<uchar> ringBuf;$/;"	m	class:cv::FilterEngine
rinv	stitching/detail/warpers.hpp	/^    float rinv[9];$/;"	m	struct:cv::detail::ProjectorBase
rmEdgeDensityFuzzy	contrib/contrib.hpp	/^        rmEdgeDensityFuzzy      = 1,$/;"	e	enum:CvFuzzyMeanShiftTracker::ResizeMethod
rmEdgeDensityLinear	contrib/contrib.hpp	/^        rmEdgeDensityLinear     = 0,$/;"	e	enum:CvFuzzyMeanShiftTracker::ResizeMethod
rmInnerDensity	contrib/contrib.hpp	/^        rmInnerDensity          = 2$/;"	e	enum:CvFuzzyMeanShiftTracker::ResizeMethod
rng	ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvANN_MLP
rng	ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvGBTrees
rng	ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvMLData
rng	ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	class:CvRTrees
rng	ml/ml.hpp	/^    cv::RNG* rng;$/;"	m	struct:CvDTreeTrainData
rng	ts/ts.hpp	/^    RNG rng;$/;"	m	class:cvtest::TS
rngSeed_	gpu/gpu.hpp	/^    unsigned long rngSeed_;$/;"	m	class:cv::gpu::VIBE_GPU
rng_seed	ts/ts.hpp	/^    uint64 rng_seed;$/;"	m	struct:cvtest::TSParams
rng_seed	ts/ts.hpp	/^    uint64 rng_seed;$/;"	m	struct:cvtest::TestInfo
rng_seed0	ts/ts.hpp	/^    uint64 rng_seed0;$/;"	m	struct:cvtest::TestInfo
ro0	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
ro0	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
ro0	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
roi	core/types_c.h	/^    struct _IplROI *roi;    \/* Image ROI. If NULL, the whole image is selected. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplROI
roi	imgproc/imgproc.hpp	/^    Rect roi;$/;"	m	class:cv::FilterEngine
roi	legacy/legacy.hpp	/^    CvRect roi() const$/;"	f	class:CvImage
roi1	calib3d/calib3d.hpp	/^    CvRect roi1, roi2;$/;"	m	struct:CvStereoBMState
roi2	calib3d/calib3d.hpp	/^    CvRect roi1, roi2;$/;"	m	struct:CvStereoBMState
roi_row	legacy/legacy.hpp	/^    const uchar* roi_row(int y) const$/;"	f	class:CvImage
roi_row	legacy/legacy.hpp	/^    uchar* roi_row(int y)$/;"	f	class:CvImage
roi_size	legacy/legacy.hpp	/^    CvSize roi_size() const$/;"	f	class:CvImage
rois_	stitching/stitcher.hpp	/^    std::vector<std::vector<cv::Rect> > rois_;$/;"	m	class:cv::Stitcher
roll_	core/opengl_interop.hpp	/^    double roll_;$/;"	m	class:cv::GlCamera
romax	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Adjacent
romax	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Interp
romax	contrib/contrib.hpp	/^        double ro0, romax, a, q;$/;"	m	class:cv::LogPolar_Overlapping
root	flann/hierarchical_clustering_index.h	/^    NodePtr* root;$/;"	m	class:cvflann::HierarchicalClusteringIndex
root	ml/ml.hpp	/^    CvDTreeNode* root;$/;"	m	class:CvDTree
rootIn	ts/ts_perf.hpp	/^    cv::FileNode rootIn;$/;"	m	class:perf::Regression
root_	flann/kmeans_index.h	/^    KMeansNodePtr root_;$/;"	m	class:cvflann::KMeansIndex
root_bbox_	flann/kdtree_single_index.h	/^    BoundingBox root_bbox_;$/;"	m	class:cvflann::KDTreeSingleIndex
root_node_	flann/kdtree_single_index.h	/^    NodePtr root_node_;$/;"	m	class:cvflann::KDTreeSingleIndex
rotMatr	legacy/legacy.hpp	/^    float   rotMatr[9];$/;"	m	struct:CvCamera
rotMatrix	legacy/legacy.hpp	/^    float rotMatrix[9];$/;"	m	struct:CvStereoCamera
round_error	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type round_error() { return type(); }$/;"	f	struct:cv::gpu::device::numeric_limits
row	core/gpumat.hpp	/^    inline GpuMat GpuMat::row(int y) const$/;"	f	class:cv::gpu::GpuMat
row	core/mat.hpp	/^inline Mat Mat::row(int y) const { return Mat(*this, Range(y, y+1), Range::all()); }$/;"	f	class:cv::Mat
row	core/mat.hpp	/^template<typename _Tp> inline Mat_<_Tp> Mat_<_Tp>::row(int y) const$/;"	f	class:cv::Mat_
row	core/operations.hpp	/^Matx<_Tp, 1, n> Matx<_Tp, m, n>::row(int i) const$/;"	f	class:cv::Matx
row	legacy/legacy.hpp	/^    const uchar* row(int i) const$/;"	f	class:CvMatrix
row	legacy/legacy.hpp	/^    uchar* row(int i) { return !matrix ? 0 : matrix->data.ptr + i*matrix->step; }$/;"	f	class:CvMatrix
row	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::row(int y) const$/;"	f	class:cv::ocl::oclMat
rowBorderType	imgproc/imgproc.hpp	/^    int rowBorderType, columnBorderType;$/;"	m	class:cv::FilterEngine
rowCount	imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
rowFilter	imgproc/imgproc.hpp	/^    Ptr<BaseRowFilter> rowFilter;$/;"	m	class:cv::FilterEngine
rowRange	core/gpumat.hpp	/^    inline GpuMat GpuMat::rowRange(Range r) const$/;"	f	class:cv::gpu::GpuMat
rowRange	core/gpumat.hpp	/^    inline GpuMat GpuMat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::gpu::GpuMat
rowRange	core/mat.hpp	/^inline Mat Mat::rowRange(const Range& r) const$/;"	f	class:cv::Mat
rowRange	core/mat.hpp	/^inline Mat Mat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::Mat
rowRange	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::rowRange(const Range &r) const$/;"	f	class:cv::ocl::oclMat
rowRange	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::rowRange(int startrow, int endrow) const$/;"	f	class:cv::ocl::oclMat
rows	core/cuda_devptrs.hpp	/^            int rows;$/;"	m	struct:cv::gpu::PtrStepSz
rows	core/gpumat.hpp	/^        int rows, cols;$/;"	m	class:cv::gpu::GpuMat
rows	core/opengl_interop.hpp	/^    inline int rows() const { return rows_; }$/;"	f	class:cv::GlBuffer
rows	core/opengl_interop.hpp	/^    inline int rows() const { return rows_; }$/;"	f	class:cv::GlTexture
rows	core/opengl_interop.hpp	/^    inline int rows() const { return vertex_.rows(); }$/;"	f	class:cv::GlArrays
rows	core/types_c.h	/^        int rows;$/;"	m	union:CvMat::__anon222
rows	core/types_c.h	/^    int rows;$/;"	m	struct:CvMat
rows	flann/matrix.h	/^    size_t rows;$/;"	m	class:cvflann::Matrix
rows	flann/matrix.h	/^    size_t rows;$/;"	m	class:cvflann::UntypedMatrix
rows	flann/saving.h	/^    size_t rows;$/;"	m	struct:cvflann::IndexHeader
rows	gpu/gpu.hpp	/^    int rows, cols;$/;"	m	class:cv::gpu::CudaMem
rows	imgproc/imgproc.hpp	/^    vector<uchar*> rows;$/;"	m	class:cv::FilterEngine
rows	legacy/legacy.hpp	/^    int rows() const { return matrix ? matrix->rows : 0; }$/;"	f	class:CvMatrix
rows	ml/ml.hpp	/^    CvSVMKernelRow* rows;$/;"	m	class:CvSVMSolver
rows	ocl/ocl.hpp	/^            int rows, cols;$/;"	m	class:cv::ocl::oclMat
rows_	core/opengl_interop.hpp	/^    int rows_;$/;"	m	class:cv::GlBuffer
rows_	core/opengl_interop.hpp	/^    int rows_;$/;"	m	class:cv::GlTexture
rp_dw0	ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_max	ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_min	ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_minus	ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rp_dw_plus	ml/ml.hpp	/^    CV_PROP_RW double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams
rules	contrib/contrib.hpp	/^    std::vector<CvFuzzyRule*> rules;$/;"	m	class:CvFuzzyController
run	videostab/fast_marching_inl.hpp	/^Inpaint FastMarchingMethod::run(const cv::Mat &mask, Inpaint inpaint)$/;"	f	class:cv::videostab::FastMarchingMethod
run_test_case	ts/ts.hpp	/^    int run_test_case( int expected_code, const string& _descr, F f)$/;"	f	class:cvtest::BadArgTest
running	highgui/cap_ios.h	/^@property (nonatomic, readonly) BOOL running;$/;"	v
runsPerIteration	ts/ts_perf.hpp	/^    unsigned int runsPerIteration;$/;"	m	class:perf::TestBase
s	core/mat.hpp	/^    Scalar s;$/;"	m	class:cv::MatExpr
s	core/types_c.h	/^        short* s;$/;"	m	union:CvMat::__anon221
s	core/types_c.h	/^        short* s;$/;"	m	union:CvMatND::__anon224
s	legacy/legacy.hpp	/^    int* s; \/\/for selected candidate$/;"	m	struct:CvCliqueFinder
sFactor	contrib/openfabmap.hpp	/^    double sFactor;$/;"	m	class:cv::of2::FabMap
s_range	contrib/hybridtracker.hpp	/^    vector<float> s_range;$/;"	m	struct:cv::CvMeanShiftTrackerParams
sample_count	ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
sample_count	ml/ml.hpp	/^    int sample_count;$/;"	m	class:CvSVMSolver
sample_count	ml/ml.hpp	/^    int sample_count;$/;"	m	struct:CvDTreeNode
sample_fraction_	flann/autotuned_index.h	/^    float sample_fraction_;$/;"	m	class:cvflann::AutotunedIndex
sample_idx	ml/ml.hpp	/^    CvMat* sample_idx;$/;"	m	class:CvGBTrees
sample_idx	ml/ml.hpp	/^    int* sample_idx; \/\/ data of train_sample_idx and test_sample_idx$/;"	m	class:CvMLData
sample_weights	ml/ml.hpp	/^    CvMat* sample_weights;$/;"	m	class:CvANN_MLP
sampledDataset_	flann/autotuned_index.h	/^    Matrix<ElementType> sampledDataset_;$/;"	m	class:cvflann::AutotunedIndex
samples	contrib/hybridtracker.hpp	/^    CvMat* samples;$/;"	m	class:cv::CvHybridTracker
samples	ml/ml.hpp	/^    CvVectors* samples;$/;"	m	class:CvKNearest
samples	ml/ml.hpp	/^    const float** samples;$/;"	m	class:CvSVMSolver
samples	ts/ts_perf.hpp	/^    unsigned int samples;$/;"	m	struct:perf::performance_metrics
samples_	gpu/gpu.hpp	/^    GpuMat samples_;$/;"	m	class:cv::gpu::VIBE_GPU
saturate_cast	core/operations.hpp	/^template<> inline int saturate_cast<int>(double v) { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline int saturate_cast<int>(float v) { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline schar saturate_cast<schar>(double v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline schar saturate_cast<schar>(float v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline schar saturate_cast<schar>(int v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline schar saturate_cast<schar>(short v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline schar saturate_cast<schar>(uchar v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline schar saturate_cast<schar>(unsigned v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline schar saturate_cast<schar>(ushort v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline short saturate_cast<short>(double v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline short saturate_cast<short>(float v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline short saturate_cast<short>(int v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline short saturate_cast<short>(unsigned v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline short saturate_cast<short>(ushort v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(double v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(float v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(schar v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(short v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(unsigned v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline uchar saturate_cast<uchar>(ushort v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline unsigned saturate_cast<unsigned>(double v) { return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline unsigned saturate_cast<unsigned>(float v){ return cvRound(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(double v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(float v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(int v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(schar v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(short v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<> inline ushort saturate_cast<ushort>(unsigned v)$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(double v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(float v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(int v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(schar v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(short v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(uchar v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(unsigned v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	core/operations.hpp	/^template<typename _Tp> static inline _Tp saturate_cast(ushort v) { return _Tp(v); }$/;"	f	namespace:cv
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ int saturate_cast<int>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(short v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(uchar v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ schar saturate_cast<schar>(ushort v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ short saturate_cast<short>(ushort v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(schar v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(short v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uchar saturate_cast<uchar>(ushort v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ uint saturate_cast<uint>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(double v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(float v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(int v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(schar v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(short v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<> __device__ __forceinline__ ushort saturate_cast<ushort>(uint v)$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(double v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(float v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(int v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(schar v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(short v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(uchar v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(uint v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/saturate_cast.hpp	/^    template<typename _Tp> __device__ __forceinline__ _Tp saturate_cast(ushort v) { return _Tp(v); }$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const char4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const double4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const float4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const int4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const short4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uchar4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const uint4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort1& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort2& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort3& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast	gpu/device/vec_math.hpp	/^    template<typename _Tp> static __device__ __forceinline__ _Tp saturate_cast(const ushort4& v) {return vec_math_detail::saturate_cast_caller<_Tp>(v);}$/;"	f	namespace:cv::gpu::device
saturate_cast_caller	gpu/device/vec_math.hpp	/^        template <typename VecD, typename VecS> static __device__ __forceinline__ VecD saturate_cast_caller(const VecS& v)$/;"	f	namespace:cv::gpu::device::vec_math_detail
saturate_cast_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ saturate_cast_func():unary_function<T, D>(){}$/;"	f	struct:cv::gpu::device::saturate_cast_func
saturate_cast_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ saturate_cast_func(const saturate_cast_func& other):unary_function<T, D>(){}$/;"	f	struct:cv::gpu::device::saturate_cast_func
saturate_cast_func	gpu/device/functional.hpp	/^    template <typename T, typename D> struct saturate_cast_func : unary_function<T, D>$/;"	s	namespace:cv::gpu::device
save	flann/flann.hpp	/^        void save(std::string filename) { nnIndex->save(filename); }$/;"	f	class:cv::flann::GenericIndex
save	flann/flann.hpp	/^    void save(std::string filename)$/;"	f	class:cv::flann::Index_
save	flann/flann_base.hpp	/^    void save(std::string filename)$/;"	f	class:cvflann::Index
saveIndex	flann/autotuned_index.h	/^    virtual void saveIndex(FILE* stream)$/;"	f	class:cvflann::AutotunedIndex
saveIndex	flann/composite_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::CompositeIndex
saveIndex	flann/flann_base.hpp	/^    virtual void saveIndex(FILE* stream)$/;"	f	class:cvflann::Index
saveIndex	flann/hierarchical_clustering_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::HierarchicalClusteringIndex
saveIndex	flann/kdtree_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeIndex
saveIndex	flann/kdtree_single_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KDTreeSingleIndex
saveIndex	flann/kmeans_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::KMeansIndex
saveIndex	flann/linear_index.h	/^    void saveIndex(FILE*)$/;"	f	class:cvflann::LinearIndex
saveIndex	flann/lsh_index.h	/^    void saveIndex(FILE* stream)$/;"	f	class:cvflann::LshIndex
save_header	flann/saving.h	/^void save_header(FILE* stream, const NNIndex<Distance>& index)$/;"	f	namespace:cvflann
save_to_file	flann/hdf5.h	/^void save_to_file(const cvflann::Matrix<T>& dataset, const std::string& filename, const std::string& name)$/;"	f	namespace:cvflann
save_tree	flann/hierarchical_clustering_index.h	/^    void save_tree(FILE* stream, NodePtr node, int num)$/;"	f	class:cvflann::HierarchicalClusteringIndex
save_tree	flann/kdtree_index.h	/^    void save_tree(FILE* stream, NodePtr tree)$/;"	f	class:cvflann::KDTreeIndex
save_tree	flann/kdtree_single_index.h	/^    void save_tree(FILE* stream, NodePtr tree)$/;"	f	class:cvflann::KDTreeSingleIndex
save_tree	flann/kmeans_index.h	/^    void save_tree(FILE* stream, KMeansNodePtr node)$/;"	f	class:cvflann::KMeansIndex
save_value	flann/saving.h	/^void save_value(FILE* stream, const T& value, size_t count = 1)$/;"	f	namespace:cvflann
save_value	flann/saving.h	/^void save_value(FILE* stream, const cvflann::Matrix<T>& value)$/;"	f	namespace:cvflann
save_value	flann/saving.h	/^void save_value(FILE* stream, const std::vector<T>& value)$/;"	f	namespace:cvflann
scale	gpu/device/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
scale	gpu/gpu.hpp	/^   double scale;$/;"	m	struct:cv::gpu::HOGConfidence
scale	objdetect/objdetect.hpp	/^    double scale;$/;"	m	struct:CvHaarClassifierCascade
scale	objdetect/objdetect.hpp	/^   double scale;$/;"	m	struct:cv::DetectionROI
scale	stitching/detail/warpers.hpp	/^    float scale;$/;"	m	struct:cv::detail::ProjectorBase
scaleAdd	gpu/gpu.hpp	/^static inline void scaleAdd(const GpuMat& src1, double alpha, const GpuMat& src2, GpuMat& dst, Stream& stream = Stream::Null())$/;"	f	namespace:cv::gpu
scaleFactor	contrib/detection_based_tracker.hpp	/^            double scaleFactor;$/;"	m	struct:DetectionBasedTracker::Parameters
scaleFactor	features2d/features2d.hpp	/^    CV_PROP_RW double scaleFactor;$/;"	m	class:cv::ORB
scaleFactor_	gpu/gpu.hpp	/^    float scaleFactor_;$/;"	m	class:cv::gpu::ORB_GPU
scaleList_	features2d/features2d.hpp	/^    float* scaleList_;                     \/\/ lists the scaling per scale index [scale]$/;"	m	class:cv::BRISK
scaleNormalized	features2d/features2d.hpp	/^    bool scaleNormalized; \/\/true if the scale is normalized, false otherwise$/;"	m	class:cv::FREAK
scale_	core/opengl_interop.hpp	/^    Point3d scale_;$/;"	m	class:cv::GlCamera
scale_factor	gpu/gpu.hpp	/^    float scale_factor;$/;"	m	class:cv::gpu::BroxOpticalFlow
scale_max	legacy/legacy.hpp	/^    float scale_max;$/;"	m	class:cv::OneWayDescriptorBase
scale_min	legacy/legacy.hpp	/^    float scale_min;$/;"	m	class:cv::OneWayDescriptorBase
scale_step	legacy/legacy.hpp	/^    float scale_step;$/;"	m	class:cv::OneWayDescriptorBase
scale_x	gpu/device/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
scale_x	gpu/device/filters.hpp	/^        float scale_x, scale_y;$/;"	m	struct:cv::gpu::device::AreaFilter
scale_y	gpu/device/filters.hpp	/^        float scale_x, scale_y ,scale;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
scale_y	gpu/device/filters.hpp	/^        float scale_x, scale_y;$/;"	m	struct:cv::gpu::device::AreaFilter
scalerange_	features2d/features2d.hpp	/^    static const float scalerange_;     \/\/ span of sizes 40->4 Octaves - else, this needs to be adjusted...$/;"	m	class:cv::BRISK
scales_	features2d/features2d.hpp	/^    static const unsigned int scales_;    \/\/ scales discretization$/;"	m	class:cv::BRISK
scanner	core/core_c.h	/^CVAPI(int)  cvNextGraphItem( CvGraphScanner* scanner );$/;"	v
scanner	core/core_c.h	/^CVAPI(void) cvReleaseGraphScanner( CvGraphScanner** scanner );$/;"	v
scanner	imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvEndFindContours( CvContourScanner* scanner );$/;"	v
scanner	imgproc/imgproc_c.h	/^CVAPI(CvSeq*)  cvFindNextContour( CvContourScanner scanner );$/;"	v
schar	core/types_c.h	/^typedef signed char schar;$/;"	t
schar	gpu/device/common.hpp	/^        typedef signed char schar;$/;"	t	namespace:cv::gpu::device
score	contrib/openfabmap.hpp	/^        float score;$/;"	m	struct:cv::of2::ChowLiuTree::info
score	objdetect/objdetect.hpp	/^        float score;$/;"	m	struct:cv::LatentSvmDetector::ObjectDetection
score	objdetect/objdetect.hpp	/^    float score;$/;"	m	struct:CvObjectDetection
score	objdetect/objdetect.hpp	/^    float score;$/;"	m	struct:cv::linemod::QuantizedPyramid::Candidate
scoreType	features2d/features2d.hpp	/^    CV_PROP_RW int scoreType;$/;"	m	class:cv::ORB
scoreType_	gpu/gpu.hpp	/^    int scoreType_;$/;"	m	class:cv::gpu::ORB_GPU
score_	gpu/gpu.hpp	/^    GpuMat score_;$/;"	m	class:cv::gpu::FAST_GPU
score_threshold	objdetect/objdetect.hpp	/^    float score_threshold;$/;"	m	struct:CvLatentSvmDetector
seamEstimationResol	stitching/stitcher.hpp	/^    double seamEstimationResol() const { return seam_est_resol_; }$/;"	f	class:cv::Stitcher
seamFinder	stitching/stitcher.hpp	/^    Ptr<detail::SeamFinder> seamFinder() { return seam_finder_; }$/;"	f	class:cv::Stitcher
seamFinder	stitching/stitcher.hpp	/^    const Ptr<detail::SeamFinder> seamFinder() const { return seam_finder_; }$/;"	f	class:cv::Stitcher
seam_est_imgs_	stitching/stitcher.hpp	/^    std::vector<cv::Mat> seam_est_imgs_;$/;"	m	class:cv::Stitcher
seam_est_resol_	stitching/stitcher.hpp	/^    double seam_est_resol_;$/;"	m	class:cv::Stitcher
seam_finder_	stitching/stitcher.hpp	/^    Ptr<detail::SeamFinder> seam_finder_;$/;"	m	class:cv::Stitcher
seam_scale_	stitching/stitcher.hpp	/^    double seam_scale_;$/;"	m	class:cv::Stitcher
seam_work_aspect_	stitching/stitcher.hpp	/^    double seam_work_aspect_;$/;"	m	class:cv::Stitcher
searchLevel	flann/kdtree_index.h	/^    void searchLevel(ResultSet<DistanceType>& result_set, const ElementType* vec, NodePtr node, DistanceType mindist, int& checkCount, int maxCheck,$/;"	f	class:cvflann::KDTreeIndex
searchLevel	flann/kdtree_single_index.h	/^    void searchLevel(ResultSet<DistanceType>& result_set, const ElementType* vec, const NodePtr node, DistanceType mindistsq,$/;"	f	class:cvflann::KDTreeSingleIndex
searchLevelExact	flann/kdtree_index.h	/^    void searchLevelExact(ResultSet<DistanceType>& result_set, const ElementType* vec, const NodePtr node, DistanceType mindist, const float epsError)$/;"	f	class:cvflann::KDTreeIndex
searchMode	contrib/contrib.hpp	/^    int searchMode;$/;"	m	class:CvFuzzyMeanShiftTracker
searchParams	features2d/features2d.hpp	/^    Ptr<flann::SearchParams> searchParams;$/;"	m	class:cv::FlannBasedMatcher
searchTimeCost	flann/autotuned_index.h	/^        float searchTimeCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
search_modules	core/types_c.h	/^    int search_modules;$/;"	m	struct:CvPluginFuncInfo
search_with_ground_truth	flann/index_testing.h	/^float search_with_ground_truth(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
seed_random	flann/random.h	/^inline void seed_random(unsigned int seed)$/;"	f	namespace:cvflann
seek	core/operations.hpp	/^template<typename _Tp> inline void SeqIterator<_Tp>::seek(size_t pos)$/;"	f	class:cv::SeqIterator
seekEnd	core/mat.hpp	/^inline void SparseMatConstIterator::seekEnd()$/;"	f	class:cv::SparseMatConstIterator
selectDivision	flann/kdtree_index.h	/^    int selectDivision(DistanceType* v)$/;"	f	class:cvflann::KDTreeIndex
select_working_set_func	ml/ml.hpp	/^    SelectWorkingSet select_working_set_func;$/;"	m	class:CvSVMSolver
selectedPairs0	features2d/features2d.hpp	/^    vector<int> selectedPairs0;$/;"	m	class:cv::FREAK
sensitivity	videostab/deblurring.hpp	/^    float sensitivity() const { return sensitivity_; }$/;"	f	class:cv::videostab::WeightingDeblurer
sensitivity_	videostab/deblurring.hpp	/^    float sensitivity_;$/;"	m	class:cv::videostab::WeightingDeblurer
separateDetectionWork	contrib/detection_based_tracker.hpp	/^        cv::Ptr<SeparateDetectionWork> separateDetectionWork;$/;"	m	class:DetectionBasedTracker
seq	core/core_c.h	/^CVAPI(void)  cvClearSeq( CvSeq* seq );$/;"	v
seq	core/core_c.h	/^CVAPI(void) cvSeqInvert( CvSeq* seq );$/;"	v
seq	core/types_c.h	/^        CvSeq* seq; \/* sequence (ordered collection of file nodes) *\/$/;"	m	union:CvFileNode::__anon226
set	core/operations.hpp	/^    void set(_Tp* _data, size_t _size, bool _copyData=false)$/;"	f	class:cv::Vector
set	core/operations.hpp	/^inline void Algorithm::set(const char* _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
set	core/operations.hpp	/^inline void Algorithm::set(const string& _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
set	flann/dynamic_bitset.h	/^    void set(size_t index)$/;"	f	class:cvflann::DynamicBitset
set	legacy/legacy.hpp	/^    void set( CvMat* m, bool add_ref )$/;"	f	class:CvMatrix
set	ts/ts_gtest.h	/^  void set(const T& value) { *pointer() = value; }$/;"	f	class:std::tr1::ThreadLocal
set	ts/ts_gtest.h	/^  void set(const T& value) { value_ = value; }$/;"	f	class:std::tr1::ThreadLocal
setAlgorithm	core/operations.hpp	/^inline void Algorithm::setAlgorithm(const char* _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
setAlgorithm	core/operations.hpp	/^inline void Algorithm::setAlgorithm(const string& _name, const Ptr<_Tp>& value)$/;"	f	class:cv::Algorithm
setAlpha	gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ void setAlpha(typename TypeVec<T, 3>::vec_type& vec, T val)$/;"	f	namespace:cv::gpu::device::color_detail
setAlpha	gpu/device/detail/color_detail.hpp	/^        template <typename T> static __device__ __forceinline__ void setAlpha(typename TypeVec<T, 4>::vec_type& vec, T val)$/;"	f	namespace:cv::gpu::device::color_detail
setBlender	stitching/stitcher.hpp	/^    void setBlender(Ptr<detail::Blender> b) { blender_ = b; }$/;"	f	class:cv::Stitcher
setBlurrinessRates	videostab/deblurring.hpp	/^    virtual void setBlurrinessRates(const std::vector<float> &val) { blurrinessRates_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setBorderMode	videostab/inpainting.hpp	/^    void setBorderMode(int val) { borderMode_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setBorderMode	videostab/stabilizer.hpp	/^    void setBorderMode(int val) { borderMode_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setBundleAdjuster	stitching/stitcher.hpp	/^    void setBundleAdjuster(Ptr<detail::BundleAdjusterBase> bundle_adjuster)$/;"	f	class:cv::Stitcher
setCompositingResol	stitching/stitcher.hpp	/^    void setCompositingResol(double resol_mpx) { compose_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setConfThresh	stitching/detail/motion_estimators.hpp	/^    void setConfThresh(double conf_thresh) { conf_thresh_ = conf_thresh; }$/;"	f	class:cv::detail::BundleAdjusterBase
setCorrectionForInclusion	videostab/stabilizer.hpp	/^    void setCorrectionForInclusion(bool val) { doCorrectionForInclusion_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setCostFunction	stitching/detail/seam_finders.hpp	/^    void setCostFunction(CostFunction val) { costFunc_ = val; }$/;"	f	class:cv::detail::DpSeamFinder
setDeblurer	videostab/stabilizer.hpp	/^    void setDeblurer(Ptr<DeblurerBase> val) { deblurer_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setDestination	flann/logger.h	/^    static void setDestination(const char* name) { instance()._setDestination(name); }$/;"	f	class:cvflann::Logger
setDetector	videostab/global_motion.hpp	/^    void setDetector(Ptr<FeatureDetector> val) { detector_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setDistThreshold	videostab/inpainting.hpp	/^    void setDistThreshold(float val) { distThresh_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setEstimateTrimRatio	videostab/stabilizer.hpp	/^    void setEstimateTrimRatio(bool val) { mustEstTrimRatio_ = val; }$/;"	f	class:cv::videostab::TwoPassStabilizer
setExposureCompensator	stitching/stitcher.hpp	/^    void setExposureCompensator(Ptr<detail::ExposureCompensator> exposure_comp)$/;"	f	class:cv::Stitcher
setFastParams	gpu/gpu.hpp	/^    inline void setFastParams(int threshold, bool nonmaxSupression = true)$/;"	f	class:cv::gpu::ORB_GPU
setFeaturesFinder	stitching/stitcher.hpp	/^    void setFeaturesFinder(Ptr<detail::FeaturesFinder> features_finder)$/;"	f	class:cv::Stitcher
setFeaturesMatcher	stitching/stitcher.hpp	/^    void setFeaturesMatcher(Ptr<detail::FeaturesMatcher> features_matcher)$/;"	f	class:cv::Stitcher
setFlowErrorThreshold	videostab/inpainting.hpp	/^    void setFlowErrorThreshold(float val) { flowErrorThreshold_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setFrameQueue	gpu/gpu.hpp	/^        void setFrameQueue(detail::FrameQueue* frameQueue) { frameQueue_ = frameQueue; }$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
setFrameSource	videostab/stabilizer.hpp	/^    void setFrameSource(Ptr<IFrameSource> val) { frameSource_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setFrames	videostab/deblurring.hpp	/^    virtual void setFrames(const std::vector<Mat> &val) { frames_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setFrames	videostab/inpainting.hpp	/^    virtual void setFrames(const std::vector<Mat> &val) { frames_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setInpainter	videostab/stabilizer.hpp	/^    void setInpainter(Ptr<InpainterBase> val) { inpainter_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setLevel	flann/logger.h	/^    static void setLevel(int level) { instance().logLevel = level; }$/;"	f	class:cvflann::Logger
setLog	videostab/stabilizer.hpp	/^    void setLog(Ptr<ILog> _log) { log_ = _log; }$/;"	f	class:cv::videostab::StabilizerBase
setMask	gpu/device/utility.hpp	/^        __device__ __forceinline__ void setMask(int z)$/;"	f	struct:cv::gpu::device::MaskCollection
setMask	gpu/device/utility.hpp	/^        __device__ __forceinline__ void setMask(int) const$/;"	f	struct:cv::gpu::device::WithOutMask
setMatchingMask	stitching/stitcher.hpp	/^    void setMatchingMask(const cv::Mat &mask)$/;"	f	class:cv::Stitcher
setMaxLevel	videostab/optical_flow.hpp	/^    void setMaxLevel(int val) { maxLevel_ = val; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
setMaxRmse	videostab/global_motion.hpp	/^    void setMaxRmse(float val) { maxRmse_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setMinInlierRatio	videostab/global_motion.hpp	/^    void setMinInlierRatio(float val) { minInlierRatio_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setMotionEstimator	videostab/stabilizer.hpp	/^    void setMotionEstimator(Ptr<IGlobalMotionEstimator> val) { motionEstimator_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setMotionFilter	videostab/stabilizer.hpp	/^    void setMotionFilter(Ptr<MotionFilterBase> val) { motionFilter_ = val; }$/;"	f	class:cv::videostab::OnePassStabilizer
setMotionModel	videostab/global_motion.hpp	/^    void setMotionModel(MotionModel val) { motionModel_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setMotionStabilizer	videostab/stabilizer.hpp	/^    void setMotionStabilizer(Ptr<IMotionStabilizer> val) { motionStabilizer_ = val; }$/;"	f	class:cv::videostab::TwoPassStabilizer
setMotions	videostab/deblurring.hpp	/^    virtual void setMotions(const std::vector<Mat> &val) { motions_ = &val; }$/;"	f	class:cv::videostab::DeblurerBase
setMotions	videostab/inpainting.hpp	/^    virtual void setMotions(const std::vector<Mat> &val) { motions_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setNumBands	stitching/detail/blenders.hpp	/^    void setNumBands(int val) { actual_num_bands_ = val; }$/;"	f	class:cv::detail::MultiBandBlender
setOptFlowEstimator	videostab/global_motion.hpp	/^    void setOptFlowEstimator(Ptr<ISparseOptFlowEstimator> val) { optFlowEstimator_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setOptFlowEstimator	videostab/inpainting.hpp	/^    void setOptFlowEstimator(Ptr<IDenseOptFlowEstimator> val) { optFlowEstimator_ = val; }$/;"	f	class:cv::videostab::MotionInpainter
setPanoConfidenceThresh	stitching/stitcher.hpp	/^    void setPanoConfidenceThresh(double conf_thresh) { conf_thresh_ = conf_thresh; }$/;"	f	class:cv::Stitcher
setRadius	videostab/deblurring.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::DeblurerBase
setRadius	videostab/inpainting.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::InpainterBase
setRadius	videostab/motion_stabilizing.hpp	/^    virtual void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::MotionFilterBase
setRadius	videostab/stabilizer.hpp	/^    void setRadius(int val) { radius_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setRansacParams	videostab/global_motion.hpp	/^    void setRansacParams(const RansacParams &val) { ransacParams_ = val; }$/;"	f	class:cv::videostab::PyrLkRobustMotionEstimator
setRefinementMask	stitching/detail/motion_estimators.hpp	/^    void setRefinementMask(const Mat &mask)$/;"	f	class:cv::detail::BundleAdjusterBase
setRegistrationResol	stitching/stitcher.hpp	/^    void setRegistrationResol(double resol_mpx) { registr_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setScale	stitching/detail/warpers.hpp	/^    void setScale(float scale) { projector_.scale = scale; }$/;"	f	class:cv::detail::PlaneWarper
setScale	stitching/detail/warpers.hpp	/^    void setScale(float val) { projector_.scale = val; }$/;"	f	class:cv::detail::RotationWarperBase
setScale	stitching/detail/warpers.hpp	/^    void setScale(float) {}$/;"	f	class:cv::detail::RotationWarper
setSeamEstimationResol	stitching/stitcher.hpp	/^    void setSeamEstimationResol(double resol_mpx) { seam_est_resol_ = resol_mpx; }$/;"	f	class:cv::Stitcher
setSeamFinder	stitching/stitcher.hpp	/^    void setSeamFinder(Ptr<detail::SeamFinder> seam_finder) { seam_finder_ = seam_finder; }$/;"	f	class:cv::Stitcher
setSensitivity	videostab/deblurring.hpp	/^    void setSensitivity(float val) { sensitivity_ = val; }$/;"	f	class:cv::videostab::WeightingDeblurer
setSharpness	stitching/detail/blenders.hpp	/^    void setSharpness(float val) { sharpness_ = val; }$/;"	f	class:cv::detail::FeatherBlender
setStabilizationMotions	videostab/inpainting.hpp	/^    virtual void setStabilizationMotions(const std::vector<Mat> &val) { stabilizationMotions_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setStabilizedFrames	videostab/inpainting.hpp	/^    virtual void setStabilizedFrames(const std::vector<Mat> &val) { stabilizedFrames_ = &val; }$/;"	f	class:cv::videostab::InpainterBase
setStdev	videostab/motion_stabilizing.hpp	/^    void setStdev(float val) { stdev_ = val; }$/;"	f	class:cv::videostab::GaussianMotionFilter
setStdevThresh	videostab/inpainting.hpp	/^    void setStdevThresh(float val) { stdevThresh_ = val; }$/;"	f	class:cv::videostab::ConsistentMosaicInpainter
setTermCriteria	stitching/detail/motion_estimators.hpp	/^    void setTermCriteria(const CvTermCriteria& term_criteria) { term_criteria_ = term_criteria; }$/;"	f	class:cv::detail::BundleAdjusterBase
setTrimRatio	videostab/stabilizer.hpp	/^    void setTrimRatio(float val) { trimRatio_ = val; }$/;"	f	class:cv::videostab::StabilizerBase
setVideoParser	gpu/gpu.hpp	/^        void setVideoParser(detail::VideoParser* videoParser) { videoParser_ = videoParser; }$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
setWarper	stitching/stitcher.hpp	/^    void setWarper(Ptr<WarperCreator> creator) { warper_ = creator; }$/;"	f	class:cv::Stitcher
setWaveCorrectKind	stitching/stitcher.hpp	/^    void setWaveCorrectKind(detail::WaveCorrectKind kind) { wave_correct_kind_ = kind; }$/;"	f	class:cv::Stitcher
setWaveCorrection	stitching/stitcher.hpp	/^    void setWaveCorrection(bool flag) { do_wave_correct_ = flag; }$/;"	f	class:cv::Stitcher
setWinSize	videostab/optical_flow.hpp	/^    void setWinSize(Size val) { winSize_ = val; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
set_cb_index	flann/kmeans_index.h	/^    void set_cb_index( float index)$/;"	f	class:cvflann::KMeansIndex
set_coi	legacy/legacy.hpp	/^    void set_coi(int _coi) { cvSetImageCOI(image,_coi); }$/;"	f	class:CvImage
set_data	legacy/legacy.hpp	/^    void set_data( void* _data, int _step=CV_AUTOSTEP )$/;"	f	class:CvMatrix
set_elapsed_time	ts/ts_gtest.h	/^  void set_elapsed_time(TimeInMillis elapsed) { elapsed_time_ = elapsed; }$/;"	f	class:testing::TestResult
set_header	core/core_c.h	/^CVAPI(void)  cvClearSet( CvSet* set_header );$/;"	v
set_max_ch_val	legacy/legacy.hpp	/^    bool    set_max_ch_val( int channel, int val ) \/\/ set the maximum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
set_min_ch_val	legacy/legacy.hpp	/^    bool    set_min_ch_val( int channel, int val ) \/\/ set the minimum allowed value of the specified channel$/;"	f	class:CvCamShiftTracker
set_num_valid	ml/ml.hpp	/^    void set_num_valid(int vi, int n) { if( num_valid ) num_valid[vi] = n; }$/;"	f	struct:CvDTreeNode
set_postprocess_func	highgui/highgui_c.h	604;"	d
set_preprocess_func	highgui/highgui_c.h	603;"	d
set_roi	legacy/legacy.hpp	/^    void set_roi(CvRect _roi) { cvSetImageROI(image,_roi); }$/;"	f	class:CvImage
set_should_run	ts/ts_gtest.h	/^  void set_should_run(bool should) { should_run_ = should; }$/;"	f	class:testing::TestCase
set_threshold	legacy/legacy.hpp	/^    bool    set_threshold( int threshold ) \/\/ threshold applied to the histogram bins$/;"	f	class:CvCamShiftTracker
set_up_tc_	ts/ts_gtest.h	/^  Test::SetUpTestCaseFunc set_up_tc_;$/;"	m	class:testing::TestCase
set_window	legacy/legacy.hpp	/^    bool    set_window( CvRect window)$/;"	f	class:CvCamShiftTracker
severity_	ts/ts_gtest.h	/^  const GTestLogSeverity severity_;$/;"	m	class:std::tr1::GTestLog
shape	legacy/blobtrack.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	m	struct:CvDrawShape	typeref:enum:CvDrawShape::__anon5
shared	ml/ml.hpp	/^    bool shared;$/;"	m	struct:CvDTreeTrainData
sharpness	stitching/detail/blenders.hpp	/^    float sharpness() const { return sharpness_; }$/;"	f	class:cv::detail::FeatherBlender
sharpness_	stitching/detail/blenders.hpp	/^    float sharpness_;$/;"	m	class:cv::detail::FeatherBlender
shear	core/core_c.h	/^    float       shear;      \/* slope coefficient: 0 - normal, >0 - italic *\/$/;"	m	struct:CvFont
shift	gpu/device/functional.hpp	/^            enum { shift = BinOpShift<sizeof(T1), sizeof(T2), sizeof(D)>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::DefaultBinaryShift::__anon178
shift	gpu/device/functional.hpp	/^            enum { shift = DefaultBinaryShift<typename Func::first_argument_type, typename Func::second_argument_type, typename Func::result_type>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::ShiftDispatcher::__anon180
shift	gpu/device/functional.hpp	/^            enum { shift = DefaultUnaryShift<typename Func::argument_type, typename Func::result_type>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::ShiftDispatcher::__anon179
shift	gpu/device/functional.hpp	/^            enum { shift = UnOpShift<sizeof(T), sizeof(D)>::shift };$/;"	e	enum:cv::gpu::device::functional_detail::DefaultUnaryShift::__anon174
shift	gpu/device/functional.hpp	/^        enum { shift = functional_detail::ShiftDispatcher<Func>::shift };$/;"	e	enum:cv::gpu::device::DefaultTransformShift::__anon181
shift	gpu/device/functional.hpp	/^        template <size_t src_elem_size, size_t dst_elem_size> struct UnOpShift { enum { shift = 1 }; };$/;"	e	enum:cv::gpu::device::functional_detail::UnOpShift::__anon171
shift	gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2, size_t dst_elem_size> struct BinOpShift { enum { shift = 1 }; };$/;"	e	enum:cv::gpu::device::functional_detail::BinOpShift::__anon175
shift	gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 1> { enum { shift = 4 }; };$/;"	e	enum:cv::gpu::device::functional_detail::BinOpShift::__anon176
shift	gpu/device/functional.hpp	/^        template <size_t src_elem_size1, size_t src_elem_size2> struct BinOpShift<src_elem_size1, src_elem_size2, 2> { enum { shift = 2 }; };$/;"	e	enum:cv::gpu::device::functional_detail::BinOpShift::__anon177
shift	gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 1> { enum { shift = 4 }; };$/;"	e	enum:cv::gpu::device::functional_detail::UnOpShift::__anon172
shift	gpu/device/functional.hpp	/^        template <size_t src_elem_size> struct UnOpShift<src_elem_size, 2> { enum { shift = 2 }; };$/;"	e	enum:cv::gpu::device::functional_detail::UnOpShift::__anon173
shift1	legacy/blobtrack.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos
shift2	legacy/blobtrack.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos
shortPairs_	features2d/features2d.hpp	/^    BriskShortPair* shortPairs_;         \/\/ d<_dMax$/;"	m	class:cv::BRISK
should_run	ts/ts_gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestCase
should_run	ts/ts_gtest.h	/^  bool should_run() const { return should_run_; }$/;"	f	class:testing::TestInfo
should_run_	ts/ts_gtest.h	/^  bool should_run_;                 \/\/ True iff this test should run$/;"	m	class:testing::TestInfo
should_run_	ts/ts_gtest.h	/^  bool should_run_;$/;"	m	class:testing::TestCase
shrinkage	ml/ml.hpp	/^    CV_PROP_RW float shrinkage;$/;"	m	struct:CvGBTreesParams
sigma	features2d/features2d.hpp	/^        float sigma;     \/\/ Gaussian smoothing sigma$/;"	m	struct:cv::BRISK::BriskPatternPoint
sigma	features2d/features2d.hpp	/^        float sigma; \/\/ Gaussian smoothing sigma$/;"	m	struct:cv::FREAK::PatternPoint
sigma	legacy/blobtrack.hpp	/^    float   sigma;$/;"	m	struct:CvBlobTrackerParamMS
sigma	nonfree/features2d.hpp	/^    CV_PROP_RW double sigma;$/;"	m	class:cv::SIFT
sigma_range	gpu/gpu.hpp	/^    float sigma_range;$/;"	m	class:cv::gpu::DisparityBilateralFilter
sign_bit	ts/ts_gtest.h	/^  Bits sign_bit() const { return kSignBitMask & u_.bits_; }$/;"	f	class:testing::internal::FloatingPoint
signaling_NaN	gpu/device/limits.hpp	/^        __device__ __forceinline__ static type signaling_NaN() { return T(); }$/;"	f	struct:cv::gpu::device::numeric_limits
signature	core/types_c.h	/^    int signature;$/;"	m	struct:CvMemStorage
signature	flann/saving.h	/^    char signature[16];$/;"	m	struct:cvflann::IndexHeader
signatureSize	legacy/legacy.hpp	/^        int signatureSize;$/;"	m	class:cv::FernDescriptorMatcher::Params
signatureSize	legacy/legacy.hpp	/^    int signatureSize;$/;"	m	class:cv::FernClassifier
signum_	ts/ts_gtest.h	/^  const int signum_;$/;"	m	class:testing::KilledBySignal
similarity	objdetect/objdetect.hpp	/^  float similarity;$/;"	m	struct:cv::linemod::Match
simple_block_dim_x	gpu/device/functional.hpp	/^        enum { simple_block_dim_x = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon182
simple_block_dim_y	gpu/device/functional.hpp	/^        enum { simple_block_dim_y = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon183
size	core/core_c.h	/^    CvSize size; \/* maximal common linear size: { width = size, height = 1 } *\/$/;"	m	struct:CvNArrayIterator
size	core/core_c.h	/^CVAPI(void*)  cvAlloc( size_t size );$/;"	v
size	core/cuda_devptrs.hpp	/^            size_t size;$/;"	m	struct:cv::gpu::PtrSz
size	core/gpumat.hpp	/^    inline Size GpuMat::size() const$/;"	f	class:cv::gpu::GpuMat
size	core/mat.hpp	/^inline const int* SparseMat::size() const$/;"	f	class:cv::SparseMat
size	core/mat.hpp	/^inline int SparseMat::size(int i) const$/;"	f	class:cv::SparseMat
size	core/opengl_interop.hpp	/^    inline Size size() const { return Size(cols_, rows_); }$/;"	f	class:cv::GlBuffer
size	core/opengl_interop.hpp	/^    inline Size size() const { return Size(cols_, rows_); }$/;"	f	class:cv::GlTexture
size	core/opengl_interop.hpp	/^    inline Size size() const { return vertex_.size(); }$/;"	f	class:cv::GlArrays
size	core/operations.hpp	/^        size_t size;$/;"	m	struct:cv::Vector::Hdr
size	core/operations.hpp	/^    size_t size() const { return hdr.size; }$/;"	f	class:cv::Vector
size	core/operations.hpp	/^inline int Range::size() const { return end - start; }$/;"	f	class:cv::Range
size	core/operations.hpp	/^inline size_t FileNode::size() const$/;"	f	class:cv::FileNode
size	core/operations.hpp	/^template<typename _Tp> inline Size_<_Tp> Rect_<_Tp>::size() const { return Size_<_Tp>(width, height); }$/;"	f	class:cv::Rect_
size	core/operations.hpp	/^template<typename _Tp> inline size_t Seq<_Tp>::size() const$/;"	f	class:cv::Seq
size	core/types_c.h	/^        int size;$/;"	m	struct:CvMatND::__anon225
size	core/types_c.h	/^    CvSize2D32f  size;    \/* Box width and length.                       *\/$/;"	m	struct:CvBox2D
size	core/types_c.h	/^    int size[CV_MAX_DIM];$/;"	m	struct:CvSparseMat
size	features2d/features2d.hpp	/^    CV_PROP_RW float size; \/\/!< diameter of the meaningful keypoint neighborhood$/;"	m	class:cv::KeyPoint
size	features2d/features2d.hpp	/^    int size;$/;"	m	class:cv::BOWTrainer
size	flann/autotuned_index.h	/^    virtual size_t size() const$/;"	f	class:cvflann::AutotunedIndex
size	flann/composite_index.h	/^    size_t size() const$/;"	f	class:cvflann::CompositeIndex
size	flann/dynamic_bitset.h	/^    size_t size() const$/;"	f	class:cvflann::DynamicBitset
size	flann/flann.hpp	/^        int size() const { return nnIndex->size(); }$/;"	f	class:cv::flann::GenericIndex
size	flann/flann.hpp	/^    int size() const$/;"	f	class:cv::flann::Index_
size	flann/flann_base.hpp	/^    size_t size() const$/;"	f	class:cvflann::Index
size	flann/heap.h	/^    int size()$/;"	f	class:cvflann::Heap
size	flann/hierarchical_clustering_index.h	/^        int size;$/;"	m	struct:cvflann::HierarchicalClusteringIndex::Node
size	flann/hierarchical_clustering_index.h	/^    size_t size() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
size	flann/kdtree_index.h	/^    size_t size() const$/;"	f	class:cvflann::KDTreeIndex
size	flann/kdtree_single_index.h	/^    size_t size() const$/;"	f	class:cvflann::KDTreeSingleIndex
size	flann/kmeans_index.h	/^        int size;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
size	flann/kmeans_index.h	/^    size_t size() const$/;"	f	class:cvflann::KMeansIndex
size	flann/linear_index.h	/^    size_t size() const$/;"	f	class:cvflann::LinearIndex
size	flann/lsh_index.h	/^    size_t size() const$/;"	f	class:cvflann::LshIndex
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::KNNResultSet
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::KNNSimpleResultSet
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::RadiusResultSet
size	flann/result_set.h	/^    size_t size() const$/;"	f	class:cvflann::UniqueResultSet
size	legacy/compat.hpp	/^    int          size;$/;"	m	struct:CvSURFPoint
size	legacy/compat.hpp	/^    int size;$/;"	m	struct:CvStarKeypoint
size	legacy/legacy.hpp	/^    CvSize size() const { return image ? cvSize(image->width, image->height) : cvSize(0,0); }$/;"	f	class:CvImage
size	legacy/legacy.hpp	/^    CvSize size() const$/;"	f	class:CvMatrix
size	legacy/legacy.hpp	/^    CvSize size;$/;"	m	struct:CvBGCodeBookModel
size	ocl/matrix_operations.hpp	/^        inline Size oclMat::size() const$/;"	f	class:cv::ocl::oclMat
size	stitching/detail/util.hpp	/^    std::vector<int> size;$/;"	m	class:cv::detail::DisjointSets
size	ts/ts_gtest.h	/^  size_t size() const { return size_; }$/;"	f	class:testing::internal::NativeArray
size	videostab/global_motion.hpp	/^    int size; \/\/ subset size$/;"	m	struct:cv::videostab::RansacParams
sizeList_	features2d/features2d.hpp	/^    unsigned int* sizeList_;             \/\/ lists the total pattern size per scale index [scale]$/;"	m	class:cv::BRISK
sizeX	objdetect/objdetect.hpp	/^    int sizeX;$/;"	m	struct:CvLSVMFilterObject
sizeY	objdetect/objdetect.hpp	/^    int sizeY;$/;"	m	struct:CvLSVMFilterObject
size_	flann/dynamic_bitset.h	/^    size_t size_;$/;"	m	class:cvflann::DynamicBitset
size_	flann/hierarchical_clustering_index.h	/^    size_t size_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
size_	flann/kdtree_index.h	/^    size_t size_;$/;"	m	class:cvflann::KDTreeIndex
size_	flann/kdtree_single_index.h	/^    size_t size_;$/;"	m	class:cvflann::KDTreeSingleIndex
size_	flann/kmeans_index.h	/^    size_t size_;$/;"	m	class:cvflann::KMeansIndex
size_	flann/random.h	/^    int size_;$/;"	m	class:cvflann::UniqueRandom
size_	ts/ts_gtest.h	/^  size_t size_;$/;"	m	class:testing::internal::NativeArray
size_	videostab/fast_marching.hpp	/^    int size_; \/\/ narrow band size$/;"	m	class:cv::videostab::FastMarchingMethod
size_histogram_	flann/lsh_table.h	/^    std::vector<std::vector<unsigned int> > size_histogram_;$/;"	m	struct:cvflann::lsh::LshStats
size_type	core/core.hpp	/^    typedef size_t size_type;$/;"	t	class:cv::Allocator
sizes_	stitching/detail/seam_finders.hpp	/^    std::vector<Size> sizes_;$/;"	m	class:cv::detail::PairwiseSeamFinder
skinHueHistogram	contrib/contrib.hpp	/^    Histogram histogramHueMotion, skinHueHistogram;$/;"	m	class:CvAdaptiveSkinDetector
slidingSumBuf	calib3d/calib3d.hpp	/^    CvMat* slidingSumBuf;$/;"	m	struct:CvStereoBMState
smallSize	contrib/contrib.hpp	/^        int smallSize;$/;"	m	class:cv::SelfSimDescriptor
small_any_policy	flann/any.h	/^struct small_any_policy : typed_base_any_policy<T>$/;"	s	namespace:cvflann::anyimpl
smart_block_dim_x	gpu/device/functional.hpp	/^        enum { smart_block_dim_x = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon184
smart_block_dim_y	gpu/device/functional.hpp	/^        enum { smart_block_dim_y = 16 };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon185
smart_shift	gpu/device/functional.hpp	/^        enum { smart_shift = DefaultTransformShift<Func>::shift };$/;"	e	enum:cv::gpu::device::DefaultTransformFunctorTraits::__anon186
smem	gpu/device/emulation.hpp	/^        struct smem$/;"	s	struct:cv::gpu::device::Emulation
smoothingRadius	gpu/gpu.hpp	/^    int smoothingRadius;$/;"	m	class:cv::gpu::GMG_GPU
smoothingRadius	video/background_segm.hpp	/^    int     smoothingRadius;$/;"	m	class:cv::BackgroundSubtractorGMG
solve	core/operations.hpp	/^Matx<_Tp, n, l> Matx<_Tp, m, n>::solve(const Matx<_Tp, m, l>& rhs, int method) const$/;"	f	class:cv::Matx
solve	core/operations.hpp	/^Vec<_Tp, n> Matx<_Tp, m, n>::solve(const Vec<_Tp, m>& rhs, int method) const$/;"	f	class:cv::Matx
solve2x2	gpu/device/utility.hpp	/^    template <typename T> __device__ __forceinline__ bool solve2x2(const T A[2][2], const T b[2], T x[2])$/;"	f	namespace:cv::gpu::device
solve3x3	gpu/device/utility.hpp	/^    template <typename T> __device__ __forceinline__ bool solve3x3(const T A[3][3], const T b[3], T x[3])$/;"	f	namespace:cv::gpu::device
solveZ	core/mat.hpp	/^inline void SVD::solveZ( InputArray m, OutputArray _dst )$/;"	f	class:cv::SVD
solver	ml/ml.hpp	/^    CvSVMSolver* solver;$/;"	m	class:CvSVM
solver_iterations	gpu/gpu.hpp	/^    int solver_iterations;$/;"	m	class:cv::gpu::BroxOpticalFlow
sort	core/operations.hpp	/^template<typename _Tp, class _LT> void sort( vector<_Tp>& vec, _LT LT=_LT() )$/;"	f	namespace:cv
sortAndCopy	flann/result_set.h	/^    virtual void sortAndCopy(int* indices, DistanceType* dist, int n_neighbors = -1) const$/;"	f	class:cvflann::UniqueResultSet
sortKey_	gpu/gpu.hpp	/^    GpuMat sortKey_;$/;"	m	class:cv::gpu::MOG_GPU
speckleRange	calib3d/calib3d.hpp	/^    CV_PROP_RW int speckleRange;$/;"	m	class:cv::StereoSGBM
speckleRange	calib3d/calib3d.hpp	/^    int speckleRange; \/\/ acceptable range of variation in window$/;"	m	struct:CvStereoBMState
speckleWindowSize	calib3d/calib3d.hpp	/^    CV_PROP_RW int speckleWindowSize;$/;"	m	class:cv::StereoSGBM
speckleWindowSize	calib3d/calib3d.hpp	/^    int speckleWindowSize; \/\/ disparity variation window$/;"	m	struct:CvStereoBMState
spect_len	gpu/gpu.hpp	/^    int spect_len;$/;"	m	struct:cv::gpu::ConvolveBuf
speed_level_	flann/lsh_table.h	/^    SpeedLevel speed_level_;$/;"	m	class:cvflann::lsh::LshTable
speedup_	flann/autotuned_index.h	/^    float speedup_;$/;"	m	class:cvflann::AutotunedIndex
spinImages	contrib/contrib.hpp	/^        Mat spinImages;$/;"	m	class:cv::SpinImageModel
split	core/mat.hpp	/^template<typename _Tp> void split(const Mat& src, vector<Mat_<_Tp> >& mv)$/;"	f	namespace:cv
split	ml/ml.hpp	/^    CvDTreeSplit* split;$/;"	m	struct:CvDTreeNode
split_buf	ml/ml.hpp	/^    CvMat* split_buf;$/;"	m	struct:CvDTreeTrainData
split_criteria	ml/ml.hpp	/^    CV_PROP_RW int split_criteria;$/;"	m	struct:CvBoostParams
split_heap	ml/ml.hpp	/^    CvSet* split_heap;$/;"	m	struct:CvDTreeTrainData
split_point	ml/ml.hpp	/^            int split_point;$/;"	m	struct:CvDTreeSplit::__anon251::__anon252
sqr	stitching/detail/util_inl.hpp	/^static inline double sqr(double x) { return x * x; }$/;"	f	namespace:cv::detail
sqr	stitching/detail/util_inl.hpp	/^static inline float sqr(float x) { return x * x; }$/;"	f	namespace:cv::detail
sqr	stitching/detail/util_inl.hpp	/^static inline int sqr(int x) { return x * x; }$/;"	f	namespace:cv::detail
src	gpu/device/border_interpolate.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::BorderReader
src	gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::AreaFilter
src	gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::CubicFilter
src	gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::IntegerAreaFilter
src	gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::LinearFilter
src	gpu/device/filters.hpp	/^        const Ptr2D src;$/;"	m	struct:cv::gpu::device::PointFilter
srcRow	imgproc/imgproc.hpp	/^    vector<uchar> srcRow;$/;"	m	class:cv::FilterEngine
srcType	imgproc/imgproc.hpp	/^    int srcType, dstType, bufType;$/;"	m	class:cv::FilterEngine
src_	stitching/detail/seam_finders.hpp	/^        const Mat *src_;$/;"	m	class:cv::detail::DpSeamFinder::ImagePairLess
src_img_idx	stitching/detail/matchers.hpp	/^    int src_img_idx, dst_img_idx;       \/\/ Images indices (optional)$/;"	m	struct:cv::detail::MatchesInfo
ss_	ts/ts_gtest.h	/^  const internal::scoped_ptr< ::std::stringstream> ss_;$/;"	m	class:testing::Message
stabilizationMotions	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& stabilizationMotions() const { return *stabilizationMotions_; }$/;"	f	class:cv::videostab::InpainterBase
stabilizationMotions_	videostab/inpainting.hpp	/^    const std::vector<Mat> *stabilizationMotions_;$/;"	m	class:cv::videostab::InpainterBase
stabilizationMotions_	videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizationMotions_;$/;"	m	class:cv::videostab::StabilizerBase
stabilizedFrames	videostab/inpainting.hpp	/^    virtual const std::vector<Mat>& stabilizedFrames() const { return *stabilizedFrames_; }$/;"	f	class:cv::videostab::InpainterBase
stabilizedFrames_	videostab/inpainting.hpp	/^    const std::vector<Mat> *stabilizedFrames_;$/;"	m	class:cv::videostab::InpainterBase
stabilizedFrames_	videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizedFrames_;$/;"	m	class:cv::videostab::StabilizerBase
stabilizedMasks_	videostab/stabilizer.hpp	/^    std::vector<Mat> stabilizedMasks_;$/;"	m	class:cv::videostab::StabilizerBase
stack	core/core_c.h	/^    CvSeq*   stack;        \/* the graph vertex stack *\/$/;"	m	struct:CvGraphScanner
stack	core/core_c.h	/^    int stack[CV_MAX_DIM]; \/* for internal use *\/$/;"	m	struct:CvNArrayIterator
stageType	objdetect/objdetect.hpp	/^        int stageType;$/;"	m	class:cv::CascadeClassifier::Data
stage_classifier	objdetect/objdetect.hpp	/^    CvHaarStageClassifier* stage_classifier;$/;"	m	struct:CvHaarClassifierCascade
stages	objdetect/objdetect.hpp	/^        vector<Stage> stages;$/;"	m	class:cv::CascadeClassifier::Data
stale	legacy/legacy.hpp	/^    int stale;$/;"	m	struct:CvBGCodeBookElem
start	flann/timer.h	/^    void start()$/;"	f	class:cvflann::StartStopTimer
start	imgproc/types_c.h	/^    CvPoint* start; \/* point of the contour where the defect begins *\/$/;"	m	struct:CvConvexityDefect
startDistanceBucket	contrib/contrib.hpp	/^        int startDistanceBucket;$/;"	m	class:cv::SelfSimDescriptor
startIdxs	features2d/features2d.hpp	/^        vector<int> startIdxs;$/;"	m	class:cv::DescriptorMatcher::DescriptorCollection
startIndices	features2d/features2d.hpp	/^        vector<int> startIndices;$/;"	m	class:cv::GenericDescriptorMatcher::KeyPointCollection
startTime	contrib/contrib.hpp	/^        int64 startTime;$/;"	m	class:cv::TickMeter
startTime	flann/timer.h	/^    clock_t startTime;$/;"	m	class:cvflann::StartStopTimer
startY	imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
startY0	imgproc/imgproc.hpp	/^    int bufStep, startY, startY0, endY, rowCount, dstY;$/;"	m	class:cv::FilterEngine
start_index	core/types_c.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice
start_index	core/types_c.h	/^  int    start_index;         \/* Index of the first element in the block +  *\/$/;"	m	struct:CvSeqBlock
start_step	legacy/legacy.hpp	/^    CV_PROP_RW int start_step;$/;"	m	struct:CvEMParams
state	calib3d/calib3d.hpp	/^    Ptr<CvStereoBMState> state;$/;"	m	class:cv::StereoBM
state	calib3d/calib3d.hpp	/^    int state;$/;"	m	class:CvLevMarq
state	calib3d/calib3d.hpp	/^CVAPI(void) cvReleaseStereoBMState( CvStereoBMState** state );$/;"	v
state	legacy/compat.hpp	/^    CvRNG     state;    \/* RNG state (the current seed and carry)*\/$/;"	m	struct:CvRandState
state	legacy/legacy.hpp	/^        CvEHMMState* state; \/* if level == 0 points to real states array,$/;"	m	union:CvEHMM::__anon7
state	legacy/legacy.hpp	/^    int* state;\/* arr of pairs superstate\/state to which observation belong *\/$/;"	m	struct:CvImgObsInfo
state	legacy/legacy.hpp	/^CVAPI(void) cvReleaseStereoGCState( CvStereoGCState** state );$/;"	v
statePost	video/tracking.hpp	/^    Mat statePost;          \/\/!< corrected state (x(k)): x(k)=x'(k)+K(k)*(z(k)-H*x'(k))$/;"	m	class:cv::KalmanFilter
statePre	video/tracking.hpp	/^    Mat statePre;           \/\/!< predicted state (x'(k)): x(k)=A*x(k-1)+B*u(k)$/;"	m	class:cv::KalmanFilter
state_	ts/ts_gtest.h	/^  UInt32 state_;$/;"	m	class:testing::internal::Random
state_post	video/tracking.hpp	/^    CvMat* state_post;          \/* corrected state (x(k)):$/;"	m	struct:CvKalman
state_pre	video/tracking.hpp	/^    CvMat* state_pre;           \/* predicted state (x'(k)):$/;"	m	struct:CvKalman
states_	stitching/detail/seam_finders.hpp	/^    std::vector<ComponentState> states_;$/;"	m	class:cv::detail::DpSeamFinder
static_delete	flann/any.h	/^    virtual void static_delete(void** x)$/;"	f	struct:cvflann::anyimpl::big_any_policy
static_delete	flann/any.h	/^    virtual void static_delete(void**) { }$/;"	f	struct:cvflann::anyimpl::small_any_policy
status	legacy/legacy.hpp	/^    int status;$/;"	m	struct:CvCliqueFinder
status_	videostab/global_motion.hpp	/^    std::vector<uchar> status_;$/;"	m	class:cv::videostab::PyrLkRobustMotionEstimator
std	ts/ts_gtest.h	/^namespace std {$/;"	n
std_threshold	legacy/legacy.hpp	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams
stddev	ts/ts_perf.hpp	/^    double stddev;$/;"	m	struct:perf::performance_metrics
stdev	videostab/motion_stabilizing.hpp	/^    float stdev() const { return stdev_; }$/;"	f	class:cv::videostab::GaussianMotionFilter
stdevThresh	videostab/inpainting.hpp	/^    float stdevThresh() const { return stdevThresh_; }$/;"	f	class:cv::videostab::ConsistentMosaicInpainter
stdevThresh_	videostab/inpainting.hpp	/^    float stdevThresh_;$/;"	m	class:cv::videostab::ConsistentMosaicInpainter
stdev_	videostab/motion_stabilizing.hpp	/^    float stdev_;$/;"	m	class:cv::videostab::GaussianMotionFilter
step	core/cuda_devptrs.hpp	/^            size_t step;$/;"	m	struct:cv::gpu::PtrStep
step	core/gpumat.hpp	/^        size_t step;$/;"	m	class:cv::gpu::GpuMat
step	core/types_c.h	/^        int step;$/;"	m	struct:CvMatND::__anon225
step	core/types_c.h	/^    int step;$/;"	m	struct:CvMat
step	gpu/gpu.hpp	/^    size_t step;$/;"	m	class:cv::gpu::CudaMem
step	legacy/compat.hpp	/^    int     step;                   \/* distance between lines ( in elements of single   *\/$/;"	m	struct:_CvPixelPosition8u
step	legacy/compat.hpp	/^    int     step;$/;"	m	struct:_CvPixelPosition32f
step	legacy/compat.hpp	/^    int     step;$/;"	m	struct:_CvPixelPosition8s
step	legacy/legacy.hpp	/^    int step() const { return image ? image->widthStep : 0; }$/;"	f	class:CvImage
step	legacy/legacy.hpp	/^    int step() const { return matrix ? matrix->step : 0; }$/;"	f	class:CvMatrix
step	ml/ml.hpp	/^    CV_PROP_RW double step;$/;"	m	struct:CvParamGrid
step	ocl/ocl.hpp	/^            size_t step;$/;"	m	class:cv::ocl::oclMat
step1	core/gpumat.hpp	/^    inline size_t GpuMat::step1() const$/;"	f	class:cv::gpu::GpuMat
step1	core/mat.hpp	/^inline size_t Mat::step1(int i) const { return step.p[i]\/elemSize1(); }$/;"	f	class:cv::Mat
step1	core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::step1(int i) const { return step.p[i]\/elemSize1(); }$/;"	f	class:cv::Mat_
step1	ocl/matrix_operations.hpp	/^        inline size_t oclMat::step1() const$/;"	f	class:cv::ocl::oclMat
stepScale	legacy/legacy.hpp	/^        float minScale, maxScale, stepScale;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
stepT	core/mat.hpp	/^template<typename _Tp> inline size_t Mat_<_Tp>::stepT(int i) const { return step.p[i]\/elemSize(); }$/;"	f	class:cv::Mat_
step_	ts/ts_gtest.h	/^    const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
step_	ts/ts_gtest.h	/^  const IncrementT step_;$/;"	m	class:testing::internal::RangeGenerator
step_arr	legacy/compat.hpp	/^    int     step_arr[3];            \/* array: ( 0, -step, step ). It is used for        *\/$/;"	m	struct:_CvPixelPosition8u
step_arr	legacy/compat.hpp	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition32f
step_arr	legacy/compat.hpp	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition8s
stereo	legacy/legacy.hpp	/^    CvStereoCamera stereo;$/;"	m	class:CvCalibFilter
stereoCamera	legacy/legacy.hpp	/^CVAPI(int) icvComputeCoeffForStereo(  CvStereoCamera* stereoCamera);$/;"	v
stereoCamera	legacy/legacy.hpp	/^CVAPI(void) icvComputeStereoParamsForCameras(CvStereoCamera* stereoCamera);$/;"	v
stereoCamera	legacy/legacy.hpp	/^CVAPI(void) icvGetQuadsTransformStruct(  CvStereoCamera* stereoCamera);$/;"	v
stereoparams	legacy/legacy.hpp	/^CVAPI(int) icvComputeRestStereoParams(CvStereoCamera *stereoparams);$/;"	v
stop	flann/timer.h	/^    void stop()$/;"	f	class:cvflann::StartStopTimer
storage	core/core_c.h	/^CVAPI(void)  cvClearMemStorage( CvMemStorage* storage );$/;"	v
storage	core/core_c.h	/^CVAPI(void)  cvReleaseMemStorage( CvMemStorage** storage );$/;"	v
storage	legacy/legacy.hpp	/^    CvMemStorage* storage;$/;"	m	class:CvCalibFilter
storage	legacy/legacy.hpp	/^    CvMemStorage* storage;$/;"	m	struct:CvBGCodeBookModel
storage	ml/ml.hpp	/^    CvMemStorage* storage;$/;"	m	class:CvSVM
storage	ml/ml.hpp	/^    CvMemStorage* storage;$/;"	m	class:CvSVMSolver
storageIn	ts/ts_perf.hpp	/^    cv::FileStorage storageIn;$/;"	m	class:perf::Regression
storageInPath	ts/ts_perf.hpp	/^    std::string storageInPath;$/;"	m	class:perf::Regression
storageOut	ts/ts_perf.hpp	/^    cv::FileStorage storageOut;$/;"	m	class:perf::Regression
storageOutPath	ts/ts_perf.hpp	/^    std::string storageOutPath;$/;"	m	class:perf::Regression
str	core/types_c.h	/^        CvString str; \/* text string *\/$/;"	m	union:CvFileNode::__anon226
str	core/types_c.h	/^    CvString str;$/;"	m	struct:CvStringHashNode
strdup	legacy/blobtrack.hpp	56;"	d
stream	flann/logger.h	/^    FILE* stream;$/;"	m	class:cvflann::Logger
stricmp	legacy/blobtrack.hpp	57;"	d
stride	flann/matrix.h	/^    size_t stride;$/;"	m	class:cvflann::Matrix
string	ts/ts_gtest.h	/^  operator ::std::string() const { return ::std::string(c_str(), length()); }$/;"	f	class:testing::internal::String::operator::std
string	ts/ts_gtest.h	/^  operator ::string() const { return ::string(c_str(), length()); }$/;"	f	class:testing::internal::String::operator
strings_	features2d/features2d.hpp	/^    int strings_;                        \/\/ number of uchars the descriptor consists of$/;"	m	class:cv::BRISK
strong_threshold	objdetect/objdetect.hpp	/^  float strong_threshold;$/;"	m	class:cv::linemod::ColorGradient
structSize	legacy/legacy.hpp	/^        int structSize;$/;"	m	class:cv::FernDescriptorMatcher::Params
structSize	legacy/legacy.hpp	/^    int structSize;$/;"	m	class:cv::FernClassifier
style	core/opengl_interop.hpp	/^    inline Style style() const { return style_; }$/;"	f	class:cv::GlFont
style_	core/opengl_interop.hpp	/^    Style style_;$/;"	m	class:cv::GlFont
subdiv	legacy/legacy.hpp	/^CVAPI(int)   icvSubdiv2DCheck( CvSubdiv2D* subdiv );$/;"	v
subdiv	legacy/legacy.hpp	/^CVAPI(void)  cvCalcSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	v
subdiv	legacy/legacy.hpp	/^CVAPI(void)  cvClearSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	v
subsample_mask	ml/ml.hpp	/^    CvMat* subsample_mask;$/;"	m	class:CvBoost
subsample_portion	ml/ml.hpp	/^    CV_PROP_RW float subsample_portion;$/;"	m	struct:CvGBTreesParams
subsample_test	ml/ml.hpp	/^    CvMat* subsample_test;$/;"	m	class:CvGBTrees
subsample_train	ml/ml.hpp	/^    CvMat* subsample_train;$/;"	m	class:CvGBTrees
subsamplingFactor	gpu/gpu.hpp	/^    int subsamplingFactor; \/\/ amount of random subsampling$/;"	m	class:cv::gpu::VIBE_GPU
subscribe	flann/object_factory.h	/^    bool subscribe(UniqueIdType id, ObjectCreator creator)$/;"	f	class:cvflann::ObjectFactory
subset	contrib/contrib.hpp	/^        vector<int> subset;$/;"	m	class:cv::SpinImageModel
subset	ml/ml.hpp	/^        int subset[2];$/;"	m	union:CvDTreeSplit::__anon251
subsets	objdetect/objdetect.hpp	/^        vector<int> subsets;$/;"	m	class:cv::CascadeClassifier::Data
subtree_weights	ml/ml.hpp	/^    CvMat* subtree_weights;$/;"	m	class:CvBoost
success_	ts/ts_gtest.h	/^  bool success_;$/;"	m	class:testing::AssertionResult
suiteName	ts/ts_perf.hpp	/^    std::string suiteName;$/;"	m	class:perf::Regression
sum	gpu/gpu.hpp	/^    GpuMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::gpu::SURF_GPU
sum	ml/ml.hpp	/^    CvMat** sum;$/;"	m	class:CvNormalBayesClassifier
sum	ocl/ocl.hpp	/^            oclMat sum, mask1, maskSum, intBuffer;$/;"	m	class:cv::ocl::SURF_OCL
sumTime	contrib/contrib.hpp	/^        int64 sumTime;$/;"	m	class:cv::TickMeter
sum_response	ml/ml.hpp	/^    CvMat* sum_response;$/;"	m	class:CvBoost
sum_response	ml/ml.hpp	/^    CvMat* sum_response;$/;"	m	class:CvGBTrees
sum_response_tmp	ml/ml.hpp	/^    CvMat* sum_response_tmp;$/;"	m	class:CvGBTrees
summary	ts/ts_gtest.h	/^  const char* summary() const { return summary_.c_str(); }$/;"	f	class:testing::TestPartResult
summary_	ts/ts_gtest.h	/^  internal::String summary_;  \/\/ The test failure summary.$/;"	m	class:testing::TestPartResult
suppressNonmaxSize	features2d/features2d.hpp	/^    int suppressNonmaxSize;$/;"	m	class:cv::StarDetector
suppressNonmaxSize	legacy/compat.hpp	/^    int suppressNonmaxSize;$/;"	m	struct:CvStarDetectorParams
surf	stitching/detail/matchers.hpp	/^    Ptr<Feature2D> surf;$/;"	m	class:cv::detail::SurfFeaturesFinder
surf_	stitching/detail/matchers.hpp	/^    gpu::SURF_GPU surf_;$/;"	m	class:cv::detail::SurfFeaturesFinderGpu
sv	ml/ml.hpp	/^    float** sv;$/;"	m	class:CvSVM
sv_count	ml/ml.hpp	/^    int sv_count;$/;"	m	struct:CvSVMDecisionFunc
sv_index	ml/ml.hpp	/^    int* sv_index;$/;"	m	struct:CvSVMDecisionFunc
sv_total	ml/ml.hpp	/^    int sv_total;$/;"	m	class:CvSVM
svmDetector	objdetect/objdetect.hpp	/^    CV_PROP vector<float> svmDetector;$/;"	m	struct:cv::HOGDescriptor
svm_type	ml/ml.hpp	/^    CV_PROP_RW int         svm_type;$/;"	m	struct:CvSVMParams
swap	core/gpumat.hpp	/^    inline void swap(GpuMat& a, GpuMat& b)$/;"	f	namespace:cv::gpu
swap	flann/any.h	/^    any& swap(any& x)$/;"	f	struct:cvflann::any
swap	gpu/device/utility.hpp	/^    template <typename T> void __device__ __host__ __forceinline__ swap(T& a, T& b)$/;"	f	namespace:cv::gpu::device
swap	ocl/matrix_operations.hpp	/^        inline void oclMat::swap(oclMat &b)$/;"	f	class:cv::ocl::oclMat
swap	ocl/matrix_operations.hpp	/^        static inline void swap( oclMat &a, oclMat &b )$/;"	f	namespace:cv::ocl
syncthreadsOr	gpu/device/emulation.hpp	/^        static __device__ __forceinline__ int syncthreadsOr(int pred)$/;"	f	struct:cv::gpu::device::Emulation
sz1080p	ts/ts_perf.hpp	/^const cv::Size sz1080p = cv::Size(1920, 1080);$/;"	m	namespace:perf
sz1440p	ts/ts_perf.hpp	/^const cv::Size sz1440p = szWQHD;$/;"	m	namespace:perf
sz2160p	ts/ts_perf.hpp	/^const cv::Size sz2160p = cv::Size(3840, 2160);\/\/UHDTV1 4K$/;"	m	namespace:perf
sz240p	ts/ts_perf.hpp	/^const cv::Size sz240p = szQVGA;$/;"	m	namespace:perf
sz2K	ts/ts_perf.hpp	/^const cv::Size sz2K = cv::Size(2048, 2048);$/;"	m	namespace:perf
sz3MP	ts/ts_perf.hpp	/^const cv::Size sz3MP = cv::Size(2048, 1536);$/;"	m	namespace:perf
sz4320p	ts/ts_perf.hpp	/^const cv::Size sz4320p = cv::Size(7680, 4320);\/\/UHDTV2 8K$/;"	m	namespace:perf
sz5MP	ts/ts_perf.hpp	/^const cv::Size sz5MP = cv::Size(2592, 1944);$/;"	m	namespace:perf
sz720p	ts/ts_perf.hpp	/^const cv::Size sz720p = cv::Size(1280, 720);$/;"	m	namespace:perf
szODD	ts/ts_perf.hpp	/^const cv::Size szODD = cv::Size(127, 61);$/;"	m	namespace:perf
szQVGA	ts/ts_perf.hpp	/^const cv::Size szQVGA = cv::Size(320, 240);$/;"	m	namespace:perf
szSVGA	ts/ts_perf.hpp	/^const cv::Size szSVGA = cv::Size(800, 600);$/;"	m	namespace:perf
szSXGA	ts/ts_perf.hpp	/^const cv::Size szSXGA = cv::Size(1280, 1024);$/;"	m	namespace:perf
szSmall128	ts/ts_perf.hpp	/^const cv::Size szSmall128 = cv::Size(128, 128);$/;"	m	namespace:perf
szSmall24	ts/ts_perf.hpp	/^const cv::Size szSmall24 = cv::Size(24, 24);$/;"	m	namespace:perf
szSmall32	ts/ts_perf.hpp	/^const cv::Size szSmall32 = cv::Size(32, 32);$/;"	m	namespace:perf
szSmall64	ts/ts_perf.hpp	/^const cv::Size szSmall64 = cv::Size(64, 64);$/;"	m	namespace:perf
szVGA	ts/ts_perf.hpp	/^const cv::Size szVGA = cv::Size(640, 480);$/;"	m	namespace:perf
szWQHD	ts/ts_perf.hpp	/^const cv::Size szWQHD = cv::Size(2560, 1440);$/;"	m	namespace:perf
szXGA	ts/ts_perf.hpp	/^const cv::Size szXGA = cv::Size(1024, 768);$/;"	m	namespace:perf
sznHD	ts/ts_perf.hpp	/^const cv::Size sznHD = cv::Size(640, 360);$/;"	m	namespace:perf
szqHD	ts/ts_perf.hpp	/^const cv::Size szqHD = cv::Size(960, 540);$/;"	m	namespace:perf
t	core/operations.hpp	/^Matx<_Tp, n, m> Matx<_Tp, m, n>::t() const$/;"	f	class:cv::Matx
t	legacy/legacy.hpp	/^    int t;$/;"	m	struct:CvBGCodeBookModel
t	ocl/matrix_operations.hpp	/^        inline oclMat oclMat::t() const$/;"	f	class:cv::ocl::oclMat
t	stitching/detail/camera.hpp	/^    Mat t; \/\/ Translation$/;"	m	struct:cv::detail::CameraParams
t	stitching/detail/warpers.hpp	/^    float t[3];$/;"	m	struct:cv::detail::ProjectorBase
t	ts/ts.hpp	/^    double t, freq;$/;"	m	class:cvtest::BadArgTest
tLastUpdate	legacy/legacy.hpp	/^    int tLastUpdate;$/;"	m	struct:CvBGCodeBookElem
table	contrib/openfabmap.hpp	/^    int (*table)[8];$/;"	m	class:cv::of2::FabMapLUT
table_color	gpu/gpu.hpp	/^    GpuMat table_color;$/;"	m	class:cv::gpu::DisparityBilateralFilter
table_number_	flann/lsh_index.h	/^    unsigned int table_number_;$/;"	m	class:cvflann::LshIndex
table_space	gpu/gpu.hpp	/^    GpuMat table_space;$/;"	m	class:cv::gpu::DisparityBilateralFilter
tables_	flann/lsh_index.h	/^    std::vector<lsh::LshTable<ElementType> > tables_;$/;"	m	class:cvflann::LshIndex
tag	core/types_c.h	/^    int tag;$/;"	m	struct:CvFileNode
target_precision_	flann/autotuned_index.h	/^    float target_precision_;$/;"	m	class:cvflann::AutotunedIndex
tear_down_tc_	ts/ts_gtest.h	/^  Test::TearDownTestCaseFunc tear_down_tc_;$/;"	m	class:testing::TestCase
tell	core/operations.hpp	/^template<typename _Tp> inline size_t SeqIterator<_Tp>::tell() const$/;"	f	class:cv::SeqIterator
temp	gpu/gpu.hpp	/^    GpuMat temp;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
temp1	video/tracking.hpp	/^    CvMat* temp1;               \/* temporary matrices *\/$/;"	m	struct:CvKalman
temp1	video/tracking.hpp	/^    Mat temp1;$/;"	m	class:cv::KalmanFilter
temp2	video/tracking.hpp	/^    CvMat* temp2;$/;"	m	struct:CvKalman
temp2	video/tracking.hpp	/^    Mat temp2;$/;"	m	class:cv::KalmanFilter
temp3	video/tracking.hpp	/^    CvMat* temp3;$/;"	m	struct:CvKalman
temp3	video/tracking.hpp	/^    Mat temp3;$/;"	m	class:cv::KalmanFilter
temp4	video/tracking.hpp	/^    CvMat* temp4;$/;"	m	struct:CvKalman
temp4	video/tracking.hpp	/^    Mat temp4;$/;"	m	class:cv::KalmanFilter
temp5	video/tracking.hpp	/^    CvMat* temp5;$/;"	m	struct:CvKalman
temp5	video/tracking.hpp	/^    Mat temp5;$/;"	m	class:cv::KalmanFilter
tempImg	legacy/legacy.hpp	/^    CvMat*  tempImg;$/;"	m	class:CvCalibFilter
temp_storage	ml/ml.hpp	/^    CvMemStorage* temp_storage;$/;"	m	struct:CvDTreeTrainData
templ_block	gpu/gpu.hpp	/^    GpuMat image_block, templ_block, result_data;$/;"	m	struct:cv::gpu::ConvolveBuf
templ_spect	gpu/gpu.hpp	/^    GpuMat image_spect, templ_spect, result_spect;$/;"	m	struct:cv::gpu::ConvolveBuf
template_id	objdetect/objdetect.hpp	/^  int template_id;$/;"	m	struct:cv::linemod::Match
templf	gpu/gpu.hpp	/^    GpuMat imagef, templf;$/;"	m	struct:cv::gpu::MatchTemplateBuf
templf	ocl/ocl.hpp	/^            oclMat imagef, templf;$/;"	m	struct:cv::ocl::MatchTemplateBuf
termCriteria	stitching/detail/motion_estimators.hpp	/^    CvTermCriteria termCriteria() { return term_criteria_; }$/;"	f	class:cv::detail::BundleAdjusterBase
term_crit	contrib/hybridtracker.hpp	/^    CvTermCriteria term_crit;$/;"	m	struct:cv::CvMeanShiftTrackerParams
term_crit	legacy/legacy.hpp	/^    CV_PROP_RW CvTermCriteria term_crit;$/;"	m	struct:CvEMParams
term_crit	ml/ml.hpp	/^    CV_PROP_RW CvTermCriteria term_crit; \/\/ termination criteria$/;"	m	struct:CvSVMParams
term_crit	ml/ml.hpp	/^    CV_PROP_RW CvTermCriteria term_crit;$/;"	m	struct:CvANN_MLP_TrainParams
term_crit	ml/ml.hpp	/^    CV_PROP_RW CvTermCriteria term_crit;$/;"	m	struct:CvRTParams
term_criteria_	stitching/detail/motion_estimators.hpp	/^    CvTermCriteria term_criteria_;$/;"	m	class:cv::detail::BundleAdjusterBase
termcrit	features2d/features2d.hpp	/^    TermCriteria termcrit;$/;"	m	class:cv::BOWKMeansTrainer
terminal_cost_	stitching/detail/seam_finders.hpp	/^    float terminal_cost_;$/;"	m	class:cv::detail::GraphCutSeamFinderGpu
terminationReason	ts/ts_perf.hpp	/^    int terminationReason;$/;"	m	struct:perf::performance_metrics
test	flann/dynamic_bitset.h	/^    bool test(size_t index) const$/;"	f	class:cvflann::DynamicBitset
test	ts/ts.hpp	/^    BaseTest* test;$/;"	m	struct:cvtest::TestInfo
test	ts/ts_perf.hpp	/^        TestBase* test;$/;"	m	class:perf::TestBase::_declareHelper
testDataset_	flann/autotuned_index.h	/^    Matrix<ElementType> testDataset_;$/;"	m	class:cvflann::AutotunedIndex
testDefaults	contrib/openfabmap.hpp	/^    vector<double> testDefaults;$/;"	m	class:cv::of2::FabMap2
testImgDescriptors	contrib/openfabmap.hpp	/^    vector<Mat> testImgDescriptors;$/;"	m	class:cv::of2::FabMap
testInvertedMap	contrib/openfabmap.hpp	/^    map<int, vector<int> > testInvertedMap;$/;"	m	class:cv::of2::FabMap2
test_	ts/ts_gtest.h	/^    DeathTest* const test_;$/;"	m	class:testing::internal::DeathTest::ReturnSentinel
test_array	ts/ts.hpp	/^    vector<vector<void*> > test_array;$/;"	m	class:cvtest::ArrayTest
test_base_name	ts/ts_gtest.h	/^    const string test_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_base_name	ts/ts_gtest.h	/^    const string test_case_base_name;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_case_count	ts/ts.hpp	/^    int test_case_count; \/\/ the total number of test cases$/;"	m	class:cvtest::BaseTest
test_case_count_scale	ts/ts.hpp	/^    double test_case_count_scale;$/;"	m	struct:cvtest::TSParams
test_case_idx	ts/ts.hpp	/^    int test_case_idx;$/;"	m	class:cvtest::BadArgTest
test_case_idx	ts/ts.hpp	/^    int test_case_idx;$/;"	m	struct:cvtest::TestInfo
test_case_infos_	ts/ts_gtest.h	/^  TestCaseInfoContainer test_case_infos_;$/;"	m	class:testing::internal::ParameterizedTestCaseRegistry
test_case_name	ts/ts_gtest.h	/^  const char* test_case_name() const { return test_case_name_.c_str(); }$/;"	f	class:testing::TestInfo
test_case_name_	ts/ts_gtest.h	/^  const std::string test_case_name_;     \/\/ Test case name$/;"	m	class:testing::TestInfo
test_case_name_	ts/ts_gtest.h	/^  const string test_case_name_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
test_fn_	features2d/features2d.hpp	/^    PixelTestFn test_fn_;$/;"	m	class:cv::BriefDescriptorExtractor
test_index_checks	flann/index_testing.h	/^float test_index_checks(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_index_precision	flann/index_testing.h	/^float test_index_precision(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_index_precisions	flann/index_testing.h	/^void test_index_precisions(NNIndex<Distance>& index, const Matrix<typename Distance::ElementType>& inputData,$/;"	f	namespace:cvflann
test_indices_	ts/ts_gtest.h	/^  std::vector<int> test_indices_;$/;"	m	class:testing::TestCase
test_info_list	ts/ts_gtest.h	/^  const std::vector<TestInfo*>& test_info_list() const {$/;"	f	class:testing::TestCase
test_info_list	ts/ts_gtest.h	/^  std::vector<TestInfo*>& test_info_list() { return test_info_list_; }$/;"	f	class:testing::TestCase
test_info_list_	ts/ts_gtest.h	/^  std::vector<TestInfo*> test_info_list_;$/;"	m	class:testing::TestCase
test_mat	ts/ts.hpp	/^    vector<vector<Mat> > test_mat;$/;"	m	class:cvtest::ArrayTest
test_meta_factory	ts/ts_gtest.h	/^    const scoped_ptr<TestMetaFactoryBase<ParamType> > test_meta_factory;$/;"	m	struct:testing::internal::ParameterizedTestCaseInfo::TestInfo
test_part_results	ts/ts_gtest.h	/^  const std::vector<TestPartResult>& test_part_results() const {$/;"	f	class:testing::TestResult
test_part_results_	ts/ts_gtest.h	/^  std::vector<TestPartResult> test_part_results_;$/;"	m	class:testing::TestResult
test_properites_mutex_	ts/ts_gtest.h	/^  internal::Mutex test_properites_mutex_;$/;"	m	class:testing::TestResult
test_properties	ts/ts_gtest.h	/^  const std::vector<TestProperty>& test_properties() const {$/;"	f	class:testing::TestResult
test_properties_	ts/ts_gtest.h	/^  std::vector<TestProperty> test_properties_;$/;"	m	class:testing::TestResult
test_sample_idx	ml/ml.hpp	/^    CvMat* test_sample_idx;$/;"	m	class:CvMLData
testing	ts/ts_gtest.h	/^namespace testing {$/;"	n
testing_internal	ts/ts_gtest.h	/^namespace testing_internal {$/;"	n
tests_	ts/ts_gtest.h	/^  TestInfoContainer tests_;$/;"	m	class:testing::internal::ParameterizedTestCaseInfo
texCoord_	core/opengl_interop.hpp	/^    GlBuffer texCoord_;$/;"	m	class:cv::GlArrays
textureThreshold	calib3d/calib3d.hpp	/^    int textureThreshold;  \/\/ the disparity is only computed for pixels$/;"	m	struct:CvStereoBMState
tflag	ml/ml.hpp	/^    int tflag;$/;"	m	struct:CvDTreeTrainData
theta	legacy/legacy.hpp	/^    float theta;$/;"	m	class:cv::CvAffinePose
thetaMax	legacy/legacy.hpp	/^    double thetaMin, thetaMax;$/;"	m	class:cv::PatchGenerator
thetaMin	legacy/legacy.hpp	/^    double thetaMin, thetaMax;$/;"	m	class:cv::PatchGenerator
thickness	core/core_c.h	/^    int         thickness;    \/\/Qt: weight               \/* letters thickness *\/$/;"	m	struct:CvFont
thread_	ts/ts_gtest.h	/^  pthread_t thread_;  \/\/ The native thread object.$/;"	m	class:std::tr1::ThreadWithParam
thread_can_start_	ts/ts_gtest.h	/^  Notification* const thread_can_start_;$/;"	m	class:std::tr1::ThreadWithParam
thresh	core/types_c.h	/^    float   thresh[CV_MAX_DIM][2];  \/* For uniform histograms.                      *\/$/;"	m	struct:CvHistogram
thresh	gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_binary_func
thresh	gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_binary_inv_func
thresh	gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_to_zero_func
thresh	gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh	gpu/device/functional.hpp	/^        const T thresh;$/;"	m	struct:cv::gpu::device::thresh_trunc_func
thresh	videostab/global_motion.hpp	/^    float thresh; \/\/ max error to classify as inlier$/;"	m	struct:cv::videostab::RansacParams
thresh2	core/types_c.h	/^    float** thresh2;                \/* For non-uniform histograms.                  *\/$/;"	m	struct:CvHistogram
thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::StarAdjuster
thresh_	features2d/features2d.hpp	/^    double thresh_, init_thresh_, min_thresh_, max_thresh_;$/;"	m	class:cv::SurfAdjuster
thresh_	features2d/features2d.hpp	/^    int thresh_;$/;"	m	class:cv::FastAdjuster
thresh_binary_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_binary_func
thresh_binary_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_func(const thresh_binary_func& other)$/;"	f	struct:cv::gpu::device::thresh_binary_func
thresh_binary_func	gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_func(T thresh_, T maxVal_) : thresh(thresh_), maxVal(maxVal_) {}$/;"	f	struct:cv::gpu::device::thresh_binary_func
thresh_binary_func	gpu/device/functional.hpp	/^    template <typename T> struct thresh_binary_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_binary_inv_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_inv_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
thresh_binary_inv_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_binary_inv_func(const thresh_binary_inv_func& other)$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
thresh_binary_inv_func	gpu/device/functional.hpp	/^        __host__ __device__ __forceinline__ thresh_binary_inv_func(T thresh_, T maxVal_) : thresh(thresh_), maxVal(maxVal_) {}$/;"	f	struct:cv::gpu::device::thresh_binary_inv_func
thresh_binary_inv_func	gpu/device/functional.hpp	/^    template <typename T> struct thresh_binary_inv_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_to_zero_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
thresh_to_zero_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_func(const thresh_to_zero_func& other)$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
thresh_to_zero_func	gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_to_zero_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::gpu::device::thresh_to_zero_func
thresh_to_zero_func	gpu/device/functional.hpp	/^    template <typename T> struct thresh_to_zero_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_to_zero_inv_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_inv_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_to_zero_inv_func(const thresh_to_zero_inv_func& other)$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_to_zero_inv_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::gpu::device::thresh_to_zero_inv_func
thresh_to_zero_inv_func	gpu/device/functional.hpp	/^    template <typename T> struct thresh_to_zero_inv_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
thresh_trunc_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_trunc_func():unary_function<T, T>(){}$/;"	f	struct:cv::gpu::device::thresh_trunc_func
thresh_trunc_func	gpu/device/functional.hpp	/^        __device__ __forceinline__ thresh_trunc_func(const thresh_trunc_func& other)$/;"	f	struct:cv::gpu::device::thresh_trunc_func
thresh_trunc_func	gpu/device/functional.hpp	/^        explicit __host__ __device__ __forceinline__ thresh_trunc_func(T thresh_, T maxVal_ = 0) : thresh(thresh_) {(void)maxVal_;}$/;"	f	struct:cv::gpu::device::thresh_trunc_func
thresh_trunc_func	gpu/device/functional.hpp	/^    template <typename T> struct thresh_trunc_func : unary_function<T, T>$/;"	s	namespace:cv::gpu::device
threshold	features2d/features2d.hpp	/^    CV_PROP_RW int threshold;$/;"	m	class:cv::BRISK
threshold	features2d/features2d.hpp	/^    int threshold;$/;"	m	class:cv::FastFeatureDetector
threshold	gpu/gpu.hpp	/^    int threshold;$/;"	m	class:cv::gpu::FAST_GPU
threshold	legacy/legacy.hpp	/^    int threshold;$/;"	m	class:cv::LDetector
threshold	objdetect/objdetect.hpp	/^            float threshold; \/\/ for ordered features only$/;"	m	struct:cv::CascadeClassifier::Data::DTreeNode
threshold	objdetect/objdetect.hpp	/^            float threshold;$/;"	m	struct:cv::CascadeClassifier::Data::Stage
threshold	objdetect/objdetect.hpp	/^    float threshold;$/;"	m	struct:CvHaarStageClassifier
threshold	objdetect/objdetect.hpp	/^    float* threshold;$/;"	m	struct:CvHaarClassifier
thresholdStep	features2d/features2d.hpp	/^      CV_PROP_RW float thresholdStep;$/;"	m	struct:cv::SimpleBlobDetector::Params
threshold_L2hys	gpu/gpu.hpp	/^    double threshold_L2hys;$/;"	m	struct:cv::gpu::HOGDescriptor
threshold_L2hys	ocl/ocl.hpp	/^            double threshold_L2hys;$/;"	m	struct:cv::ocl::HOGDescriptor
tileInfo	core/types_c.h	/^    struct _IplTileInfo *tileInfo;  \/* "           " *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplTileInfo
tilted	objdetect/objdetect.hpp	/^    int tilted;$/;"	m	struct:CvHaarFeature
timeLimit	ts/ts_perf.hpp	/^    int64 timeLimit;$/;"	m	class:perf::TestBase
timeLimitDefault	ts/ts_perf.hpp	/^    static int64 timeLimitDefault;$/;"	m	class:perf::TestBase
times	ts/ts_perf.hpp	/^    TimeVector times;$/;"	m	class:perf::TestBase
tl	core/operations.hpp	/^template<typename _Tp> inline Point_<_Tp> Rect_<_Tp>::tl() const { return Point_<_Tp>(x,y); }$/;"	f	class:cv::Rect_
tls_	stitching/detail/seam_finders.hpp	/^    std::vector<Point> tls_, brs_;$/;"	m	class:cv::detail::DpSeamFinder
tmpCorners_	gpu/gpu.hpp	/^    GpuMat tmpCorners_;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
to	stitching/detail/util.hpp	/^    int from, to;$/;"	m	struct:cv::detail::GraphEdge
top	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Adjacent
top	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Interp
top	contrib/contrib.hpp	/^        int top, bottom,left,right;$/;"	m	class:cv::LogPolar_Overlapping
top	core/types_c.h	/^    CvMemBlock* top;              \/* Current memory block - top of the stack. *\/$/;"	m	struct:CvMemStorage
top	core/types_c.h	/^    CvMemBlock* top;$/;"	m	struct:CvMemStoragePos
topLeft	imgproc/imgproc.hpp	/^    Point2f topLeft;$/;"	m	class:cv::Subdiv2D
top_	core/opengl_interop.hpp	/^    double top_;$/;"	m	class:cv::GlCamera
topline	legacy/compat.hpp	/^    float*  topline;$/;"	m	struct:_CvPixelPosition32f
topline	legacy/compat.hpp	/^    schar*  topline;$/;"	m	struct:_CvPixelPosition8s
topline	legacy/compat.hpp	/^    uchar*  topline;       \/* pointer to the start of the top pixel line       *\/$/;"	m	struct:_CvPixelPosition8u
total	core/mat.hpp	/^inline size_t Mat::total() const$/;"	f	class:cv::Mat
total	ml/ml.hpp	/^    int total;$/;"	m	class:CvKNearest
totalCost	flann/autotuned_index.h	/^        float totalCost;$/;"	m	struct:cvflann::AutotunedIndex::CostData
totalTime	ts/ts_perf.hpp	/^    int64 totalTime;$/;"	m	class:perf::TestBase
total_class_count	ml/ml.hpp	/^    int total_class_count;$/;"	m	class:CvMLData
total_num_matches_	stitching/detail/motion_estimators.hpp	/^    int total_num_matches_;$/;"	m	class:cv::detail::BundleAdjusterBase
tr1	ts/ts_gtest.h	/^namespace tr1 {$/;"	n	namespace:std
trace	core/operations.hpp	/^double trace(const Matx<_Tp, m, n>& a)$/;"	f	namespace:cv
trace	gpu/gpu.hpp	/^    GpuMat det, trace;$/;"	m	class:cv::gpu::SURF_GPU
trace	ocl/ocl.hpp	/^            oclMat det, trace;$/;"	m	class:cv::ocl::SURF_OCL
trackBuf1	gpu/gpu.hpp	/^    GpuMat trackBuf1, trackBuf2;$/;"	m	struct:cv::gpu::CannyBuf
trackBuf1	ocl/ocl.hpp	/^            oclMat trackBuf1, trackBuf2;$/;"	m	struct:cv::ocl::CannyBuf
trackBuf2	gpu/gpu.hpp	/^    GpuMat trackBuf1, trackBuf2;$/;"	m	struct:cv::gpu::CannyBuf
trackBuf2	ocl/ocl.hpp	/^            oclMat trackBuf1, trackBuf2;$/;"	m	struct:cv::ocl::CannyBuf
trackbox	contrib/hybridtracker.hpp	/^    RotatedRect trackbox;$/;"	m	class:cv::CvHybridTracker
trackedObjects	contrib/detection_based_tracker.hpp	/^        std::vector<TrackedObject> trackedObjects;$/;"	m	class:DetectionBasedTracker
tracking_type	contrib/hybridtracker.hpp	/^    int tracking_type;$/;"	m	struct:cv::CvMeanShiftTrackerParams
trainDescCollection	features2d/features2d.hpp	/^    vector<Mat> trainDescCollection;$/;"	m	class:cv::DescriptorMatcher
trainDescCollection	gpu/gpu.hpp	/^    std::vector<GpuMat> trainDescCollection;$/;"	m	class:cv::gpu::BruteForceMatcher_GPU_base
trainDescCollection	ocl/ocl.hpp	/^            std::vector<oclMat> trainDescCollection;$/;"	m	class:cv::ocl::BruteForceMatcher_OCL_base
trainIdx	features2d/features2d.hpp	/^    CV_PROP_RW int trainIdx; \/\/ train descriptor index$/;"	m	struct:cv::DMatch
trainImagesList	legacy/legacy.hpp	/^        string trainImagesList;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
trainLabels	ml/ml.hpp	/^    Mat trainLabels;$/;"	m	class:cv::EM
trainLogLikelihoods	ml/ml.hpp	/^    Mat trainLogLikelihoods;$/;"	m	class:cv::EM
trainPath	legacy/legacy.hpp	/^        string trainPath;$/;"	m	class:cv::OneWayDescriptorMatcher::Params
trainPointCollection	features2d/features2d.hpp	/^    KeyPointCollection trainPointCollection;$/;"	m	class:cv::GenericDescriptorMatcher
trainProbs	ml/ml.hpp	/^    Mat trainProbs;$/;"	m	class:cv::EM
trainSamples	ml/ml.hpp	/^    Mat trainSamples;$/;"	m	class:cv::EM
train_data	ml/ml.hpp	/^    const CvMat* train_data;$/;"	m	struct:CvDTreeTrainData
train_method	ml/ml.hpp	/^    CV_PROP_RW int train_method;$/;"	m	struct:CvANN_MLP_TrainParams
train_sample_count	ml/ml.hpp	/^    int train_sample_count;$/;"	m	class:CvMLData
train_sample_idx	ml/ml.hpp	/^    CvMat* train_sample_idx;$/;"	m	class:CvMLData
train_sample_part	ml/ml.hpp	/^    } train_sample_part;$/;"	m	struct:CvTrainTestSplit	typeref:union:CvTrainTestSplit::__anon259
train_sample_part_mode	ml/ml.hpp	/^    int train_sample_part_mode;$/;"	m	struct:CvTrainTestSplit
trainingDefaults	contrib/openfabmap.hpp	/^    vector<double> trainingDefaults;$/;"	m	class:cv::of2::FabMap2
trainingImgDescriptors	contrib/openfabmap.hpp	/^    vector<Mat> trainingImgDescriptors;$/;"	m	class:cv::of2::FabMap
trainingInvertedMap	contrib/openfabmap.hpp	/^    map<int, vector<int> > trainingInvertedMap;$/;"	m	class:cv::of2::FabMap2
transP	legacy/legacy.hpp	/^    float*  transP;\/*transition probab. matrices for states *\/$/;"	m	struct:CvEHMM
transVect	legacy/legacy.hpp	/^    float   transVect[3]; \/* rotation matrix and transition vector relatively$/;"	m	struct:CvCamera
transVector	legacy/legacy.hpp	/^    float transVector[3];$/;"	m	struct:CvStereoCamera
transform	gpu/device/transform.hpp	/^    static inline void transform(PtrStepSz<T1> src1, PtrStepSz<T2> src2, PtrStepSz<D> dst, BinOp op, const Mask& mask, cudaStream_t stream)$/;"	f	namespace:cv::gpu::device
transform	gpu/device/transform.hpp	/^    static inline void transform(PtrStepSz<T> src, PtrStepSz<D> dst, UnOp op, const Mask& mask, cudaStream_t stream)$/;"	f	namespace:cv::gpu::device
transform	gpu/device/warp.hpp	/^        static __device__ __forceinline__ OutIt transform(InIt beg, InIt end, OutIt out, UnOp op)$/;"	f	struct:cv::gpu::device::Warp
transform	gpu/device/warp.hpp	/^        static __device__ __forceinline__ OutIt transform(InIt1 beg1, InIt1 end1, InIt2 beg2, OutIt out, BinOp op)$/;"	f	struct:cv::gpu::device::Warp
transformSimple	gpu/device/detail/transform_detail.hpp	/^        __global__ static void transformSimple(const PtrStepSz<T> src, PtrStep<D> dst, const Mask mask, const UnOp op)$/;"	f	namespace:cv::gpu::device::transform_detail
transformSimple	gpu/device/detail/transform_detail.hpp	/^        static __global__ void transformSimple(const PtrStepSz<T1> src1, const PtrStep<T2> src2, PtrStep<D> dst,$/;"	f	namespace:cv::gpu::device::transform_detail
transformSmart	gpu/device/detail/transform_detail.hpp	/^        static __global__ void transformSmart(const PtrStepSz<T1> src1_, const PtrStep<T2> src2_, PtrStep<D> dst_,$/;"	f	namespace:cv::gpu::device::transform_detail
transformSmart	gpu/device/detail/transform_detail.hpp	/^        static __global__ void transformSmart(const PtrStepSz<T> src_, PtrStep<D> dst_, const Mask mask, const UnOp op)$/;"	f	namespace:cv::gpu::device::transform_detail
transform_detail	gpu/device/detail/transform_detail.hpp	/^    namespace transform_detail$/;"	n	namespace:cv::gpu::device
transformedFrame1_	videostab/inpainting.hpp	/^    Mat frame1_, transformedFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
transformedGrayFrame1_	videostab/inpainting.hpp	/^    Mat_<uchar> grayFrame_, transformedGrayFrame1_;$/;"	m	class:cv::videostab::MotionInpainter
transformedMask1_	videostab/inpainting.hpp	/^    Mat_<uchar> mask1_, transformedMask1_;$/;"	m	class:cv::videostab::MotionInpainter
transitionMatrix	video/tracking.hpp	/^    Mat transitionMatrix;   \/\/!< state transition matrix (A)$/;"	m	class:cv::KalmanFilter
transition_matrix	video/tracking.hpp	/^    CvMat* transition_matrix;   \/* state transition matrix (A) *\/$/;"	m	struct:CvKalman
translationAndScale2dMotionStd	videostab/global_motion.hpp	/^    static RansacParams translationAndScale2dMotionStd() { return RansacParams(3, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
translationMotionStd	videostab/global_motion.hpp	/^    static RansacParams translationMotionStd() { return RansacParams(2, 0.5f, 0.5f, 0.99f); }$/;"	f	struct:cv::videostab::RansacParams
tree_error	ml/ml.hpp	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode
tree_iterator	core/core_c.h	/^CVAPI(void*) cvNextTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_iterator	core/core_c.h	/^CVAPI(void*) cvPrevTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_risk	ml/ml.hpp	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode
tree_roots_	flann/kdtree_index.h	/^    NodePtr* tree_roots_;$/;"	m	class:cvflann::KDTreeIndex
tree_storage	ml/ml.hpp	/^    CvMemStorage* tree_storage;$/;"	m	struct:CvDTreeTrainData
trees	ml/ml.hpp	/^    CvForestTree** trees;$/;"	m	class:CvRTrees
trees_	flann/hierarchical_clustering_index.h	/^    int trees_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
trees_	flann/kdtree_index.h	/^    int trees_;$/;"	m	class:cvflann::KDTreeIndex
trees_	legacy/legacy.hpp	/^    vector<RandomizedTree> trees_;$/;"	m	class:cv::RTreeClassifier
trimRatio	videostab/stabilizer.hpp	/^    float trimRatio() const { return trimRatio_; }$/;"	f	class:cv::videostab::StabilizerBase
trimRatio_	videostab/stabilizer.hpp	/^    float trimRatio_;$/;"	m	class:cv::videostab::StabilizerBase
true_type	ts/ts_gtest.h	/^typedef bool_constant<true> true_type;$/;"	t	namespace:std::tr1
truncate_pruned_tree	ml/ml.hpp	/^    CV_PROP_RW bool  truncate_pruned_tree;$/;"	m	struct:CvDTreeParams
trySmallerWindows	calib3d/calib3d.hpp	/^    int trySmallerWindows; \/\/ if 1, the results may be more accurate,$/;"	m	struct:CvStereoBMState
ts	ts/ts.hpp	/^    TS* ts;$/;"	m	class:cvtest::BaseTest
tsDisabled	contrib/contrib.hpp	/^        tsDisabled      = 10$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsNone	contrib/contrib.hpp	/^        tsNone          = 0,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsSearching	contrib/contrib.hpp	/^        tsSearching     = 1,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsSetWindow	contrib/contrib.hpp	/^        tsSetWindow     = 3,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tsTracking	contrib/contrib.hpp	/^        tsTracking      = 2,$/;"	e	enum:CvFuzzyMeanShiftTracker::TrackingState
tuple	ts/ts_gtest.h	/^  tuple() : f0_(), f1_(), f2_(), f3_(), f4_(), f5_(), f6_(), f7_(), f8_(),$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^  tuple() {}$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^  tuple(const tuple& \/* t *\/)  {}$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^  tuple(const tuple& t) : f0_(t.f0_), f1_(t.f1_), f2_(t.f2_), f3_(t.f3_),$/;"	f	class:std::tr1::tuple
tuple	ts/ts_gtest.h	/^class tuple {$/;"	c	namespace:std::tr1
tuple	ts/ts_gtest.h	/^class tuple<> {$/;"	c	namespace:std::tr1
tuple_element	ts/ts_gtest.h	/^struct tuple_element {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_0_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_10_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_1_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_2_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_3_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_4_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_5_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_6_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_7_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_8_TUPLE_(T)> {$/;"	s	namespace:std::tr1
tuple_size	ts/ts_gtest.h	/^struct tuple_size<GTEST_9_TUPLE_(T)> {$/;"	s	namespace:std::tr1
type	core/gpumat.hpp	/^    inline int GpuMat::type() const$/;"	f	class:cv::gpu::GpuMat
type	core/mat.hpp	/^inline int Mat::type() const { return CV_MAT_TYPE(flags); }$/;"	f	class:cv::Mat
type	core/mat.hpp	/^inline int SparseMat::type() const$/;"	f	class:cv::SparseMat
type	core/mat.hpp	/^template<typename _Tp> inline int Mat_<_Tp>::type() const$/;"	f	class:cv::Mat_
type	core/mat.hpp	/^template<typename _Tp> inline int SparseMat_<_Tp>::type() const$/;"	f	class:cv::SparseMat_
type	core/opengl_interop.hpp	/^    inline int type() const { return type_; }$/;"	f	class:cv::GlBuffer
type	core/opengl_interop.hpp	/^    inline int type() const { return type_; }$/;"	f	class:cv::GlTexture
type	core/operations.hpp	/^    int type() const { return DataType<_Tp>::type; }$/;"	f	class:cv::Vector
type	core/operations.hpp	/^inline int FileNode::type() const { return !node ? NONE : (node->tag & TYPE_MASK); }$/;"	f	class:cv::FileNode
type	core/operations.hpp	/^template<typename _Tp> inline int Seq<_Tp>::type() const$/;"	f	class:cv::Seq
type	core/types_c.h	/^    int     type;$/;"	m	struct:CvHistogram
type	core/types_c.h	/^    int    type;  \/* may be combination of$/;"	m	struct:CvTermCriteria
type	core/types_c.h	/^    int type;$/;"	m	struct:CvMat
type	core/types_c.h	/^    int type;$/;"	m	struct:CvMatND
type	core/types_c.h	/^    int type;$/;"	m	struct:CvSparseMat
type	flann/any.h	/^    const std::type_info& type() const$/;"	f	struct:cvflann::any
type	flann/any.h	/^    typedef big_any_policy<T> type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	flann/any.h	/^    typedef small_any_policy<T*> type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	flann/any.h	/^    typedef void type;$/;"	t	struct:cvflann::anyimpl::choose_policy
type	flann/any.h	/^    virtual const std::type_info& type() { return typeid(T); }$/;"	f	struct:cvflann::anyimpl::typed_base_any_policy
type	flann/flann.hpp	/^template <> struct CvType<char> { static int type() { return CV_8S; } };$/;"	f	struct:cv::flann::CvType
type	flann/flann.hpp	/^template <> struct CvType<double> { static int type() { return CV_64F; } };$/;"	f	struct:cv::flann::CvType
type	flann/flann.hpp	/^template <> struct CvType<float> { static int type() { return CV_32F; } };$/;"	f	struct:cv::flann::CvType
type	flann/flann.hpp	/^template <> struct CvType<int> { static int type() { return CV_32S; } };$/;"	f	struct:cv::flann::CvType
type	flann/flann.hpp	/^template <> struct CvType<short> { static int type() { return CV_16S; } };$/;"	f	struct:cv::flann::CvType
type	flann/flann.hpp	/^template <> struct CvType<unsigned char> { static int type() { return CV_8U; } };$/;"	f	struct:cv::flann::CvType
type	flann/flann.hpp	/^template <> struct CvType<unsigned short> { static int type() { return CV_16U; } };$/;"	f	struct:cv::flann::CvType
type	flann/matrix.h	/^    flann_datatype_t type;$/;"	m	class:cvflann::UntypedMatrix
type	flann/matrix.h	/^    typedef T type;$/;"	t	class:cvflann::Matrix
type	flann/saving.h	/^struct Datatype<char> { static flann_datatype_t type() { return FLANN_INT8; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<double> { static flann_datatype_t type() { return FLANN_FLOAT64; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<float> { static flann_datatype_t type() { return FLANN_FLOAT32; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<int> { static flann_datatype_t type() { return FLANN_INT32; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<short> { static flann_datatype_t type() { return FLANN_INT16; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<unsigned char> { static flann_datatype_t type() { return FLANN_UINT8; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<unsigned int> { static flann_datatype_t type() { return FLANN_UINT32; } };$/;"	f	struct:cvflann::Datatype
type	flann/saving.h	/^struct Datatype<unsigned short> { static flann_datatype_t type() { return FLANN_UINT16; } };$/;"	f	struct:cvflann::Datatype
type	gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::PointerTraits
type	gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::ReferenceTraits
type	gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnConst
type	gpu/device/detail/type_traits_detail.hpp	/^            typedef U type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnVolatile
type	gpu/device/detail/type_traits_detail.hpp	/^            typedef U& type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnConst
type	gpu/device/detail/type_traits_detail.hpp	/^            typedef U& type;$/;"	t	struct:cv::gpu::device::type_traits_detail::UnVolatile
type	gpu/device/detail/type_traits_detail.hpp	/^            typedef void type;$/;"	t	struct:cv::gpu::device::type_traits_detail::PointerTraits
type	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct AddParameterType<void> { typedef void type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::AddParameterType
type	gpu/device/detail/type_traits_detail.hpp	/^        template <bool, typename T1, typename T2> struct Select { typedef T1 type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::Select
type	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType { typedef const U& type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::AddParameterType
type	gpu/device/detail/type_traits_detail.hpp	/^        template <class U> struct AddParameterType<U&> { typedef U& type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::AddParameterType
type	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T1, typename T2> struct Select<false, T1, T2> { typedef T2 type; };$/;"	t	struct:cv::gpu::device::type_traits_detail::Select
type	gpu/device/limits.hpp	/^        typedef T type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef bool type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef char type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef double type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef float type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef int type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef long type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef short type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef unsigned char type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef unsigned int type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef unsigned long type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	gpu/device/limits.hpp	/^        typedef unsigned short type;$/;"	t	struct:cv::gpu::device::numeric_limits
type	imgproc/imgproc.hpp	/^        int type;$/;"	m	struct:cv::Subdiv2D::Vertex
type	legacy/legacy.hpp	/^    int type() const { return matrix ? CV_MAT_TYPE(matrix->type) : 0; }$/;"	f	class:CvMatrix
type	ml/ml.hpp	/^    int type;$/;"	m	struct:CvVectors
type	ocl/matrix_operations.hpp	/^        inline int oclMat::type() const$/;"	f	class:cv::ocl::oclMat
type	ts/ts_gtest.h	/^      T12> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16, T17> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15, T16> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14, T15> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13, T14> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T13> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21, T22> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20, T21> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19, T20> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18, T19> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17, T18> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16, T17> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15, T16> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14, T15> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T14> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T26> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30, T31> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29, T30> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28, T29> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27, T28> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T27> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39, T40> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38, T39> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37, T38> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36, T37> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35, T36> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34, T35> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33, T34> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32, T33> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31, T32> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30, T31> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29, T30> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28, T29> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T28> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T40> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49, T50>::type type;$/;"	t	struct:testing::internal::TypeList
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44, T45> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43, T44> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42, T43> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41, T42> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^      T41> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49, T50> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48, T49> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47, T48> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46, T47> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45, T46> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44, T45> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43, T44> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42, T43> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^      T42> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^    TestPartResult::Type const type;$/;"	m	class:testing::internal::AssertHelper::AssertHelperData::TestPartResult
type	ts/ts_gtest.h	/^    typedef Tmpl<T> type;$/;"	t	struct:testing::internal::TemplateSel::Bind
type	ts/ts_gtest.h	/^  Type type() const { return type_; }$/;"	f	class:testing::TestPartResult
type	ts/ts_gtest.h	/^  typedef T0 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T1 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T2 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T3 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T4 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T5 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T6 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T7 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T8 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef T9 type;$/;"	t	struct:std::tr1::gtest_internal::TupleElement
type	ts/ts_gtest.h	/^  typedef Templates0 type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates1<T1> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates2<T1, T2> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates3<T1, T2, T3> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates4<T1, T2, T3, T4> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Templates9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::internal::Templates
type	ts/ts_gtest.h	/^  typedef Types1<T> type;$/;"	t	struct:testing::internal::TypeList
type	ts/ts_gtest.h	/^  typedef bool type;$/;"	t	struct:testing::internal::AssertTypeEq
type	ts/ts_gtest.h	/^  typedef bool_constant<bool_value> type;$/;"	t	struct:std::tr1::bool_constant
type	ts/ts_gtest.h	/^  typedef internal::Types0 type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types1<T1> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types2<T1, T2> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types3<T1, T2, T3> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types4<T1, T2, T3, T4> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types5<T1, T2, T3, T4, T5> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types6<T1, T2, T3, T4, T5, T6> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types7<T1, T2, T3, T4, T5, T6, T7> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types8<T1, T2, T3, T4, T5, T6, T7, T8> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef internal::Types9<T1, T2, T3, T4, T5, T6, T7, T8, T9> type;$/;"	t	struct:testing::Types
type	ts/ts_gtest.h	/^  typedef typename RemoveConst<T>::type type[N];$/;"	t	struct:testing::internal::RemoveConst
type	ts/ts_gtest.h	/^struct AddRef { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	ts/ts_gtest.h	/^struct AddRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::AddRef
type	ts/ts_gtest.h	/^struct AddReference { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	ts/ts_gtest.h	/^struct AddReference<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::AddReference
type	ts/ts_gtest.h	/^struct ByRef { typedef const T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	ts/ts_gtest.h	/^struct ByRef<T&> { typedef T& type; };  \/\/ NOLINT$/;"	t	struct:std::tr1::gtest_internal::ByRef
type	ts/ts_gtest.h	/^struct RemoveConst { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	ts/ts_gtest.h	/^struct RemoveConst<const T> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveConst
type	ts/ts_gtest.h	/^struct RemoveReference { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	ts/ts_gtest.h	/^struct RemoveReference<T&> { typedef T type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::RemoveReference
type	ts/ts_gtest.h	/^template<> struct EnableIf<true> { typedef void type; };  \/\/ NOLINT$/;"	t	struct:testing::internal::EnableIf
type_	core/opengl_interop.hpp	/^    int type_;$/;"	m	class:cv::GlBuffer
type_	core/opengl_interop.hpp	/^    int type_;$/;"	m	class:cv::GlTexture
type_	ts/ts_gtest.h	/^  Type type_;$/;"	m	class:testing::TestPartResult
type_name	core/types_c.h	/^    const char* type_name;$/;"	m	struct:CvTypeInfo
type_param	ts/ts_gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestCase
type_param	ts/ts_gtest.h	/^  const char* type_param() const {$/;"	f	class:testing::TestInfo
type_param_	ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestCase
type_param_	ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> type_param_;$/;"	m	class:testing::TestInfo
type_traits_detail	gpu/device/detail/type_traits_detail.hpp	/^    namespace type_traits_detail$/;"	n	namespace:cv::gpu::device
typed_base_any_policy	flann/any.h	/^struct typed_base_any_policy : base_any_policy$/;"	s	namespace:cvflann::anyimpl
u	contrib/contrib.hpp	/^            int u;$/;"	m	struct:cv::LogPolar_Adjacent::pixel
u	core/types_c.h	/^    uint64 u;$/;"	m	union:Cv64suf
u	core/types_c.h	/^    unsigned u;$/;"	m	union:Cv32suf
u	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
u	legacy/legacy.hpp	/^    } u;$/;"	m	struct:CvEHMM	typeref:union:CvEHMM::__anon7
u	ml/ml.hpp	/^    unsigned short* u;$/;"	m	struct:CvPair16u32s
u2	gpu/gpu.hpp	/^    GpuMat u, d, l, r, u2, d2, l2, r2;$/;"	m	class:cv::gpu::StereoBeliefPropagation
uPyr_	gpu/gpu.hpp	/^    vector<GpuMat> uPyr_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
uPyr_	ocl/ocl.hpp	/^            oclMat uPyr_[2];$/;"	m	class:cv::ocl::PyrLKOpticalFlow
u_	ts/ts_gtest.h	/^  FloatingPointUnion u_;$/;"	m	class:testing::internal::FloatingPoint
uchar	core/types_c.h	/^   typedef unsigned char uchar;$/;"	t
uchar	gpu/device/common.hpp	/^        typedef unsigned char uchar;$/;"	t	namespace:cv::gpu::device
uint	gpu/device/common.hpp	/^        typedef unsigned int uint;$/;"	t	namespace:cv::gpu::device
uint32_t	flann/dist.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint64	core/types_c.h	/^   typedef uint64_t uint64;$/;"	t
uint64	core/types_c.h	/^   typedef unsigned __int64 uint64;$/;"	t
uint64_t	flann/dist.h	/^typedef unsigned __int64 uint64_t;$/;"	t
unary_function	gpu/device/functional.hpp	/^    template<typename Argument, typename Result> struct unary_function : public std::unary_function<Argument, Result> {};$/;"	s	namespace:cv::gpu::device
unary_negate	gpu/device/functional.hpp	/^        __device__ __forceinline__ unary_negate() : unary_function<typename Predicate::argument_type, bool>(){}$/;"	f	struct:cv::gpu::device::unary_negate
unary_negate	gpu/device/functional.hpp	/^        __device__ __forceinline__ unary_negate(const unary_negate& other) : unary_function<typename Predicate::argument_type, bool>(){}$/;"	f	struct:cv::gpu::device::unary_negate
unary_negate	gpu/device/functional.hpp	/^      explicit __host__ __device__ __forceinline__ unary_negate(const Predicate& p) : pred(p) {}$/;"	f	struct:cv::gpu::device::unary_negate
unary_negate	gpu/device/functional.hpp	/^    template <typename Predicate> struct unary_negate : unary_function<typename Predicate::argument_type, bool>$/;"	s	namespace:cv::gpu::device
undistImg	legacy/legacy.hpp	/^    CvMat*  undistImg;$/;"	m	class:CvCalibFilter
undistMap	legacy/legacy.hpp	/^    CvMat*  undistMap[MAX_CAMERAS][2];$/;"	m	class:CvCalibFilter
uniform	core/operations.hpp	/^inline double RNG::uniform(double a, double b) { return ((double)*this)*(b - a) + a; }$/;"	f	class:cv::RNG
uniform	core/operations.hpp	/^inline float RNG::uniform(float a, float b) { return ((float)*this)*(b - a) + a; }$/;"	f	class:cv::RNG
uniform	core/operations.hpp	/^inline int RNG::uniform(int a, int b) { return a == b ? a : (int)(next()%(b - a) + a); }$/;"	f	class:cv::RNG
unionBr_	stitching/detail/seam_finders.hpp	/^    Point unionTl_, unionBr_;$/;"	m	class:cv::detail::DpSeamFinder
unionSize_	stitching/detail/seam_finders.hpp	/^    Size unionSize_;$/;"	m	class:cv::detail::DpSeamFinder
unionTl_	stitching/detail/seam_finders.hpp	/^    Point unionTl_, unionBr_;$/;"	m	class:cv::detail::DpSeamFinder
uniquenessRatio	calib3d/calib3d.hpp	/^    CV_PROP_RW int uniquenessRatio;$/;"	m	class:cv::StereoSGBM
uniquenessRatio	calib3d/calib3d.hpp	/^    int uniquenessRatio;   \/\/ accept the computed disparity d* only if$/;"	m	struct:CvStereoBMState
unregister	flann/object_factory.h	/^    bool unregister(UniqueIdType id)$/;"	f	class:cvflann::ObjectFactory
unroll	gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T& src, D& dst, const Mask& mask, UnOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
unroll	gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T& src, D& dst, const Mask& mask, const UnOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
unroll	gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T1& src1, const T2& src2, D& dst, const Mask& mask, BinOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
unroll	gpu/device/detail/transform_detail.hpp	/^            static __device__ __forceinline__ void unroll(const T1& src1, const T2& src2, D& dst, const Mask& mask, const BinOp& op, int x_shifted, int y)$/;"	f	struct:cv::gpu::device::transform_detail::OpUnroller
up_	core/opengl_interop.hpp	/^    Point3d up_;$/;"	m	class:cv::GlCamera
update	videostab/deblurring.hpp	/^    virtual void update() {}$/;"	f	class:cv::videostab::DeblurerBase
update	videostab/inpainting.hpp	/^    virtual void update() {}$/;"	f	class:cv::videostab::InpainterBase
update	videostab/motion_stabilizing.hpp	/^    virtual void update() {}$/;"	f	class:cv::videostab::MotionFilterBase
updateBackgroundModel	gpu/gpu.hpp	/^    bool updateBackgroundModel;$/;"	m	class:cv::gpu::GMG_GPU
updateBackgroundModel	video/background_segm.hpp	/^    bool updateBackgroundModel;$/;"	m	class:cv::BackgroundSubtractorGMG
upper_bound_n	ml/ml.hpp	/^    double upper_bound_n;$/;"	m	struct:CvSVMSolutionInfo
upper_bound_p	ml/ml.hpp	/^    double upper_bound_p;$/;"	m	struct:CvSVMSolutionInfo
upright	gpu/gpu.hpp	/^    bool upright;$/;"	m	class:cv::gpu::SURF_GPU
upright	legacy/compat.hpp	/^    int    upright;$/;"	m	struct:CvSURFParams
upright	nonfree/features2d.hpp	/^    CV_PROP_RW bool upright;$/;"	m	class:cv::SURF
upright	ocl/ocl.hpp	/^            bool upright;$/;"	m	class:cv::ocl::SURF_OCL
usage	core/opengl_interop.hpp	/^    inline Usage usage() const { return usage_; }$/;"	f	class:cv::GlBuffer
usage_	core/opengl_interop.hpp	/^    Usage usage_;$/;"	m	class:cv::GlBuffer
useAVCaptureVideoPreviewLayer	highgui/cap_ios.h	/^@property (nonatomic, assign) BOOL useAVCaptureVideoPreviewLayer;$/;"	v
useHarrisDetector	features2d/features2d.hpp	/^    bool useHarrisDetector;$/;"	m	class:cv::GFTTDetector
useHarrisDetector	gpu/gpu.hpp	/^    bool useHarrisDetector;$/;"	m	class:cv::gpu::GoodFeaturesToTrackDetector_GPU
useInitialFlow	gpu/gpu.hpp	/^    bool useInitialFlow;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
useInitialFlow	ocl/ocl.hpp	/^            bool useInitialFlow;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
useLookAtParams_	core/opengl_interop.hpp	/^    bool useLookAtParams_;$/;"	m	class:cv::GlCamera
use_1se_rule	ml/ml.hpp	/^    CV_PROP_RW bool  use_1se_rule;$/;"	m	struct:CvDTreeParams
use_local_init_data_cost	gpu/gpu.hpp	/^    bool use_local_init_data_cost;$/;"	m	class:cv::gpu::StereoConstantSpaceBP
use_optimized	ts/ts.hpp	/^    bool use_optimized;$/;"	m	struct:cvtest::TSParams
use_surrogates	ml/ml.hpp	/^    CV_PROP_RW bool  use_surrogates;$/;"	m	struct:CvDTreeParams
usedMemory	flann/allocator.h	/^    int     usedMemory;$/;"	m	class:cvflann::PooledAllocator
usedMemory	flann/autotuned_index.h	/^    virtual int usedMemory() const$/;"	f	class:cvflann::AutotunedIndex
usedMemory	flann/composite_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::CompositeIndex
usedMemory	flann/flann_base.hpp	/^    virtual int usedMemory() const$/;"	f	class:cvflann::Index
usedMemory	flann/hierarchical_clustering_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
usedMemory	flann/kdtree_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KDTreeIndex
usedMemory	flann/kdtree_single_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KDTreeSingleIndex
usedMemory	flann/kmeans_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::KMeansIndex
usedMemory	flann/linear_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::LinearIndex
usedMemory	flann/lsh_index.h	/^    int usedMemory() const$/;"	f	class:cvflann::LshIndex
user_block_size	gpu/gpu.hpp	/^    Size user_block_size;$/;"	m	struct:cv::gpu::ConvolveBuf
user_block_size	gpu/gpu.hpp	/^    Size user_block_size;$/;"	m	struct:cv::gpu::MatchTemplateBuf
user_block_size	ocl/ocl.hpp	/^            Size user_block_size;$/;"	m	struct:cv::ocl::MatchTemplateBuf
user_data	contrib/contrib.hpp	/^        void* user_data;$/;"	m	class:cv::LevMarqSparse
ushort	core/types_c.h	/^   typedef unsigned short ushort;$/;"	t
ushort	gpu/device/common.hpp	/^        typedef unsigned short ushort;$/;"	t	namespace:cv::gpu::device
utility_detail	gpu/device/detail/reduction_detail.hpp	/^    namespace utility_detail$/;"	n	namespace:cv::gpu::device
v	contrib/contrib.hpp	/^            int v;$/;"	m	struct:cv::LogPolar_Adjacent::pixel
v	legacy/legacy.hpp	/^    uchar          v[3];$/;"	m	struct:CvBGPixelCStatTable
v	legacy/legacy.hpp	/^    uchar          v[6];$/;"	m	struct:CvBGPixelCCStatTable
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray10
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray11
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray12
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray13
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray14
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray15
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray16
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray17
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray18
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray19
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray20
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray21
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray22
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray23
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray24
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray25
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray26
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray27
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray28
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray29
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray30
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray31
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray32
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray33
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray34
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray35
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray36
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray37
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray38
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray39
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray40
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray41
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray42
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray43
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray44
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray45
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray46
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray47
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray48
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray49
v10_	ts/ts_gtest.h	/^  const T10 v10_;$/;"	m	class:testing::internal::ValueArray50
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray11
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray12
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray13
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray14
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray15
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray16
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray17
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray18
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray19
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray20
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray21
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray22
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray23
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray24
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray25
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray26
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray27
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray28
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray29
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray30
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray31
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray32
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray33
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray34
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray35
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray36
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray37
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray38
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray39
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray40
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray41
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray42
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray43
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray44
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray45
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray46
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray47
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray48
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray49
v11_	ts/ts_gtest.h	/^  const T11 v11_;$/;"	m	class:testing::internal::ValueArray50
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray12
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray13
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray14
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray15
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray16
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray17
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray18
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray19
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray20
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray21
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray22
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray23
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray24
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray25
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray26
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray27
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray28
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray29
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray30
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray31
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray32
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray33
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray34
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray35
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray36
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray37
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray38
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray39
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray40
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray41
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray42
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray43
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray44
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray45
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray46
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray47
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray48
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray49
v12_	ts/ts_gtest.h	/^  const T12 v12_;$/;"	m	class:testing::internal::ValueArray50
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray13
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray14
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray15
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray16
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray17
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray18
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray19
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray20
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray21
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray22
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray23
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray24
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray25
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray26
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray27
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray28
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray29
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray30
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray31
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray32
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray33
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray34
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray35
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray36
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray37
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray38
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray39
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray40
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray41
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray42
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray43
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray44
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray45
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray46
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray47
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray48
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray49
v13_	ts/ts_gtest.h	/^  const T13 v13_;$/;"	m	class:testing::internal::ValueArray50
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray14
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray15
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray16
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray17
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray18
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray19
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray20
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray21
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray22
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray23
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray24
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray25
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray26
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray27
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray28
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray29
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray30
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray31
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray32
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray33
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray34
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray35
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray36
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray37
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray38
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray39
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray40
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray41
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray42
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray43
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray44
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray45
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray46
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray47
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray48
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray49
v14_	ts/ts_gtest.h	/^  const T14 v14_;$/;"	m	class:testing::internal::ValueArray50
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray15
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray16
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray17
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray18
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray19
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray20
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray21
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray22
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray23
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray24
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray25
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray26
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray27
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray28
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray29
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray30
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray31
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray32
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray33
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray34
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray35
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray36
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray37
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray38
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray39
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray40
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray41
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray42
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray43
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray44
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray45
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray46
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray47
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray48
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray49
v15_	ts/ts_gtest.h	/^  const T15 v15_;$/;"	m	class:testing::internal::ValueArray50
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray16
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray17
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray18
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray19
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray20
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray21
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray22
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray23
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray24
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray25
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray26
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray27
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray28
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray29
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray30
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray31
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray32
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray33
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray34
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray35
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray36
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray37
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray38
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray39
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray40
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray41
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray42
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray43
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray44
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray45
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray46
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray47
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray48
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray49
v16_	ts/ts_gtest.h	/^  const T16 v16_;$/;"	m	class:testing::internal::ValueArray50
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray17
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray18
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray19
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray20
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray21
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray22
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray23
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray24
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray25
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray26
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray27
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray28
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray29
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray30
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray31
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray32
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray33
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray34
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray35
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray36
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray37
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray38
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray39
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray40
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray41
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray42
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray43
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray44
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray45
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray46
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray47
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray48
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray49
v17_	ts/ts_gtest.h	/^  const T17 v17_;$/;"	m	class:testing::internal::ValueArray50
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray18
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray19
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray20
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray21
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray22
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray23
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray24
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray25
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray26
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray27
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray28
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray29
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray30
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray31
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray32
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray33
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray34
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray35
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray36
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray37
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray38
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray39
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray40
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray41
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray42
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray43
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray44
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray45
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray46
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray47
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray48
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray49
v18_	ts/ts_gtest.h	/^  const T18 v18_;$/;"	m	class:testing::internal::ValueArray50
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray19
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray20
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray21
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray22
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray23
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray24
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray25
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray26
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray27
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray28
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray29
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray30
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray31
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray32
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray33
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray34
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray35
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray36
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray37
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray38
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray39
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray40
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray41
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray42
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray43
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray44
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray45
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray46
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray47
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray48
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray49
v19_	ts/ts_gtest.h	/^  const T19 v19_;$/;"	m	class:testing::internal::ValueArray50
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray1
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray10
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray11
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray12
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray13
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray14
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray15
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray16
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray17
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray18
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray19
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray2
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray20
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray21
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray22
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray23
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray24
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray25
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray26
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray27
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray28
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray29
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray3
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray30
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray31
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray32
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray33
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray34
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray35
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray36
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray37
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray38
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray39
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray4
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray40
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray41
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray42
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray43
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray44
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray45
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray46
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray47
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray48
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray49
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray5
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray50
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray6
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray7
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray8
v1_	ts/ts_gtest.h	/^  const T1 v1_;$/;"	m	class:testing::internal::ValueArray9
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray20
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray21
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray22
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray23
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray24
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray25
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray26
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray27
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray28
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray29
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray30
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray31
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray32
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray33
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray34
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray35
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray36
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray37
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray38
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray39
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray40
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray41
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray42
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray43
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray44
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray45
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray46
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray47
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray48
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray49
v20_	ts/ts_gtest.h	/^  const T20 v20_;$/;"	m	class:testing::internal::ValueArray50
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray21
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray22
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray23
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray24
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray25
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray26
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray27
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray28
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray29
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray30
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray31
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray32
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray33
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray34
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray35
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray36
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray37
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray38
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray39
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray40
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray41
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray42
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray43
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray44
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray45
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray46
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray47
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray48
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray49
v21_	ts/ts_gtest.h	/^  const T21 v21_;$/;"	m	class:testing::internal::ValueArray50
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray22
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray23
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray24
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray25
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray26
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray27
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray28
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray29
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray30
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray31
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray32
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray33
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray34
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray35
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray36
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray37
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray38
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray39
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray40
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray41
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray42
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray43
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray44
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray45
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray46
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray47
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray48
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray49
v22_	ts/ts_gtest.h	/^  const T22 v22_;$/;"	m	class:testing::internal::ValueArray50
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray23
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray24
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray25
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray26
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray27
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray28
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray29
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray30
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray31
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray32
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray33
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray34
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray35
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray36
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray37
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray38
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray39
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray40
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray41
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray42
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray43
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray44
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray45
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray46
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray47
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray48
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray49
v23_	ts/ts_gtest.h	/^  const T23 v23_;$/;"	m	class:testing::internal::ValueArray50
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray24
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray25
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray26
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray27
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray28
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray29
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray30
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray31
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray32
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray33
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray34
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray35
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray36
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray37
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray38
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray39
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray40
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray41
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray42
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray43
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray44
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray45
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray46
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray47
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray48
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray49
v24_	ts/ts_gtest.h	/^  const T24 v24_;$/;"	m	class:testing::internal::ValueArray50
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray25
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray26
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray27
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray28
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray29
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray30
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray31
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray32
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray33
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray34
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray35
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray36
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray37
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray38
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray39
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray40
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray41
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray42
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray43
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray44
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray45
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray46
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray47
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray48
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray49
v25_	ts/ts_gtest.h	/^  const T25 v25_;$/;"	m	class:testing::internal::ValueArray50
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray26
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray27
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray28
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray29
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray30
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray31
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray32
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray33
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray34
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray35
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray36
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray37
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray38
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray39
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray40
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray41
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray42
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray43
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray44
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray45
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray46
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray47
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray48
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray49
v26_	ts/ts_gtest.h	/^  const T26 v26_;$/;"	m	class:testing::internal::ValueArray50
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray27
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray28
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray29
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray30
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray31
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray32
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray33
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray34
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray35
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray36
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray37
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray38
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray39
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray40
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray41
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray42
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray43
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray44
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray45
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray46
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray47
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray48
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray49
v27_	ts/ts_gtest.h	/^  const T27 v27_;$/;"	m	class:testing::internal::ValueArray50
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray28
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray29
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray30
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray31
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray32
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray33
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray34
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray35
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray36
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray37
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray38
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray39
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray40
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray41
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray42
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray43
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray44
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray45
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray46
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray47
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray48
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray49
v28_	ts/ts_gtest.h	/^  const T28 v28_;$/;"	m	class:testing::internal::ValueArray50
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray29
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray30
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray31
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray32
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray33
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray34
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray35
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray36
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray37
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray38
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray39
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray40
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray41
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray42
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray43
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray44
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray45
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray46
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray47
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray48
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray49
v29_	ts/ts_gtest.h	/^  const T29 v29_;$/;"	m	class:testing::internal::ValueArray50
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray10
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray11
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray12
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray13
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray14
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray15
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray16
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray17
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray18
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray19
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray2
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray20
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray21
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray22
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray23
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray24
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray25
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray26
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray27
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray28
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray29
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray3
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray30
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray31
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray32
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray33
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray34
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray35
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray36
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray37
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray38
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray39
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray4
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray40
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray41
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray42
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray43
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray44
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray45
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray46
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray47
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray48
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray49
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray5
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray50
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray6
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray7
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray8
v2_	ts/ts_gtest.h	/^  const T2 v2_;$/;"	m	class:testing::internal::ValueArray9
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray30
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray31
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray32
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray33
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray34
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray35
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray36
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray37
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray38
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray39
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray40
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray41
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray42
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray43
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray44
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray45
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray46
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray47
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray48
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray49
v30_	ts/ts_gtest.h	/^  const T30 v30_;$/;"	m	class:testing::internal::ValueArray50
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray31
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray32
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray33
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray34
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray35
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray36
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray37
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray38
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray39
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray40
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray41
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray42
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray43
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray44
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray45
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray46
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray47
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray48
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray49
v31_	ts/ts_gtest.h	/^  const T31 v31_;$/;"	m	class:testing::internal::ValueArray50
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray32
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray33
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray34
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray35
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray36
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray37
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray38
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray39
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray40
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray41
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray42
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray43
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray44
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray45
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray46
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray47
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray48
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray49
v32_	ts/ts_gtest.h	/^  const T32 v32_;$/;"	m	class:testing::internal::ValueArray50
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray33
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray34
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray35
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray36
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray37
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray38
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray39
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray40
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray41
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray42
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray43
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray44
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray45
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray46
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray47
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray48
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray49
v33_	ts/ts_gtest.h	/^  const T33 v33_;$/;"	m	class:testing::internal::ValueArray50
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray34
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray35
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray36
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray37
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray38
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray39
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray40
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray41
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray42
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray43
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray44
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray45
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray46
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray47
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray48
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray49
v34_	ts/ts_gtest.h	/^  const T34 v34_;$/;"	m	class:testing::internal::ValueArray50
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray35
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray36
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray37
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray38
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray39
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray40
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray41
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray42
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray43
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray44
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray45
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray46
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray47
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray48
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray49
v35_	ts/ts_gtest.h	/^  const T35 v35_;$/;"	m	class:testing::internal::ValueArray50
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray36
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray37
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray38
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray39
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray40
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray41
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray42
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray43
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray44
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray45
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray46
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray47
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray48
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray49
v36_	ts/ts_gtest.h	/^  const T36 v36_;$/;"	m	class:testing::internal::ValueArray50
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray37
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray38
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray39
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray40
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray41
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray42
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray43
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray44
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray45
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray46
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray47
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray48
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray49
v37_	ts/ts_gtest.h	/^  const T37 v37_;$/;"	m	class:testing::internal::ValueArray50
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray38
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray39
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray40
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray41
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray42
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray43
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray44
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray45
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray46
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray47
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray48
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray49
v38_	ts/ts_gtest.h	/^  const T38 v38_;$/;"	m	class:testing::internal::ValueArray50
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray39
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray40
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray41
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray42
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray43
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray44
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray45
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray46
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray47
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray48
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray49
v39_	ts/ts_gtest.h	/^  const T39 v39_;$/;"	m	class:testing::internal::ValueArray50
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray10
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray11
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray12
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray13
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray14
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray15
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray16
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray17
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray18
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray19
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray20
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray21
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray22
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray23
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray24
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray25
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray26
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray27
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray28
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray29
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray3
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray30
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray31
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray32
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray33
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray34
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray35
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray36
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray37
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray38
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray39
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray4
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray40
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray41
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray42
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray43
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray44
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray45
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray46
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray47
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray48
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray49
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray5
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray50
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray6
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray7
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray8
v3_	ts/ts_gtest.h	/^  const T3 v3_;$/;"	m	class:testing::internal::ValueArray9
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray40
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray41
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray42
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray43
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray44
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray45
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray46
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray47
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray48
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray49
v40_	ts/ts_gtest.h	/^  const T40 v40_;$/;"	m	class:testing::internal::ValueArray50
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray41
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray42
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray43
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray44
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray45
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray46
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray47
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray48
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray49
v41_	ts/ts_gtest.h	/^  const T41 v41_;$/;"	m	class:testing::internal::ValueArray50
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray42
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray43
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray44
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray45
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray46
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray47
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray48
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray49
v42_	ts/ts_gtest.h	/^  const T42 v42_;$/;"	m	class:testing::internal::ValueArray50
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray43
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray44
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray45
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray46
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray47
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray48
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray49
v43_	ts/ts_gtest.h	/^  const T43 v43_;$/;"	m	class:testing::internal::ValueArray50
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray44
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray45
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray46
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray47
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray48
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray49
v44_	ts/ts_gtest.h	/^  const T44 v44_;$/;"	m	class:testing::internal::ValueArray50
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray45
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray46
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray47
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray48
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray49
v45_	ts/ts_gtest.h	/^  const T45 v45_;$/;"	m	class:testing::internal::ValueArray50
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray46
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray47
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray48
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray49
v46_	ts/ts_gtest.h	/^  const T46 v46_;$/;"	m	class:testing::internal::ValueArray50
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray47
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray48
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray49
v47_	ts/ts_gtest.h	/^  const T47 v47_;$/;"	m	class:testing::internal::ValueArray50
v48_	ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray48
v48_	ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray49
v48_	ts/ts_gtest.h	/^  const T48 v48_;$/;"	m	class:testing::internal::ValueArray50
v49_	ts/ts_gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray49
v49_	ts/ts_gtest.h	/^  const T49 v49_;$/;"	m	class:testing::internal::ValueArray50
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray10
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray11
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray12
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray13
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray14
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray15
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray16
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray17
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray18
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray19
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray20
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray21
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray22
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray23
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray24
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray25
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray26
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray27
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray28
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray29
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray30
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray31
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray32
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray33
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray34
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray35
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray36
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray37
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray38
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray39
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray4
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray40
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray41
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray42
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray43
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray44
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray45
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray46
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray47
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray48
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray49
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray5
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray50
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray6
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray7
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray8
v4_	ts/ts_gtest.h	/^  const T4 v4_;$/;"	m	class:testing::internal::ValueArray9
v50_	ts/ts_gtest.h	/^  const T50 v50_;$/;"	m	class:testing::internal::ValueArray50
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray10
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray11
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray12
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray13
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray14
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray15
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray16
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray17
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray18
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray19
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray20
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray21
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray22
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray23
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray24
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray25
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray26
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray27
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray28
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray29
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray30
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray31
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray32
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray33
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray34
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray35
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray36
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray37
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray38
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray39
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray40
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray41
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray42
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray43
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray44
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray45
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray46
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray47
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray48
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray49
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray5
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray50
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray6
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray7
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray8
v5_	ts/ts_gtest.h	/^  const T5 v5_;$/;"	m	class:testing::internal::ValueArray9
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray10
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray11
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray12
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray13
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray14
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray15
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray16
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray17
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray18
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray19
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray20
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray21
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray22
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray23
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray24
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray25
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray26
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray27
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray28
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray29
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray30
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray31
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray32
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray33
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray34
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray35
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray36
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray37
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray38
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray39
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray40
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray41
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray42
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray43
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray44
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray45
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray46
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray47
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray48
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray49
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray50
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray6
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray7
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray8
v6_	ts/ts_gtest.h	/^  const T6 v6_;$/;"	m	class:testing::internal::ValueArray9
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray10
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray11
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray12
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray13
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray14
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray15
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray16
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray17
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray18
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray19
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray20
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray21
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray22
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray23
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray24
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray25
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray26
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray27
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray28
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray29
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray30
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray31
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray32
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray33
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray34
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray35
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray36
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray37
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray38
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray39
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray40
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray41
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray42
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray43
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray44
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray45
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray46
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray47
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray48
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray49
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray50
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray7
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray8
v7_	ts/ts_gtest.h	/^  const T7 v7_;$/;"	m	class:testing::internal::ValueArray9
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray10
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray11
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray12
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray13
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray14
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray15
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray16
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray17
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray18
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray19
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray20
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray21
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray22
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray23
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray24
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray25
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray26
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray27
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray28
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray29
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray30
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray31
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray32
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray33
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray34
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray35
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray36
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray37
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray38
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray39
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray40
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray41
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray42
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray43
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray44
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray45
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray46
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray47
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray48
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray49
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray50
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray8
v8_	ts/ts_gtest.h	/^  const T8 v8_;$/;"	m	class:testing::internal::ValueArray9
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray10
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray11
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray12
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray13
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray14
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray15
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray16
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray17
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray18
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray19
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray20
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray21
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray22
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray23
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray24
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray25
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray26
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray27
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray28
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray29
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray30
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray31
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray32
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray33
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray34
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray35
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray36
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray37
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray38
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray39
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray40
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray41
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray42
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray43
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray44
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray45
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray46
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray47
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray48
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray49
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray50
v9_	ts/ts_gtest.h	/^  const T9 v9_;$/;"	m	class:testing::internal::ValueArray9
vPyr_	gpu/gpu.hpp	/^    vector<GpuMat> vPyr_;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
vPyr_	ocl/ocl.hpp	/^            oclMat vPyr_[2];$/;"	m	class:cv::ocl::PyrLKOpticalFlow
v_range	contrib/hybridtracker.hpp	/^    vector<float> v_range;$/;"	m	struct:cv::CvMeanShiftTrackerParams
val	core/types_c.h	/^    double val[4];$/;"	m	struct:CvScalar
val	gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BorderReader
val	gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BrdColConstant
val	gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BrdConstant
val	gpu/device/border_interpolate.hpp	/^        const D val;$/;"	m	struct:cv::gpu::device::BrdRowConstant
val	ocl/ocl.hpp	/^            static int val;$/;"	m	class:cv::ocl::Context
valid	legacy/legacy.hpp	/^    CvBool valid;$/;"	m	struct:Cv3dTrackerCameraInfo
validGeometry	imgproc/imgproc.hpp	/^    bool validGeometry;$/;"	m	class:cv::Subdiv2D
valoffset	core/types_c.h	/^    int valoffset;$/;"	m	struct:CvSparseMat
vals_	flann/random.h	/^    std::vector<int> vals_;$/;"	m	class:cvflann::UniqueRandom
value	contrib/contrib.hpp	/^    double value, centre;$/;"	m	class:CvFuzzyCurve
value	contrib/contrib.hpp	/^    double x, y, value;$/;"	m	class:CvFuzzyPoint
value	core/core.hpp	/^template<> class DataDepth<bool> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon207
value	core/core.hpp	/^template<> class DataDepth<char> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon210
value	core/core.hpp	/^template<> class DataDepth<double> { public: enum { value = CV_64F, fmt=(int)'d' }; };$/;"	e	enum:cv::DataDepth::__anon216
value	core/core.hpp	/^template<> class DataDepth<float> { public: enum { value = CV_32F, fmt=(int)'f' }; };$/;"	e	enum:cv::DataDepth::__anon215
value	core/core.hpp	/^template<> class DataDepth<int> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon213
value	core/core.hpp	/^template<> class DataDepth<schar> { public: enum { value = CV_8S, fmt=(int)'c' }; };$/;"	e	enum:cv::DataDepth::__anon209
value	core/core.hpp	/^template<> class DataDepth<short> { public: enum { value = CV_16S, fmt=(int)'s' }; };$/;"	e	enum:cv::DataDepth::__anon212
value	core/core.hpp	/^template<> class DataDepth<uchar> { public: enum { value = CV_8U, fmt=(int)'u' }; };$/;"	e	enum:cv::DataDepth::__anon208
value	core/core.hpp	/^template<> class DataDepth<unsigned> { public: enum { value = CV_32S, fmt=(int)'i' }; };$/;"	e	enum:cv::DataDepth::__anon214
value	core/core.hpp	/^template<> class DataDepth<ushort> { public: enum { value = CV_16U, fmt=(int)'w' }; };$/;"	e	enum:cv::DataDepth::__anon211
value	core/core.hpp	/^template<typename _Tp> class DataDepth<_Tp*> { public: enum { value = CV_USRTYPE1, fmt=(int)'r' }; };$/;"	e	enum:cv::DataDepth::__anon217
value	core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(const int* idx, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(int i0, int i1, int i2, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(int i0, int i1, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.hpp	/^template<typename _Tp> inline _Tp SparseMat::value(int i0, size_t* hashval) const$/;"	f	class:cv::SparseMat
value	core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMat::value(Node* n)$/;"	f	class:cv::SparseMat
value	core/mat.hpp	/^template<typename _Tp> inline _Tp& SparseMatIterator::value() const$/;"	f	class:cv::SparseMatIterator
value	core/mat.hpp	/^template<typename _Tp> inline const _Tp& SparseMat::value(const Node* n) const$/;"	f	class:cv::SparseMat
value	core/mat.hpp	/^template<typename _Tp> inline const _Tp& SparseMatConstIterator::value() const$/;"	f	class:cv::SparseMatConstIterator
value	flann/timer.h	/^    double value;$/;"	m	class:cvflann::StartStopTimer
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 0 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnConst::__anon163
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 0 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnVolatile::__anon166
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnConst::__anon164
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnConst::__anon165
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnVolatile::__anon167
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = 1 };$/;"	e	enum:cv::gpu::device::type_traits_detail::UnVolatile::__anon168
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = false };$/;"	e	enum:cv::gpu::device::type_traits_detail::PointerTraits::__anon160
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = false };$/;"	e	enum:cv::gpu::device::type_traits_detail::ReferenceTraits::__anon158
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::gpu::device::type_traits_detail::PointerTraits::__anon161
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::gpu::device::type_traits_detail::PointerTraits::__anon162
value	gpu/device/detail/type_traits_detail.hpp	/^            enum { value = true };$/;"	e	enum:cv::gpu::device::type_traits_detail::ReferenceTraits::__anon159
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<double> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsFloat::__anon116
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsFloat<float> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsFloat::__anon115
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<bool> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsIntegral::__anon113
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsIntegral<char> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsIntegral::__anon112
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<char1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon99
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon103
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<int> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon102
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<schar> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon98
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon101
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsSignedIntergral<short> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon100
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon106
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uchar> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon105
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon110
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<uint> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon109
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon108
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsUnsignedIntegral<ushort> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon107
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon123
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon124
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon125
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon126
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<char8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon127
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon153
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon154
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon155
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon156
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<double8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon157
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon148
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon149
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon150
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon151
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<float8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon152
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon143
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon144
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon145
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon146
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<int8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon147
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon133
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon134
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon135
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon136
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<short8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon137
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon118
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon119
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon120
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon121
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uchar8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon122
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon138
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon139
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon140
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon141
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<uint8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon142
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort1> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon128
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort2> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon129
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort3> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon130
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort4> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon131
value	gpu/device/detail/type_traits_detail.hpp	/^        template <> struct IsVec<ushort8> { enum {value = 1}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon132
value	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsFloat { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsFloat::__anon114
value	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsIntegral { enum {value = IsSignedIntergral<T>::value || IsUnsignedIntegral<T>::value}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsIntegral::__anon111
value	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsSignedIntergral { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsSignedIntergral::__anon97
value	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsUnsignedIntegral { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsUnsignedIntegral::__anon104
value	gpu/device/detail/type_traits_detail.hpp	/^        template <typename T> struct IsVec { enum {value = 0}; };$/;"	e	enum:cv::gpu::device::type_traits_detail::IsVec::__anon117
value	gpu/device/functional.hpp	/^        enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::gpu::device::IsBinaryFunction::__anon170
value	gpu/device/functional.hpp	/^        enum { value = (sizeof(check(makeF())) == sizeof(Yes)) };$/;"	e	enum:cv::gpu::device::IsUnaryFunction::__anon169
value	gpu/device/type_traits.hpp	/^        enum {value = type_traits_detail::IsIntegral<T>::value || type_traits_detail::IsFloat<T>::value ||$/;"	e	enum:cv::gpu::device::IsSimpleParameter::__anon85
value	imgproc/types_c.h	/^    CvScalar value; \/* average color of the connected component *\/$/;"	m	struct:CvConnectedComp
value	ml/ml.hpp	/^    double value;$/;"	m	struct:CvDTreeNode
value	ts/ts_gtest.h	/^  const char* value() const {$/;"	f	class:testing::TestProperty
value	ts/ts_gtest.h	/^  const char* value;$/;"	m	struct:testing::internal::ConstCharPtr
value	ts/ts_gtest.h	/^  static const bool value = __is_convertible(From, To);$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ts/ts_gtest.h	/^  static const bool value = bool_value;$/;"	m	struct:std::tr1::bool_constant
value	ts/ts_gtest.h	/^  static const bool value =$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ts/ts_gtest.h	/^  static const int value = 0;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 10;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 1;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 2;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 3;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 4;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 5;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 6;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 7;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 8;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^  static const int value = 9;$/;"	m	struct:std::tr1::tuple_size
value	ts/ts_gtest.h	/^const bool ImplicitlyConvertible<From, To>::value;$/;"	m	class:testing::internal::ImplicitlyConvertible
value	ts/ts_gtest.h	/^template <bool bool_value> const bool bool_constant<bool_value>::value;$/;"	m	class:std::tr1::bool_constant
value_	ts/ts_gtest.h	/^    RawType value_;  \/\/ The raw floating-point number.$/;"	m	union:testing::internal::FloatingPoint::FloatingPointUnion
value_	ts/ts_gtest.h	/^    T value_;$/;"	m	class:std::tr1::ThreadLocal::ValueHolder
value_	ts/ts_gtest.h	/^    T value_;$/;"	m	class:testing::internal::RangeGenerator::Iterator
value_	ts/ts_gtest.h	/^    mutable scoped_ptr<const T> value_;$/;"	m	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
value_	ts/ts_gtest.h	/^  T value_;$/;"	m	class:std::tr1::ThreadLocal
value_	ts/ts_gtest.h	/^  T* value_;$/;"	m	class:testing::internal::linked_ptr
value_	ts/ts_gtest.h	/^  internal::String value_;$/;"	m	class:testing::TestProperty
value_param	ts/ts_gtest.h	/^  const char* value_param() const {$/;"	f	class:testing::TestInfo
value_param_	ts/ts_gtest.h	/^  const internal::scoped_ptr<const ::std::string> value_param_;$/;"	m	class:testing::TestInfo
value_type	core/core.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Allocator
value_type	core/core.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Matx
value_type	core/operations.hpp	/^    typedef _Tp value_type;$/;"	t	class:cv::Vector
value_type	gpu/device/vec_distance.hpp	/^        typedef float value_type;$/;"	t	struct:cv::gpu::device::L1Dist
value_type	gpu/device/vec_distance.hpp	/^        typedef float value_type;$/;"	t	struct:cv::gpu::device::L2Dist
value_type	gpu/device/vec_distance.hpp	/^        typedef int value_type;$/;"	t	struct:cv::gpu::device::HammingDist
value_type	gpu/device/vec_distance.hpp	/^        typedef int value_type;$/;"	t	struct:cv::gpu::device::L1Dist
value_type	ts/ts_gtest.h	/^  typedef Element value_type;$/;"	t	class:testing::internal::NativeArray
value_type	ts/ts_gtest.h	/^  typedef T value_type;$/;"	t	class:testing::internal::ParamIterator
value_type	ts/ts_gtest.h	/^  typedef T value_type;$/;"	t	struct:std::tr1::IteratorTraits
value_type	ts/ts_gtest.h	/^  typedef typename Iterator::value_type value_type;$/;"	t	struct:std::tr1::IteratorTraits
values	core/types_c.h	/^    float *values;$/;"	m	struct:_IplConvKernelFP
values	core/types_c.h	/^    int *values;$/;"	m	struct:_IplConvKernel
values	ml/ml.hpp	/^    CvMat* values;$/;"	m	class:CvMLData
varThreshold	gpu/gpu.hpp	/^    float varThreshold;$/;"	m	class:cv::gpu::MOG2_GPU
varThreshold	gpu/gpu.hpp	/^    float varThreshold;$/;"	m	class:cv::gpu::MOG_GPU
varThreshold	video/background_segm.hpp	/^    double varThreshold;$/;"	m	class:cv::BackgroundSubtractorMOG
varThreshold	video/background_segm.hpp	/^    double varThreshold;$/;"	m	class:cv::BackgroundSubtractorMOG2
varThresholdGen	gpu/gpu.hpp	/^    float varThresholdGen;$/;"	m	class:cv::gpu::MOG2_GPU
varThresholdGen	video/background_segm.hpp	/^    float varThresholdGen;$/;"	m	class:cv::BackgroundSubtractorMOG2
var_	flann/kdtree_index.h	/^    DistanceType* var_;$/;"	m	class:cvflann::KDTreeIndex
var_	gpu/gpu.hpp	/^    GpuMat var_;$/;"	m	class:cv::gpu::MOG_GPU
var_all	ml/ml.hpp	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier
var_all	ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
var_all	ml/ml.hpp	/^    int var_all;$/;"	m	class:CvSVM
var_count	ml/ml.hpp	/^    int     var_count, var_all;$/;"	m	class:CvNormalBayesClassifier
var_count	ml/ml.hpp	/^    int max_k, var_count;$/;"	m	class:CvKNearest
var_count	ml/ml.hpp	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData
var_count	ml/ml.hpp	/^    int var_count;$/;"	m	class:CvSVMSolver
var_idx	ml/ml.hpp	/^    CvMat*  var_idx;$/;"	m	class:CvNormalBayesClassifier
var_idx	ml/ml.hpp	/^    CvMat* var_idx;$/;"	m	class:CvSVM
var_idx	ml/ml.hpp	/^    CvMat* var_idx;$/;"	m	struct:CvDTreeTrainData
var_idx	ml/ml.hpp	/^    int var_idx;$/;"	m	struct:CvDTreeSplit
var_idx_mask	ml/ml.hpp	/^    CvMat* var_idx_mask;$/;"	m	class:CvMLData
var_idx_out	ml/ml.hpp	/^    CvMat* var_idx_out; \/\/ mat$/;"	m	class:CvMLData
var_importance	ml/ml.hpp	/^    CvMat* var_importance;$/;"	m	class:CvDTree
var_importance	ml/ml.hpp	/^    CvMat* var_importance;$/;"	m	class:CvRTrees
var_type	ml/ml.hpp	/^    CvMat* var_type; \/\/ i-th element =$/;"	m	struct:CvDTreeTrainData
var_types	ml/ml.hpp	/^    CvMat* var_types;$/;"	m	class:CvMLData
var_types_out	ml/ml.hpp	/^    CvMat* var_types_out; \/\/ mat$/;"	m	class:CvMLData
variance	flann/kmeans_index.h	/^        DistanceType variance;$/;"	m	struct:cvflann::KMeansIndex::KMeansNode
variance	legacy/legacy.hpp	/^    double      variance[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues
variance_	gpu/gpu.hpp	/^    GpuMat variance_;$/;"	m	class:cv::gpu::MOG2_GPU
variance_init	legacy/legacy.hpp	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams
varyImgBoundWithScale	features2d/features2d.hpp	/^    bool varyImgBoundWithScale;$/;"	m	class:cv::DenseFeatureDetector
varyXyStepWithScale	features2d/features2d.hpp	/^    bool varyXyStepWithScale;$/;"	m	class:cv::DenseFeatureDetector
vec1	gpu/device/vec_distance.hpp	/^        const T1* vec1;$/;"	m	struct:cv::gpu::device::VecDiffGlobal
vec1Vals	gpu/device/vec_distance.hpp	/^        U vec1Vals[MAX_LEN \/ THREAD_DIM];$/;"	m	struct:cv::gpu::device::VecDiffCachedRegister
vec_distance_detail	gpu/device/detail/vec_distance_detail.hpp	/^    namespace vec_distance_detail$/;"	n	namespace:cv::gpu::device
vec_math_detail	gpu/device/vec_math.hpp	/^    namespace vec_math_detail$/;"	n	namespace:cv::gpu::device
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 1> { typedef uchar vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 2> { typedef uchar2 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 3> { typedef uchar3 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 4> { typedef uchar4 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<bool, 8> { typedef uchar8 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 1> { typedef schar vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 2> { typedef char2 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 3> { typedef char3 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 4> { typedef char4 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
vec_type	gpu/device/vec_traits.hpp	/^    template<> struct TypeVec<schar, 8> { typedef char8 vec_type; };$/;"	t	struct:cv::gpu::device::TypeVec
veclen	flann/autotuned_index.h	/^    virtual size_t veclen() const$/;"	f	class:cvflann::AutotunedIndex
veclen	flann/composite_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::CompositeIndex
veclen	flann/flann.hpp	/^        int veclen() const { return nnIndex->veclen(); }$/;"	f	class:cv::flann::GenericIndex
veclen	flann/flann.hpp	/^    int veclen() const$/;"	f	class:cv::flann::Index_
veclen	flann/flann_base.hpp	/^    size_t veclen() const$/;"	f	class:cvflann::Index
veclen	flann/hierarchical_clustering_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::HierarchicalClusteringIndex
veclen	flann/kdtree_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KDTreeIndex
veclen	flann/kdtree_single_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KDTreeSingleIndex
veclen	flann/kmeans_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::KMeansIndex
veclen	flann/linear_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::LinearIndex
veclen	flann/lsh_index.h	/^    size_t veclen() const$/;"	f	class:cvflann::LshIndex
veclen_	flann/hierarchical_clustering_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::HierarchicalClusteringIndex
veclen_	flann/kdtree_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::KDTreeIndex
veclen_	flann/kmeans_index.h	/^    size_t veclen_;$/;"	m	class:cvflann::KMeansIndex
verbose	legacy/legacy.hpp	/^    bool verbose;$/;"	m	class:cv::FernClassifier
verbose	legacy/legacy.hpp	/^    bool verbose;$/;"	m	class:cv::LDetector
verbose	legacy/legacy.hpp	/^    bool verbose;$/;"	m	class:cv::PlanarObjectDetector
verified	ts/ts_perf.hpp	/^    bool verified;$/;"	m	class:perf::TestBase
version	core/types_c.h	/^    const char* version;$/;"	m	struct:CvModuleInfo
version	flann/saving.h	/^    char version[16];$/;"	m	struct:cvflann::IndexHeader
vertex_	core/opengl_interop.hpp	/^    GlBuffer vertex_;$/;"	m	class:cv::GlArrays
vertex_weights	legacy/legacy.hpp	/^    float* vertex_weights;$/;"	m	struct:CvCliqueFinder
verticalEdgeLeft	contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
verticalEdgeRight	contrib/contrib.hpp	/^        int verticalEdgeLeft, verticalEdgeRight, horizontalEdgeTop, horizontalEdgeBottom;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
videoCaptureConnection	highgui/cap_ios.h	/^@property (nonatomic, retain) AVCaptureConnection* videoCaptureConnection;$/;"	v
videoParser_	gpu/gpu.hpp	/^        detail::VideoParser* videoParser_;$/;"	m	class:cv::gpu::VideoReader_GPU::VideoSource
videostab	videostab/deblurring.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/fast_marching.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/fast_marching_inl.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/frame_source.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/global_motion.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/inpainting.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/log.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/motion_stabilizing.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/optical_flow.hpp	/^namespace videostab$/;"	n	namespace:cv
videostab	videostab/stabilizer.hpp	/^namespace videostab$/;"	n	namespace:cv
vind_	flann/kdtree_index.h	/^    std::vector<int> vind_;$/;"	m	class:cvflann::KDTreeIndex
vind_	flann/kdtree_single_index.h	/^    std::vector<int> vind_;$/;"	m	class:cvflann::KDTreeSingleIndex
visualizeInPlace	gpu/gpu.hpp	/^    bool visualizeInPlace;$/;"	m	class:cv::gpu::CascadeClassifier_GPU
vocabulary	features2d/features2d.hpp	/^    Mat vocabulary;$/;"	m	class:cv::BOWImgDescriptorExtractor
volatileFrame_	videostab/frame_source.hpp	/^    bool volatileFrame_;$/;"	m	class:cv::videostab::VideoFileSource
vscale	core/core_c.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont
vtx	contrib/contrib.hpp	/^        vector<Point3f> vtx;$/;"	m	class:cv::Mesh3D
vtx	core/core_c.h	/^    CvGraphVtx* vtx;       \/* current graph vertex (or current edge origin) *\/$/;"	m	struct:CvGraphScanner
vtx	imgproc/imgproc.hpp	/^    vector<Vertex> vtx;$/;"	m	class:cv::Subdiv2D
vtxBuf	legacy/legacy.hpp	/^    CvMat* vtxBuf;$/;"	m	struct:CvStereoGCState
w	contrib/contrib.hpp	/^            int w;$/;"	m	struct:cv::LogPolar_Overlapping::kernel
w	legacy/blobtrack.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob
wSum_	videostab/deblurring.hpp	/^    Mat_<float> bSum_, gSum_, rSum_, wSum_;$/;"	m	class:cv::videostab::WeightingDeblurer
w_ker_2D	contrib/contrib.hpp	/^        vector<kernel> w_ker_2D;$/;"	m	class:cv::LogPolar_Overlapping
walkBreadthFirst	stitching/detail/util_inl.hpp	/^B Graph::walkBreadthFirst(int from, B body) const$/;"	f	class:cv::detail::Graph
warp	stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, const Mat &T, int interp_mode, int border_mode,$/;"	f	class:cv::detail::PlaneWarperGpu
warp	stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::CylindricalWarperGpu
warp	stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::PlaneWarperGpu
warp	stitching/detail/warpers.hpp	/^    Point warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::SphericalWarperGpu
warp	stitching/detail/warpers_inl.hpp	/^Point RotationWarperBase<P>::warp(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::RotationWarperBase
warpBackward	stitching/detail/warpers_inl.hpp	/^void RotationWarperBase<P>::warpBackward(const Mat &src, const Mat &K, const Mat &R, int interp_mode, int border_mode,$/;"	f	class:cv::detail::RotationWarperBase
warpPoint	stitching/detail/warpers_inl.hpp	/^Point2f RotationWarperBase<P>::warpPoint(const Point2f &pt, const Mat &K, const Mat &R)$/;"	f	class:cv::detail::RotationWarperBase
warpRoi	stitching/detail/warpers_inl.hpp	/^Rect RotationWarperBase<P>::warpRoi(Size src_size, const Mat &K, const Mat &R)$/;"	f	class:cv::detail::RotationWarperBase
warpSize	legacy/legacy.hpp	/^    CvSize warpSize;$/;"	m	struct:CvStereoCamera
warp_log	gpu/device/scan.hpp	/^        static const int warp_log         = 5;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warp_log	gpu/device/scan.hpp	/^        static const int warp_log  = 5;$/;"	m	struct:cv::gpu::device::BlockScan
warp_mask	gpu/device/scan.hpp	/^        static const int warp_mask        = 31;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warp_mask	gpu/device/scan.hpp	/^        static const int warp_mask = 31;$/;"	m	struct:cv::gpu::device::BlockScan
warp_offset	gpu/device/scan.hpp	/^        static const int warp_offset      = 0;$/;"	m	struct:cv::gpu::device::WarpScan
warp_offset	gpu/device/scan.hpp	/^        static const int warp_offset      = 16;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warp_reduce	gpu/device/warp_reduce.hpp	/^    __device__ __forceinline__ T warp_reduce(volatile T *ptr , const unsigned int tid = threadIdx.x)$/;"	f	namespace:cv::gpu::device
warp_smem_stride	gpu/device/scan.hpp	/^        static const int warp_smem_stride = 32 + 16 + 1;$/;"	m	struct:cv::gpu::device::WarpScanNoComp
warped_image_scale_	stitching/stitcher.hpp	/^    double warped_image_scale_;$/;"	m	class:cv::Stitcher
warper	stitching/stitcher.hpp	/^    Ptr<WarperCreator> warper() { return warper_; }$/;"	f	class:cv::Stitcher
warper	stitching/stitcher.hpp	/^    const Ptr<WarperCreator> warper() const { return warper_; }$/;"	f	class:cv::Stitcher
warper_	stitching/stitcher.hpp	/^    Ptr<WarperCreator> warper_;$/;"	m	class:cv::Stitcher
wastedMemory	flann/allocator.h	/^    int     wastedMemory;$/;"	m	class:cvflann::PooledAllocator
waveCorrectKind	stitching/stitcher.hpp	/^    detail::WaveCorrectKind waveCorrectKind() const { return wave_correct_kind_; }$/;"	f	class:cv::Stitcher
waveCorrection	stitching/stitcher.hpp	/^    bool waveCorrection() const { return do_wave_correct_; }$/;"	f	class:cv::Stitcher
wave_correct_kind_	stitching/stitcher.hpp	/^    detail::WaveCorrectKind wave_correct_kind_;$/;"	m	class:cv::Stitcher
wbuf	ml/ml.hpp	/^    CvMat* wbuf;$/;"	m	class:CvANN_MLP
weak	ml/ml.hpp	/^    CvSeq* weak;$/;"	m	class:CvBoost
weak	ml/ml.hpp	/^    CvSeq** weak;$/;"	m	class:CvGBTrees
weak_count	ml/ml.hpp	/^    CV_PROP_RW int weak_count;$/;"	m	struct:CvBoostParams
weak_count	ml/ml.hpp	/^    CV_PROP_RW int weak_count;$/;"	m	struct:CvGBTreesParams
weak_eval	ml/ml.hpp	/^    CvMat* weak_eval;$/;"	m	class:CvBoost
weak_threshold	objdetect/objdetect.hpp	/^  float weak_threshold;$/;"	m	class:cv::linemod::ColorGradient
weight	core/opengl_interop.hpp	/^    inline Weight weight() const { return weight_; }$/;"	f	class:cv::GlFont
weight	legacy/legacy.hpp	/^    double      weight;$/;"	m	struct:CvGaussBGValues
weight	legacy/legacy.hpp	/^    float* weight;      \/*array of mixture weights. Summ of all weights in state is 1. *\/$/;"	m	struct:CvEHMMState
weight	objdetect/objdetect.hpp	/^        float weight;$/;"	m	struct:CvHaarFeature::__anon227
weight	stitching/detail/util.hpp	/^    float weight;$/;"	m	struct:cv::detail::GraphEdge
weight_	core/opengl_interop.hpp	/^    Weight weight_;$/;"	m	class:cv::GlFont
weight_	gpu/gpu.hpp	/^    GpuMat weight_;$/;"	m	class:cv::gpu::MOG2_GPU
weight_	gpu/gpu.hpp	/^    GpuMat weight_;$/;"	m	class:cv::gpu::MOG_GPU
weight_	videostab/motion_stabilizing.hpp	/^    std::vector<float> weight_;$/;"	m	class:cv::videostab::GaussianMotionFilter
weight_dx	features2d/features2d.hpp	/^        int weight_dx; \/\/ dx\/(norm_sq))*4096$/;"	m	struct:cv::FREAK::OrientationPair
weight_dy	features2d/features2d.hpp	/^        int weight_dy; \/\/ dy\/(norm_sq))*4096$/;"	m	struct:cv::FREAK::OrientationPair
weight_init	legacy/legacy.hpp	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams
weight_map_	stitching/detail/blenders.hpp	/^    Mat weight_map_;$/;"	m	class:cv::detail::FeatherBlender
weight_trim_rate	ml/ml.hpp	/^    CV_PROP_RW double weight_trim_rate;$/;"	m	struct:CvBoostParams
weight_type_	stitching/detail/blenders.hpp	/^    int weight_type_; \/\/CV_32F or CV_16S$/;"	m	class:cv::detail::MultiBandBlender
weighted	legacy/legacy.hpp	/^    int weighted;$/;"	m	struct:CvCliqueFinder
weighted_dx	features2d/features2d.hpp	/^        int weighted_dx; \/\/ 1024.0\/dx$/;"	m	struct:cv::BRISK::BriskLongPair
weighted_dy	features2d/features2d.hpp	/^        int weighted_dy; \/\/ 1024.0\/dy$/;"	m	struct:cv::BRISK::BriskLongPair
weighted_edges	legacy/legacy.hpp	/^    int weighted_edges;$/;"	m	struct:CvCliqueFinder
weights	contrib/contrib.hpp	/^            vector<double> weights;$/;"	m	struct:cv::LogPolar_Overlapping::kernel
weights	legacy/legacy.hpp	/^    const CvMat* weights;$/;"	m	struct:CvEMParams
weights	ml/ml.hpp	/^    CV_PROP Mat weights;$/;"	m	class:cv::EM
weights	ml/ml.hpp	/^    CvMat* weights;$/;"	m	class:CvBoost
weights	ml/ml.hpp	/^    double** weights;$/;"	m	class:CvANN_MLP
weightsHdr	legacy/legacy.hpp	/^    CvMat weightsHdr;$/;"	m	class:CvEM
weightsPositionsSmoothing	contrib/detection_based_tracker.hpp	/^        std::vector<float> weightsPositionsSmoothing;$/;"	m	class:DetectionBasedTracker
weightsSizesSmoothing	contrib/detection_based_tracker.hpp	/^        std::vector<float> weightsSizesSmoothing;$/;"	m	class:DetectionBasedTracker
weights_	gpu/gpu.hpp	/^    GpuMat weights_;$/;"	m	class:cv::gpu::GMG_GPU
weights_	video/background_segm.hpp	/^    cv::Mat_<float> weights_;$/;"	m	class:cv::BackgroundSubtractorGMG
wholeSize	imgproc/imgproc.hpp	/^    Size wholeSize;$/;"	m	class:cv::FilterEngine
wholecols	ocl/ocl.hpp	/^            int wholecols;$/;"	m	class:cv::ocl::oclMat
wholerows	ocl/ocl.hpp	/^            int wholerows;$/;"	m	class:cv::ocl::oclMat
width	contrib/contrib.hpp	/^        int width, height, maxWidth, maxHeight, ellipseHeight, ellipseWidth;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
width	core/types_c.h	/^        int width;$/;"	m	union:CvMat::__anon223
width	core/types_c.h	/^    float width;$/;"	m	struct:CvSize2D32f
width	core/types_c.h	/^    int  width;             \/* Image width in pixels.                           *\/$/;"	m	struct:_IplImage
width	core/types_c.h	/^    int  width;$/;"	m	struct:_IplROI
width	core/types_c.h	/^    int width;$/;"	m	struct:CvRect
width	core/types_c.h	/^    int width;$/;"	m	struct:CvSize
width	gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BorderReader
width	gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdConstant
width	gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdRowConstant
width	gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdRowWrap
width	gpu/device/border_interpolate.hpp	/^        const int width;$/;"	m	struct:cv::gpu::device::BrdWrap
width	gpu/device/filters.hpp	/^        int width, haight;$/;"	m	struct:cv::gpu::device::AreaFilter
width	gpu/gpu.hpp	/^        int width;$/;"	m	struct:cv::gpu::VideoReader_GPU::FormatInfo
width	legacy/compat.hpp	/^    int     width;                  \/* width of the image  ( in pixels )                *\/$/;"	m	struct:_CvPixelPosition8u
width	legacy/compat.hpp	/^    int     width;$/;"	m	struct:_CvPixelPosition32f
width	legacy/compat.hpp	/^    int     width;$/;"	m	struct:_CvPixelPosition8s
width	legacy/legacy.hpp	/^    float width;$/;"	m	struct:CvLCMEdge
width	legacy/legacy.hpp	/^    int width() const { return image ? image->width : 0; }$/;"	f	class:CvImage
width	objdetect/objdetect.hpp	/^  int width;$/;"	m	struct:cv::linemod::Template
widthStep	core/types_c.h	/^    int  widthStep;         \/* Size of aligned image row in bytes.    *\/$/;"	m	struct:_IplImage
winSigma	objdetect/objdetect.hpp	/^    CV_PROP double winSigma;$/;"	m	struct:cv::HOGDescriptor
winSize	gpu/gpu.hpp	/^    Size winSize;$/;"	m	class:cv::gpu::PyrLKOpticalFlow
winSize	gpu/gpu.hpp	/^    int winSize;$/;"	m	class:cv::gpu::FarnebackOpticalFlow
winSize	gpu/gpu.hpp	/^    int winSize;$/;"	m	class:cv::gpu::StereoBM_GPU
winSize	objdetect/objdetect.hpp	/^    CV_PROP Size winSize;$/;"	m	struct:cv::HOGDescriptor
winSize	ocl/ocl.hpp	/^            Size winSize;$/;"	m	class:cv::ocl::PyrLKOpticalFlow
winSize	videostab/optical_flow.hpp	/^    Size winSize() const { return winSize_; }$/;"	f	class:cv::videostab::PyrLkOptFlowEstimatorBase
winSize_	videostab/optical_flow.hpp	/^    Size winSize_;$/;"	m	class:cv::videostab::PyrLkOptFlowEstimatorBase
win_sigma	gpu/gpu.hpp	/^    double win_sigma;$/;"	m	struct:cv::gpu::HOGDescriptor
win_sigma	ocl/ocl.hpp	/^            double win_sigma;$/;"	m	struct:cv::ocl::HOGDescriptor
win_size	gpu/gpu.hpp	/^    Size win_size;$/;"	m	struct:cv::gpu::HOGDescriptor
win_size	legacy/legacy.hpp	/^    int     win_size;               \/* = 1\/alpha *\/$/;"	m	struct:CvGaussBGStatModelParams
win_size	ocl/ocl.hpp	/^            Size win_size;$/;"	m	struct:cv::ocl::HOGDescriptor
window_size	contrib/hybridtracker.hpp	/^    int window_size; \/\/ Window size in pixels around which to search for new window$/;"	m	struct:cv::CvFeatureTrackerParams
word1	contrib/openfabmap.hpp	/^        short word1;$/;"	m	struct:cv::of2::ChowLiuTree::info
word2	contrib/openfabmap.hpp	/^        short word2;$/;"	m	struct:cv::of2::ChowLiuTree::info
workScale	stitching/stitcher.hpp	/^    double workScale() const { return work_scale_; }$/;"	f	class:cv::Stitcher
work_scale_	stitching/stitcher.hpp	/^    double work_scale_;$/;"	m	class:cv::Stitcher
work_type	gpu/device/filters.hpp	/^        typedef typename TypeVec<float, VecTraits<elem_type>::cn>::vec_type work_type;$/;"	t	struct:cv::gpu::device::CubicFilter
work_var_count	ml/ml.hpp	/^    int ord_var_count, cat_var_count, work_var_count;$/;"	m	struct:CvDTreeTrainData
worktype_f	gpu/device/detail/color_detail.hpp	/^            typedef float worktype_f;$/;"	t	struct:cv::gpu::device::color_detail::ColorChannel
worstDist	flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::KNNResultSet
worstDist	flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::KNNSimpleResultSet
worstDist	flann/result_set.h	/^    DistanceType worstDist() const$/;"	f	class:cvflann::RadiusResultSet
worstDist	flann/result_set.h	/^    inline DistanceType worstDist() const$/;"	f	class:cvflann::RadiusUniqueResultSet
worstDist	flann/result_set.h	/^    inline DistanceType worstDist() const$/;"	f	class:cvflann::UniqueResultSet
worst_distance_	flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::KNNResultSet
worst_distance_	flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::KNNSimpleResultSet
worst_distance_	flann/result_set.h	/^    DistanceType worst_distance_;$/;"	m	class:cvflann::UniqueResultSet
write	core/operations.hpp	/^    static void write(CvFileStorage* _fs, const char* name, const void* ptr, CvAttrList)$/;"	f	struct:cv::RTTIImpl
write	core/operations.hpp	/^inline void write(FileStorage& fs, const Range& r )$/;"	f	namespace:cv
write	core/operations.hpp	/^inline void write(FileStorage& fs, const string& name, const Range& r )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<> inline void write( FileStorage& fs, const double& value )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<> inline void write( FileStorage& fs, const float& value )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<> inline void write( FileStorage& fs, const int& value )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<> inline void write( FileStorage& fs, const string& value )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp, int cn> inline void write(FileStorage& fs, const Vec<_Tp, cn>& v )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp, int cn> inline void write(FileStorage& fs, const string& name, const Vec<_Tp, cn>& v )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Complex<_Tp>& c )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Point3_<_Tp>& pt )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Point_<_Tp>& pt )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Rect_<_Tp>& r )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Scalar_<_Tp>& s )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const Size_<_Tp>& sz )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const _Tp& value)$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Complex<_Tp>& c )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Point3_<_Tp>& pt )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Point_<_Tp>& pt )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Rect_<_Tp>& r )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Scalar_<_Tp>& s )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> inline void write(FileStorage& fs, const string& name, const Size_<_Tp>& sz )$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> static inline void write( FileStorage& fs, const string& name,$/;"	f	namespace:cv
write	core/operations.hpp	/^template<typename _Tp> static inline void write( FileStorage& fs, const vector<_Tp>& vec )$/;"	f	namespace:cv
write	core/types_c.h	/^    CvWriteFunc write;$/;"	m	struct:CvTypeInfo
write	legacy/legacy.hpp	/^void CalonderDescriptorExtractor<T>::write( FileStorage& ) const$/;"	f	class:cv::CalonderDescriptorExtractor
write_fd	ts/ts_gtest.h	/^  int write_fd() const { return write_fd_; }$/;"	f	class:testing::internal::InternalRunDeathTestFlag
write_fd_	ts/ts_gtest.h	/^  int write_fd_;$/;"	m	class:testing::internal::InternalRunDeathTestFlag
write_type	gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<D, shift>::vec_type write_type;$/;"	t	struct:cv::gpu::device::transform_detail::BinaryReadWriteTraits
write_type	gpu/device/detail/transform_detail.hpp	/^            typedef typename TypeVec<D, shift>::vec_type write_type;$/;"	t	struct:cv::gpu::device::transform_detail::UnaryReadWriteTraits
writer	core/core_c.h	/^CVAPI(CvSeq*)  cvEndWriteSeq( CvSeqWriter* writer );$/;"	v
writer	core/core_c.h	/^CVAPI(void)   cvFlushSeqWriter( CvSeqWriter* writer );$/;"	v
writer	core/core_c.h	/^CVAPI(void)  cvCreateSeqBlock( CvSeqWriter* writer );$/;"	v
writer	highgui/highgui.hpp	/^    Ptr<CvVideoWriter> writer;$/;"	m	class:cv::VideoWriter
writer	highgui/highgui_c.h	/^CVAPI(void) cvReleaseVideoWriter( CvVideoWriter** writer );$/;"	v
x	contrib/contrib.hpp	/^        int x, y;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
x	contrib/contrib.hpp	/^    double x, y, value;$/;"	m	class:CvFuzzyPoint
x	core/types_c.h	/^    double x;$/;"	m	struct:CvPoint2D64f
x	core/types_c.h	/^    double x;$/;"	m	struct:CvPoint3D64f
x	core/types_c.h	/^    float x;$/;"	m	struct:CvPoint2D32f
x	core/types_c.h	/^    float x;$/;"	m	struct:CvPoint3D32f
x	core/types_c.h	/^    int x;$/;"	m	struct:CvPoint
x	core/types_c.h	/^    int x;$/;"	m	struct:CvRect
x	features2d/features2d.hpp	/^        float x;         \/\/ x coordinate relative to center$/;"	m	struct:cv::BRISK::BriskPatternPoint
x	features2d/features2d.hpp	/^        float x; \/\/ x coordinate relative to center$/;"	m	struct:cv::FREAK::PatternPoint
x	legacy/blobtrack.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob
x	legacy/compat.hpp	/^    int     x;                      \/* current x coordinate ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u
x	legacy/compat.hpp	/^    int     x;$/;"	m	struct:_CvPixelPosition32f
x	legacy/compat.hpp	/^    int     x;$/;"	m	struct:_CvPixelPosition8s
x	legacy/legacy.hpp	/^    int x;$/;"	m	struct:cv::BaseKeypoint
x	objdetect/objdetect.hpp	/^    int x;$/;"	m	struct:CvLSVMFilterPosition
x	objdetect/objdetect.hpp	/^  int x; \/\/\/< x offset$/;"	m	struct:cv::linemod::Feature
x	objdetect/objdetect.hpp	/^  int x;$/;"	m	struct:cv::linemod::Match
x	videostab/fast_marching.hpp	/^        int x, y;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
x1	legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
x2	legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
xGc	contrib/contrib.hpp	/^        int xGc, yGc;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
xOffset	core/types_c.h	/^    int  xOffset;$/;"	m	struct:_IplROI
x_max	contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
x_min	contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
xor_masks_	flann/lsh_index.h	/^    std::vector<lsh::BucketKey> xor_masks_;$/;"	m	class:cvflann::LshIndex
xyz_shift	gpu/device/detail/color_detail.hpp	/^            xyz_shift  = 12,$/;"	e	enum:cv::gpu::device::color_detail::__anon96
y	contrib/contrib.hpp	/^        int x, y;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
y	contrib/contrib.hpp	/^    double x, y, value;$/;"	m	class:CvFuzzyPoint
y	core/types_c.h	/^    double y;$/;"	m	struct:CvPoint2D64f
y	core/types_c.h	/^    double y;$/;"	m	struct:CvPoint3D64f
y	core/types_c.h	/^    float y;$/;"	m	struct:CvPoint2D32f
y	core/types_c.h	/^    float y;$/;"	m	struct:CvPoint3D32f
y	core/types_c.h	/^    int y;$/;"	m	struct:CvPoint
y	core/types_c.h	/^    int y;$/;"	m	struct:CvRect
y	features2d/features2d.hpp	/^        float y;         \/\/ x coordinate relative to center$/;"	m	struct:cv::BRISK::BriskPatternPoint
y	features2d/features2d.hpp	/^        float y; \/\/ x coordinate relative to center$/;"	m	struct:cv::FREAK::PatternPoint
y	legacy/blobtrack.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob
y	legacy/legacy.hpp	/^    int y;$/;"	m	struct:cv::BaseKeypoint
y	ml/ml.hpp	/^    schar* y;$/;"	m	class:CvSVMSolver
y	objdetect/objdetect.hpp	/^    int y;$/;"	m	struct:CvLSVMFilterPosition
y	objdetect/objdetect.hpp	/^  int y; \/\/\/< y offset$/;"	m	struct:cv::linemod::Feature
y	objdetect/objdetect.hpp	/^  int y;$/;"	m	struct:cv::linemod::Match
y	videostab/fast_marching.hpp	/^        int x, y;$/;"	m	struct:cv::videostab::FastMarchingMethod::DXY
y1	legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
y2	legacy/legacy.hpp	/^        uchar x1, y1, x2, y2;$/;"	m	struct:cv::FernClassifier::Feature
yGc	contrib/contrib.hpp	/^        int xGc, yGc;$/;"	m	class:CvFuzzyMeanShiftTracker::SearchWindow
yOffset	core/types_c.h	/^    int  yOffset;$/;"	m	struct:_IplROI
y_max	contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
y_min	contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
yaw_	core/opengl_interop.hpp	/^    double yaw_;$/;"	m	class:cv::GlCamera
yota	gpu/device/warp.hpp	/^        static __device__ __forceinline__ void yota(OutIt beg, OutIt end, T value)$/;"	f	struct:cv::gpu::device::Warp
yuv_shift	gpu/device/detail/color_detail.hpp	/^            yuv_shift  = 14,$/;"	e	enum:cv::gpu::device::color_detail::__anon96
z	core/types_c.h	/^    double z;$/;"	m	struct:CvPoint3D64f
z	core/types_c.h	/^    float z;$/;"	m	struct:CvPoint3D32f
zFar_	core/opengl_interop.hpp	/^    double zFar_;$/;"	m	class:cv::GlCamera
zNear_	core/opengl_interop.hpp	/^    double zNear_;$/;"	m	class:cv::GlCamera
z_max	contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
z_min	contrib/contrib.hpp	/^            float x_min, x_max, y_min, y_max, z_min, z_max;$/;"	m	struct:cv::Octree::Node
zeros	core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::zeros(Size sz)$/;"	f	class:cv::Mat_
zeros	core/mat.hpp	/^template<typename _Tp> inline MatExpr Mat_<_Tp>::zeros(int rows, int cols)$/;"	f	class:cv::Mat_
zeros	core/operations.hpp	/^Matx<_Tp,m,n> Matx<_Tp,m,n>::zeros()$/;"	f	class:cv::Matx
~AdjusterAdapter	features2d/features2d.hpp	/^    virtual ~AdjusterAdapter() {}$/;"	f	class:cv::AdjusterAdapter
~Allocator	core/core.hpp	/^    ~Allocator() {}$/;"	f	class:cv::Allocator
~AutoBuffer	core/operations.hpp	/^template<typename _Tp, size_t fixed_size> inline AutoBuffer<_Tp, fixed_size>::~AutoBuffer()$/;"	f	class:cv::AutoBuffer
~AutotunedIndex	flann/autotuned_index.h	/^    virtual ~AutotunedIndex()$/;"	f	class:cvflann::AutotunedIndex
~BFMatcher	features2d/features2d.hpp	/^    virtual ~BFMatcher() {}$/;"	f	class:cv::BFMatcher
~BaseColumnFilter_GPU	gpu/gpu.hpp	/^    virtual ~BaseColumnFilter_GPU() {}$/;"	f	class:cv::gpu::BaseColumnFilter_GPU
~BaseColumnFilter_GPU	ocl/ocl.hpp	/^            virtual ~BaseColumnFilter_GPU() {}$/;"	f	class:cv::ocl::BaseColumnFilter_GPU
~BaseFilter_GPU	gpu/gpu.hpp	/^    virtual ~BaseFilter_GPU() {}$/;"	f	class:cv::gpu::BaseFilter_GPU
~BaseFilter_GPU	ocl/ocl.hpp	/^            virtual ~BaseFilter_GPU() {}$/;"	f	class:cv::ocl::BaseFilter_GPU
~BaseRowFilter_GPU	gpu/gpu.hpp	/^    virtual ~BaseRowFilter_GPU() {}$/;"	f	class:cv::gpu::BaseRowFilter_GPU
~BaseRowFilter_GPU	ocl/ocl.hpp	/^            virtual ~BaseRowFilter_GPU() {}$/;"	f	class:cv::ocl::BaseRowFilter_GPU
~Blender	stitching/detail/blenders.hpp	/^    virtual ~Blender() {}$/;"	f	class:cv::detail::Blender
~BruteForceMatcher	legacy/legacy.hpp	/^    virtual ~BruteForceMatcher() {}$/;"	f	class:cv::BruteForceMatcher
~CannyBuf	ocl/ocl.hpp	/^            ~CannyBuf()$/;"	f	struct:cv::ocl::CannyBuf
~CartesianProductGenerator10	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator10() {}$/;"	f	class:testing::internal::CartesianProductGenerator10
~CartesianProductGenerator2	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator2() {}$/;"	f	class:testing::internal::CartesianProductGenerator2
~CartesianProductGenerator3	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator3() {}$/;"	f	class:testing::internal::CartesianProductGenerator3
~CartesianProductGenerator4	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator4() {}$/;"	f	class:testing::internal::CartesianProductGenerator4
~CartesianProductGenerator5	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator5() {}$/;"	f	class:testing::internal::CartesianProductGenerator5
~CartesianProductGenerator6	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator6() {}$/;"	f	class:testing::internal::CartesianProductGenerator6
~CartesianProductGenerator7	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator7() {}$/;"	f	class:testing::internal::CartesianProductGenerator7
~CartesianProductGenerator8	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator8() {}$/;"	f	class:testing::internal::CartesianProductGenerator8
~CartesianProductGenerator9	ts/ts_gtest.h	/^  virtual ~CartesianProductGenerator9() {}$/;"	f	class:testing::internal::CartesianProductGenerator9
~CompositeIndex	flann/composite_index.h	/^    virtual ~CompositeIndex()$/;"	f	class:cvflann::CompositeIndex
~CvBlobSeq	legacy/blobtrack.hpp	/^    virtual ~CvBlobSeq()$/;"	f	class:CvBlobSeq
~CvBlobTrackAnalysisOne	legacy/blobtrack.hpp	/^    virtual ~CvBlobTrackAnalysisOne() {};$/;"	f	class:CvBlobTrackAnalysisOne
~CvImage	legacy/legacy.hpp	/^    ~CvImage()$/;"	f	class:CvImage
~CvImageDrawer	legacy/blobtrack.hpp	/^    ~CvImageDrawer() { cvReleaseImage( &m_image ); }$/;"	f	class:CvImageDrawer
~CvLSHOperations	legacy/legacy.hpp	/^    virtual ~CvLSHOperations() {}$/;"	f	struct:CvLSHOperations
~CvMatrix	legacy/legacy.hpp	/^    ~CvMatrix()$/;"	f	class:CvMatrix
~CvProb	legacy/blobtrack.hpp	/^    virtual ~CvProb() {};$/;"	f	class:CvProb
~DeathTest	ts/ts_gtest.h	/^  virtual ~DeathTest() { }$/;"	f	class:testing::internal::DeathTest
~DeathTestFactory	ts/ts_gtest.h	/^  virtual ~DeathTestFactory() { }$/;"	f	class:testing::internal::DeathTestFactory
~DeblurerBase	videostab/deblurring.hpp	/^    virtual ~DeblurerBase() {}$/;"	f	class:cv::videostab::DeblurerBase
~DefaultRngAuto	ts/ts.hpp	/^    ~DefaultRngAuto() { cv::theRNG().state = old_state; }$/;"	f	struct:cvtest::DefaultRngAuto
~EncoderCallBack	gpu/gpu.hpp	/^        virtual ~EncoderCallBack() {}$/;"	f	class:cv::gpu::VideoWriter_GPU::EncoderCallBack
~Environment	ts/ts_gtest.h	/^  virtual ~Environment() {}$/;"	f	class:testing::Environment
~Estimator	stitching/detail/motion_estimators.hpp	/^    virtual ~Estimator() {}$/;"	f	class:cv::detail::Estimator
~ExposureCompensator	stitching/detail/exposure_compensate.hpp	/^    virtual ~ExposureCompensator() {}$/;"	f	class:cv::detail::ExposureCompensator
~FaceRecognizer	contrib/contrib.hpp	/^        virtual ~FaceRecognizer() {}$/;"	f	class:cv::FaceRecognizer
~FeaturesFinder	stitching/detail/matchers.hpp	/^    virtual ~FeaturesFinder() {}$/;"	f	class:cv::detail::FeaturesFinder
~FeaturesMatcher	stitching/detail/matchers.hpp	/^    virtual ~FeaturesMatcher() {}$/;"	f	class:cv::detail::FeaturesMatcher
~FilterEngine_GPU	gpu/gpu.hpp	/^    virtual ~FilterEngine_GPU() {}$/;"	f	class:cv::gpu::FilterEngine_GPU
~FilterEngine_GPU	ocl/ocl.hpp	/^            virtual ~FilterEngine_GPU() {}$/;"	f	class:cv::ocl::FilterEngine_GPU
~Formatter	core/operations.hpp	/^    virtual ~Formatter() {}$/;"	f	class:cv::Formatter
~GTestMutexLock	ts/ts_gtest.h	/^  ~GTestMutexLock() { mutex_->Unlock(); }$/;"	f	class:std::tr1::GTestMutexLock
~GenericIndex	flann/flann.hpp	/^GenericIndex<Distance>::~GenericIndex()$/;"	f	class:cv::flann::GenericIndex
~GpuMat	core/gpumat.hpp	/^    inline GpuMat::~GpuMat()$/;"	f	class:cv::gpu::GpuMat
~HOGDescriptor	objdetect/objdetect.hpp	/^    virtual ~HOGDescriptor() {}$/;"	f	struct:cv::HOGDescriptor
~HierarchicalClusteringIndex	flann/hierarchical_clustering_index.h	/^    virtual ~HierarchicalClusteringIndex()$/;"	f	class:cvflann::HierarchicalClusteringIndex
~IDenseOptFlowEstimator	videostab/optical_flow.hpp	/^    virtual ~IDenseOptFlowEstimator() {}$/;"	f	class:cv::videostab::IDenseOptFlowEstimator
~IFrameSource	videostab/frame_source.hpp	/^    virtual ~IFrameSource() {}$/;"	f	class:cv::videostab::IFrameSource
~IGlobalMotionEstimator	videostab/global_motion.hpp	/^    virtual ~IGlobalMotionEstimator() {}$/;"	f	class:cv::videostab::IGlobalMotionEstimator
~ILog	videostab/log.hpp	/^    virtual ~ILog() {}$/;"	f	class:cv::videostab::ILog
~IMotionStabilizer	videostab/motion_stabilizing.hpp	/^    virtual ~IMotionStabilizer() {}$/;"	f	class:cv::videostab::IMotionStabilizer
~ISparseOptFlowEstimator	videostab/optical_flow.hpp	/^    virtual ~ISparseOptFlowEstimator() {}$/;"	f	class:cv::videostab::ISparseOptFlowEstimator
~Index	flann/flann_base.hpp	/^    ~Index()$/;"	f	class:cvflann::Index
~Index_	flann/flann.hpp	/^Index_<T>::~Index_()$/;"	f	class:cv::flann::Index_
~InpainterBase	videostab/inpainting.hpp	/^    virtual ~InpainterBase() {}$/;"	f	class:cv::videostab::InpainterBase
~InternalRunDeathTestFlag	ts/ts_gtest.h	/^  ~InternalRunDeathTestFlag() {$/;"	f	class:testing::internal::InternalRunDeathTestFlag
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator10::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator2::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator3::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator4::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator5::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator6::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator7::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator8::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::CartesianProductGenerator9::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::RangeGenerator::Iterator
~Iterator	ts/ts_gtest.h	/^    virtual ~Iterator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator::Iterator
~KDTreeIndex	flann/kdtree_index.h	/^    ~KDTreeIndex()$/;"	f	class:cvflann::KDTreeIndex
~KDTreeSingleIndex	flann/kdtree_single_index.h	/^    ~KDTreeSingleIndex()$/;"	f	class:cvflann::KDTreeSingleIndex
~KMeansIndex	flann/kmeans_index.h	/^    virtual ~KMeansIndex()$/;"	f	class:cvflann::KMeansIndex
~LDA	contrib/contrib.hpp	/^        ~LDA() {}$/;"	f	class:cv::LDA
~Logger	flann/logger.h	/^    ~Logger()$/;"	f	class:cvflann::Logger
~MaskGenerator	objdetect/objdetect.hpp	/^        virtual ~MaskGenerator() {}$/;"	f	class:cv::CascadeClassifier::MaskGenerator
~Mat	core/mat.hpp	/^inline Mat::~Mat()$/;"	f	class:cv::Mat
~MatOp	core/mat.hpp	/^    virtual ~MatOp() {};$/;"	f	class:cv::MatOp
~Modality	objdetect/objdetect.hpp	/^  virtual ~Modality() {}$/;"	f	class:cv::linemod::Modality
~MotionFilterBase	videostab/motion_stabilizing.hpp	/^    virtual ~MotionFilterBase() {}$/;"	f	class:cv::videostab::MotionFilterBase
~Mutex	ts/ts_gtest.h	/^  ~Mutex() {$/;"	f	class:std::tr1::Mutex
~NNIndex	flann/nn_index.h	/^    virtual ~NNIndex() {}$/;"	f	class:cvflann::NNIndex
~NativeArray	ts/ts_gtest.h	/^  ~NativeArray() {$/;"	f	class:testing::internal::NativeArray
~Notification	ts/ts_gtest.h	/^  ~Notification() {$/;"	f	class:std::tr1::Notification
~OclCascadeClassifier	ocl/ocl.hpp	/^            ~OclCascadeClassifier() {};$/;"	f	class:cv::ocl::OclCascadeClassifier
~ParamGeneratorInterface	ts/ts_gtest.h	/^  virtual ~ParamGeneratorInterface() {}$/;"	f	class:testing::internal::ParamGeneratorInterface
~ParamIteratorInterface	ts/ts_gtest.h	/^  virtual ~ParamIteratorInterface() {}$/;"	f	class:testing::internal::ParamIteratorInterface
~ParameterizedTestCaseInfoBase	ts/ts_gtest.h	/^  virtual ~ParameterizedTestCaseInfoBase() {}$/;"	f	class:testing::internal::ParameterizedTestCaseInfoBase
~ParameterizedTestCaseRegistry	ts/ts_gtest.h	/^  ~ParameterizedTestCaseRegistry() {$/;"	f	class:testing::internal::ParameterizedTestCaseRegistry
~PooledAllocator	flann/allocator.h	/^    ~PooledAllocator()$/;"	f	class:cvflann::PooledAllocator
~Ptr	core/operations.hpp	/^template<typename _Tp> inline Ptr<_Tp>::~Ptr() { release(); }$/;"	f	class:cv::Ptr
~QuantizedPyramid	objdetect/objdetect.hpp	/^  virtual ~QuantizedPyramid() {}$/;"	f	class:cv::linemod::QuantizedPyramid
~RadiusResultSet	flann/result_set.h	/^    ~RadiusResultSet()$/;"	f	class:cvflann::RadiusResultSet
~RangeGenerator	ts/ts_gtest.h	/^  virtual ~RangeGenerator() {}$/;"	f	class:testing::internal::RangeGenerator
~ResultSet	flann/result_set.h	/^    virtual ~ResultSet() {}$/;"	f	class:cvflann::ResultSet
~ReturnSentinel	ts/ts_gtest.h	/^    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }$/;"	f	class:testing::internal::DeathTest::ReturnSentinel
~RotationWarper	stitching/detail/warpers.hpp	/^    virtual ~RotationWarper() {}$/;"	f	class:cv::detail::RotationWarper
~SeamFinder	stitching/detail/seam_finders.hpp	/^    virtual ~SeamFinder() {}$/;"	f	class:cv::detail::SeamFinder
~SparseMat	core/mat.hpp	/^inline SparseMat::~SparseMat()$/;"	f	class:cv::SparseMat
~StabilizerBase	videostab/stabilizer.hpp	/^    virtual ~StabilizerBase() {}$/;"	f	class:cv::videostab::StabilizerBase
~String	ts/ts_gtest.h	/^  ~String() { delete[] c_str_; }$/;"	f	class:testing::internal::String
~TestEventListener	ts/ts_gtest.h	/^  virtual ~TestEventListener() {}$/;"	f	class:testing::TestEventListener
~TestFactoryBase	ts/ts_gtest.h	/^  virtual ~TestFactoryBase() {}$/;"	f	class:testing::internal::TestFactoryBase
~TestMetaFactoryBase	ts/ts_gtest.h	/^  virtual ~TestMetaFactoryBase() {}$/;"	f	class:testing::internal::TestMetaFactoryBase
~TestPartResultReporterInterface	ts/ts_gtest.h	/^  virtual ~TestPartResultReporterInterface() {}$/;"	f	class:testing::TestPartResultReporterInterface
~ThreadLocal	ts/ts_gtest.h	/^  ~ThreadLocal() {$/;"	f	class:std::tr1::ThreadLocal
~ThreadLocalValueHolderBase	ts/ts_gtest.h	/^  virtual ~ThreadLocalValueHolderBase() {}$/;"	f	class:std::tr1::ThreadLocalValueHolderBase
~ThreadWithParam	ts/ts_gtest.h	/^  ~ThreadWithParam() { Join(); }$/;"	f	class:std::tr1::ThreadWithParam
~ThreadWithParamBase	ts/ts_gtest.h	/^  virtual ~ThreadWithParamBase() {}$/;"	f	class:std::tr1::ThreadWithParamBase
~UntypedMatrix	flann/matrix.h	/^    ~UntypedMatrix()$/;"	f	class:cvflann::UntypedMatrix
~ValuesInIteratorRangeGenerator	ts/ts_gtest.h	/^  virtual ~ValuesInIteratorRangeGenerator() {}$/;"	f	class:testing::internal::ValuesInIteratorRangeGenerator
~Vector	core/operations.hpp	/^    ~Vector()  { release(); }$/;"	f	class:cv::Vector
~VideoSource	gpu/gpu.hpp	/^        virtual ~VideoSource() {}$/;"	f	class:cv::gpu::VideoReader_GPU::VideoSource
~WImage	core/wimage.hpp	/^template<typename T> inline WImage<T>::~WImage() {}$/;"	f	class:cv::WImage
~WImageBuffer	core/wimage.hpp	/^    ~WImageBuffer() {$/;"	f	class:cv::WImageBuffer
~WImageBufferC	core/wimage.hpp	/^    ~WImageBufferC() {$/;"	f	class:cv::WImageBufferC
~WImageC	core/wimage.hpp	/^template<typename T, int C> inline WImageC<T, C>::~WImageC() {}$/;"	f	class:cv::WImageC
~WImageViewC	core/wimage.hpp	/^    virtual ~WImageViewC() {}$/;"	f	class:cv::WImageViewC
~WarperCreator	stitching/warpers.hpp	/^    virtual ~WarperCreator() {}$/;"	f	class:cv::WarperCreator
~WithParamInterface	ts/ts_gtest.h	/^  virtual ~WithParamInterface() {}$/;"	f	class:testing::WithParamInterface
~any	flann/any.h	/^    ~any()$/;"	f	struct:cvflann::any
~base_any_policy	flann/any.h	/^    virtual ~base_any_policy() {}$/;"	f	struct:cvflann::anyimpl::base_any_policy
~linked_ptr	ts/ts_gtest.h	/^  ~linked_ptr() { depart(); }$/;"	f	class:testing::internal::linked_ptr
~oclMat	ocl/matrix_operations.hpp	/^        inline oclMat::~oclMat()$/;"	f	class:cv::ocl::oclMat
